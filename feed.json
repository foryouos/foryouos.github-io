{
    "version": "https://jsonfeed.org/version/1",
    "title": "瓶子的跋涉",
    "subtitle": "YuHeShui",
    "icon": "https://www.blog.foryouos.cn/assets/favicon.ico",
    "description": "瓶子的跋涉 & 编程笔记",
    "home_page_url": "https://www.blog.foryouos.cn",
    "items": [
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-6/B%E6%A0%91/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-6/B%E6%A0%91/",
            "title": "B树",
            "date_published": "2023-06-30T16:20:43.000Z",
            "content_html": "<h1 id=\"b树\"><a class=\"anchor\" href=\"#b树\">#</a> B 树</h1>\n<blockquote>\n<p><code>多路平衡</code> 搜索树<br />\n索引在 <code>内存</code> ， <code>数据</code> 映射 <code>磁盘(</code> 磁盘页 <code>4K</code>  的整数倍)，<br />\n多路，降低红黑树和二叉树的 <code>层</code> 高， <code>降低IO</code>  访问次数</p>\n</blockquote>\n<h2 id=\"b树和b树\"><a class=\"anchor\" href=\"#b树和b树\">#</a> B 树和 B + 树</h2>\n<blockquote>\n<ul>\n<li><code>B树</code> 节点中即 <code>存储数据</code> 信息，也会 <code>存储索引</code> 信息</li>\n<li><code>B+树</code> 节点中即存储数据信息，也会存储索引信息， <code>非叶子</code> 节点 <code>只有索引</code> 信息</li>\n<li><code>B+ 树</code> 期待更 <code>少</code> 的磁盘 <code>IO</code>   - 将索引信息和数据信息进行 <code>分层</code> 管理</li>\n<li><code>B+树</code> 加载到内存的 <code>无效</code> 数据 <code>更少</code></li>\n</ul>\n</blockquote>\n<h3 id=\"etcd\"><a class=\"anchor\" href=\"#etcd\">#</a>  <code>etcd</code></h3>\n<blockquote>\n<p><code>强</code> 一致性、 <code>高</code> 可用性的数据访问服务，用来存储 <code>少量重要</code> 的数据。刷盘的时候更快，B 树和 B + 树都是 <code>映射着磁盘页</code></p>\n<ul>\n<li>内存中使用 B 树</li>\n<li>磁盘中使用 B + 树</li>\n</ul>\n</blockquote>\n<h3 id=\"mysql\"><a class=\"anchor\" href=\"#mysql\">#</a>  <code>MySQL</code></h3>\n<blockquote>\n<p>索引：索引对应一个 B + 树，支持的行锁，MySQL 拥有缓存</p>\n<ul>\n<li>聚集索引 B + 树 ： 主键索引</li>\n<li>辅助索引：先通过辅助索引 <code>获取聚集索引</code> ，然后根据聚集索引获得叶子结点记录的信息</li>\n</ul>\n<p>索引覆盖: select 查询具体数据时，这个数据恰好在辅助索引时，就可以获得所有数据，不用再到聚集索引</p>\n<p>最左匹配规则：组合索引时，根据从左到右顺序依次匹配。</p>\n<p>事务：服务器和数据库可能需要 <code>多条语句</code> 实现某个逻辑，多个数据库请求。数据库提供一个 <code>机制</code> ，让多个语句一同执行，当查询的数据表 <code>不存在</code> 时，对数据表的查询和插入就 <code>不再执行</code></p>\n</blockquote>\n<h3 id=\"时间轮\"><a class=\"anchor\" href=\"#时间轮\">#</a> 时间轮</h3>\n<blockquote>\n<p>处理 <code>海量定时任务</code> ，多线程下定时器设计，按照执行顺序进行组织 0 (1), <code>分层</code> 的目的 <code>减少内存开销</code> 。只关注 <code>最近60秒</code> 要执行的任务</p>\n<ul>\n<li><code>Linux内核</code></li>\n<li><code>kafka</code></li>\n<li><code>skynet</code></li>\n<li><code>netty</code></li>\n</ul>\n</blockquote>\n<h3 id=\"跳表\"><a class=\"anchor\" href=\"#跳表\">#</a> 跳表</h3>\n<blockquote>\n<p>多层级结构，多层级的 <code>有序链表</code> ，从上往下跳，随机性的数据结构 <code> 0(log2n)</code>  (以 2 为低)</p>\n</blockquote>\n<ul>\n<li><code>redis</code>   :  kv   v-&gt; zset 有序集合，score : 有序， member 确保唯一</li>\n<li><code>levelrocksdb</code> , <code>rocksdb</code>  (存储引擎)</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFrMbKfR4VGcUYWfjlpibDUn6pKOD8fxpoPbg1nibZjMp6OaZ3x2yfF9cw/640?wx_fmt=png\" alt=\"理想跳表\" title=\"理想跳表\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFPEEL5WIVZVfVozDHcaSTXl1jXYgR7G7h6X75WE2ZrG4Cn7HWP4oTmw/640?wx_fmt=png\" alt=\"跳表插入\" title=\"跳表插入\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFq59zC6oeIZvbcI77tZichaRhRKibsgmnkEnDqusOzuRicAP3c6iawKicePg/640?wx_fmt=png\" alt=\"跳表索引失衡\" title=\"跳表索引失衡\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbsHH5T1E68OFdicfagNibRxrz1sIfBsnGxsrOVDeYb1mXDmrklPnVlYO33wtND8sSg2Q6OJlYpQ6WyQ/640?wx_fmt=jpeg\" alt=\"B+树结构\" /></p>\n<h2 id=\"引入\"><a class=\"anchor\" href=\"#引入\">#</a> 引入</h2>\n<blockquote>\n<p>二叉树层高，对比次数多，找到下一个节点多，<br />\n数据存储到磁盘，其读取到内存， <code>读取</code> 效率 <code>下降</code> 。若每个节点都存储在磁盘，每次对比后找下一个节点都是一次磁盘寻址。二叉树就极其耗时。<br />\n急需降低层高的数据存储，使用 <code>多叉</code> <br />\n B 树，所有的 <code>叶子节点在同一层</code></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFhhZfdeKNQzgIOAEPOInK36jXxqhwWbn3A5MvDq1lZibHp8qNuwmomSw/640?wx_fmt=png\" alt=\"磁盘寻址\" title=\"磁盘寻址\" /></p>\n<h2 id=\"性质\"><a class=\"anchor\" href=\"#性质\">#</a> 性质</h2>\n<ul>\n<li>每个节点最多拥有 <code>M颗</code> 子树</li>\n<li><code>根</code> 节点 <code>至少</code> 拥有 <code>两</code> 颗子树</li>\n<li>除根节点以外，其余 <code>每个分支</code> 节点 <code>至少</code> 拥有 <code>M/2颗</code> 子树</li>\n<li>所有的 <code>叶节点</code> 都在同 <code>一层</code> 上</li>\n<li>有 <code>K颗子</code> 树的分支结点则存在 <code>k-1</code>  个关键字，关键字按照 <code>递增</code> 顺序进行排序</li>\n<li>关键字数量满足 <code>ceil(M/2)-1 &lt;=n &lt;=M-1</code>     <code>ceil向上取整</code> （删除时注意)</li>\n</ul>\n<h2 id=\"b树b树区别\"><a class=\"anchor\" href=\"#b树b树区别\">#</a> B 树 B + 树区别</h2>\n<ul>\n<li>B 树: <code>所有节点存储数据</code>  (部分数据在内存，部分节点在磁盘)</li>\n<li>B + 树:  <code>叶子节点存储数据</code> ， <code>内节点索引引用存储内存</code>  ( <code>B+树</code> 索引在 <code>内存数量</code>  &gt;  <code>B树</code> ) 提高索引效率，常用与索引磁盘数据大量数据 ( <code>MySql </code> ， <code>MongoDB</code>  等)</li>\n</ul>\n<h2 id=\"添加\"><a class=\"anchor\" href=\"#添加\">#</a> 添加</h2>\n<ul>\n<li>设置 <code>B树</code> 的 M 为 <code>6</code> ，最多为 6 个子树</li>\n<li>添加数据为 <code>A-Z</code>  依次加入</li>\n<li>根节点分裂：当添加的节点 F 时，节点数 <code>超过6</code> ，将进行节点分裂，以原有节点 <code>中心C</code>  为中心节点分为左右结点进行分裂（ <code>先分裂再添加</code> )</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFOPePW4z7aV7dxQQTaMWlJTJ6BSicL5eqaWibVMvnNvLHpLmWF9ecI6IQ/640?wx_fmt=pngg\" alt=\"节点添加\" title=\"节点添加\" /></p>\n<ul>\n<li><code>叶节点分裂</code> ：继续添加数据：</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFzwTm0vYsJyHEuiczkWfcspkzc6HcnTjr4PjNyK2FfZkTEL8EHPPQZQg/640?wx_fmt=png\" alt=\"节点添加\" title=\"节点添加\" /></p>\n<ul>\n<li>当加到 L 时原有达到 <code>分裂条件</code> ， <code>先分裂</code> ，让中心节点 <code>I上移</code></li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFF0icrh4ibtU14zeCiaIbEVAmOae6o7jqAfRUpNk1Me7pl2gIAzcXaq48A/640?wx_fmt=png\" alt=\"根节点拆分\" title=\"根节点拆分\" /></p>\n<ul>\n<li>在往后的 <code>添加过程</code> 中，若 <code>节点也满</code> 了，将如第一部分对 <code>节点进行分裂</code> ， <code>先分裂后添加</code></li>\n</ul>\n<p><img data-src=\"E:%5C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5CC-notebook%5C%E9%9B%B6%E5%A3%B0Linux%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cassets%5Cimage-20230629091213538.png\" alt=\"image-20230629091213538\" /></p>\n<h2 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h2>\n<blockquote>\n<p>删除条件：</p>\n<ul>\n<li><code>idx</code>  子树， <code>ceil(m/2) -1</code>\n<ul>\n<li><code>借位</code>\n<ul>\n<li>从 <code>idx -1</code>  大于 <code>ceil(m/2) -1</code></li>\n<li>从 <code>idx +1</code>  大于 <code>ceil(m/2) -1</code></li>\n</ul>\n</li>\n<li>合并\n<ul>\n<li><code>&#123;childs[idx].keys&#125; &#123;keys[idx]&#125; &#123;childs[idx+1].keys&#125;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>\n<p><code>节点归并</code> <br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFnhKl0GXYlUmkZqxAplRbSNGU1Wgepfbw8NISWwRcjC0sxibSED0Ze1g/640?wx_fmt=png\" alt=\"节点归并\" title=\"节点归并\" /></p>\n</li>\n<li>\n<p>若关键字在 <code>叶子节点</code> 中， <code>直接删除</code> 即可<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFiao2rHHZhNnZOVGrr63aAoHAV7Zdscib84JxOeAZ5ZoM1OoE3dKlic0nA/640?wx_fmt=png\" alt=\"删除节点\" title=\"删除节点\" /></p>\n</li>\n<li>\n<p>若删除节点后不满足性质  <code>关键字</code> 数量满足 <code>ceil(M/2)-1 &lt;=n &lt;=M-1</code>   <code>先合并或借位再删除</code> <br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFohvIAC35iaXNtLfWhpcDSQQmdhJblnlutLo4jje6E89c4VLFo2V08icw/640?wx_fmt=png\" alt=\"不满足关键词\" title=\"不满足关键词\" /></p>\n<ul>\n<li>要删除 <code>节点A</code> ，其 <code>父节点 </code> ，若其 <code>树=M/2-1</code>  需要 <code>借位</code> 。避免 <code>后面节点资源不足</code>  (因为删除 A 之后需要合并，会导致资源不足)。将 <code>I节点</code> 借过去之后，其 <code>I节点</code> 的有节点 <code>最小</code> 将随着 I 节点的变化变为 <code>左边的最大</code> 。并将 <code>右边的L</code>  替代为 <code>根节点</code> ，（也是为了下面合并之后其父节点仅剩 F 自己的提前安排）如下:<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFRCzfOwITyxEtiaSbYkd4iaY5KLJZwGkcWDykysW8AWZ2njBLSfmdC8lQ/640?wx_fmt=png\" alt=\"借根节点I\" title=\"借根节点I\" /></li>\n<li>删除 A 之后，不满足性质，则 <code>进行合并</code> ，将其 <code>父与相邻相邻节点</code> 进行合并。  <code>先合并再删除</code> <br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFWP3cJZhY9nOTg8mvmhNJnEP2LBs9kU0xZY4WjWkkYca6ZZNNo5PsKQ/640?wx_fmt=png\" alt=\"合并\" title=\"合并\" /></li>\n<li><code>删除节点A</code> <br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFKsX5kHLY67Ma0N0PpHRGdv1ScaWicdE64wmIxjrw4vJjibQ1hIjVLuWA/640?wx_fmt=png\" alt=\"删除节点A\" title=\"删除节点A\" /></li>\n</ul>\n</li>\n<li>\n<p>删除节点 B，</p>\n<ul>\n<li>其 <code>父节点和删除的节点</code> 都满足条件<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFKsX5kHLY67Ma0N0PpHRGdv1ScaWicdE64wmIxjrw4vJjibQ1hIjVLuWA/640?wx_fmt=png\" alt=\"删除节点B\" title=\"删除节点B\" /></li>\n<li><code>直接删除</code> <br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFjvJUu2aKnPKicFZwBGDrJk39rOENp7OPtNyedAyUS3FC0oMLHrJErJQ/640?wx_fmt=png\" alt=\"B节点已删除\" title=\"B节点已删除\" /></li>\n</ul>\n</li>\n<li>\n<p><code>删除节点D</code></p>\n<ul>\n<li>删除 D 之后，其节点不满足最后一条性质 <code>ceil(M/2)-1 &lt;=n &lt;=M-1</code> , 其父节点符合条件，不用借位， <code>直接合并</code> <br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFg74uxm5L4yg4CV7uPWToR8KiahBjm0BP0bLYtCibb46lwtGeGrOdoEFg/640?wx_fmt=png\" alt=\"直接合并\" title=\"直接合并\" /></li>\n<li>删除 D 节点</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFegWSOIwYkVa3yTibtYK6KEMicoXgeXyrvpkBicleRrianuCyCElIxjAR4A/640?wx_fmt=png\" alt=\"删除D节点\" title=\"删除D节点\" /></p>\n</li>\n<li>\n<p><code>删除E节点</code> ，其 <code>父节点</code> 满足 <code>树=M/2-1</code> ，需要先进行 <code>借位</code> ，在进行 <code>合并删除</code> ，由于 <code>右边</code> 也等于 <code>M/2-1</code> ， <code>无法</code> 进行 <code>借位</code> ，则进行对 <code>父节点进行合并</code> <br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFjvJUu2aKnPKicFZwBGDrJk39rOENp7OPtNyedAyUS3FC0oMLHrJErJQ/640?wx_fmt=png\" alt=\"需要合并\" title=\"需要合并\" /></p>\n<ul>\n<li>合并</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFXjLM8fEzrXxibeWkHU0donOxh0pnOxficvf8ExiafibcvgrGZkbIr0tTYA/640?wx_fmt=png\" alt=\"合并\" title=\"合并后\" /></p>\n<ul>\n<li>直接删除 E 节点</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFXjLM8fEzrXxibeWkHU0donOxh0pnOxficvf8ExiafibcvgrGZkbIr0tTYA/640?wx_fmt=png\" alt=\"删除节点E\" title=\"删除节点E\" /></p>\n</li>\n<li>\n<p>删除 F 节点，删除后满足所有添加，直接删除即可</p>\n</li>\n</ul>\n<p>​\t<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFOPePW4z7aV7dxQQTaMWlJTJ6BSicL5eqaWibVMvnNvLHpLmWF9ecI6IQ/640?wx_fmt=png\" alt=\"删除节点F\" /></p>\n<ul>\n<li>\n<p>删除 G 之后，其所在节点不满足条件，则合并节点，在删除</p>\n<ul>\n<li>合并节点</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFticibmBlYSmugrh3khXBJ15P6B71iaC5TSCNTBYHIicxPLzMFsVNt1WTSQ/640?wx_fmt=png\" alt=\"删除节点G\" /></p>\n<ul>\n<li>删除</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFamFSpMiarzud3p5iaaDRicpottcTFcWTuQM8Whpl7eoVWRqHIWwOnBy3g/640?wx_fmt=png\" alt=\"删除节点G之后\" title=\"删除节点G\" /></p>\n</li>\n</ul>\n<h2 id=\"插入\"><a class=\"anchor\" href=\"#插入\">#</a> 插入</h2>\n<ul>\n<li>找到 <code>对应的节点</code></li>\n<li>对节点的 <code>key对比</code> ，找到 <code>合适的位置</code></li>\n<li>插入的数是 <code>插在叶子节点上面</code></li>\n</ul>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<blockquote>\n<p>// 根节点分裂</p>\n<p>//    1 - 3 特殊情况</p>\n<p>//    其它一分为 2</p>\n<p>//    根节点不同</p>\n<p>// 分裂：添加</p>\n<p>// 合并与错位：删除</p>\n<p>//  合并</p>\n</blockquote>\n<h3 id=\"b树定义\"><a class=\"anchor\" href=\"#b树定义\">#</a> B 树定义</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1, 定义 B/B - 树</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//#define SUM_M 3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> KEY_VALUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//2, B 树结构体</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_btree_node</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// int keys[2*SUM_M -1];   // 5</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// struct _btree_node *childrens[2*SUM_M]; //6</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    KEY_VALUE <span class=\"token operator\">*</span>keys<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_btree_node</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>childrens<span class=\"token punctuation\">;</span> <span class=\"token comment\">//6</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存储多少数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> leaf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否为叶子节点 0 为内节点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span>btree_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 定义根节点</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_btree</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_btree_node</span> <span class=\"token operator\">*</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 定义支持节点个数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span> btree<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"创建节点\"><a class=\"anchor\" href=\"#创建节点\">#</a> 创建节点</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建节点，叶节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>btree_node <span class=\"token operator\">*</span><span class=\"token function\">btree_create_node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> leaf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    btree_node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>btree_node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>btree_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 自带初始化为 0  calloc</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 出错是内存不够用，</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    node<span class=\"token operator\">-></span>leaf <span class=\"token operator\">=</span> leaf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    node<span class=\"token operator\">-></span>keys <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>KEY_VALUE<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>t <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>KEY_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    node<span class=\"token operator\">-></span>childrens <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>btree_node<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>btree_node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    node<span class=\"token operator\">-></span>num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">btree_create</span><span class=\"token punctuation\">(</span>btree <span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tT<span class=\"token operator\">-></span>t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tbtree_node <span class=\"token operator\">*</span>x <span class=\"token operator\">=</span> <span class=\"token function\">btree_create_node</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tT<span class=\"token operator\">-></span>root <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"销毁节点\"><a class=\"anchor\" href=\"#销毁节点\">#</a> 销毁节点</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 销毁节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">btree_destory_node</span><span class=\"token punctuation\">(</span>btree_node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"节点分裂\"><a class=\"anchor\" href=\"#节点分裂\">#</a> 节点分裂</h3>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFgWJoVMtkPA65L2wMGmogrHf9m1GYcxM5A8wA702CXTZQaujusibfKZw/640?wx_fmt=jpeg\" alt=\"结点分裂\" title=\"节点分裂\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 分裂</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 参数 T 代表这棵树 x 为需要分裂的父节点 i 为 x 的节点的第几个子树 (从 0 开始)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">btree_split_child</span><span class=\"token punctuation\">(</span>btree <span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span>btree_node <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> idx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 把需要斐裂的节点全部赋值给了 Z</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    btree_node <span class=\"token operator\">*</span>y <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 根据条件找到需要分裂的节点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    btree_node <span class=\"token operator\">*</span>z <span class=\"token operator\">=</span> <span class=\"token function\">btree_create_node</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>y<span class=\"token operator\">-></span>leaf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// Z 放前面</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    z<span class=\"token operator\">-></span>num <span class=\"token operator\">=</span> t <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 复制两个</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//1 把 y 的节点右边复制给 z 节点（把 y 和 z copy 到 z）</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span> t<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        z<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>t<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 如果是内节点，把 y 的的 y 和 z 子节点叶复制过去</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">-></span>leaf <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>t<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            z<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>t <span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    y<span class=\"token operator\">-></span>num <span class=\"token operator\">=</span> t <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改为 2</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//2，将 X 的节点向后移动，</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 当 x 放上去，若 x 后面还有数据</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>num<span class=\"token punctuation\">;</span>j <span class=\"token operator\">>=</span> idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        x<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 向后移动</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">//3 x 在定义的节点子孩子</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    x<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//4 将 x 节点里面的 key 值进行交换进行往后移</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span>idx<span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        x<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 5，x 中间节点向上</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    x<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>t<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">//x 的节点 + 1</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    x<span class=\"token operator\">-></span>num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"插入未满节点\"><a class=\"anchor\" href=\"#插入未满节点\">#</a> 插入未满节点</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入进去一个未满的节点  x 为要插入节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">btree_insert_notfull</span><span class=\"token punctuation\">(</span>btree<span class=\"token operator\">*</span> T<span class=\"token punctuation\">,</span>btree_node <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span>KEY_VALUE key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>num <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 如果不是叶子节点就往下递归，如果是叶子节点，再插入</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>leaf <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 当 i 大于等于 0 并且 x 对应的 key 值比 k 大时，向前移动 i--</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//x 的值后移，为存储 key 留下空间</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> x<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">/* code */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            x<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 找到插入的位置 (while 循环的再次 i--，需要加 1)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        x<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        x<span class=\"token operator\">-></span>num <span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 继续递归</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 找到对应 key 值应该再那个子树上面</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> x<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 如果子树是满的</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>num <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>t<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 进行分裂</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token function\">btree_split_child</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// 如果 key 大于 keys 后的节点，++</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">></span>x<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 进行向下递归</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">btree_insert_notfull</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span>x<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"插入节点\"><a class=\"anchor\" href=\"#插入节点\">#</a> 插入节点</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根节点如何分裂，一分为三</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">btree_insert</span><span class=\"token punctuation\">(</span>btree<span class=\"token operator\">*</span> T<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    btree_node <span class=\"token operator\">*</span>r <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-></span>num <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>SUM_M<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 创建新节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        btree_node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token function\">btree_create_node</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//0 为非叶子节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        T<span class=\"token operator\">-></span>root <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将根节点指向此</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        node<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 根节点的子节点为 r</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">btree_split_child</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分裂完成之后</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 再进行插入</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 判断 node 的值找到 key 对应的 node 子节点位置</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> key<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 插入非满节点</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">btree_insert_nonfull</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> node<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">btree_insert_nonfull</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"节点合并\"><a class=\"anchor\" href=\"#节点合并\">#</a> 节点合并</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 合并</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//x 为当前的节点（即需要删除节点的父节点)，idx 要删除的节点位置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">btree_merge</span><span class=\"token punctuation\">(</span>btree <span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span>btree_node <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> idx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    btree_node <span class=\"token operator\">*</span>left <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    btree_node <span class=\"token operator\">*</span>right <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 右</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    left<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>T<span class=\"token operator\">-></span>t<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 x 的 C 拷贝到子节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token comment\">// 开始循环</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token comment\">// 将 x 的右边的值复制到左边</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">-></span>t<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        left<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>T<span class=\"token operator\">-></span>t<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 判断是不是叶子节点</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 将右边的子树也全部拷贝到左边</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>left<span class=\"token operator\">-></span>leaf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">-></span>t<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            left<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>T<span class=\"token operator\">-></span>t<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> right<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    left<span class=\"token operator\">-></span>num <span class=\"token operator\">+=</span>T<span class=\"token operator\">-></span>t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">btree_destory_node</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 右边节点已经全部赋值到左边，右边的清楚释放</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 删除的父节点少了一个节点需要，后面的节点需要前移</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 从 1 开始</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-></span>num<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        x<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>x<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        x<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    x<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tx<span class=\"token operator\">-></span>num <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 若为根</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tT<span class=\"token operator\">-></span>root <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token function\">btree_destory_node</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"节点输出\"><a class=\"anchor\" href=\"#节点输出\">#</a> 节点输出</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// B 树输出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// T B 树，node 为输出的节点，根节点 T.root, layer 层</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">btree_print</span><span class=\"token punctuation\">(</span>btree <span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span> btree_node <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> layer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tbtree_node<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 如果 p 不为空</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nlayer = %d keynum = %d is_leaf = %d\\n\"</span><span class=\"token punctuation\">,</span> layer<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>num<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>leaf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">// 对 node 的节点全部输出</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> node<span class=\"token operator\">-></span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c \"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> T<span class=\"token operator\">-></span>t<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p \"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 层数 ++</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tlayer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 子节点进行遍历递归循环</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> p<span class=\"token operator\">-></span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t<span class=\"token function\">btree_print</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the tree is empty\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"节点删除\"><a class=\"anchor\" href=\"#节点删除\">#</a> 节点删除</h3>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbsZ0Q0UO5h5wcuDyvjQkaPFfoC9kiariaqRKssU4nFLrWVokMZEdicXSK21CMLtkicIUwBvqj0sRTZWRQ/640?wx_fmt=jpeg\" alt=\"结点删除\" title=\"节点删除\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// B 树删除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1，递归找到对应的子树</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2,  * `idx` 子树，`ceil (m/2) -1`</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*   * `借位`</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        * 从 `idx -1` 大于 `ceil (m/2) -1`</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        * 从 `idx +1` 大于 `ceil (m/2) -1`</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    * 合并</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        * `&#123;childs [idx].keys&#125; &#123;keys [idx]&#125; &#123;childs [idx+1].keys&#125;`</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//node 要删除的节点，key 要删除的关键字</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">btree_delete_key</span><span class=\"token punctuation\">(</span>btree<span class=\"token operator\">*</span> T<span class=\"token punctuation\">,</span>btree_node <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span>KEY_VALUE key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 如果输出的节点为空</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 找节点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">&lt;</span> node<span class=\"token operator\">-></span>num <span class=\"token operator\">&amp;&amp;</span> key <span class=\"token operator\">></span> node<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        idx <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 找到节点</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">&lt;</span>node<span class=\"token operator\">-></span>num <span class=\"token operator\">&amp;&amp;</span> key <span class=\"token operator\">==</span> node<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">//1， 如果节点是叶节点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>leaf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 直接删除</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 将删除之后的节点前移</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> idx<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> node<span class=\"token operator\">-></span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\tnode<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 初始化最后一个删除节点的空间</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            node<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>node<span class=\"token operator\">-></span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\tnode<span class=\"token operator\">-></span>num<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 如果节点为 root 释放空间</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//root</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\tT<span class=\"token operator\">-></span>root <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>num <span class=\"token operator\">>=</span> T<span class=\"token operator\">-></span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 2 (不完善图例)，如果不是叶节点 像前面 idx 借</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            btree_node <span class=\"token operator\">*</span>left <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\tnode<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>left<span class=\"token operator\">-></span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token function\">btree_delete_key</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> left<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>left<span class=\"token operator\">-></span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>num <span class=\"token operator\">>=</span> T<span class=\"token operator\">-></span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">//3， 向后面借</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            btree_node <span class=\"token operator\">*</span>right <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\tnode<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token function\">btree_delete_key</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> right<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token comment\">//2, 情况 数量小于 3 SUM_M 合并 再调用删除</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token function\">btree_merge</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token function\">btree_delete_key</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> node<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// 左右借孩子</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token comment\">//idx &lt; node-> num 但是 key != node->keys [idx], 需要在其孩子中寻找</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 4, 锁定到孩子的节点</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        btree_node <span class=\"token operator\">*</span>child <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">// 如果孩子的结点为空</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot del key = %d\\n\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token comment\">// 如果孩子的数量为 2</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token operator\">-></span>num <span class=\"token operator\">==</span> T<span class=\"token operator\">-></span>t <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token comment\">// 定义此节点的左右孩子</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\tbtree_node <span class=\"token operator\">*</span>left <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\tbtree_node <span class=\"token operator\">*</span>right <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">// 左孩子</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t\tleft <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token comment\">// 右孩子</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;=</span> node<span class=\"token operator\">-></span>num<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t\tright <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token comment\">// 如果左 / 右孩子节点数量 > 3</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&amp;&amp;</span> left<span class=\"token operator\">-></span>num <span class=\"token operator\">>=</span> T<span class=\"token operator\">-></span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">(</span>right <span class=\"token operator\">&amp;&amp;</span> right<span class=\"token operator\">-></span>num <span class=\"token operator\">>=</span> T<span class=\"token operator\">-></span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                <span class=\"token comment\">// 记录左右结点的谁的数量大，</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">int</span> richR <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> richR <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                <span class=\"token comment\">// 1，是右边大，0 是右边小</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&amp;&amp;</span> right<span class=\"token punctuation\">)</span> richR <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>right<span class=\"token operator\">-></span>num <span class=\"token operator\">></span> left<span class=\"token operator\">-></span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                <span class=\"token comment\">// 如果右节点的数量大于 3 并且右边数量大 ，从右边借</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&amp;&amp;</span> right<span class=\"token operator\">-></span>num <span class=\"token operator\">>=</span> T<span class=\"token operator\">-></span>t <span class=\"token operator\">&amp;&amp;</span> richR<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">//borrow from next 从右边借</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                    <span class=\"token comment\">// 先将 node 的值复制到 child 的后面</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t\t\tchild<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>child<span class=\"token operator\">-></span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                    <span class=\"token comment\">// 孩子节点的孩子最后叶等于右边的第一个</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\t\t\tchild<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>child<span class=\"token operator\">-></span>num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    <span class=\"token comment\">// 孩子的数量 ++</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t\t\t\tchild<span class=\"token operator\">-></span>num <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                    <span class=\"token comment\">//node 节点的最后一个为 rigth 节点的第一个</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\t\t\tnode<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                    <span class=\"token comment\">// 右孩子节点 (由于第一个 keys 移动，全部向前移动)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> right<span class=\"token operator\">-></span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t\t\t\t\tright<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\t\t\t\tright<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                    <span class=\"token comment\">// 全部前移之后，右节点的最后一个对其进行销毁</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t\t\t\tright<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>right<span class=\"token operator\">-></span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t\t\tright<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>right<span class=\"token operator\">-></span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>right<span class=\"token operator\">-></span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t\t\tright<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>right<span class=\"token operator\">-></span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                    <span class=\"token comment\">// 右节点数量 - 1 </span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\t\t\tright<span class=\"token operator\">-></span>num <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t\t\t\t</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                <span class=\"token keyword\">else</span>  <span class=\"token comment\">// 如果没有右节点或者数量不足 3 或者右边数量小，考虑左边，从左边借</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//borrow from prev</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                    <span class=\"token comment\">// 孩子节点全部后移</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> child<span class=\"token operator\">-></span>num<span class=\"token punctuation\">;</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\t\t\t\tchild<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> child<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t\t\t\t\tchild<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> child<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>                    <span class=\"token comment\">// 将孩子的第一个指向左边的最后一个</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t\t\t\tchild<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> child<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t\t\t\tchild<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>left<span class=\"token operator\">-></span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t\t\t\tchild<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 孩子的数量 ++</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t\t\t\tchild<span class=\"token operator\">-></span>num <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                    <span class=\"token comment\">//keys 赋值</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\t\t\tnode<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>left<span class=\"token operator\">-></span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>                    <span class=\"token comment\">// 最左节点最后一个进行初始化为 NULL</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t\t\t\tleft<span class=\"token operator\">-></span>keys<span class=\"token punctuation\">[</span>left<span class=\"token operator\">-></span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t\t\t\tleft<span class=\"token operator\">-></span>childrens<span class=\"token punctuation\">[</span>left<span class=\"token operator\">-></span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t\t\t\t\tleft<span class=\"token operator\">-></span>num <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            <span class=\"token comment\">// 如果其左节点 / 右节点为 2 时 进行合并</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>left <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>left<span class=\"token operator\">-></span>num <span class=\"token operator\">==</span> T<span class=\"token operator\">-></span>t <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t\t\t\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>right <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>right<span class=\"token operator\">-></span>num <span class=\"token operator\">==</span> T<span class=\"token operator\">-></span>t <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&amp;&amp;</span> left<span class=\"token operator\">-></span>num <span class=\"token operator\">==</span> T<span class=\"token operator\">-></span>t <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"154\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">btree_merge</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> idx<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\t\t\t\tchild <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&amp;&amp;</span> right<span class=\"token operator\">-></span>num <span class=\"token operator\">==</span> T<span class=\"token operator\">-></span>t <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"158\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">btree_merge</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token comment\">// 将其孩子节点调用删除函数</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token function\">btree_delete_key</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"167\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">btree_delete</span><span class=\"token punctuation\">(</span>btree <span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span> KEY_VALUE key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>T<span class=\"token operator\">-></span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token function\">btree_delete_key</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> T<span class=\"token operator\">-></span>root<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"测试函数\"><a class=\"anchor\" href=\"#测试函数\">#</a> 测试函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tbtree T <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 创建节点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">btree_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 随机数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">char</span> key<span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 将 26 英文字母插入</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">//key[i] = rand() % 1000;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c \"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token function\">btree_insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">btree_print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n---------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token function\">btree_delete</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">//btree_traverse(T.root);</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token function\">btree_print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "零声笔记",
                "C++",
                "计算机科学",
                "C项目",
                "B树"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/%E7%BB%91%E5%AE%9A%E5%99%A8%E5%8C%85%E8%A3%85%E5%99%A8/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/%E7%BB%91%E5%AE%9A%E5%99%A8%E5%8C%85%E8%A3%85%E5%99%A8/",
            "title": "C++11新特性绑定器包装器",
            "date_published": "2023-06-23T15:38:50.991Z",
            "content_html": "<h1 id=\"定义别名\"><a class=\"anchor\" href=\"#定义别名\">#</a> 定义别名</h1>\n<blockquote>\n<p><code>using</code>  和 <code>typedef</code>  一样，并不会创建新的类型，他们只是给某些类型定义了 <code>新的别名</code> ，using 相教于 typedef 的优势在于定义函数 <code>更加直观</code> ，并且可以给模版 <code>定义别名</code>  而 <code>typedef </code> 无法 <code>定义模版</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> 旧的类型名 新的类型名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> uint_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 使用 using 定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> 新的类型 <span class=\"token operator\">=</span> 旧的类型<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> uint_t <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 定义函数指针对比</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> func <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//typename 定义模版</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyMap</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">></span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 使用 using 定义模版</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">using</span> mymap <span class=\"token operator\">=</span> map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tMyMap<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>type map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Word!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tmymap<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello using\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"word using\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"列表初始化\"><a class=\"anchor\" href=\"#列表初始化\">#</a> 列表初始化</h1>\n<h2 id=\"统一初始化\"><a class=\"anchor\" href=\"#统一初始化\">#</a> 统一初始化</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span>  <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Test<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 数组初始化</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">double</span> array1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 对象初始化</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>zhang3 <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 对象初始化</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tTest <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 最初初始化</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tTest t2 <span class=\"token operator\">=</span> <span class=\"token number\">520</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误 拷贝构造函数是私有的，Linux 会报错，VS 不报错</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tTest t3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">520</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//C++11 新特性</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tTest t4<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">520</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 基础列表初始化</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">int</span> a1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1314</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">int</span> arr1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// C++11 新特性，可直接在变量后边跟上初始化列表，来进行变量或对象的初始化</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1314</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">int</span> arr2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 使用 new 操作符初始化</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">520</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向一个 new 操作符返回的内存，通过列表初始化将内存数据初始化为 520</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">52.11314</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 匿名对象初始化，再进行拷贝初始化</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在堆上动态分配一块内存，通过列表初始化直接完成多个元素初始化</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"初始化函数返回值\"><a class=\"anchor\" href=\"#初始化函数返回值\">#</a> 初始化函数返回值</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> string name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"id: \"</span> <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",name: \"</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Person <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">9527</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"华安\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPerson p <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>id: 9527,name: 华安</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"细节\"><a class=\"anchor\" href=\"#细节\">#</a> 细节</h2>\n<h3 id=\"聚合体\"><a class=\"anchor\" href=\"#聚合体\">#</a> 聚合体</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">T1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span><span class=\"token number\">321</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 对应的类型是聚合体才会将列表中的数据初始化对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 对象 a 对自定义聚合类型进行了初始化，a 将以拷贝的形式使用初始化列表中的数据来初始化 T1 结构体的变量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">T2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">T2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 世界成员通过构造函数构造完成</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span>b<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span><span class=\"token number\">321</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a.x\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", a.y\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b.x\"</span> <span class=\"token operator\">&lt;&lt;</span> b<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", b.y\"</span> <span class=\"token operator\">&lt;&lt;</span> b<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\ta.x123, a.y321</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tb.x10, b.y20</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"什么是聚合体\"><a class=\"anchor\" href=\"#什么是聚合体\">#</a> 什么是聚合体</h3>\n<ul>\n<li>普通数组本身可以看做是一个聚合类型</li>\n<li>满足以下条件的类 (class,struct,union) 可以看做是一个聚合类型\n<ul>\n<li><code>无用户自定义</code> 的构造函数</li>\n<li><code>无私有或保</code> 护的非静态数据成员\n<ul>\n<li>类中 <code>有私有成员</code> ，无法使用列表初始化进行初始化</li>\n<li>类中 <code>有非静态成员</code> 可以通过列表初始化进行初始化，但它不能初始化静态成员变量</li>\n</ul>\n</li>\n<li><code>无基类</code></li>\n<li>无虚函数  <code>virtual</code></li>\n<li>C++11 类中不能有使用 {} 和 = 直接初始化的非静态数据成员 (从 <code>C++14开始</code> ，使用列表初始化也可以初始化在类中 <code>使用&#123;&#125;和=初始化</code> 过的非静态数据成员)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 普通数据本身就是一个聚合类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.34</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.45</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token number\">4.45</span><span class=\"token punctuation\">,</span><span class=\"token number\">5.34</span><span class=\"token punctuation\">,</span><span class=\"token number\">6.34</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token number\">7.34</span><span class=\"token punctuation\">,</span><span class=\"token number\">8.43</span><span class=\"token punctuation\">,</span><span class=\"token number\">9.43</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">char</span> carry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'c'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>string asrry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">T3</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span><span class=\"token number\">321</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化 x,y</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 静态成员的初始化</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> T3<span class=\"token double-colon punctuation\">::</span>z <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">T4</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> <span class=\"token number\">1.34</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">int</span> z<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>T4 t<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">520</span><span class=\"token punctuation\">,</span><span class=\"token number\">13.14</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//C++11 不支持，C++14 支持</span></pre></td></tr></table></figure><h3 id=\"非聚合体\"><a class=\"anchor\" href=\"#非聚合体\">#</a> 非聚合体</h3>\n<blockquote>\n<p>在类中内部定义一个构造函数，在构造函数中使用初始化列表对类成员变量进行初始化。</p>\n<p>对于聚合类型，使用列表初始化相当于对其中的每个元素分别赋值，而对于非聚合类型，则需要先自定义一个合适的构造函数，此时使用列表初始化将会调用它对应的构造函数。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">T1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 在构造函数中使用初始化列表初始化类成员</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">T1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"x: \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",y :\"</span> <span class=\"token operator\">&lt;&lt;</span> y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",z :\"</span> <span class=\"token operator\">&lt;&lt;</span> z <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">T3</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">int</span> z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 聚合类型并非递归的，当一个类的非静态成员是非聚合类型时，这个类也可能是聚合类型</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">T2</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tT3 t1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">long</span> x1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">double</span> y1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tT1 t<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">520</span><span class=\"token punctuation\">,</span><span class=\"token number\">13.14</span><span class=\"token punctuation\">,</span><span class=\"token number\">1314</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 基于构造函数使用初始化列表初始化成员</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tt<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tT2 t2<span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">520</span><span class=\"token punctuation\">,</span><span class=\"token number\">13.14</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"stdinitializer_list\"><a class=\"anchor\" href=\"#stdinitializer_list\">#</a> std::initializer_list</h2>\n<blockquote>\n<p>在 STL 容器中，可以进行 <code>任意长度</code> 相同的数据初始化，</p>\n</blockquote>\n<ul>\n<li>内部定义了 <code>迭代器iterator</code>  等容器概念，遍历时得到的迭代器是 <code>只读</code> 的</li>\n<li>对于 <code>std::initializer_list&lt;T&gt;</code>  而言，它可以接受 <code>任意长度</code> 的初始化列表，但是要求元素 <code>必须</code> 是 ``同种类型 T`</li>\n<li>三个接口: <code>size()</code> , <code>begin()</code> , <code>end()</code></li>\n<li><code>std::initializer_list</code>  对象只能被 <code>整体初始化</code> 或者 <code>赋值</code></li>\n</ul>\n<h3 id=\"作为构造函数参数\"><a class=\"anchor\" href=\"#作为构造函数参数\">#</a> 作为构造函数参数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">traversal</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tm_names<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> m_names<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tTest <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lucy\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"tom\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 使用大括号</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tTest <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"nihao\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"shijie\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>jack lucy tom</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>hello world nihao shijie</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>*/</span></pre></td></tr></table></figure><h1 id=\"可调用对象\"><a class=\"anchor\" href=\"#可调用对象\">#</a> 可调用对象</h1>\n<h2 id=\"函数指针\"><a class=\"anchor\" href=\"#函数指针\">#</a> 函数指针</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 定义函数指针</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>print<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>输出:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>12.3</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>12.3</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"伪函数\"><a class=\"anchor\" href=\"#伪函数\">#</a> 伪函数</h2>\n<blockquote>\n<p>operator () 成员函数的类对象</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//operator () 操作父重载，括号内为空</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>string msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"msg :\"</span> <span class=\"token operator\">&lt;&lt;</span> msg <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tTest t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作符重载\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>msg : 操作符重载</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"可被转换为函数指针的类对象\"><a class=\"anchor\" href=\"#可被转换为函数指针的类对象\">#</a> 可被转换为函数指针的类对象</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> func_ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> string b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 将类对象转为函数指针</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">operator</span> <span class=\"token function\">func_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> print<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tTest t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"类对象转为函数指针\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>520 类对象转为函数指针</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"类成员函数指针或者类成员指针\"><a class=\"anchor\" href=\"#类成员函数指针或者类成员指针\">#</a> 类成员函数指针或者类成员指针</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> string b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 使用 using</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">using</span> fptr <span class=\"token operator\">=</span> <span class=\"token function\">vod</span><span class=\"token punctuation\">(</span>Test<span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    fptr <span class=\"token operator\">=</span> Test<span class=\"token double-colon punctuation\">::</span>print<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 定义类成员函数指针指向类成员函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>Test<span class=\"token double-colon punctuation\">::</span> <span class=\"token operator\">*</span> func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Test<span class=\"token double-colon punctuation\">::</span>print<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 类成员指针指向类成员变量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">int</span> Test<span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">*</span> obj_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Test<span class=\"token double-colon punctuation\">::</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 使用是哪个</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">using</span>  ptr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span> Test<span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    ptr1 pt <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Test<span class=\"token double-colon punctuation\">::</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tTest t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 通过类成员函数指针调用类成员函数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">01</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"端午节\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 通过类成员指针初始化类成员变量</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tt<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>obj_ptr <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"number is:\"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span>num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>1 端午节</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>number is:22</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>*/</span></pre></td></tr></table></figure><h1 id=\"包装器\"><a class=\"anchor\" href=\"#包装器\">#</a> 包装器</h1>\n<blockquote>\n<p><code>std::function</code>  是 <code>可调用对象的包装器</code> 。它是一个 <code>类模版</code> ，可以 <code>容纳</code> 除了 <code>类成员(函数指针)</code>  之外的 <code>所有可调用对象</code> 。通过统一的方式处理函数，函数对象，函数指针，并 <code>允许``保存和延迟</code> 执行它们。</p>\n</blockquote>\n<h2 id=\"基本使用\"><a class=\"anchor\" href=\"#基本使用\">#</a> 基本使用</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span>返回值类型<span class=\"token punctuation\">(</span>参数类型列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> diy_name <span class=\"token operator\">=</span> 可调用对象<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"用法\"><a class=\"anchor\" href=\"#用法\">#</a> 用法</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"+\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">-</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">*</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 绑定一个普通函数</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tfunction<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f1 <span class=\"token operator\">=</span> add<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 绑定以静态类成员函数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tfunction<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f2 <span class=\"token operator\">=</span> T1<span class=\"token double-colon punctuation\">::</span>sub<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 绑定一个仿函数</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tT2 t<span class=\"token punctuation\">;</span> <span class=\"token comment\">//t 本身就只 T2 类仿函数</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tfunction<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f3 <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 函数调用</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">f3</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>9+3=12</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>9-3=6</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>9*3=27</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"作为回调函数使用\"><a class=\"anchor\" href=\"#作为回调函数使用\">#</a> 作为回调函数使用</h2>\n<blockquote>\n<p>回调函数本身是通过函数指针实现的，使用对象包装器可以取代函数指针的使用<br />\n通过包装器 std::function 非常方便的将仿函数转换为一个函数指针，通过进行函数指针的传递，在其他函数的合适位置就可以调用这个包装好的仿函数。使用 std::function 作为函数的传入参数，可以将定义不相同的可调用对象进行统一的传递，这样大大添加了程序的灵活性。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 构造函数参数是一个包装器对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> f<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用通过构造函数得到的函数指针</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tfunction<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> callback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"仿函数包装的函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tB b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tA <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 仿函数通过包装器对象进行包装</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"调用回调函数之前\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用回调函数</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>调用回调函数之前</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>仿函数包装的函数</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>*/</span></pre></td></tr></table></figure><h1 id=\"绑定器\"><a class=\"anchor\" href=\"#绑定器\">#</a> 绑定器</h1>\n<blockquote>\n<p><code>std::bind</code>  用来将 <code>可调用对象与其参数</code> 一起进行绑定。绑定后的结果可以使用 <code>std::function</code>  进行保存，并延迟到任何需要的时间执行</p>\n</blockquote>\n<ul>\n<li>将可调用 <code>对象与其参数</code> 一起绑定成一个 <code>仿函数</code></li>\n<li>将 <code>多元</code>  (参数个数为 <code>n，n&gt;1</code> ) 可调用对象转换为 <code>一元</code> 或者 <code>(n-1)元</code> 可调用对象，即只绑定 <code>部门参数</code></li>\n</ul>\n<h2 id=\"使用语法\"><a class=\"anchor\" href=\"#使用语法\">#</a> 使用语法</h2>\n<blockquote>\n<p>使用 std::bind 绑定器返回的是一个仿函数类型，得到的返回值可以直接赋值给 std::function，在使用的时候，并不需要关心返回值类型，使用 auto 进行自动类型推导即可。 <code>placeholders::_1 </code> 是一个占位符，代表位置将在函数调用时被传入的第一个参数所替代， <code>placeholders::_2</code>   <code>placeholders::_3</code>  分别代表第二个第三个，且顺序如参数相对应。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 绑定非类成员函数 / 变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>可调用对象地址，绑定的参数<span class=\"token operator\">/</span>占位符<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 绑定类成员函 / 变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>类函数<span class=\"token operator\">/</span>成员地址<span class=\"token punctuation\">,</span>类实例对象地址<span class=\"token punctuation\">,</span>绑定的参数<span class=\"token operator\">/</span>占位符<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"绑定案例\"><a class=\"anchor\" href=\"#绑定案例\">#</a> 绑定案例</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 传参，和函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">callFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> f<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 此 f (x) 为包装器的回调函数，callFunc 的参数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">output_add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">+</span> <span class=\"token number\">10</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 使用绑定器可调用对象和参数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">auto</span> f1 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> placeholders<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//_1 可依次累加，代表第几个参数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token function\">callFunc</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//i 参数会在 callfunc 函数中传递给 f1</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">auto</span> f2 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>output_add<span class=\"token punctuation\">,</span> placeholders<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token function\">callFunc</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>0 2 4 6 8</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>10 12 14 16 18</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"绑定器与包装器配合\"><a class=\"anchor\" href=\"#绑定器与包装器配合\">#</a> 绑定器与包装器配合</h2>\n<blockquote>\n<p><code>f1</code>  的类型是 <code>function&lt;void(int,int)&gt;</code> , 通过使用 <code>std::bind</code>  将 <code>Test</code>  的成员函数 <code>output</code>  的地址和 <code>对象t</code>  绑定，并转化为一个 <code>仿函数</code> 并存储到 <code>对象f1</code>  中。</p>\n<p>使用 <code>绑定器绑定</code> 的类成员变量 <code>m_number</code>  得到的 <code>仿函数被</code> 存储到了类型 <code>function&lt;int&amp;(void)&gt;</code>  的包装器 <code>对象f2</code>  中，并且可以在需要的时候修改 <code>这个成员</code> 。并且可以在需要的时候修改这个成员。其中 <code>int</code>  是绑定的 <code>类成员的类</code> 型，并且允许修改绑定的变量，因此需要指定为变量的引用，由于没有参数因此参数列表指定为 <code>void.</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"x: \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"y: \"</span> <span class=\"token operator\">&lt;&lt;</span> y <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_number <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tTest t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 绑定类成员函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tfunction<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>f1 <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Test<span class=\"token double-colon punctuation\">::</span>output<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">,</span> placeholders<span class=\"token double-colon punctuation\">::</span>_1<span class=\"token punctuation\">,</span> placeholders<span class=\"token double-colon punctuation\">::</span>_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 绑定类成员变量 (公共)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tfunction<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f2 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Test<span class=\"token double-colon punctuation\">::</span>m_number<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 调用</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1314</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2323</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"t.m_number: \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span>m_number <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>x: 520y: 1314</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>t.m_number: 2323</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>*/</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "汇编与STl新特征",
                "C++",
                "新特性"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-6/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-6/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/",
            "title": "红黑树",
            "date_published": "2023-06-22T00:20:43.000Z",
            "content_html": "<h1 id=\"红黑树\"><a class=\"anchor\" href=\"#红黑树\">#</a> 红黑树</h1>\n<blockquote>\n<p><code>Red-black tree</code>  自平衡二叉查找树，可在 <code>O(log n)</code>  时间内完成查找，插入和删除。</p>\n<p>强查找.</p>\n</blockquote>\n<ul>\n<li><code>Linux</code>  进程调度 <code>CFS</code></li>\n<li><code>epoll</code>  事件块的 <code>管理</code></li>\n<li><code>Nginx Timer</code>  事件管理</li>\n</ul>\n<h1 id=\"性质\"><a class=\"anchor\" href=\"#性质\">#</a> 性质</h1>\n<ul>\n<li>每个节点是 <code>红色</code> 的或者 <code>黑的</code></li>\n<li><code>根</code> 节点是 <code>黑的</code></li>\n<li>每个 <code>叶子</code> 节点是 <code>黑的</code></li>\n<li>如果一个节点是 <code>红的</code> ，则它的 <code>两个儿子</code> 都是 <code>黑</code> 的</li>\n<li>对每个节点，从该节点到其 <code>子孙节点</code> 的所有路径上包含 <code>相同的黑节点</code> <br />\n (最低和最高的差最长为 <code>2*n -1</code> , 最多旋转树高)</li>\n</ul>\n<h1 id=\"用途\"><a class=\"anchor\" href=\"#用途\">#</a> 用途</h1>\n<ul>\n<li><code>key value</code></li>\n<li><code>顺序执行</code></li>\n</ul>\n<h1 id=\"红黑树定义\"><a class=\"anchor\" href=\"#红黑树定义\">#</a> 红黑树定义</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 解决变量写死问题</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> KEY_TYPE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 宏定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">RBTREE_ENTRY</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>type<span class=\"token punctuation\">)</span>      </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">name</span>                      </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#123;</span>                                </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">/* data */</span>                   <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token expression\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">type</span> <span class=\"token operator\">*</span>right<span class=\"token punctuation\">;</span>          </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token expression\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">type</span> <span class=\"token operator\">*</span>left<span class=\"token punctuation\">;</span>           </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token expression\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">type</span> <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">;</span>         </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token expression\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> color<span class=\"token punctuation\">;</span>         </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 红黑数节点定义</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 单节点不可复用，</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_rbtree_node</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    KEY_TYPE key<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 键</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 值</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">1</span>   </span><span class=\"token comment\">// 将以下指针成红黑树模版</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_rbtree_node</span> <span class=\"token operator\">*</span>right<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 右节点</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_rbtree_node</span> <span class=\"token operator\">*</span>left<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 左节点</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_rbtree_node</span> <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 父节点</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> color<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 放最后面颜色，节省一点空间，字节对齐</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">RBTREE_ENTRY</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">,</span>_rbtree_node<span class=\"token punctuation\">)</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span>rbtree_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 根节点指向头结点和叶子结点</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_rbtree</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_rbtree_node</span> <span class=\"token operator\">*</span>root<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 头节点</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_rbtree_node</span> <span class=\"token operator\">*</span>nil<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 叶子节点作为空间点，(所有叶子节点隐藏且都是隐藏的) nil 好判断，避免内存不存在</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span>rbtree<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"复用性\"><a class=\"anchor\" href=\"#复用性\">#</a> 复用性</h2>\n<blockquote>\n<p>一个结构体可以定义 <code>多个红黑树</code></p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">thread</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    KEY_TYPE key<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 键</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span>   </span><span class=\"token comment\">// 将以下指针成红黑树模版 </span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_rbtree_node</span> <span class=\"token operator\">*</span>right<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 右节点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_rbtree_node</span> <span class=\"token operator\">*</span>left<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 左节点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_rbtree_node</span> <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 父节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> color<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 放最后面颜色，节省一点空间，字节对齐</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">RBTREE_ENTRY</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">,</span>thread<span class=\"token punctuation\">)</span> ready<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">RBTREE_ENTRY</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">,</span>thread<span class=\"token punctuation\">)</span> wait<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">RBTREE_ENTRY</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">,</span>thread<span class=\"token punctuation\">)</span> sleep<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span>rbtree_node<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"旋转\"><a class=\"anchor\" href=\"#旋转\">#</a> 旋转</h1>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbukhuicuhyicYsTZcW6psgfgyGkhXA0VU4ahCaVNZnqBrJPpYfIfOWnPYhtCaeNyGYzGrWTpJzImiblQ/640?wx_fmt=jpeg\" alt=\"红黑树旋转\" title=\"红黑树旋转\" /></p>\n<h2 id=\"左旋转\"><a class=\"anchor\" href=\"#左旋转\">#</a> 左旋转</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 左旋转  T 红黑树 当前旋转的根节点  x</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rbtree_left_rotate</span><span class=\"token punctuation\">(</span>rbtree <span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span>rbtree_node <span class=\"token operator\">*</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    rbtree_node <span class=\"token operator\">*</span>y <span class=\"token operator\">=</span> x <span class=\"token operator\">-></span> right<span class=\"token punctuation\">;</span> <span class=\"token comment\">//y 为目前阶段 x 的右节点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token comment\">// 1，先让 x 的右节点变为与的左节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    x<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> y<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span>         </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">-></span>left <span class=\"token operator\">!=</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 如果 y 的左节点不为叶子节点 最顶部节点，是叶子节点就不用改了</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        y<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 将 y 的左节点的父节点设置 x</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 2, 调整 y 的父节点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    y<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    x 的父节点要么是根节点，要么是空     </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>parent <span class=\"token operator\">==</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 若 x 的节点不为叶子节点</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        T<span class=\"token operator\">-></span>root <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 将 T 的根节点设为 y</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> x<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 若 x 为父节点的左节点</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        x<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 将 x 的父节点的左节点设为 y</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">else</span>                         <span class=\"token comment\">// 若 x 为父节点的左节点</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        x<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 将 x 的父节点的右节点设为 y</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 3, 调整 y 的左节点</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    y<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 调整 x 的父节点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    x<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"右旋转\"><a class=\"anchor\" href=\"#右旋转\">#</a> 右旋转</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 右旋</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rbtree_right_rotate</span><span class=\"token punctuation\">(</span>rbtree <span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span>rbtree_node <span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    rbtree_node <span class=\"token operator\">*</span>x <span class=\"token operator\">=</span>  y<span class=\"token operator\">-></span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//1,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    y<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>right <span class=\"token operator\">!=</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果 x 的右节点不是叶子节点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        x<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 2,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    x<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> y<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">-></span>parent <span class=\"token operator\">==</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 最顶部节点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        T<span class=\"token operator\">-></span>root <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> y<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        y<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        y<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 调整 x 和 y 的动向</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    x<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    y<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"插入\"><a class=\"anchor\" href=\"#插入\">#</a> 插入</h1>\n<blockquote>\n<p>红黑树在插入任何节点之前，它 <code>本身</code> 就已经是 <code>一颗红黑树</code> <br />\n归纳法：插入的节点位于 <code>最底层</code> ，且初始颜色为 <code>红色</code> ，然后根据颜色做做相关的调整</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbukhuicuhyicYsTZcW6psgfgy3ibHCRCA1JJ06976TjwnEbO0tSLawfvwUP80N6bvSlG7CGbsFiajqkUw/640?wx_fmt=jpeg\" alt=\"红黑树的插入\" title=\"红黑树插入\" /></p>\n<h2 id=\"插入-2\"><a class=\"anchor\" href=\"#插入-2\">#</a> 插入</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 会插入到最低层</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 插入的树 T，插入的节点 z</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rbtree_insert</span><span class=\"token punctuation\">(</span>rbtree<span class=\"token operator\">*</span> T<span class=\"token punctuation\">,</span> rbtree_node<span class=\"token operator\">*</span> z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    rbtree_node<span class=\"token operator\">*</span> y <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>root<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录 x 之前的位置，即新节点的 z 的插入点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    rbtree_node<span class=\"token operator\">*</span> x <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>root<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指着头结点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 开始循环，当 x 不等于叶子节点时，一直循环</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">//y 始终比 x 高一级；</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z<span class=\"token operator\">-></span>key <span class=\"token operator\">&lt;</span> x<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// 进入左子树</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            x <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z<span class=\"token operator\">-></span>key <span class=\"token operator\">></span> x<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 进入右子树</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            x <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">else</span>  <span class=\"token comment\">// 如果等于</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 取决于业务</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不做处理</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 得到了 x 是叶子结点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    z<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 原来的树为空，新插入的节点作为根节点</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 此时红黑树没有任何节点</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        T<span class=\"token operator\">-></span>root <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z<span class=\"token operator\">-></span>key <span class=\"token operator\">&lt;</span> y<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 插入到左节点</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 将在插入到 y 的哪个位置</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        y<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        y<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    z<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    z<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 插入的颜色 (上什么 颜色)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    z<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一开始上色 红色 ，不改变性质黑数</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 颜色调整</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     <span class=\"token function\">rbtree_insert_fixup</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"插入颜色调整\"><a class=\"anchor\" href=\"#插入颜色调整\">#</a> 插入颜色调整</h2>\n<blockquote>\n<p><code>z</code>  是 <code>红色</code> <br />\n <code>z</code>  的 <code>父节</code> 点也是 <code>红色</code> <br />\n <code>z</code>  的 <code>祖父</code> 节点是黑色<br />\n <code>z</code>  的 <code>叔父</code> 节点 <code>不确定</code> <br />\n若叔父节点也是红色，<br />\n若叔父节点是黑色</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入节点 z 是红色，判断其父节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 调整颜色 参数红黑树根节点，和节点 z 的颜色是红色</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rbtree_insert_fixup</span><span class=\"token punctuation\">(</span>rbtree<span class=\"token operator\">*</span> T<span class=\"token punctuation\">,</span> rbtree_node<span class=\"token operator\">*</span> z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 插入节点 z 是红色，判断其父节点是红色，违背了性质 4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z<span class=\"token operator\">-></span>parent <span class=\"token operator\">==</span> z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 若 z 位于左节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            rbtree_node<span class=\"token operator\">*</span> y <span class=\"token operator\">=</span> z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span> <span class=\"token comment\">//y 为 z 的叔父节点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果叔父节点是红色</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//z 的父节点换位黑色</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                y<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>          <span class=\"token comment\">//z 的叔父节点</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">// 设置祖父条件</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span> <span class=\"token comment\">//z 的祖父节点为红色</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">//z 是红色，z 的祖父已经完善啦，z 回溯</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                z <span class=\"token operator\">=</span> z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//z 在每次回溯的时候都是红色的</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token comment\">//z 的叔父节点是黑色的</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">==</span> z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 当 z 位于右边部分时，要先转到左边进入中间状态</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token comment\">// 需要两次调整，</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    z <span class=\"token operator\">=</span> z<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token function\">rbtree_left_rotate</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// 右旋</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token function\">rbtree_right_rotate</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">else</span>  <span class=\"token comment\">// 当 z 为位于右边是</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 获取其叔父节点</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            rbtree_node<span class=\"token operator\">*</span> y <span class=\"token operator\">=</span> z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span> <span class=\"token comment\">//y 为 z 的叔父节点</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">// 判断其叔父节点是红色还是黑色</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 叔父的颜色是红色</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//z 的父节点换位黑色</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                y<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>          <span class=\"token comment\">//z 的叔父节点</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span> <span class=\"token comment\">//z 的祖父节点为红色</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token comment\">//z 是红色，z 的祖父已经完善啦，z 回溯</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token comment\">// 如果 z 的祖父为空</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                z <span class=\"token operator\">=</span> z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//z 在每次回溯的时候都是红色的</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>               </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token comment\">// 其叔父的颜色是黑叔</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">==</span> z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 当 z 位于右边部分时，要先转到左边进入中间状态</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    <span class=\"token comment\">// 需要两次调整，</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token comment\">////  z 位置发生变化</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    z <span class=\"token operator\">=</span> z<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    <span class=\"token function\">rbtree_right_rotate</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token comment\">// 右旋</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token function\">rbtree_left_rotate</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> z<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    T<span class=\"token operator\">-></span>root<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 防止根节点的变红</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h1>\n<h2 id=\"先删除\"><a class=\"anchor\" href=\"#先删除\">#</a> 先删除</h2>\n<blockquote>\n<ul>\n<li>页节点，将父节点的孩子设置为 <code>T-&gt;nil</code></li>\n<li>有 <code>一个子树</code></li>\n<li><code>左右子树</code> 都有</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbukhuicuhyicYsTZcW6psgfgyO4ibibnh0VGZx7qjARjLvCIqYKibpqeic4FJUGtDvkUNVIAPcwXEvlw5ww/640?wx_fmt=jpeg\" alt=\"红黑树的删除\" title=\"红黑树的删除\" /></p>\n<h2 id=\"删除代码\"><a class=\"anchor\" href=\"#删除代码\">#</a> 删除代码</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根节点与要删除的子节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rbtree_node<span class=\"token operator\">*</span> <span class=\"token function\">rbtree_delete</span><span class=\"token punctuation\">(</span>rbtree<span class=\"token operator\">*</span> T<span class=\"token punctuation\">,</span> rbtree_node<span class=\"token operator\">*</span> z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    rbtree_node<span class=\"token operator\">*</span> y <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">;</span><span class=\"token comment\">//y 指向要删除 / 移动替换的结点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    rbtree_node<span class=\"token operator\">*</span> x <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 左右两个量的临时中转红黑树节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 1,2 如果 z 的左节点或者右节点为空</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>z<span class=\"token operator\">-></span>left <span class=\"token operator\">==</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>z<span class=\"token operator\">-></span>right <span class=\"token operator\">==</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        y <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 继续需要释放的节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token comment\">// 删除的节点有连个节点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 儿子节点有两个孩子，用后继节点替换待删除的节点，问题转化为删除这个后继节点</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 根据 z 的位置去不同的值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//z 的有节点不为空，取右边最小的值，为删除的点</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        y <span class=\"token operator\">=</span> <span class=\"token function\">rbtree_twice</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 需要将 y 与的值与 z 的值互换 接 3.2</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 如果儿子节点有独生子，那么这个独生子直接继承它爹的位置</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 若要释放的 y 仍有子节点，x 取其子节点辅助</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">-></span>left <span class=\"token operator\">!=</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        x <span class=\"token operator\">=</span> y<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">-></span>right <span class=\"token operator\">!=</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        x <span class=\"token operator\">=</span> y<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 调节继位节点的 parent 指针指向</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    x<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> y<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 隔离删除的节点 y，若没有则为 root->nil</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 调节父节点的孩子指针指向</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">//y 的父节点的子节点互换位置</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 根节点位置</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">-></span>parent <span class=\"token operator\">==</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 根节点将被删除，更新根节点</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        T<span class=\"token operator\">-></span>root <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 要删除的节点是根节点，将 x 顶上根节点</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> y<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 如果删除的节点位于左边</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        y<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        y<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 3.2 如果 y 是右子树的最小节点，就将 y 放到 z 的位置，然后删除原来的 z</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">!=</span> z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        z<span class=\"token operator\">-></span>key <span class=\"token operator\">=</span> y<span class=\"token operator\">-></span>key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        z<span class=\"token operator\">-></span>value <span class=\"token operator\">=</span> y<span class=\"token operator\">-></span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 如果删除的节点是黑色的，就要维护一下红黑树的性质</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 破坏了黑高</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 参数：红黑树根节点，当前要删除的结点</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token function\">rbtree_delete_fixup</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"删除后调整\"><a class=\"anchor\" href=\"#删除后调整\">#</a> 删除后调整</h2>\n<blockquote>\n<p>若删除的节点为黑色，就破坏了红黑树黑高的性质，需要对红黑树进行调整</p>\n</blockquote>\n<ul>\n<li>当前结点的 <code>兄弟</code> 节点是 <code>红色</code> 的</li>\n<li>当前结点的 <code>兄弟</code> 节点是 <code>黑色</code> 的，而且兄弟结点的两个 <code>子结点</code> 也是 <code>黑</code> 色的</li>\n<li>当前结点的 <code>兄弟</code> 节点是 <code>黑色</code> 的，而且兄弟结点的 <code>左子树</code> 是 <code>黑色</code> ， <code>右</code> 子树是 <code>红色</code> 的</li>\n<li>当前结点的 <code>兄弟</code> 节点是 <code>黑色</code> 的，而且兄弟结点的 <code>左</code> 子树是 <code>红色</code> ， <code>右</code> 子树是 <code>黑色</code></li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtTtWptLkH9ic4sYdojjWq290L7DGbMPVz7Cqxmy87DPdrJewLic38GibunLPrE5XicYOibjvxkibG2sMxg/640?wx_fmt=jpeg\" alt=\"红黑树删除调整\" title=\"红黑树删除调整\" /></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 找到右子树中的最小节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rbtree_node<span class=\"token operator\">*</span> <span class=\"token function\">rbtee_right_mini</span><span class=\"token punctuation\">(</span>rbtree<span class=\"token operator\">*</span> T<span class=\"token punctuation\">,</span> rbtree_node<span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>left <span class=\"token operator\">!=</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        x <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 找到左左子树中的最大节点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>rbtree_node<span class=\"token operator\">*</span> <span class=\"token function\">rbtee_left_max</span><span class=\"token punctuation\">(</span>rbtree<span class=\"token operator\">*</span> T<span class=\"token punctuation\">,</span> rbtree_node<span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>right <span class=\"token operator\">!=</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        x <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 当删除节点有左右子树时</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>rbtree_node<span class=\"token operator\">*</span> <span class=\"token function\">rbtree_twice</span><span class=\"token punctuation\">(</span>rbtree<span class=\"token operator\">*</span> T<span class=\"token punctuation\">,</span> rbtree_node<span class=\"token operator\">*</span> z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    rbtree_node<span class=\"token operator\">*</span> k <span class=\"token operator\">=</span> z<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 后继节点就是中序遍历时右子树的第一个节点</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z<span class=\"token operator\">-></span>right <span class=\"token operator\">!=</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">rbtee_right_mini</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> z<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 这里应该不会被执行到，因为此时的待删除节点必然有两个孩子节点</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 如果没有右子树，那就是作为左子树时的根节点</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">!=</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">==</span> k<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        z <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        k <span class=\"token operator\">=</span> k<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 删除操作调整</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rbtree_delete_fixup</span><span class=\"token punctuation\">(</span>rbtree<span class=\"token operator\">*</span> T<span class=\"token punctuation\">,</span> rbtree_node<span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> T<span class=\"token operator\">-></span>root<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 不是根节点且删除的节点为黑</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 如果 x 位于父节点的左边</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> x<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token comment\">// 找到兄弟节点</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            rbtree_node<span class=\"token operator\">*</span> w <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 情况 1，兄弟节点为红色</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>w<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token comment\">//1.1 兄弟节点变成黑色</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                w<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token comment\">//1.2 父节点变成红色</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                x<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token comment\">//1.3 父节点左旋</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token function\">rbtree_left_rotate</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> x<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token comment\">// 重新设置 x 的兄弟节点</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                w <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token comment\">// 情况 2</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>w<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>w<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token comment\">// 兄弟节点变为红色</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                w<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                x <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token comment\">// 情况 3 x 的兄弟节点是黑色的，兄弟的左孩子是红色，右孩子是黑色</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>w<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                    <span class=\"token comment\">//3.1 兄弟节点变红</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                    w<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                    <span class=\"token comment\">// 将左孩子变黑</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    w<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    <span class=\"token comment\">// 已兄弟节点右旋</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                    <span class=\"token function\">rbtree_right_rotate</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                    <span class=\"token comment\">// 重置 x 的兄弟节点</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    w <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                <span class=\"token comment\">// 情况 4 x 的兄弟节点是黑色，x 的兄弟节点的右孩子是红色的</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token comment\">// 将兄弟节点换成父节点的颜色</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                w<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                <span class=\"token comment\">// 把付姐带你和兄弟节点的右孩子涂黑</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                w<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                w<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token comment\">// 对父节点左旋</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token function\">rbtree_left_rotate</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> x<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token comment\">// 设置 x 指针，指向根节点</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                x <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>root<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 结束代码</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token comment\">// 如果 x 位于 x 父节点的右边</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            rbtree_node<span class=\"token operator\">*</span> w <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>w<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                w<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                x<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                <span class=\"token function\">rbtree_right_rotate</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> x<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                w <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>w<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>w<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                w<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                x <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>w<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                    w<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                    w<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                    <span class=\"token function\">rbtree_left_rotate</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                    w <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                w<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                x<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                w<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                <span class=\"token function\">rbtree_right_rotate</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> x<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                x <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token comment\">// 继承节点变为黑色，为了弥补失去的黑高</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    x<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"查找节点\"><a class=\"anchor\" href=\"#查找节点\">#</a> 查找节点</h1>\n<blockquote>\n<p>红黑树查找节点与普通二叉树相同</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查找节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rbtree_node<span class=\"token operator\">*</span> <span class=\"token function\">rbtree_search</span><span class=\"token punctuation\">(</span>rbtree<span class=\"token operator\">*</span> T<span class=\"token punctuation\">,</span>KEY_TYPE key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    rbtree_node <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">!=</span>T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> node<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            node <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">></span> node<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            node<span class=\"token operator\">=</span>node<span class=\"token operator\">-></span>right</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回查到的节点</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没有找到</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"红黑树遍历\"><a class=\"anchor\" href=\"#红黑树遍历\">#</a> 红黑树遍历</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 中序遍历  node 遍历开始的头结点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rbtree_traversal_center</span><span class=\"token punctuation\">(</span>rbtree<span class=\"token operator\">*</span> T<span class=\"token punctuation\">,</span>rbtree_node <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">!=</span>T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">rbtree_traversal_center</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span>node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key:%d,color:%d\\n\"</span><span class=\"token punctuation\">,</span>node<span class=\"token operator\">-></span>key<span class=\"token punctuation\">,</span>node<span class=\"token operator\">-></span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">rbtree_traversal_center</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 前序遍历  node 遍历开始的头结点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rbtree_traversal_front</span><span class=\"token punctuation\">(</span>rbtree<span class=\"token operator\">*</span> T<span class=\"token punctuation\">,</span>rbtree_node <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">!=</span>T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key:%d,color:%d\\n\"</span><span class=\"token punctuation\">,</span>node<span class=\"token operator\">-></span>key<span class=\"token punctuation\">,</span>node<span class=\"token operator\">-></span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">rbtree_traversal_front</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span>node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">rbtree_traversal_front</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 前序遍历  node 遍历开始的头结点</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rbtree_traversal_tail</span><span class=\"token punctuation\">(</span>rbtree<span class=\"token operator\">*</span> T<span class=\"token punctuation\">,</span>rbtree_node <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">!=</span>T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">rbtree_traversal_tail</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span>node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">rbtree_traversal_tail</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key:%d,color:%d\\n\"</span><span class=\"token punctuation\">,</span>node<span class=\"token operator\">-></span>key<span class=\"token punctuation\">,</span>node<span class=\"token operator\">-></span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>s</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> keyArray<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">35</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">67</span><span class=\"token punctuation\">,</span><span class=\"token number\">47</span><span class=\"token punctuation\">,</span><span class=\"token number\">38</span><span class=\"token punctuation\">,</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span><span class=\"token number\">49</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    rbtree<span class=\"token operator\">*</span> T <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>rbtree<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>rbtree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    T<span class=\"token operator\">-></span>nil <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>rbtree_node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>rbtree_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    T<span class=\"token operator\">-></span>nil<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    T<span class=\"token operator\">-></span>root <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    rbtree_node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> T<span class=\"token operator\">-></span>nil<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>rbtree_node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>rbtree_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        node<span class=\"token operator\">-></span>key <span class=\"token operator\">=</span> keyArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        node<span class=\"token operator\">-></span>value <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">rbtree_insert</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 中序排序输出</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">rbtree_traversal_center</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> T<span class=\"token operator\">-></span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        rbtree_node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token function\">rbtree_search</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> keyArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        rbtree_node<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token function\">rbtree_delete</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">rbtree_traversal_center</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> T<span class=\"token operator\">-></span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"资源\"><a class=\"anchor\" href=\"#资源\">#</a> 资源</h1>\n<blockquote>\n<p><code>画图</code> ：微信公众号 <code>瓶子的跋涉</code> 回复 <code>红黑树</code> <sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n</blockquote>\n<p>参考资料:</p>\n<ul>\n<li><code>零声学院</code></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ5NzIzNjUxL2FydGljbGUvZGV0YWlscy8xMjU1MjY4NDU=\">SCDN</span></li>\n</ul>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><code>https://foryouos.lanzoul.com/b01334syj密码:5213</code> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "计算机科学",
                "C++",
                "零声笔记",
                "C++",
                "计算机科学",
                "C项目",
                "红黑树"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-4/Linux%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8simple/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-4/Linux%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8simple/",
            "title": "Linux后台服务器simple",
            "date_published": "2023-06-21T03:20:43.000Z",
            "content_html": "<h1 id=\"http高并发服务器reactor模型01-simple\"><a class=\"anchor\" href=\"#http高并发服务器reactor模型01-simple\">#</a> Http 高并发服务器 (Reactor 模型) 01 simple</h1>\n<h2 id=\"开发环境\"><a class=\"anchor\" href=\"#开发环境\">#</a> 开发环境</h2>\n<h3 id=\"系统\"><a class=\"anchor\" href=\"#系统\">#</a> 系统</h3>\n<blockquote>\n<p><code>Visual studio 2022 + WSL</code>  子系统，详细查看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL2NwcC9saW51eC8/dmlldz1tc3ZjLTE3MA==\">微软教程 </span>  <sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n<p><code>解决方案文件下-&gt;文件名-&gt;属性</code></p>\n<ul>\n<li>常规 -&gt; <code>远程根目录</code>  (可设置项目上传的目录)</li>\n<li><code>C/C++</code>   -&gt; 语言 -&gt;  <code>C语言标准</code>  -&gt; 选择 <code> C11 (GNU Dialect) (-std=gnu11)</code></li>\n<li>链接器  -&gt;  <code>输入</code>   -&gt; 库依赖项  输入 <code>pthread</code></li>\n</ul>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//在linux安装相关库</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> g++ gdb <span class=\"token function\">make</span> ninja-build <span class=\"token function\">rsync</span> <span class=\"token function\">zip</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//安装 openssh-server</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> openssh-server</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//开始运行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> <span class=\"token function\">ssh</span> start</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//设置开机自动启动</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> <span class=\"token function\">ssh</span></pre></td></tr></table></figure><h3 id=\"linux-关闭进程\"><a class=\"anchor\" href=\"#linux-关闭进程\">#</a> Linux 关闭进程</h3>\n<ul>\n<li><code>ctrl+c</code>  : 中断了进程，返回到终端界面 向进程 <code>SIGINT</code>  信号 <code>杀死进程</code></li>\n<li><code>ctrl+z</code>  : 暂停了进程，将进程暂停并挂 <code>在后台</code> ，向进程 <code>发送SIGSTOP</code>  信号来 <code>暂停进程</code></li>\n<li><code>Ctrl-\\ </code>  : 发送退出信号（ <code>SIGQUIT</code> ）； 默认情况下，这会导致进程终止并 <code>转储核心</code> 。</li>\n<li><code>ctrl-s</code>  : 中断控制台输出</li>\n<li><code>ctrl-q</code> :  恢复控制台输出</li>\n<li><code>ctrl-l </code> :  清屏</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 列出所有进程详细信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ps</span> aux</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 实时监控系统进程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">top</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 把暂停的第一个进程再放到前台</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fd</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 将进程切换到后台运行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">bg</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 杀死进程</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">kill</span> <span class=\"token parameter variable\">-CONT</span> <span class=\"token operator\">&lt;</span>进程ID<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"http协议\"><a class=\"anchor\" href=\"#http协议\">#</a> HTTP 协议</h2>\n<blockquote>\n<p>http (超文本传输协议) 是 <code>应用层协议</code> ，对通信的 <code>数据进行封装</code></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbukhuicuhyicYsTZcW6psgfgy2H7W9CG0v1RH9SichFKyMPegqe6CQcpr2kna0uLamFLYmykLPem5KicA/640?wx_fmt=jpeg\" alt=\"HTTP通信流程\" title=\"通信流程\" /></p>\n<blockquote>\n<p>http <code>请求</code> 协议，http <code>响应</code> ，http 协议的 <code>换行符</code>   <code>\\r\\n</code> , 通过此判断，此行结束</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbukhuicuhyicYsTZcW6psgfgyXPxicjtZQI7QxrQWhFS1mEQgAk8KfNUqxAjqTZg0JJVMhPbtjic6z8Pw/640?wx_fmt=jpeg\" alt=\"请求报文&amp;响应报文\" title=\"请求报文&amp;响应报文\" /></p>\n<h3 id=\"客户端浏览器\"><a class=\"anchor\" href=\"#客户端浏览器\">#</a> 客户端 (浏览器)</h3>\n<ul>\n<li>通过浏览器地址栏给服务器发送请求，浏览器内部进行数据封装，根据 <code>http协议</code> 封装完毕， <code>数据发送</code> 给 <code>服务器</code></li>\n<li><code>等待服务器回复</code></li>\n<li>收到服务器回复的数据，根据 <code>http协议解析</code> 数据，得到服务器回复的原始数据</li>\n</ul>\n<h4 id=\"http请求\"><a class=\"anchor\" href=\"#http请求\">#</a> http 请求</h4>\n<blockquote>\n<ul>\n<li>请求行</li>\n<li>请求头:  <code>get请求</code> ，静态请求， <code>/</code>  代表服务器给客户端提供的 <code>资源目录</code> ，而非服务器根目录</li>\n<li>空行</li>\n<li>客户端向服务器提交的数据</li>\n</ul>\n</blockquote>\n<h4 id=\"接受http请求\"><a class=\"anchor\" href=\"#接受http请求\">#</a> 接受 http 请求</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">recvHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">FDInfo</span><span class=\"token operator\">*</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">FDInfo</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv message....\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 1，把用户所有数据先存到本地</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">4096</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 总</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">char</span> tmp<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 临时</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 边缘模式，需要一次把所有数据全部读完</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//len 每次接受的数据长度，total 为总长度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 将请求的数据全部存入缓存区当中</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 接受客户端的请求数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">//printf(\"recv while total\\n\");</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>total <span class=\"token operator\">+</span> len <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>buf <span class=\"token operator\">+</span> total<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 修改复制地址</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\ttotal <span class=\"token operator\">+=</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//printf(\"total = %d\\n\", total);</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 判断数据是否被接受完毕</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> errno <span class=\"token operator\">==</span> EAGAIN<span class=\"token punctuation\">)</span> <span class=\"token comment\">//len 等于 - 1 并且错误为 EAGAIN</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">//printf(\"analyse get request!\\n\");</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 解析请求行，对，先处理 get 请求</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pt <span class=\"token operator\">=</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 遇到这两个字符 \\r\\n 从左往右搜到之后，就结束了</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> reqLen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pt <span class=\"token operator\">-</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到请求行的长度，结束的地址，减去起始的地址</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tbuf<span class=\"token punctuation\">[</span>reqLen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//buf [reqLen-1] 是上面的最后一个字符</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">//printf(\"%s\\n\", buf);</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token comment\">// GET /categories/ HTTP/1.1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token function\">parseRequestLine</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client closed!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">// 客户端断开了连接，删除对应的文件描述符</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token function\">epoll_ctl</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>epfd<span class=\"token punctuation\">,</span> EPOLL_CTL_DEL<span class=\"token punctuation\">,</span> info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">//printf(\"recvHttpRequest error len = %d\\n\", len);</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recvMsg threadId : %ld\\n\"</span><span class=\"token punctuation\">,</span> info<span class=\"token operator\">-></span>tid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbukhuicuhyicYsTZcW6psgfgypeoZgv1l7NiccyysSLvH0fksmWKCJ4C765QV1pvP7iaEN5rCdbNfWIGA/640?wx_fmt=jpeg\" alt=\"请求报文\" title=\"请求报文\" /><br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbukhuicuhyicYsTZcW6psgfgyibiafuIIDuUKJ4EfYia4ncQrQZ0Aq44NOiakOia0pic4B7kVrgcB7yqtAMRA/640?wx_fmt=jpeg\" alt=\"请求方法\" title=\"请求方法\" /></p>\n<h4 id=\"解析请求头\"><a class=\"anchor\" href=\"#解析请求头\">#</a> 解析请求头</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">parseRequestLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cfd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">//GET /categories/ HTTP/1.1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 解析请求行， get /xxx/1.jpg http1.1  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 三部分：请求方式，请求资源，请求 http 协议的版本，数据之间有空格，</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//sscanf 对格式化的字符串进行拆分</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">char</span> method<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//get 或 post</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">char</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存储请求的静态资源，文件路径</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%[^ ] %[^ ]\"</span><span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用正则表达式记录空行来进行分割，取出请求方式，和请求路径</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method: %s,path: %s\\n\"</span><span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcasecmp</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//strcasecmp 比较时不区分大小写</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">// 非 get 请求不处理</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">decodeMsg</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 避免中文的编码问题 将请求的路径转码 linux 会转成 utf8</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 处理客户端请求的静态资源 (目录或文件)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> file <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 判断是不是根目录</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tfile <span class=\"token operator\">=</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tfile <span class=\"token operator\">=</span> path <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指针 + 1 把开始的 / 去掉吧</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 判断 file 属性，是文件还是目录</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//file 文件属性，同时将信息传入 st 保存了文件的大小</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token comment\">// 文件不存在  -- 回复 404</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token function\">sendHeadMsg</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Not Found\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getFileType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"404.html\"</span><span class=\"token punctuation\">,</span> cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送 404 对应的 html 文件</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 判断文件类型</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">S_ISDIR</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span>st_mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果时目录返回 1，不是返回 0</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">// 把这个目录中的内容发送给客户端</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token function\">sendHeadMsg</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getFileType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>st<span class=\"token punctuation\">.</span>st_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token function\">sendDir</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">// 把这个文件的内容发给客户端</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token function\">sendHeadMsg</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getFileType</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>st<span class=\"token punctuation\">.</span>st_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"服务器端\"><a class=\"anchor\" href=\"#服务器端\">#</a> 服务器端</h3>\n<ul>\n<li>接受数据，被 <code>http协议封装</code> 过的</li>\n<li>根据 <code>http协议解析</code> 数据，得到客户端请求的 <code>原始数据</code></li>\n<li>处理客户端请求，得到 <code>处理结果</code></li>\n<li>给客户端回复数据 (数据需要通过 <code>http协议封装</code> ，然后发送给客户端)</li>\n</ul>\n<h4 id=\"http响应\"><a class=\"anchor\" href=\"#http响应\">#</a> http 响应</h4>\n<blockquote>\n<p>服务器给客户端回复数据，称为 <code>http响应</code> 。http 响应消息也是一个数据块，若干行，换行 <code>\\r\\n</code></p>\n</blockquote>\n<ul>\n<li>状态行</li>\n<li>消息报头 / 响应头</li>\n<li>空行</li>\n<li>回复给客户端的数据<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbukhuicuhyicYsTZcW6psgfgypeoZgv1l7NiccyysSLvH0fksmWKCJ4C765QV1pvP7iaEN5rCdbNfWIGA/640?wx_fmt=jpeg\" alt=\"响应报文\" title=\"响应报文\" /></li>\n</ul>\n<h4 id=\"响应代码\"><a class=\"anchor\" href=\"#响应代码\">#</a> 响应代码</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 要回复 http 响应的数据块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cfd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 读一部分发一部分，发送数据底层使用 TCP 协议</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">//1，打开文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 判断文件是否打开成功</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果大于 0 没有问题，若不大于 0，程序异常失败</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 读数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token function\">send</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送数据给浏览器</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token comment\">// 减慢发送节奏</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 服务器休眠微妙</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 文件已经读完了</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token class-name\">off_t</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//sendfile 的偏移量，判断是否将数据发送完毕</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">lseek</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从 0 到某位的文件偏移量，即文件有多少个字节</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">lseek</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 再把指针移动到首部</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 系统函数，发送文件，linux 内核提供的 sendfile 也能减少拷贝次数</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 通信文件描述符，打开文件描述符，fd 对应的文件偏移量一般为空，</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">sendfile</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>offset<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 单独单文件出现发送不全，offset 会自动修改当前读取位置</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ret value: %d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> errno <span class=\"token operator\">==</span> EAGAIN<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not data ....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sendfile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭打开的文件</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"http状态码与处理\"><a class=\"anchor\" href=\"#http状态码与处理\">#</a> http 状态码与处理</h3>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbukhuicuhyicYsTZcW6psgfgyDGsfnjsia5regLdc4U260dCmtHFX3kHC2a0QXtf4qlJVQQ2mtuwHr2A/640?wx_fmt=jpeg\" alt=\"Http响应头)\" title=\"http响应头\" /></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcasecmp</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//strcasecmp 比较时不区分大小写</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbukhuicuhyicYsTZcW6psgfgyibzVtbyfdpFXq6V62tXicBm3tCpeWTks3A7vUlbOXCPk0x9pgFbMoefQ/640?wx_fmt=jpeg\" alt=\"202\" title=\"请求成功\" /></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sendHeadMsg</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getFileType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>st<span class=\"token punctuation\">.</span>st_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbukhuicuhyicYsTZcW6psgfgykolyIVJiaib0NvvSQ6PSfnbJNdJErnoLAA1V43lBQZGm5vyn6gsnuk3w/640?wx_fmt=jpeg\" alt=\"404\" title=\"请求失败\" /></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sendHeadMsg</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Not Found\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getFileType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"404.html\"</span><span class=\"token punctuation\">,</span> cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送 404 对应的 html 文件</span></pre></td></tr></table></figure><h2 id=\"sscanf-函数\"><a class=\"anchor\" href=\"#sscanf-函数\">#</a> sscanf 函数</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将参数 str 的字符串根据参数 format 字符串来转换并格式化数据，转换后的结果存在对应的参数内</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"具体功能\"><a class=\"anchor\" href=\"#具体功能\">#</a> 具体功能</h3>\n<ul>\n<li>根据格式从字符串中提取数据，如从字符串中取出 <code>整数</code> ， <code>浮点数</code> 和 <code>字符串</code> 等</li>\n<li>取 <code>指定长度</code> 的字符串</li>\n<li>取到 <code>指定字符为止</code> 的字符串</li>\n<li>取仅包含 <code>指定字符集的字符串</code></li>\n<li>取到 <code>指定字符串位置大的字符串</code></li>\n<li>可以使用正则表达式进行字符串拆分。正则表达式：通过一个公式字符串，取匹配特定格式的字符串，判断这个字符串是否满足条件。</li>\n</ul>\n<h2 id=\"正则表达式规则\"><a class=\"anchor\" href=\"#正则表达式规则\">#</a> 正则表达式规则</h2>\n<blockquote>\n<p>正则表达式使用的是贪心匹配方式，只要是匹配的字符没有结束，正则表达式就会一直匹配下去</p>\n</blockquote>\n<blockquote>\n<p>[1-9] : 匹配一个字符，这个字符在 <code>1-9</code>  范围内就满足条件</p>\n<p>[2-7] : 匹配一个字符，这个字符在 <code>2-7</code>  范围内就满足条件</p>\n<p>[a-z] : 匹配一个字符，这个字符在 <code>a-z</code>  范围内就满足条件</p>\n<p>[a,bc,d,e,f] : 匹配一个字符，这个字符是集合中 <code>任意一个</code> 就满足条件</p>\n<p>[1-9,f-x] : 匹配一个字符，这个字符 <code>是1-9</code> , 或者 <code>f-x</code>  集合中的任意一个就满足条件</p>\n<p><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1:1\">[1:1]</a></sup> : ^ 代表否认，匹配一个字符，这个字符只要 <code>不是1</code>  就满足条件</p>\n<p>[^ 2-8] : 匹配一个字符，这个字符只要 `不在 2-8`` 范围内就满足条件</p>\n<p>[^ a-f] : 匹配一个字符，这个字符只要 <code>不在a-f范围</code> 内就满足条件</p>\n<p>[^] : 匹配一个字符，这个字符只要 <code>不是空格</code> 就满足条件</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token string\">\"http://www.baidu.com:1234\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> protocol<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> host<span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> port<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//[^:] 从开始，到 ://  指针后移</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token string\">\"%[^:]://%[^:]:%[1-9]\"</span><span class=\"token punctuation\">,</span>protocol<span class=\"token punctuation\">,</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//% 从字符串中去子字符串</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456 abcdfg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%[^ ]\"</span><span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//buf 的值为 123456</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456abcdefgBCDEF\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%[1-9a-z]\"</span><span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//buf 的值：123456abcdefg</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456abcdefgBCDEF\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%[^A-Z]\"</span><span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//buf 的值: 123456abcdefg</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">char</span> method<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//get 或 post</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">char</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存储请求的静态资源，文件路径</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%[^ ] %[^ ]\"</span><span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用正则表达式记录空行来进行分割，取出请求方式，和请求路径</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method: %s,path: %s\\n\"</span><span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"具体代码\"><a class=\"anchor\" href=\"#具体代码\">#</a> 具体代码</h2>\n<h3 id=\"serverh\"><a class=\"anchor\" href=\"#serverh\">#</a> server.h</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 初始化监听的套接字</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">initListenFd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 启动 epoll</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">epollRun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 和客户端建立连接</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">acceptClient</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 接受 http 请求的消息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">recvHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 解析请求行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">parseRequestLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解析的数据，以及用于通信的文件描述符</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 发送文件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 发送响应头 (状态行 + 响应头) </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 通信文件描述符，状态码，状态描述，响应头，类型，长度</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sendHeadMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> descr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 根据文件后缀，得到文件类型</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">getFileType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 发送目录</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sendDir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dirName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 将十六进制转为 10 进制</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">hexToDec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 中文字符解码</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">decodeMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"serverc\"><a class=\"anchor\" href=\"#serverc\">#</a> server.c</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"server.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span>  <span class=\"token comment\">//socket 需要</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/epoll.h></span>  <span class=\"token comment\">//epoll 需要</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span>      <span class=\"token comment\">//NULL 头文件</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span>  <span class=\"token comment\">//fcntl</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span>  <span class=\"token comment\">//memcpy</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span>  <span class=\"token comment\">//errno</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;strings.h></span>  <span class=\"token comment\">//strcasecmp</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span>  <span class=\"token comment\">// 断言</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span>  <span class=\"token comment\">//usleep</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/sendfile.h></span>  <span class=\"token comment\">//sendfile</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;dirent.h></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctype.h></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 传参结构体</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">FDInfo</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">int</span> epfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token class-name\">pthread_t</span> tid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span>FDInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 传入端口</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">initListenFd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">//1，创建监听的 fd</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// AF_INET 基于 IPV4，0 流式协议中的 TCP 协议</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">int</span> lfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建失败</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">//2，设置端口复用</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">int</span> opt <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1 端口复用</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>opt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setsockopt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建失败</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">//3，绑定端口</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\taddr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span> <span class=\"token comment\">//IPV4 协议</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\taddr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将端口转为网络字节序</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\taddr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 本地所有 IP 地址</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 失败</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">//4，设置监听  一次性可以和多少客户端连接，内核最大 128，若给很大，内核会改为 128</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tret <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Init successful....\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 返回 fd</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">return</span> lfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">epollRun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lfd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\">//1，创建 epoll 实例</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token keyword\">int</span> epfd <span class=\"token operator\">=</span> <span class=\"token function\">epoll_create</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 参数大于 0 即可，没有实际意义</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>epfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"epoll_Create\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token comment\">// 2,lfd 上树</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span> ev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tev<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> lfd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指定监测的文件描述符</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tev<span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> EPOLLIN<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 检测是否有新连接</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">epoll_ctl</span><span class=\"token punctuation\">(</span>epfd<span class=\"token punctuation\">,</span> EPOLL_CTL_ADD<span class=\"token punctuation\">,</span> lfd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"epoll_ctl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token comment\">//printf(\"epoll_stl up open...!\\n\");</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token comment\">// 3, 检测，是一个持续的过程</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span> evs<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>evs<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 总长度 / 除以单个大小，得出个数</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">epoll_wait</span><span class=\"token punctuation\">(</span>epfd<span class=\"token punctuation\">,</span> evs<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 阻塞时间 - 1 没有事件触发，就一直阻塞</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token comment\">//printf(\"epoll_wait open...!\\n\");</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token comment\">// 取出</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> evs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">FDInfo</span><span class=\"token operator\">*</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">FDInfo</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">FDInfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\tinfo<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\tinfo<span class=\"token operator\">-></span>epfd <span class=\"token operator\">=</span> epfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t<span class=\"token comment\">// 判断是不是用于监听的</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> lfd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 建立新连接 accept 有连接就不会阻塞，建立连接，并将新的文件描述符添加到 epoll 当中</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//acceptClient(fd, epfd);</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t\t\t<span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>info<span class=\"token operator\">-></span>tid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> acceptClient<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 判断是接受接收端数据，数据为 http 请求的格式，</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//recvHttpRequest(fd, epfd);</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\t\t<span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>info<span class=\"token operator\">-></span>tid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> recvHttpRequest<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//TODO 线程退出</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">acceptClient</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">FDInfo</span><span class=\"token operator\">*</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">FDInfo</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t<span class=\"token comment\">//printf(\"start connection ....\\n\");</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token comment\">//1，建立连接</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token comment\">// 使用 epoll 的边沿模式</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token comment\">//2, 设置非阻塞</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> F_GETFL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\tflag <span class=\"token operator\">|=</span> O_NONBLOCK<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 按位或让其属性存在</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> F_SETFL<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加到 cfd 当中，F_SETFL 设置文件状态</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token comment\">//3,cfd 添加到 epoll 当中</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span> ev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\tev<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> cfd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指定监测的文件描述符</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\tev<span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> EPOLLIN <span class=\"token operator\">|</span> EPOLLET<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 检测是否有读事件，边沿模式</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t<span class=\"token comment\">// 添加到 epoll 当中</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">epoll_ctl</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>epfd<span class=\"token punctuation\">,</span> EPOLL_CTL_ADD<span class=\"token punctuation\">,</span> cfd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"epoll_ctl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recvMsg threadId : %ld\\n\"</span><span class=\"token punctuation\">,</span> info<span class=\"token operator\">-></span>tid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">recvHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">FDInfo</span><span class=\"token operator\">*</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">FDInfo</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv message....\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t<span class=\"token comment\">// 1，把用户所有数据先存到本地</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">4096</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 总</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t<span class=\"token keyword\">char</span> tmp<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 临时</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t<span class=\"token comment\">// 边缘模式，需要一次把所有数据全部读完</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//len 每次接受的数据长度，total 为总长度</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t<span class=\"token comment\">// 将请求的数据全部存入缓存区当中</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 接受客户端的请求数据</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t\t<span class=\"token comment\">//printf(\"recv while total\\n\");</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>total <span class=\"token operator\">+</span> len <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>buf <span class=\"token operator\">+</span> total<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 修改复制地址</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t\ttotal <span class=\"token operator\">+=</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t<span class=\"token comment\">//printf(\"total = %d\\n\", total);</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t<span class=\"token comment\">// 判断数据是否被接受完毕</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> errno <span class=\"token operator\">==</span> EAGAIN<span class=\"token punctuation\">)</span> <span class=\"token comment\">//len 等于 - 1 并且错误为 EAGAIN</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\t\t<span class=\"token comment\">//printf(\"analyse get request!\\n\");</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t\t<span class=\"token comment\">// 解析请求行，对，先处理 get 请求</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pt <span class=\"token operator\">=</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 遇到这两个字符 \\r\\n 从左往右搜到之后，就结束了</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> reqLen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pt <span class=\"token operator\">-</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到请求行的长度，结束的地址，减去起始的地址</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\t\tbuf<span class=\"token punctuation\">[</span>reqLen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//buf [reqLen-1] 是上面的最后一个字符</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\t\t<span class=\"token comment\">//printf(\"%s\\n\", buf);</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>\t\t<span class=\"token comment\">// GET /categories/ HTTP/1.1</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t\t<span class=\"token function\">parseRequestLine</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client closed!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t\t<span class=\"token comment\">// 客户端断开了连接，删除对应的文件描述符</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\t\t<span class=\"token function\">epoll_ctl</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>epfd<span class=\"token punctuation\">,</span> EPOLL_CTL_DEL<span class=\"token punctuation\">,</span> info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\t\t<span class=\"token comment\">//printf(\"recvHttpRequest error len = %d\\n\", len);</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recvMsg threadId : %ld\\n\"</span><span class=\"token punctuation\">,</span> info<span class=\"token operator\">-></span>tid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre></pre></td></tr><tr><td data-num=\"207\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">parseRequestLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cfd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>\t<span class=\"token comment\">//GET /categories/ HTTP/1.1</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>\t<span class=\"token comment\">// 解析请求行， get /xxx/1.jpg http1.1  </span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>\t<span class=\"token comment\">// 三部分：请求方式，请求资源，请求 http 协议的版本，数据之间有空格，</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>\t<span class=\"token comment\">//sscanf 对格式化的字符串进行拆分</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>\t<span class=\"token keyword\">char</span> method<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//get 或 post</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>\t<span class=\"token keyword\">char</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存储请求的静态资源，文件路径</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>\t<span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%[^ ] %[^ ]\"</span><span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用正则表达式记录空行来进行分割，取出请求方式，和请求路径</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method: %s,path: %s\\n\"</span><span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcasecmp</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//strcasecmp 比较时不区分大小写</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>\t\t<span class=\"token comment\">// 非 get 请求不处理</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"222\"></td><td><pre>\t<span class=\"token function\">decodeMsg</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 避免中文的编码问题 将请求的路径转码 linux 会转成 utf8</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>\t<span class=\"token comment\">// 处理客户端请求的静态资源 (目录或文件)</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> file <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 判断是不是根目录</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>\t\tfile <span class=\"token operator\">=</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>\t\tfile <span class=\"token operator\">=</span> path <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指针 + 1 把开始的 / 去掉吧</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>\t<span class=\"token comment\">// 判断 file 属性，是文件还是目录</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//file 文件属性，同时将信息传入 st 保存了文件的大小</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>\t\t<span class=\"token comment\">// 文件不存在  -- 回复 404</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>\t\t<span class=\"token function\">sendHeadMsg</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Not Found\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getFileType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>\t\t<span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"404.html\"</span><span class=\"token punctuation\">,</span> cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送 404 对应的 html 文件</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>\t<span class=\"token comment\">// 判断文件类型</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">S_ISDIR</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span>st_mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果时目录返回 1，不是返回 0</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>\t\t<span class=\"token comment\">// 把这个目录中的内容发送给客户端</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>\t\t<span class=\"token function\">sendHeadMsg</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getFileType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>st<span class=\"token punctuation\">.</span>st_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>\t\t<span class=\"token function\">sendDir</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>\t\t<span class=\"token comment\">// 把这个文件的内容发给客户端</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>\t\t<span class=\"token function\">sendHeadMsg</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getFileType</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>st<span class=\"token punctuation\">.</span>st_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>\t\t<span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre></pre></td></tr><tr><td data-num=\"262\"></td><td><pre><span class=\"token comment\">// 要回复 http 响应的数据块</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cfd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>\t<span class=\"token comment\">// 读一部分发一部分，发送数据底层使用 TCP 协议</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>\t<span class=\"token comment\">//1，打开文件</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>\t<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>\t<span class=\"token comment\">// 判断文件是否打开成功</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果大于 0 没有问题，若不大于 0，程序异常失败</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre></pre></td></tr><tr><td data-num=\"271\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>\t<span class=\"token comment\">// 读数据</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>\t\t\t<span class=\"token function\">send</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送数据给浏览器</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>\t\t\t<span class=\"token comment\">// 减慢发送节奏</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>\t\t\t<span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 服务器休眠微妙</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 文件已经读完了</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>\t<span class=\"token class-name\">off_t</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//sendfile 的偏移量，判断是否将数据发送完毕</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>\t<span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">lseek</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从 0 到某位的文件偏移量，即文件有多少个字节</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>\t<span class=\"token function\">lseek</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 再把指针移动到首部</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>\t<span class=\"token comment\">// 系统函数，发送文件，linux 内核提供的 sendfile 也能减少拷贝次数</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>\t<span class=\"token comment\">// 通信文件描述符，打开文件描述符，fd 对应的文件偏移量一般为空，</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">sendfile</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>offset<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 单独单文件出现发送不全，offset 会自动修改当前读取位置</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ret value: %d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> errno <span class=\"token operator\">==</span> EAGAIN<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not data ....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sendfile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre></pre></td></tr><tr><td data-num=\"309\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭打开的文件</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre></pre></td></tr><tr><td data-num=\"314\"></td><td><pre><span class=\"token comment\">// 发送文件之前先调用</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sendHeadMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> descr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>\t<span class=\"token comment\">// 状态行</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre>\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">4096</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http/1.1 %d %s\\r\\n\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">,</span> descr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 换行对应的 \\r\\n</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>\t<span class=\"token comment\">// 响应头</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre>\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>buf <span class=\"token operator\">+</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"content-type: %s\\r\\n\"</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//buf + strlen (buf) 指针后移</span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>buf <span class=\"token operator\">+</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"content-length: %d\\r\\n\\r\\n\"</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最后一行是空行</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>\t<span class=\"token function\">send</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"326\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"327\"></td><td><pre></pre></td></tr><tr><td data-num=\"328\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">getFileType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"329\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"330\"></td><td><pre>\t<span class=\"token comment\">//a.jpg,a.mp4,a.html</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre>\t<span class=\"token comment\">// 从右向左查找 \".\" 字符，如不存在返回 NULL</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dot <span class=\"token operator\">=</span> <span class=\"token function\">strrchr</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//strrchr 从右往左找., 把。到右边的后缀放入 name</span></pre></td></tr><tr><td data-num=\"333\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dot <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"text/plain; charset=utf-8\"</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 纯文本</span></pre></td></tr><tr><td data-num=\"335\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".html\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".htm\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"336\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"text/html; charset=utf-8\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".jpg\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".jpeg\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"image/jpeg\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"339\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".gif\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"340\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"image/gif\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".png\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"342\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".css\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"344\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"text/css\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"345\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".au\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"346\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"audio/basic\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"347\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".wav\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"348\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"audio/wav\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"349\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".avi\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"video/x-msvideo\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"351\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".mov\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".qt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"352\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"video/quicktime\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"353\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".mpeg\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".mpe\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"354\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"video/mpeg\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"355\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".vrml\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".wrl\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"356\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"model/vrml\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"357\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".midi\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".mid\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"358\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"audio/midi\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"359\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".mp3\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"360\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"audio/mpeg\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"361\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".ogg\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"362\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"application/ogg\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"363\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>dot<span class=\"token punctuation\">,</span> <span class=\"token string\">\".pac\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"364\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"application/x-ns-proxy-autoconfig\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"365\"></td><td><pre></pre></td></tr><tr><td data-num=\"366\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"text/plain; charset=utf-8\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"367\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"368\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"369\"></td><td><pre>&lt;html></pre></td></tr><tr><td data-num=\"370\"></td><td><pre>\t&lt;head></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>\t\t&lt;title>test&lt;/title></pre></td></tr><tr><td data-num=\"372\"></td><td><pre>\t&lt;/head></pre></td></tr><tr><td data-num=\"373\"></td><td><pre>&lt;body></pre></td></tr><tr><td data-num=\"374\"></td><td><pre>\t&lt;table></pre></td></tr><tr><td data-num=\"375\"></td><td><pre>\t\t&lt;tr></pre></td></tr><tr><td data-num=\"376\"></td><td><pre>\t\t\t&lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"377\"></td><td><pre>\t\t\t&lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"378\"></td><td><pre>\t\t&lt;/tr></pre></td></tr><tr><td data-num=\"379\"></td><td><pre>\t\t&lt;tr></pre></td></tr><tr><td data-num=\"380\"></td><td><pre>\t\t\t&lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"381\"></td><td><pre>\t\t\t&lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"382\"></td><td><pre>\t\t&lt;/tr></pre></td></tr><tr><td data-num=\"383\"></td><td><pre>\t&lt;/table></pre></td></tr><tr><td data-num=\"384\"></td><td><pre>&lt;/body></pre></td></tr><tr><td data-num=\"385\"></td><td><pre>&lt;/html></pre></td></tr><tr><td data-num=\"386\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"387\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sendDir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dirName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cfd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"388\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"389\"></td><td><pre>\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">4096</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"390\"></td><td><pre>\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;html>&lt;head>&lt;title>%s&lt;/title>&lt;/head>&lt;body>&lt;table>\"</span><span class=\"token punctuation\">,</span> dirName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"391\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">dirent</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> namelist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"392\"></td><td><pre>\t<span class=\"token keyword\">int</span> name <span class=\"token operator\">=</span> <span class=\"token function\">scandir</span><span class=\"token punctuation\">(</span>dirName<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>namelist<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> alphasort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回目录下有多少个文件</span></pre></td></tr><tr><td data-num=\"393\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> name<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"394\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"395\"></td><td><pre>\t\t<span class=\"token comment\">// 取出文件名 namelist 指向一个指针数组 struct dirent* tmp []</span></pre></td></tr><tr><td data-num=\"396\"></td><td><pre>\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name <span class=\"token operator\">=</span> namelist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>d_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"397\"></td><td><pre>\t\t<span class=\"token comment\">// 判断文件是不是目录</span></pre></td></tr><tr><td data-num=\"398\"></td><td><pre>\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"399\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> subPath<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"400\"></td><td><pre>\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>subPath<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s/%s\"</span><span class=\"token punctuation\">,</span> dirName<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"401\"></td><td><pre>\t\t<span class=\"token comment\">// 得到文件属性</span></pre></td></tr><tr><td data-num=\"402\"></td><td><pre>\t\t<span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>subPath<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//name 只是文件名称，需要拼接相对路径 </span></pre></td></tr><tr><td data-num=\"403\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">S_ISDIR</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span>st_mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 是不是目录</span></pre></td></tr><tr><td data-num=\"404\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"405\"></td><td><pre></pre></td></tr><tr><td data-num=\"406\"></td><td><pre>\t\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>buf <span class=\"token operator\">+</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"407\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"&lt;tr>&lt;td>&lt;a href=\\\"%s/\\\">%s&lt;/a>&lt;/td>&lt;td>%ld&lt;/td>&lt;/tr>\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"408\"></td><td><pre>\t\t\t\tname<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>st_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"409\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"410\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"411\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"412\"></td><td><pre>\t\t\t<span class=\"token comment\">// 文件 a 标签不需要加斜杠</span></pre></td></tr><tr><td data-num=\"413\"></td><td><pre>\t\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>buf <span class=\"token operator\">+</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"414\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"&lt;tr>&lt;td>&lt;a href=\\\"%s\\\">%s&lt;/a>&lt;/td>&lt;td>%ld&lt;/td>&lt;/tr>\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"415\"></td><td><pre>\t\t\t\tname<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>st_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"416\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"417\"></td><td><pre></pre></td></tr><tr><td data-num=\"418\"></td><td><pre>\t\t<span class=\"token function\">send</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"419\"></td><td><pre>\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"420\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>namelist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"421\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"422\"></td><td><pre>\t<span class=\"token comment\">// 把 html 结束的标签发送给字符串</span></pre></td></tr><tr><td data-num=\"423\"></td><td><pre>\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;/table>&lt;/body>&lt;/html>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"424\"></td><td><pre>\t<span class=\"token function\">send</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"425\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>namelist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"426\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"427\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"428\"></td><td><pre></pre></td></tr><tr><td data-num=\"429\"></td><td><pre><span class=\"token comment\">// 将字符转换为整形数</span></pre></td></tr><tr><td data-num=\"430\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">hexToDec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"431\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"432\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"433\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> c <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"434\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token char\">'a'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'f'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"435\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> c <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//+10 进位</span></pre></td></tr><tr><td data-num=\"436\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'F'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"437\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> c <span class=\"token operator\">-</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"438\"></td><td><pre></pre></td></tr><tr><td data-num=\"439\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"440\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"441\"></td><td><pre></pre></td></tr><tr><td data-num=\"442\"></td><td><pre><span class=\"token comment\">// 解码</span></pre></td></tr><tr><td data-num=\"443\"></td><td><pre><span class=\"token comment\">//to 存储解码之后的数据，传出参数，from 被解码的数据，传入参数</span></pre></td></tr><tr><td data-num=\"444\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">decodeMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> from<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"445\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"446\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>from <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>to<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>from<span class=\"token punctuation\">)</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"447\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"448\"></td><td><pre>\t\t<span class=\"token comment\">//isxdigit -> 判断字符是不是 16 进制格式，取值在 0-f</span></pre></td></tr><tr><td data-num=\"449\"></td><td><pre>\t\t<span class=\"token comment\">// Linux%E5%86%85%E6%A0%B8.jpg</span></pre></td></tr><tr><td data-num=\"450\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'%'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isxdigit</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isxdigit</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"451\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"452\"></td><td><pre>\t\t\t<span class=\"token comment\">// 将 16 进制的数 -> 十进制 将这个数值赋值给了字符 int -> char</span></pre></td></tr><tr><td data-num=\"453\"></td><td><pre>\t\t\t<span class=\"token comment\">// B2 == 178</span></pre></td></tr><tr><td data-num=\"454\"></td><td><pre>\t\t\t<span class=\"token comment\">// 将 3 个字符，变成了一个字符，这个字符就是原始数据</span></pre></td></tr><tr><td data-num=\"455\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span>to <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">hexToDec</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">16</span> <span class=\"token operator\">+</span> <span class=\"token function\">hexToDec</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将两个数转为十进制</span></pre></td></tr><tr><td data-num=\"456\"></td><td><pre></pre></td></tr><tr><td data-num=\"457\"></td><td><pre>\t\t\t<span class=\"token comment\">// 跳过 from [1] 和 from [2] 因此在当前循环中已经处理过了</span></pre></td></tr><tr><td data-num=\"458\"></td><td><pre>\t\t\tfrom <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调到下一个 %</span></pre></td></tr><tr><td data-num=\"459\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"460\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"461\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"462\"></td><td><pre>\t\t\t<span class=\"token comment\">// 字符拷贝，赋值</span></pre></td></tr><tr><td data-num=\"463\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span>to <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>from<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"464\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"465\"></td><td><pre></pre></td></tr><tr><td data-num=\"466\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"467\"></td><td><pre>\t<span class=\"token operator\">*</span>to <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"468\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"mainc\"><a class=\"anchor\" href=\"#mainc\">#</a> main.c</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"server.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 初始化监听的套接字</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//argc 输入参数的个数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//argv [0] 可执行程序的名称 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//argv [1] 传入的第一个参数， port</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//argv [2] 传入的第二个参数   path</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./a.out port path\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 切换服务器的根目录，将根目录当前目录切换到其它目录</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 初始化监听的套接字 0~65535 端口 尽量不 5000 以下，可能会被占用</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"绑定的端口:%d\\n\"</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">int</span> lfd <span class=\"token operator\">=</span> <span class=\"token function\">initListenFd</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 启动服务器程序 epoll</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">epollRun</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"资料\"><a class=\"anchor\" href=\"#资料\">#</a> 资料</h2>\n<ul>\n<li>图解 HTTP 上野宣 / 于均良 译</li>\n<li>爱编程的大丙《高并发 Reactor 服务器》</li>\n<li>Github 地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZvcnlvdW9zL2NwcHNlcnZlci1saW51eA==\">https://github.com/foryouos/cppserver-linux</span></li>\n</ul>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL2NwcC9saW51eC8/dmlldz1tc3ZjLTE3MA==\">https://learn.microsoft.com/zh-cn/cpp/linux/?view=msvc-170</span> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a> <a href=\"#fnref1:1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "计算机科学",
                "C++",
                "C和C++项目",
                "Linux",
                "C++",
                "计算机科学",
                "后台服务器"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Linux/LinuxIO%E5%A4%9A%E8%B7%AF%E8%BD%AC%E6%8E%A5/",
            "url": "https://www.blog.foryouos.cn/computer-science/Linux/LinuxIO%E5%A4%9A%E8%B7%AF%E8%BD%AC%E6%8E%A5/",
            "title": "linux IO多路复用",
            "date_published": "2023-06-18T11:26:43.000Z",
            "content_html": "<h1 id=\"io多路复用转接\"><a class=\"anchor\" href=\"#io多路复用转接\">#</a> I/O 多路复用 (转接)</h1>\n<ul>\n<li>处理并发，</li>\n<li>多进程 / 多线程并发， <code>accept</code>  检测 <code>客户端连接</code> 请求和子线程和建立连接的客户端 <code>通信</code> ，都会 <code>发送阻塞</code> ，有新客户端 <code>连接</code>  / 有 <code>数据</code> 到达才会 <code>解除阻塞</code> 。</li>\n<li>IO 多路转接并发</li>\n</ul>\n<blockquote>\n<p>委托 <code>内核</code> 帮助 <code>检测文件描述符</code> 的 <code>状态</code>  ( <code>通信</code> 和 <code>监听</code> 两类)，<br />\n在通信过程中监听 (连接请求信息) 和通信 (读和写) 都会放到 <code>读写缓冲区</code> 中，当 <code>调用accept</code>  就会检测 <code>监听中</code> 是否有连接请求，如果没有则会 <code>一直阻塞</code> 。通信的读写缓冲区也是阻塞的。当只有 <code>一个线程</code> 时， <code>监听和两个通信</code> 都会处于阻塞状态，相互冲突，<br />\n基于内核可以同时监听多个文件描述符的读写缓冲区和 <code>是否有剩余空间</code> ，当内核帮我们完成所有 <code>读写缓冲区</code> ，则 <code>不会再进入阻塞</code> 。文件描述符是 <code>线性顺序执行</code> ，若同时则仍需要多线程。<br />\n <code>select</code>   跨平台<br />\n <code>poll</code>  和 <code>epoll</code>  用于 <code>linux</code>  平台<br />\n IO 多路复用技术的最大优势就是系统 <code>开销小</code> ，系统 <code>不</code> 必创建 <code>进程/线程</code> ，也 <code>不必</code> 维护这些进程 / 线程，从而 <code>较少</code> 系统的 <code>开销</code> 。</p>\n</blockquote>\n<h2 id=\"select\"><a class=\"anchor\" href=\"#select\">#</a> select</h2>\n<blockquote>\n<p><code>跨平台</code> 通过此函数 <code>委托内核</code> 检测若干个文件描述符状态 ( <code>读写缓存区状态</code> )<br />\n 委托检测的文件描述符被遍历检测完毕之后，已就绪的满足条件的文件描述符会通过 <code>select()</code>  参数传出，根据参数分情况依次处理.<br />\n <code>fd_set</code>  类型标识文件描述符集合，类型有 128 个字节， <code>1024个标志位</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>fd_set<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span> 字节 <span class=\"token operator\">*</span> <span class=\"token number\">8</span> <span class=\"token operator\">=</span> <span class=\"token number\">1024</span> bit      <span class=\"token comment\">// int [32]</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/select.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 不用的微秒一定要初始化</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    time_t      tv_sec<span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* seconds */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    suseconds_t tv_usec<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* microseconds */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nfds<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>readfds<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>writefds<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           fd_set <span class=\"token operator\">*</span>exceptfds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token operator\">*</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>nfds</code>  : 委托内核检测的 <code>三个集合</code> 中 <code>最大</code> 文件描述符 <code> +1</code>  , 在 <code>Windows</code>  中此参数无效为 <code>-1</code> <br />\n <code>传入传出参数</code></li>\n<li><code>readfds</code> : 内核检测此集合文件描述符对应 <code>读缓冲区 </code></li>\n<li><code>writefds</code> : 对应 <code>写</code> 缓存区 <code> 不</code> 需要可以指定 <code>NULL</code> <br />\n* <code> exceptfds</code> : 检测是否有 <code>异常状态</code> ，  <code>不</code> 需要可以传入 <code>NULL</code> <br />\n <code>超时参数</code> <br />\n * <code> timeout</code> : <code>超时时长，</code> 用来强制解除 <code>select()</code>  函数 <code>阻塞</code>\n<ul>\n<li>NULL ：函数检测不到就绪文件就一直阻塞</li>\n<li>等待固定时间：指定时间后强制解除阻塞，函数返回 0</li>\n<li>不等待：函数不阻塞，参数对应结构体阻塞为 0<br />\n 函数返回值</li>\n</ul>\n</li>\n<li><code>大于0 </code> ：成功，返回集合中 <code>已就绪</code> 文件描述符总数</li>\n<li><code>等于-1</code> ：函数调用失败</li>\n<li><code>等于0</code> : ：超时，没有检测到就绪文件描述符</li>\n</ul>\n<h3 id=\"fd_set类型参数\"><a class=\"anchor\" href=\"#fd_set类型参数\">#</a>  <code>fd_set</code>  类型参数</h3>\n<blockquote>\n<p>如果 <code>fd_set</code>  标志为 <code>0不</code> 检测此文件描述符状态，为 <code>1检测</code> 文件描述符，内核在读集合的过程中，若被检测的文件描述符没有数据，修改此文件描述符对应标志位为 0，若有数据，标志位不变，仍为 1。当 <code>select函数</code> 被解除阻塞之后，被内核修改过的读集合通过参数传出，此时集合中只要标志位 <code>为1</code> ，那么它对应的文件描述符肯定就是 <code>就绪的</code> 。基于此文件描述符和客户端建立新连接或者通信。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将文件描述符 fd 从集合 set 中删除，将 fd 对应的标志位设置为 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FD_CLR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span>fd_set<span class=\"token operator\">*</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 判断文件描述符 fd 是否在 set 集合中， 读 fd 对应的标志位是 0 还是 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span>fd_set <span class=\"token operator\">*</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 将文件描述符 fd 添加到 set 集合中  ，将 fd 对应的标志位设置为 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span>fd_set<span class=\"token operator\">*</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 将 set 集合中，所有文件描述符对应的标志位设置为 0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span>fd_Set<span class=\"token operator\">*</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"并发处理流程\"><a class=\"anchor\" href=\"#并发处理流程\">#</a> 并发处理流程</h3>\n<ul>\n<li>创建监听套接字  <code>fd=socket</code></li>\n<li><code>bind</code>  绑定本地 <code>IP</code>  和 <code>端口</code></li>\n<li><code>listen</code>  设置套接字 <code>监听</code></li>\n<li>创建文件描述符集合 <code>fd_set</code> ，用于存储需要检测 <code>事件</code> 的所有 <code>文件描述符</code>\n<ul>\n<li><code>FD_ZERO</code>  初始化</li>\n<li><code>FD_SET </code> 将监听的文件描述符放入 <code>检测</code> 的 <code>读集合</code> 中</li>\n</ul>\n</li>\n<li>循环调用 <code>select</code> , 对所有文件描述符进行检测</li>\n<li><code>selec</code> t 解除阻塞返回，得到内核传出满足条件的文件描述符集合\n<ul>\n<li>通过 <code>FD_ISSET</code>  判断集合中标志位是否为 <code>1</code></li>\n<li>若是监听的文件描述符调用 <code>accept</code>  和客户端 <code>建立连接</code> ，将得到的通信的 <code>文件描述符</code> ，通过 <code>FD_SET</code>  放入到 <code>检测集合中</code></li>\n<li>若果是 <code>通信</code> 的文件描述符，调用通信函数和客户端通信。如果客户端和服务器断开了连接，使用 <code>FD_CLR</code>  将文件描述符从检测集合中删除，若果没有断开连接，正常通信即可。</li>\n</ul>\n</li>\n<li>重复上一步</li>\n</ul>\n<h3 id=\"代码测试\"><a class=\"anchor\" href=\"#代码测试\">#</a> 代码测试</h3>\n<h4 id=\"服务端\"><a class=\"anchor\" href=\"#服务端\">#</a> 服务端</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctype.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/select.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/select.h></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 添加互斥锁</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">pthread_mutex_t</span> mutex<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 针对读，和最大设置互斥</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 存储文件描述符 传递给子线程的数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">fdinfo</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 文件描述符可监听 / 读写</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>maxfd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大文件描述符</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    fd_set<span class=\"token operator\">*</span> rdset<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 文件读地址</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span>FDInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 子进程函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">acceptConn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程线程ID:%ld\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    FDInfo<span class=\"token operator\">*</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FDInfo<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 接受连接请求，此调用不阻塞</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> cliaddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> clilen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cliaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>cliaddr<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>clilen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 得到有效的文件描述符</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 通信的文件描述符添加到读集合</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接的客户端端口为:%d\\n\"</span><span class=\"token punctuation\">,</span>cliaddr<span class=\"token punctuation\">.</span>sin_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 在下一轮 select 检测的时候，就能得到缓冲区的状态</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span>info<span class=\"token operator\">-></span>rdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 添加文件描述符</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 重置最大文件描述符</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token operator\">*</span>info<span class=\"token operator\">-></span>maxfd <span class=\"token operator\">=</span> cfd <span class=\"token operator\">></span> <span class=\"token operator\">*</span>info<span class=\"token operator\">-></span>maxfd <span class=\"token operator\">?</span> cfd<span class=\"token operator\">:</span><span class=\"token operator\">*</span>info<span class=\"token operator\">-></span>maxfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 发送与接受数据子线程</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">communication</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程线程ID:%ld\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    FDInfo<span class=\"token operator\">*</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FDInfo<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 接受数据</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">// 一次只能接受 10 个字节，客户端一次发送 100 个字节</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">// 一次接受不玩，文件描述符对应缓冲区还有数据</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 下一轮 select 检测的时候，内核还会标记这个文件描述符再读一吃</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 循环一直次序，直到缓冲区数据被读完为止</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端关闭了连接....\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token comment\">// 将检测的文件描述符从读集合中删除</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token function\">FD_CLR</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">,</span>info<span class=\"token operator\">-></span>rdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read buf = %s\\n\"</span><span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">toupper</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After buf = %s\\n\"</span><span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token comment\">// 收到了数据</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">// 发送数据</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"send error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token comment\">// 异常</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token comment\">// 初始化互斥锁</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token function\">pthread_mutex_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token comment\">//1，创建监听</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">int</span> lfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span>SOCK_STREAM<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token comment\">//2，绑定端口与 IP</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//htons 将主机字节序转换为网络字节序</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token comment\">// 3，设置监听</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\">// 将监听的 fd 状态委托给内核</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">int</span> maxfd <span class=\"token operator\">=</span> lfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token comment\">// 初始化检测的读集合</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    fd_set rdset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    fd_set rdtemp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token comment\">// 清零</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token comment\">// 将监听的 lfd 舍之道检测的读集合中</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rdset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token comment\">// 通过 select 委托内核检测读集合中的文件描述符，检测 read 缓冲区有没有数据</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token comment\">// 若有数据 select 解除阻塞返回</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token comment\">// 应该让内核持续检测</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token comment\">// 默认阻塞，rdset 中是委托内核检测中的所有文件描述符</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        rdtemp <span class=\"token operator\">=</span> rdset<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 防止 select 对内核数据的修改</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>maxfd<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rdtemp<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token comment\">//rdset 中的数据被内核改写了，只保留了发送变化的文件标志位为 1，没变化的改为 0</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token comment\">// 只要 rdset 中 fd 对应的标志位为 1，-> 缓存区有数据</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token comment\">// 判断有没有新连接，是不是在监听的读集合里</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rdtemp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 判断文件描述符属于哪一类</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token comment\">// 创建子线程</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            <span class=\"token class-name\">pthread_t</span> tid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            FDInfo<span class=\"token operator\">*</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FDInfo<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>FDInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            info<span class=\"token operator\">-></span>fd<span class=\"token operator\">=</span>lfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            info<span class=\"token operator\">-></span>maxfd <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>maxfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            info<span class=\"token operator\">-></span>rdset <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>rdset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tid<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>acceptConn<span class=\"token punctuation\">,</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            <span class=\"token function\">pthread_detach</span><span class=\"token punctuation\">(</span>tid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 线程脱离</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token comment\">// 没有新连接，通信</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>maxfd<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            <span class=\"token comment\">// 判断从监听的文件描述符之后到 maxfd 这个范围内的文件描述符是否有缓冲区数据</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>lfd <span class=\"token operator\">&amp;&amp;</span><span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rdtemp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 判断是不是通信文件描述符</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>                <span class=\"token comment\">// 创建子线程接受数据并发送数据</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>                <span class=\"token comment\">// 创建子线程</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>                <span class=\"token class-name\">pthread_t</span> tid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>                FDInfo<span class=\"token operator\">*</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FDInfo<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>FDInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>                info<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>                info<span class=\"token operator\">-></span>rdset <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>rdset<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传递过去的原始读集合</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>                <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tid<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>communication<span class=\"token punctuation\">,</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"168\"></td><td><pre>                <span class=\"token function\">pthread_detach</span><span class=\"token punctuation\">(</span>tid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 线程脱离 </span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    <span class=\"token comment\">// 销毁互斥锁</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token function\">pthread_mutex_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"客户端\"><a class=\"anchor\" href=\"#客户端\">#</a> 客户端</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 1. 创建用于通信的套接字</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 2. 连接服务器</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// ipv4</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 服务器监听的端口，字节序应该是网络字节序</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 通信</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 读数据</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">char</span> recvBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 写数据</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// sprintf(recvBuf, \"data: %d\\n\", i++);</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入数据:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>recvBuf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>recvBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> recvBuf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>recvBuf<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 如果客户端没有发送数据，默认阻塞</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> recvBuf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>recvBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv buf: %s\\n\"</span><span class=\"token punctuation\">,</span> recvBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 释放资源</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"poll\"><a class=\"anchor\" href=\"#poll\">#</a> poll</h2>\n<blockquote>\n<p>内核对应的文件描述符也是以 <code>线性</code> 的方式进行 <code>轮训</code> ，根据 <code>描述符状态</code> 进行处理， <code>poll</code>  和 <code>select</code>  检测文件描述符集合会在检测过程中 <code>频繁</code> 进行 <code>用户区</code> 和 <code>内核</code> 去的 <code>拷贝</code> ，会随着文件描述符的增加而 <code>线性增大</code> ，从而 <code>效率降低</code> 。 <code>select</code>  检测文件描述符上限 <code>1024</code> ， <code>poll没有</code> 最大文件描述符限制</p>\n</blockquote>\n<h3 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;poll.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 每个委托 poll 检测的 fd 都对应这样一个结构体</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pollfd</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span>   fd<span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* 委托内核检测的文件描述符 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">short</span> events<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* 委托内核检测文件描述符的什么事件 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">short</span> revents<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 文件描述符实际发生的事件 -> 传出 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pollfd</span> myfd<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pollfd</span> <span class=\"token operator\">*</span>fds<span class=\"token punctuation\">,</span> <span class=\"token class-name\">nfds_t</span> nfds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h3>\n<ul>\n<li><code>fds</code> :  <code>struct pollfd</code>  类型 <code>数组</code></li>\n<li><code>events </code> 和 ``events` 可选参数</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtkoJ8WITtTXibjkZ6lCabK2Yk4LaorTq6FAuF2e96QpOw4uYzUaPWpJhDCkibictkg1wKK03x7WfYUw/640?wx_fmt=png\" alt=\"event参数\" title=\"event参数\" /></p>\n<ul>\n<li>\n<p>nfds ：nfds 参数数组中最后一个有效元素的下标 + 1</p>\n</li>\n<li>\n<p>timeout : 指定 poll 函数的阻塞时长</p>\n</li>\n<li>\n<p>失败返回 - 1，成功返回一个大于 0 的整数，表示检测的集合中已就绪的文件描述符的总个数</p>\n</li>\n</ul>\n<h3 id=\"代码服务端\"><a class=\"anchor\" href=\"#代码服务端\">#</a> 代码服务端</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/select.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;poll.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 1. 创建套接字</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> lfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 2. 绑定 ip, port</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 3. 监听</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 4. 等待连接 -> 循环</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 检测 -> 读缓冲区，委托内核去处理</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 数据初始化，创建自定义的文件描述符集</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">pollfd</span> fds<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">1024</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        fds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 初始化为 - 1</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        fds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> POLLIN<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 数据可读事件</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    fds<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> lfd<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">int</span> maxfd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// 委托内核检测</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        ret <span class=\"token operator\">=</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span>fds<span class=\"token punctuation\">,</span> maxfd<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// 检测的度缓冲区有变化</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">// 有新连接</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fds<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>revents <span class=\"token operator\">&amp;&amp;</span> POLLIN<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 接收连接请求</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> sockcli<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sockcli<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token comment\">// 这个 accept 是不会阻塞的</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">int</span> connfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>sockcli<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">// 委托内核检测 connfd 的读缓冲区</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">1024</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 选择一个存储</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                    fds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> connfd<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 连接的文件描述符</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            maxfd <span class=\"token operator\">=</span> i <span class=\"token operator\">></span> maxfd <span class=\"token operator\">?</span> i <span class=\"token operator\">:</span> maxfd<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 更新最大值</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">// 通信，有客户端发送数据过来</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>maxfd<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token comment\">// 如果在集合中，说明读缓冲区有数据</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>revents <span class=\"token operator\">&amp;</span> POLLIN<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对方已经关闭了连接...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                    fds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端say: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"epoll\"><a class=\"anchor\" href=\"#epoll\">#</a>  <code>epoll</code></h2>\n<blockquote>\n<p>全称  <code>eventpol</code> l，是 <code>linux</code>  内核实现 <code>IO多路转接/复用</code>  的一个实现。IO 多路转接在一个操作里 <code>同时</code> 监听 <code>多个输入输出源</code> ，在其中一个或多个输入输出源可用的时候返回，然后对其进行读写操作。</p>\n<p><code>select / pol</code>  相对 <code>低效</code> 的原因之一是 <code>添加/维护</code> 待检测任务和阻塞进程 / 线程 两个步骤合二为一，在每次调用 select 都需要这两步，然而在大多数应用场景中，需要监视的 <code>socket个数</code> 相对 <code>固定</code> ， <code>epoll</code>  将两个操作分开， <code>epoll_ctl</code>  维护 <code>等待队列</code> ，在调用 <code>epoll_wait</code>  阻塞 <code>进程</code> ，进而提高 <code>epoll的效率</code></p>\n</blockquote>\n<ul>\n<li><code>epoll</code>  基于 <code>红黑树</code> 来管理 <code>待检测集合</code> 。</li>\n<li><code>epoll</code>  基于 <code>回调机制</code> ，而 <code>select`和`poll`每次都会`线性</code> 扫描整个待检测集合，集合越大速度越慢。</li>\n<li>需要对 select 和 poll 的返回的 <code>集合进行判断</code> 才能知道那些文件描述符是 <code>就绪的</code> ，通过 <code>epoll</code>  可以 <code>直接</code> 得到已 <code>就绪</code> 的 <code>文件描述符集</code> 合，无需再次检测。</li>\n</ul>\n<h3 id=\"操作函数\"><a class=\"anchor\" href=\"#操作函数\">#</a> 操作函数</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/epoll.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 创建</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建 epoll 实例，通过一个红黑树管理待检测集合，在 lnnux 内核 2.6.8 以后，只需指定大于 0 的数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">epoll_create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 返回值 -1 ：失败。 成功：返回一个有效的文件描述符，通过此刻访问创建的 epoll 实例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 管理</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 联合体，多个变量共用同一块内存        </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">union</span> epoll_data <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> \t<span class=\"token keyword\">void</span>        <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span>          fd<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 通常情况下使用这个成员，和 epoll_ctl 的第三个参数相同即可</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token class-name\">uint32_t</span>     u32<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token class-name\">uint64_t</span>     u64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token class-name\">epoll_data_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token class-name\">uint32_t</span>     events<span class=\"token punctuation\">;</span>      <span class=\"token comment\">/* Epoll events */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token class-name\">epoll_data_t</span> data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用户数据变量，使用 fd 值，用于存储待检测的文件描述符值，在调用 epoll_wait 函数时值被传出</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//evetns：epoll 事件，修饰第三个 fd 对应文件描述符，检测指定对应的文件描述符的什么时间</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//\tEPOLLIN：读事件，接收数据，检测读缓冲区，如果有数据该文件描述符就绪</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//\tEPOLLOUT：写事件，发送数据，检测写缓冲区，如果可写该文件描述符就绪</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//\tEPOLLERR：异常事件</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//  EPOLLET ：设置水平或边缘模式</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 管理红黑树上的文件描述符 (添加，修改，删除)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">epoll_ctl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> epfd<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> op<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">epool_event</span><span class=\"token operator\">*</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">//epfd: epoll_create 函数的返回值</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//op ：枚举值，控制通过该函数执行什么操作</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//      EPOLL_CTL_ADD：往 epoll 模型中添加新的节点</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//      EPOLL_CTL_MOD：修改 epoll 模型中已经存在的节点</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//      EPOLL_CTL_DEL：删除 epoll 模型中的指定的节点</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//fd ： 文件描述符，即要添加 / 修改 / 删除的文件描述符</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 成功 返回 0 </span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 失败 返回 - 1</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 检测 epoll 树中是否有就绪的文件描述符</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">epoll_wait</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> epfd<span class=\"token punctuation\">,</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span> <span class=\"token operator\">*</span>event<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> maxevents<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//epfd : epoll_ceate 函数返回值</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//events , 传出参数，结构体数组地址，存储已就绪的文件描述符信息</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">//maxevents：结构体数组的容量 (元素个数)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">//timeout ：如果 epoll 没有已就绪的文件描述符，该函数的阻塞时长，单位 ms 毫秒</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">//\t\t\t0 函数不阻塞，epoll 实例中没有就绪的文件描述符，函数被调用后直接返回，大于 0，若 epoll 实例中没有已就绪的文件描述符，函数阻塞对应的毫秒数再返回，-1 函数一直阻塞，直到 epoll 实例中有已就绪的文件描述符之后才解除阻塞</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 返回值</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 等于 0，函数阻塞被强制解除，没有检测到满足条件的文件描述符</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 大于 0  检测到的已就绪的文件描述符的总个数</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// 失败 返回 -1</span></pre></td></tr></table></figure><h3 id=\"操作步骤\"><a class=\"anchor\" href=\"#操作步骤\">#</a> 操作步骤</h3>\n<ul>\n<li><code>epoll</code>  创建监听的套接字</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> lfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>设置 <code>端口复用</code>  (可选)</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> opt <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>opt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>IP和端口</code> 和 <code>监听</code> 的套接字进行 <code>绑定</code></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>serv_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>给监听的套接字 <code>设置监听</code></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>创建 <code>epoll实例对象</code></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> epfd <span class=\"token operator\">=</span> <span class=\"token function\">epoll_create</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 一定要大于 0 的数</span></pre></td></tr></table></figure><ul>\n<li>将用于监听的套接字 <code>添加</code> 到 <code>epoll实例</code> 中</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span> ev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ev<span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> EPOLLIN<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 检测 lfd 读读缓冲区是否有数据</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ev<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> lfd<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 键文件描述符添加到实例中</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">epoll_ctl</span><span class=\"token punctuation\">(</span>epfd<span class=\"token punctuation\">,</span> EPOLL_CTL_ADD<span class=\"token punctuation\">,</span> lfd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>检测到 <code>epoll实例</code> 中文件描述符 <code>是否已就绪</code> ，并将这些已就绪的文件描述符 <code>进行处理</code></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">epoll_wait</span><span class=\"token punctuation\">(</span>epfd<span class=\"token punctuation\">,</span> evs<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><pre><code>* 如果是监听，和客户端建立`连接`，将得到的`文件描述符`添加到`epoll实例`中\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>curfd<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ev<span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> EPOLLIN<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ev<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> cfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 新得到的文件描述符添加到 epoll 模型中，下一轮循环的时候就可以被检测了</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">epoll_ctl</span><span class=\"token punctuation\">(</span>epfd<span class=\"token punctuation\">,</span> EPOLL_CTL_ADD<span class=\"token punctuation\">,</span> cfd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>若是通信，和对应的客户端 <code>通信</code> ，如果连接已断开，将该文件描述符从 <code>epoll实例</code> 中删除</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>curfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 将这个文件描述符从 epoll 模型中删除</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">epoll_ctl</span><span class=\"token punctuation\">(</span>epfd<span class=\"token punctuation\">,</span> EPOLL_CTL_DEL<span class=\"token punctuation\">,</span> curfd<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>curfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>curfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>* 重复最后一步\n</code></pre>\n<h3 id=\"epoll工作模式\"><a class=\"anchor\" href=\"#epoll工作模式\">#</a>  <code>epoll工作模式</code></h3>\n<h4 id=\"lt水平模式\"><a class=\"anchor\" href=\"#lt水平模式\">#</a>  <code>LT水平模式</code></h4>\n<blockquote>\n<p><code>level triggered </code> 同时 <code>支持block和no-block socket</code> ，内核通知使用者哪些文件描述符 <code>已经就绪</code> ，之后就可以对这些已就绪的文件描述符进行 <code>IO操作</code> ，若不进行任何操作，内核还是会继续通知使用者</p>\n<p>特点:</p>\n<ul>\n<li>读事件：如果文件描述符对应的读缓存区还有数据，读事件就会被触发， <code>epoll_wait</code>  解除阻塞。如果接受的数据 <code>buf很小</code> ，不能全部将缓存区全部数据读出，那么读事件会 <code>继续</code> 被触发，直到数据被 <code>全部读出</code> ，如果接受数据的内存相对较大，读数据的效率相对较高 (减少了读数据次数)。读数据是被动的，必须要通过读事件才能知道有数据到达了，因此对于读事件的检测是必须的。</li>\n<li>写事件：如果文件描述符对应的写缓存区可写，写事件就会被触发， <code>epoll_wait</code>  解除阻塞。写事件的触发发生在写数据之前。 <code>写</code> 数据是 <code>主动</code> 行为，写缓存去一般情况下都是可写的 (缓存区不满)，因此对于些时间的检测不是必须的。</li>\n</ul>\n</blockquote>\n<h5 id=\"示例代码\"><a class=\"anchor\" href=\"#示例代码\">#</a> 示例代码</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctype.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/epoll.h></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// server</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 创建监听的套接字</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> lfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 绑定</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> serv_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>serv_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>INADDR_ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 本地多有的ＩＰ</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 设置端口复用</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">int</span> opt <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>opt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 绑定端口</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>serv_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 监听</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 现在只有监听的文件描述符</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// 所有的文件描述符对应读写缓冲区状态都是委托内核进行检测的 epoll</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 创建一个 epoll 模型</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">int</span> epfd <span class=\"token operator\">=</span> <span class=\"token function\">epoll_create</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 参数为大于 1 即可，并没有实际含义</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>epfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"epoll_create\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 往 epoll 实例中添加需要检测的节点，现在只有监听的文件描述符</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span> ev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    ev<span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> EPOLLIN<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 检测 lfd 读读缓冲区是否有数据</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    ev<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> lfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">epoll_ctl</span><span class=\"token punctuation\">(</span>epfd<span class=\"token punctuation\">,</span> EPOLL_CTL_ADD<span class=\"token punctuation\">,</span> lfd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"epoll_ctl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span> evs<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>evs<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">// 持续检测</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">// 调用一次，检测一次</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">epoll_wait</span><span class=\"token punctuation\">(</span>epfd<span class=\"token punctuation\">,</span> evs<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num = %d \\n\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token comment\">// 取出当前的文件描述符</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">int</span> curfd <span class=\"token operator\">=</span> evs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token comment\">// 判断这个文件描述符是不是用于监听的</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curfd <span class=\"token operator\">==</span> lfd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token comment\">// 建立新的连接</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>curfd<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token comment\">// 新得到的文件描述符添加到 epoll 模型中，下一轮循环的时候就可以被检测了</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                ev<span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> EPOLLIN<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 读缓冲区是否有数据</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                ev<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> cfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                ret <span class=\"token operator\">=</span> <span class=\"token function\">epoll_ctl</span><span class=\"token punctuation\">(</span>epfd<span class=\"token punctuation\">,</span> EPOLL_CTL_ADD<span class=\"token punctuation\">,</span> cfd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"epoll_ctl-accept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                <span class=\"token comment\">// 处理通信的文件描述符</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                <span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>curfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端已经断开了连接\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                    <span class=\"token comment\">// 将这个文件描述符从 epoll 模型中删除</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                    <span class=\"token function\">epoll_ctl</span><span class=\"token punctuation\">(</span>epfd<span class=\"token punctuation\">,</span> EPOLL_CTL_DEL<span class=\"token punctuation\">,</span> curfd<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>curfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端say: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                    <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>curfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"et边沿模式\"><a class=\"anchor\" href=\"#et边沿模式\">#</a> ET 边沿模式</h4>\n<blockquote>\n<p><code>edge-triggered</code> ，只支持 <code>no-block socket</code> 。当文件描述符从未就绪变为就绪时，内核会通过 <code>epoll通知使用者</code> ，然后它会假设使用者知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知 ( <code>only one</code> )。ET 模式在很大程度上减少 <code>epoll事件</code> 被重复触发的次数， <code>ET效率&gt;LT模式</code></p>\n<p>特点:</p>\n<ul>\n<li>读事件：当读缓存区有新数据进入，读事件 <code>被触发一次</code> ， <code>没有</code> 新数据 <code>不会</code> 触发该事件。如果数据没有被全部读走，并且没有新数据进入，读事件不会再次触发， <code>只通知一次</code> ，若有数据被全部读走或者只读走一部分，此时有新数据进入，读事件被触发，只通知一次</li>\n<li>写事件：当写缓冲区状态可写，写事件智慧被触发一次。写缓存区从不满到被写满，从满到不满，写事件都 <code>只会</code> 被触发 <code>一次</code> 、</li>\n</ul>\n<p>epoll 的边沿模式下 epoll_wait 检测到文件描述符有新事件才会通知，如果不是新的事件就不通知， <code>通知的次数</code> 比水平模式 <code>少</code> ， <code>效率</code> 比水平模式 <code>高</code> 。</p>\n</blockquote>\n<h5 id=\"et模式的设置\"><a class=\"anchor\" href=\"#et模式的设置\">#</a> ET 模式的设置</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span> ev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ev<span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> EPOLLIN <span class=\"token operator\">|</span> EPOLLET<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 设置边沿模式 EPOLLET</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 示例代码  线程安全的，不需要考虑加锁问题</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">epoll_wait</span><span class=\"token punctuation\">(</span>epfd<span class=\"token punctuation\">,</span> evs<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 取出当前的文件描述符</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> curfd <span class=\"token operator\">=</span> evs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 判断这个文件描述符是不是用于监听的</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curfd <span class=\"token operator\">==</span> lfd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 建立新的连接</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>curfd<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 新得到的文件描述符添加到 epoll 模型中，下一轮循环的时候就可以被检测了</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 读缓冲区是否有数据，并且将文件描述符设置为边沿模式</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span> ev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        ev<span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> EPOLLIN <span class=\"token operator\">|</span> EPOLLET<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ev<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> cfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        ret <span class=\"token operator\">=</span> <span class=\"token function\">epoll_ctl</span><span class=\"token punctuation\">(</span>epfd<span class=\"token punctuation\">,</span> EPOLL_CTL_ADD<span class=\"token punctuation\">,</span> cfd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"epoll_ctl-accept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"设置非阻塞\"><a class=\"anchor\" href=\"#设置非阻塞\">#</a> 设置非阻塞</h5>\n<blockquote>\n<p>写事件一般写缓冲区有足够的空间，不需要进行检测。对于读事件的茶法就必须检测，使用 epoll 的边缘检测进行读事件检测，有新数据只会通知一次，就必须保证得到通知后将数据全部从读缓冲区中读出。</p>\n</blockquote>\n<ul>\n<li>方式一：准备特大内存，用于存储缓冲区 (内存无法定义，弊端大)</li>\n<li>方式二：循环接受数据：将套接字设置为非阻塞模式</li>\n</ul>\n<blockquote>\n<p>因为套接字默认是阻塞的，当读缓冲区的数据被读完之后，read/recv 函数就被阻塞了，当前进程 / 线程就无法处理其他操作 ----- 将套接字默认修改为非阻塞</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 设置完成之后，读写都变成了非阻塞模式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> F_GETFL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取出 cfd 的 flag 属性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 将变量 flag 的标志位与 O_NONBLOCK 进行按位或操作，并将结果存储回 flag 中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>flag <span class=\"token operator\">|=</span> O_NONBLOCK<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 设置 flag 为非阻塞属性         位运算符 |（按位或）将 O_NONBLOCK 与变量的标志位进行按位或操作，将 O_NONBLOCK 标志位的值设置到变量的标志位中。                                          </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> F_SETFL<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//flag 属性被舍之道 cfd 当中</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 循环接受数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>curfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 数据处理...</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 非阻塞模式下 recv () /read () 函数返回值 len == -1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>curfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 对于数据读完，仍然读取的保存，就行修改</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>errno <span class=\"token operator\">==</span> EAGAIN<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据读完了...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"多线程epoll\"><a class=\"anchor\" href=\"#多线程epoll\">#</a> 多线程 <code>epoll</code></h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctype.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/epoll.h></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 结构体存储要传递的数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">socketinfo</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 在子线程要操作的文件描述符可监听 / 读写</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> epfd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要操作的 epoll 树实例</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SocketInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 用于连接</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">acceptConn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程acceptConn线程ID:%ld\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    SocketInfo<span class=\"token operator\">*</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SocketInfo<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     <span class=\"token comment\">// 建立新的连接</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 将文件描述符设置为非阻塞</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 得到文件描述符的属性</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> F_GETFL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    flag <span class=\"token operator\">|=</span> O_NONBLOCK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> F_SETFL<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 新得到的文件描述符添加到 epoll 模型中，下一轮循环的时候就可以被检测了</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 通信的文件描述符检测读缓冲区数据的时候设置为边沿模式</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span> ev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    ev<span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> EPOLLIN <span class=\"token operator\">|</span> EPOLLET<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 读缓冲区是否有数据</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    ev<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> cfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">epoll_ctl</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>epfd<span class=\"token punctuation\">,</span> EPOLL_CTL_ADD<span class=\"token punctuation\">,</span> cfd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"epoll_ctl-accept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// 用于通信函数</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">communication</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程communication线程ID:%ld\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    SocketInfo<span class=\"token operator\">*</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SocketInfo<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">// 处理通信的文件描述符</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">char</span> temp<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">bzero</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据后面加入 /0</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 循环读数据</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token comment\">// 非阻塞模式下和阻塞模式是一样的 => 判断对方是否断开连接</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端断开了连接...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token comment\">// 将这个文件描述符从 epoll 模型中删除  // 线程安全的函数，不需要进行线程同步</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token function\">epoll_ctl</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>epfd<span class=\"token punctuation\">,</span> EPOLL_CTL_DEL<span class=\"token punctuation\">,</span> info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token comment\">// 通信</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">toupper</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token function\">strncat</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">+</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token comment\">// 接收的数据打印到终端  </span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token comment\">// 修改到读取完数据之后一起发送</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token comment\">// write(STDOUT_FILENO, buf, len);</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token comment\">//// 发送数据</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token comment\">// send(info->fd, buf, len, 0);</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token comment\">// len == -1</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>errno <span class=\"token operator\">==</span> EAGAIN<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 读缓存区已经没有了数据</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据读完了...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>info<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token comment\">// server</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token comment\">// 创建监听的套接字</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">int</span> lfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token comment\">// 绑定</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> serv_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>serv_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>INADDR_ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 本地多有的ＩＰ</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token comment\">// 127.0.0.1</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token comment\">// inet_pton(AF_INET, \"127.0.0.1\", &amp;serv_addr.sin_addr.s_addr);</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token comment\">// 设置端口复用</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token keyword\">int</span> opt <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>opt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token comment\">// 绑定端口</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>serv_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token comment\">// 监听</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token comment\">// 现在只有监听的文件描述符</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token comment\">// 所有的文件描述符对应读写缓冲区状态都是委托内核进行检测的 epoll</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token comment\">// 创建一个 epoll 模型</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token keyword\">int</span> epfd <span class=\"token operator\">=</span> <span class=\"token function\">epoll_create</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>epfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"epoll_create\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token comment\">// 往 epoll 实例中添加需要检测的节点，现在只有监听的文件描述符</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span> ev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    ev<span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> EPOLLIN<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 检测 lfd 读读缓冲区是否有数据</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    ev<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> lfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">epoll_ctl</span><span class=\"token punctuation\">(</span>epfd<span class=\"token punctuation\">,</span> EPOLL_CTL_ADD<span class=\"token punctuation\">,</span> lfd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"epoll_ctl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span> evs<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>evs<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token comment\">// 持续检测</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token comment\">// 调用一次，检测一次</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">epoll_wait</span><span class=\"token punctuation\">(</span>epfd<span class=\"token punctuation\">,</span> evs<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==== num: %d\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"178\"></td><td><pre>        <span class=\"token class-name\">pthread_t</span> tid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>            <span class=\"token comment\">// 取出当前的文件描述符</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>            SocketInfo<span class=\"token operator\">*</span> info<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>SocketInfo<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SocketInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>            <span class=\"token keyword\">int</span> curfd <span class=\"token operator\">=</span> evs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>            info<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> curfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>            info<span class=\"token operator\">-></span>epfd <span class=\"token operator\">=</span> epfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>            <span class=\"token comment\">// 判断这个文件描述符是不是用于监听的</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curfd <span class=\"token operator\">==</span> lfd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>                <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tid<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>acceptConn<span class=\"token punctuation\">,</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>                <span class=\"token function\">pthread_detach</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 线程分离</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>                <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tid<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>communication<span class=\"token punctuation\">,</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>                <span class=\"token function\">pthread_detach</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 线程分离</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Linux",
                "Linux",
                "套接字通信",
                "IO多路复用"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-4/Qt%E5%A4%9A%E7%BA%BF%E7%A8%8BTCP/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-4/Qt%E5%A4%9A%E7%BA%BF%E7%A8%8BTCP/",
            "title": "Qt多线程TCP",
            "date_published": "2023-06-17T07:20:43.000Z",
            "content_html": "<h1 id=\"qt多线程文件传输项目\"><a class=\"anchor\" href=\"#qt多线程文件传输项目\">#</a> Qt 多线程文件传输项目</h1>\n<h2 id=\"通信流程\"><a class=\"anchor\" href=\"#通信流程\">#</a> 通信流程</h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbsFicNFBiapQDKsSRiahVHibKMxSxSOXS7CC8icZxSWuGTKaP2KfpR4iayAjGVCKm8ibwEtwwJzgCfewneEw/640?wx_fmt=jpeg\" alt=\"项目流程\" title=\"项目流程\" /></p>\n<h2 id=\"项目文件\"><a class=\"anchor\" href=\"#项目文件\">#</a> 项目文件</h2>\n<blockquote>\n<p><code>pro</code>  文件添加 <code>network模块</code></p>\n</blockquote>\n<h3 id=\"服务端\"><a class=\"anchor\" href=\"#服务端\">#</a> 服务端</h3>\n<h4 id=\"mainwindowh\"><a class=\"anchor\" href=\"#mainwindowh\">#</a>  <code>mainwindow.h</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">MAINWINDOW_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAINWINDOW_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMainWindow></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mytcpsever.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> Ui <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MainWindow</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MainWindow</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QMainWindow</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_start_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_selectfile_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_pushButton_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span>QString name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通知子线程可以工作啦</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    Ui<span class=\"token double-colon punctuation\">::</span>MainWindow <span class=\"token operator\">*</span>ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    MyTcpSever<span class=\"token operator\">*</span> m_server<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// MAINWINDOW_H</span></span></pre></td></tr></table></figure><h4 id=\"mainwindowcpp\"><a class=\"anchor\" href=\"#mainwindowcpp\">#</a>  <code>mainwindow.cpp</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mainwindow.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ui_mainwindow.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QThread></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMessageBox></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QFileDialog></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QRandomGenerator></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"sendfile.h\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>MainWindow<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">setWindowTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件发送端\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ui<span class=\"token operator\">-></span>ip<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"当前主线程的Id:\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    m_server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MyTcpSever</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ui<span class=\"token operator\">-></span>port<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"8989\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_server<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>MyTcpSever<span class=\"token double-colon punctuation\">::</span>newClient<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>qintptr socket<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 子线程 worker 对象使用</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 在 ui 中显示已连接</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        ui<span class=\"token operator\">-></span>status<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 处理子线程闲逛的动作</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        QThread<span class=\"token operator\">*</span> subThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QThread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 添加工作的类，使其工作移动到子线程中去工作</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 将 socket 文件内容传递进去</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        sendfile<span class=\"token operator\">*</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">sendfile</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不能指定 this 父对象，work 要移动到子线程中，若添加 this 则不可指定</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        worker<span class=\"token operator\">-></span><span class=\"token function\">moveToThread</span><span class=\"token punctuation\">(</span>subThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>MainWindow<span class=\"token double-colon punctuation\">::</span>start<span class=\"token punctuation\">,</span>worker<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sendfile<span class=\"token double-colon punctuation\">::</span>working<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 主线程调用 start 信号，子线程就可以调用 working 工作</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 当子线程 working 工作完成之后发出一个信号，主线程得到信号之后就可以销毁这些资源</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sendfile<span class=\"token double-colon punctuation\">::</span>done<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 销毁了子线程，不能继续发送文件啦</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">//            qDebug ()&lt;&lt;\"销毁子线程和任务对象资源....\";</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//            subThread->quit (); // 有些任务还没有完成</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">//            subThread->wait (); // 等待完成</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//            subThread->deleteLater (); // 销毁子线程</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//            worker->deleteLater ();  // 也销毁 worker 进程</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//            ui->status->setText (\"未连接\");</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>close<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QPushButton<span class=\"token double-colon punctuation\">::</span>clicked<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">// 销毁了子线程，不能继续发送文件啦</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"销毁子线程和任务对象资源....\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            subThread<span class=\"token operator\">-></span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有些任务还没有完成</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            subThread<span class=\"token operator\">-></span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等待完成</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            subThread<span class=\"token operator\">-></span><span class=\"token function\">deleteLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 销毁子线程</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            worker<span class=\"token operator\">-></span><span class=\"token function\">deleteLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 也销毁 worker 进程</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            ui<span class=\"token operator\">-></span>status<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            ui<span class=\"token operator\">-></span>start<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sendfile<span class=\"token double-colon punctuation\">::</span>text<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>QByteArray msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">// 修改每次发送的不同颜色</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            QVector<span class=\"token operator\">&lt;</span>QColor<span class=\"token operator\">></span> colors <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                Qt<span class=\"token double-colon punctuation\">::</span>red<span class=\"token punctuation\">,</span>Qt<span class=\"token double-colon punctuation\">::</span>green<span class=\"token punctuation\">,</span>Qt<span class=\"token double-colon punctuation\">::</span>black<span class=\"token punctuation\">,</span>Qt<span class=\"token double-colon punctuation\">::</span>blue<span class=\"token punctuation\">,</span>Qt<span class=\"token double-colon punctuation\">::</span>darkRed<span class=\"token punctuation\">,</span>Qt<span class=\"token double-colon punctuation\">::</span>cyan<span class=\"token punctuation\">,</span>Qt<span class=\"token double-colon punctuation\">::</span>magenta</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token class-name\">QRandomGenerator</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">bounded</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 colors 里面的随机数</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token comment\">// 取出某一种颜色</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            ui<span class=\"token operator\">-></span>msg<span class=\"token operator\">-></span><span class=\"token function\">setTextColor</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置一种随机颜色</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            ui<span class=\"token operator\">-></span>msg<span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token comment\">// 同步文件发送的总长度</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sendfile<span class=\"token double-colon punctuation\">::</span>tot_size_signal<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>qint64 size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token comment\">//qDebug ()&lt;&lt;\"发送文件的总大小为\"&lt;&lt;size;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            ui<span class=\"token operator\">-></span>progressBar<span class=\"token operator\">-></span><span class=\"token function\">setMinimum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            ui<span class=\"token operator\">-></span>progressBar<span class=\"token operator\">-></span><span class=\"token function\">setMaximum</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            ui<span class=\"token operator\">-></span>progressBar<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置当前值</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">// 同步文件发送的目前长度</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sendfile<span class=\"token double-colon punctuation\">::</span>now_size_signal<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>qint64 size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token comment\">//qDebug ()&lt;&lt;\"发送当前文件大小\"&lt;&lt;size;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            ui<span class=\"token operator\">-></span>progressBar<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置当前值</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        subThread<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 启动子线程 ，启动之后，woker 不能工作，需要主线程给子线程发送信号，让其子线程工作</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_start_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token comment\">// 绑定端口</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>port<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUShort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    m_server<span class=\"token operator\">-></span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token function\">QHostAddress</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>ip<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token comment\">// 通信的套接字对象不可以跨线程访问</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    ui<span class=\"token operator\">-></span>status<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已启动服务器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    ui<span class=\"token operator\">-></span>start<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_selectfile_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    QString path <span class=\"token operator\">=</span> <span class=\"token class-name\">QFileDialog</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getOpenFileName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取文件</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token comment\">// 将得到路径设置到</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        ui<span class=\"token operator\">-></span>path<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"用户选中的内容为空\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">// 发送文件</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 发送文件按钮点击之后</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token comment\">// 得到文件路径</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>path<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token class-name\">QMessageBox</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">information</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"提示\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"要发送的文件不能为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>status<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"已连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token class-name\">QMessageBox</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">information</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"提示\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"还未连接终端或服务器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    emit <span class=\"token function\">start</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>path<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"mytcpserverh\"><a class=\"anchor\" href=\"#mytcpserverh\">#</a>  <code>mytcpserver.h</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">MYTCPSEVER_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MYTCPSEVER_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QObject></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QTcpServer></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTcpSever</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QTcpServer</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">MyTcpSever</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 虚函数，改写行为</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">incomingConnection</span><span class=\"token punctuation\">(</span>qintptr socketDescriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">newClient</span><span class=\"token punctuation\">(</span>qintptr socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// MYTCPSEVER_H</span></span></pre></td></tr></table></figure><h4 id=\"mytcpservercpp\"><a class=\"anchor\" href=\"#mytcpservercpp\">#</a>  <code>mytcpserver.cpp</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mytcpsever.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">MyTcpSever</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MyTcpSever</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QTcpServer</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MyTcpSever</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">incomingConnection</span><span class=\"token punctuation\">(</span>qintptr socketDescriptor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 将文件描述符发送出去</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    emit <span class=\"token function\">newClient</span><span class=\"token punctuation\">(</span>socketDescriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"sendfileh\"><a class=\"anchor\" href=\"#sendfileh\">#</a>  <code>sendfile.h</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">SENDFILE_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SENDFILE_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QObject></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QTcpSocket></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">sendfile</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Q_OBJECT  <span class=\"token comment\">//Qt 的信号槽机制</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">sendfile</span><span class=\"token punctuation\">(</span>qintptr socket<span class=\"token punctuation\">,</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">working</span><span class=\"token punctuation\">(</span>QString name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//working 完成之后</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span>QByteArray msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 发送的文件内容</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">tot_size_signal</span><span class=\"token punctuation\">(</span>qint64 size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 得到文件总长度，发送信号文件总长度</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">now_size_signal</span><span class=\"token punctuation\">(</span>qint64 size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 每次发送，同步</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    qintptr m_socket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    QTcpSocket<span class=\"token operator\">*</span> m_tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    qint64 totalsize<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 记录文件的总长度</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    qint64 nowsize<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 记录文件的现有长度</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// SENDFILE_H</span></span></pre></td></tr></table></figure><h4 id=\"sendfilecpp\"><a class=\"anchor\" href=\"#sendfilecpp\">#</a>  <code>sendfile.cpp</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"sendfile.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QThread></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDebug></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QFile></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QFileInfo></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QtEndian></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sendfile<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sendfile</span><span class=\"token punctuation\">(</span>qintptr socket<span class=\"token punctuation\">,</span>QObject <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QObject</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    m_socket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传递的用于通信的套接字，通过此可以与主函数建立连接的套接字通信</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> sendfile<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">working</span><span class=\"token punctuation\">(</span>QString path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"当前子线程的Id:\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    m_tcp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QTcpSocket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    m_tcp<span class=\"token operator\">-></span><span class=\"token function\">setSocketDescriptor</span><span class=\"token punctuation\">(</span>m_socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置 socket 文件描述符，m_socket 就可以通信啦</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_tcp<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QTcpSocket<span class=\"token double-colon punctuation\">::</span>disconnected<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        m_tcp<span class=\"token operator\">-></span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        m_tcp<span class=\"token operator\">-></span><span class=\"token function\">deleteLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        emit <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"客户端数据已经接受完毕，并断开了连接,开始销毁套接字对象,拜拜...\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"发送的文件名字:\"</span><span class=\"token operator\">&lt;&lt;</span>path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    nowsize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 通过 QFile 打开文件</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    QFile <span class=\"token function\">file</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 获取文件的总长度</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    QFileInfo <span class=\"token function\">FileData</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    totalsize <span class=\"token operator\">=</span> FileData<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    emit <span class=\"token function\">tot_size_signal</span><span class=\"token punctuation\">(</span>totalsize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 将文件总大小传过去</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    QString size <span class=\"token operator\">=</span> <span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span>totalsize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    qint64 length <span class=\"token operator\">=</span> m_tcp<span class=\"token operator\">-></span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">.</span><span class=\"token function\">toUtf8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    m_tcp<span class=\"token operator\">-></span><span class=\"token function\">waitForBytesWritten</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">msleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 休息</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">bool</span> bl <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>ReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">atEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果文件没有读完</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            QByteArray line <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 添加包头</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">qToBigEndian</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            QByteArray <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            data<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token comment\">// 发送数据</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            m_tcp<span class=\"token operator\">-></span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">// 读取数据</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">// 信号</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            emit <span class=\"token function\">text</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token comment\">// 发送目前的 line 量</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            nowsize <span class=\"token operator\">+=</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            emit <span class=\"token function\">now_size_signal</span><span class=\"token punctuation\">(</span>nowsize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token comment\">//qDebug ()&lt;&lt;\"发送的数据为\"&lt;&lt;line;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">msleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 休息</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    file<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"客户端\"><a class=\"anchor\" href=\"#客户端\">#</a> 客户端</h3>\n<h4 id=\"mainwindowh-2\"><a class=\"anchor\" href=\"#mainwindowh-2\">#</a>  <code>mainwindow.h</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">MAINWINDOW_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAINWINDOW_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMainWindow></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"recvfile.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QThread></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">namespace</span> Ui <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MainWindow</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MainWindow</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QMainWindow</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_connect_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">startConnect</span><span class=\"token punctuation\">(</span>QString ip<span class=\"token punctuation\">,</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    Ui<span class=\"token double-colon punctuation\">::</span>MainWindow <span class=\"token operator\">*</span>ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    QThread<span class=\"token operator\">*</span> subThread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    RecvFile<span class=\"token operator\">*</span> worker<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// MAINWINDOW_H</span></span></pre></td></tr></table></figure><h4 id=\"mainwindowcpp-2\"><a class=\"anchor\" href=\"#mainwindowcpp-2\">#</a>  <code>mainwindow.cpp</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mainwindow.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ui_mainwindow.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QThread></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMessageBox></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QRandomGenerator></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDebug></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>MainWindow<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">setWindowTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收端\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 主线程负责窗口时间，子线程负责文件传输</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"当前主线程线程ID:\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 设置默认值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ui<span class=\"token operator\">-></span>ip<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ui<span class=\"token operator\">-></span>port<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"8989\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 创建子线程</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    subThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QThread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> RecvFile<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不可指定父对象</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//worker 想工作，除了 subThread start 还需要信号量连接调用 workin</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    worker<span class=\"token operator\">-></span><span class=\"token function\">moveToThread</span><span class=\"token punctuation\">(</span>subThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 移动到子线程中区</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    subThread<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子线程开始工作</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>MainWindow<span class=\"token double-colon punctuation\">::</span>startConnect<span class=\"token punctuation\">,</span>worker<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>RecvFile<span class=\"token double-colon punctuation\">::</span>connectServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 当子线程连接服务器成功，通知主线程</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>RecvFile<span class=\"token double-colon punctuation\">::</span>connectOK<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 通知程序的使用者</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">QMessageBox</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">information</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"提示\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"已经成功连接到了服务器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        ui<span class=\"token operator\">-></span>connect<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        ui<span class=\"token operator\">-></span>connect<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 当子线程接收到数据呈现给父进程，将接受的数据呈现到 UI 上面</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>RecvFile<span class=\"token double-colon punctuation\">::</span>message<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>QByteArray msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 修改每次发送的不同颜色</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        QVector<span class=\"token operator\">&lt;</span>QColor<span class=\"token operator\">></span> colors <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            Qt<span class=\"token double-colon punctuation\">::</span>red<span class=\"token punctuation\">,</span>Qt<span class=\"token double-colon punctuation\">::</span>green<span class=\"token punctuation\">,</span>Qt<span class=\"token double-colon punctuation\">::</span>black<span class=\"token punctuation\">,</span>Qt<span class=\"token double-colon punctuation\">::</span>blue<span class=\"token punctuation\">,</span>Qt<span class=\"token double-colon punctuation\">::</span>darkRed<span class=\"token punctuation\">,</span>Qt<span class=\"token double-colon punctuation\">::</span>cyan<span class=\"token punctuation\">,</span>Qt<span class=\"token double-colon punctuation\">::</span>magenta</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token class-name\">QRandomGenerator</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">bounded</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 colors 里面的随机数</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 取出某一种颜色</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        ui<span class=\"token operator\">-></span>msg<span class=\"token operator\">-></span><span class=\"token function\">setTextColor</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置一种随机颜色</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        ui<span class=\"token operator\">-></span>msg<span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 当子进程结束</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>RecvFile<span class=\"token double-colon punctuation\">::</span>gameover<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 子线程运行结束，进行资源的释放</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"子进程文件上传完毕\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>close<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QPushButton<span class=\"token double-colon punctuation\">::</span>clicked<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        subThread<span class=\"token operator\">-></span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        subThread<span class=\"token operator\">-></span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        subThread<span class=\"token operator\">-></span><span class=\"token function\">deleteLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        ui<span class=\"token operator\">-></span>connect<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        ui<span class=\"token operator\">-></span>connect<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接服务器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 当子进程更新总文件大小，设置 progressBar</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>RecvFile<span class=\"token double-colon punctuation\">::</span>total_size_signal<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>qint64 size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"接受文件总大小为\"</span><span class=\"token operator\">&lt;&lt;</span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        ui<span class=\"token operator\">-></span>progressBar<span class=\"token operator\">-></span><span class=\"token function\">setMinimum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        ui<span class=\"token operator\">-></span>progressBar<span class=\"token operator\">-></span><span class=\"token function\">setMaximum</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        ui<span class=\"token operator\">-></span>progressBar<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置当前</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>RecvFile<span class=\"token double-colon punctuation\">::</span>now_size_signal<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>qint64 size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">//qDebug ()&lt;&lt;\"接受文件目前大小为\"&lt;&lt;size;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        ui<span class=\"token operator\">-></span>progressBar<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置当前</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_connect_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token comment\">// 拿到 IP 端口，将 Ip 和端口传递给子线程，在子线程 new QTcp 套接字对象，在子线程中接受数据</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    QString ip <span class=\"token operator\">=</span>ui<span class=\"token operator\">-></span>ip<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取 ip</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>port<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUShort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token comment\">// 通过信号传递给子线程</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    emit <span class=\"token function\">startConnect</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"recvfileh\"><a class=\"anchor\" href=\"#recvfileh\">#</a>  <code>recvfile.h</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">RECVFILE_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RECVFILE_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QObject></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QTcpSocket></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RecvFile</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">RecvFile</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">RecvFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 连接服务器的函数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">connectServer</span><span class=\"token punctuation\">(</span>QString ip<span class=\"token punctuation\">,</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">dealData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">connectOK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span>QByteArray msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">gameover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">total_size_signal</span><span class=\"token punctuation\">(</span>qint64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">now_size_signal</span><span class=\"token punctuation\">(</span>qint64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    QTcpSocket<span class=\"token operator\">*</span> m_tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">bool</span> first_total <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 首次读取文件总大小</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    qint64 nowsize <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// RECVFILE_H</span></span></pre></td></tr></table></figure><h4 id=\"recvfilecpp\"><a class=\"anchor\" href=\"#recvfilecpp\">#</a>  <code>recvfile.cpp</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"recvfile.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QHostAddress></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDebug></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QThread></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QtEndian></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDataStream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">RecvFile</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">RecvFile</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QObject</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">RecvFile</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">RecvFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 销毁套接字</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    m_tcp<span class=\"token operator\">-></span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    m_tcp<span class=\"token operator\">-></span><span class=\"token function\">deleteLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">RecvFile</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connectServer</span><span class=\"token punctuation\">(</span>QString ip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"当子线程线程ID:\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 连接服务器</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    m_tcp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QTcpSocket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 连接服务器</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    m_tcp<span class=\"token operator\">-></span><span class=\"token function\">connectToHost</span><span class=\"token punctuation\">(</span><span class=\"token function\">QHostAddress</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_tcp<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QTcpSocket<span class=\"token double-colon punctuation\">::</span>connected<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>RecvFile<span class=\"token double-colon punctuation\">::</span>connectOK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 成功建立连接，发送连接成功对象</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 接受到数据， 服务器发送给客户端数据完整之后</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_tcp<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QTcpSocket<span class=\"token double-colon punctuation\">::</span>readyRead<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 读取文件总大小</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>first_total<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            first_total <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            QByteArray array <span class=\"token operator\">=</span>  m_tcp<span class=\"token operator\">-></span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"array传入文件大小为:\"</span><span class=\"token operator\">&lt;&lt;</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            emit <span class=\"token function\">total_size_signal</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">//QByteArray all = m_tcp->readAll();</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//        emit message(all);</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 对数据进行拆包</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token function\">dealData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            emit <span class=\"token function\">gameover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">RecvFile</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">dealData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">int</span> totalBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">int</span> recvBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    QByteArray block<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存储对应的数据块</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 判断有没有数据</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_tcp<span class=\"token operator\">-></span><span class=\"token function\">bytesAvailable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"没有数据咯\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">// 读包头 可读的字节大于 4 个字节 // 包头只可以读取字节，无法获取总字节</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>m_tcp<span class=\"token operator\">-></span><span class=\"token function\">bytesAvailable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        QByteArray head <span class=\"token operator\">=</span> m_tcp<span class=\"token operator\">-></span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        totalBytes <span class=\"token operator\">=</span> <span class=\"token function\">qFromBigEndian</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">//qDebug () &lt;&lt; \"接收方包头的长度:\" &lt;&lt; totalBytes;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 递归 也会结束</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">// 根据包头去读 数据块</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>totalBytes<span class=\"token operator\">-</span>recvBytes <span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>m_tcp<span class=\"token operator\">-></span><span class=\"token function\">bytesAvailable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        block<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span> m_tcp<span class=\"token operator\">-></span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>totalBytes<span class=\"token operator\">-</span>recvBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        recvBytes <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        nowsize <span class=\"token operator\">+=</span>recvBytes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        emit <span class=\"token function\">now_size_signal</span><span class=\"token punctuation\">(</span>nowsize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>totalBytes <span class=\"token operator\">==</span> recvBytes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        emit <span class=\"token function\">message</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token comment\">// 如果还有数据</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_tcp<span class=\"token operator\">-></span><span class=\"token function\">bytesAvailable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"开始 递归调用....\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token function\">dealData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"运行结果\"><a class=\"anchor\" href=\"#运行结果\">#</a> 运行 <code>结果</code></h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsFicNFBiapQDKsSRiahVHibKMxnAsMMAVwjQZ2lqE9GPp83YtWaceJibpibdlvL2ibRMibnbUkPE6KjwP4cQ/640?wx_fmt=png\" alt=\"运行结果\" title=\"运行结果\" /></p>\n",
            "tags": [
                "计算机科学",
                "C++",
                "C和C++项目",
                "C++",
                "计算机科学",
                "Qt项目"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-5/Qt%E5%A5%97%E6%8E%A5%E5%AD%97%E9%80%9A%E4%BF%A1/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-5/Qt%E5%A5%97%E6%8E%A5%E5%AD%97%E9%80%9A%E4%BF%A1/",
            "title": "Qt套接字通信",
            "date_published": "2023-06-15T13:20:43.000Z",
            "content_html": "<h1 id=\"tcp通信\"><a class=\"anchor\" href=\"#tcp通信\">#</a> TCP 通信</h1>\n<blockquote>\n<p>Qt 需要 <code>network</code>  模块实现套接字通信，在 pro 文件中提前加入。所有通信函数与 C++ 封装 TCP 通信类似。</p>\n</blockquote>\n<h2 id=\"通信与函数\"><a class=\"anchor\" href=\"#通信与函数\">#</a> 通信与函数</h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbuAZEWbsPKptycVwDzZkVekqHGlibgmve07tfGR0CuIoicEUtbA8aPcnVEloaZYglROleE906pz4yQA/640?wx_fmt=jpeg\" alt=\"TCP通信函数\" title=\"函数与信号\" /></p>\n<h2 id=\"tcp通信案例\"><a class=\"anchor\" href=\"#tcp通信案例\">#</a> TCP 通信案例</h2>\n<h3 id=\"服务端\"><a class=\"anchor\" href=\"#服务端\">#</a> 服务端</h3>\n<h4 id=\"ui\"><a class=\"anchor\" href=\"#ui\">#</a>  <code>UI</code></h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsjDYUbUeUpnsDUlSjZPqtibiaFCiaSicYQs14pMl4ic8NPQ5okzfXH69CdSF4aH3dCNV2N32hmiaRia0ZcA/640?wx_fmt=png\" alt=\"服务端\" title=\"服务端\" /></p>\n<h4 id=\"serverh\"><a class=\"anchor\" href=\"#serverh\">#</a>  <code>server.h</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">SERVER_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SERVER_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMainWindow></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QTcpSocket></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QTcpServer></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">namespace</span> Ui <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">server</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">server</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QMainWindow</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">private</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_startServer_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_sendMsg_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    Ui<span class=\"token double-colon punctuation\">::</span>server <span class=\"token operator\">*</span>ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    QTcpServer<span class=\"token operator\">*</span> m_server<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    QTcpSocket<span class=\"token operator\">*</span> m_tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// SERVER_H</span></span></pre></td></tr></table></figure><h4 id=\"servercpp\"><a class=\"anchor\" href=\"#servercpp\">#</a>  <code>server.cpp</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"server.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ui_server.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>server<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">server</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>server<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">setWindowTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TCP - 服务器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 创建 QTcpServer 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    m_server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QTcpServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 检测是否有新链接</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_server<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QTcpServer<span class=\"token double-colon punctuation\">::</span>newConnection<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       m_tcp <span class=\"token operator\">=</span> m_server<span class=\"token operator\">-></span><span class=\"token function\">nextPendingConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 TCP 连接</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       ui<span class=\"token operator\">-></span>m_status<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       ui<span class=\"token operator\">-></span>records<span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功和客户端建立了新连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token comment\">// 客户端发送过来了数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_tcp<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QTcpSocket<span class=\"token double-colon punctuation\">::</span>readyRead<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>           <span class=\"token comment\">// 接受数据</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>           QString recvMsg<span class=\"token operator\">=</span>m_tcp<span class=\"token operator\">-></span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>           ui<span class=\"token operator\">-></span>records<span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端say:\"</span> <span class=\"token operator\">+</span> recvMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>           ui<span class=\"token operator\">-></span>records<span class=\"token operator\">-></span><span class=\"token function\">setAlignment</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>AlignRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>       <span class=\"token comment\">// 客户端断开了连接</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_tcp<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QTcpSocket<span class=\"token double-colon punctuation\">::</span>disconnected<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            ui<span class=\"token operator\">-></span>records<span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端已经断开了连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            m_tcp<span class=\"token operator\">-></span><span class=\"token function\">deleteLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            ui<span class=\"token operator\">-></span>m_status<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已断开\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token class-name\">server</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> server<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_startServer_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>port<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 设置服务器监听</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    m_server<span class=\"token operator\">-></span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>QHostAddress<span class=\"token double-colon punctuation\">::</span>LocalHost<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    ui<span class=\"token operator\">-></span>startServer<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">void</span> server<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_sendMsg_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    QString sendMsg <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>msg<span class=\"token operator\">-></span><span class=\"token function\">toPlainText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    m_tcp<span class=\"token operator\">-></span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>sendMsg<span class=\"token punctuation\">.</span><span class=\"token function\">toUtf8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    ui<span class=\"token operator\">-></span>records<span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器Say:\"</span> <span class=\"token operator\">+</span> sendMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    ui<span class=\"token operator\">-></span>records<span class=\"token operator\">-></span><span class=\"token function\">setAlignment</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>AlignLeft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    ui<span class=\"token operator\">-></span>msg<span class=\"token operator\">-></span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"客户端\"><a class=\"anchor\" href=\"#客户端\">#</a> 客户端</h3>\n<h4 id=\"ui-2\"><a class=\"anchor\" href=\"#ui-2\">#</a>  <code>UI</code></h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsjDYUbUeUpnsDUlSjZPqtibZSwtmHCDW7ib4Kbwdyr3tyJPDWlYApSibbaBSvlmsiczRiccuoTWjicVvhg/640?wx_fmt=png\" alt=\"客户端\" title=\"客户端\" /></p>\n<h4 id=\"clienth\"><a class=\"anchor\" href=\"#clienth\">#</a> `client.h``</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">CLIENT_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CLIENT_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMainWindow></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QTcpSocket></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> Ui <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">client</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">client</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QMainWindow</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">client</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_connect_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_close_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_send_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    Ui<span class=\"token double-colon punctuation\">::</span>client <span class=\"token operator\">*</span>ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    QTcpSocket<span class=\"token operator\">*</span> m_tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// CLIENT_H</span></span></pre></td></tr></table></figure><h4 id=\"clientcpp\"><a class=\"anchor\" href=\"#clientcpp\">#</a>  <code>client.cpp</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"client.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ui_client.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>client<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">client</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>client<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">setWindowTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TCP - 客户端\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 创建通信的套接字对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ui<span class=\"token operator\">-></span>ip<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    m_tcp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QTcpSocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ui<span class=\"token operator\">-></span>close<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 检测是否和服务器连接成功</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_tcp<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QTcpSocket<span class=\"token double-colon punctuation\">::</span>connected<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        ui<span class=\"token operator\">-></span>rec<span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"恭喜，服务器连接成功!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        ui<span class=\"token operator\">-></span>status<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 检测服务器是都恢复了数据</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_tcp<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QTcpSocket<span class=\"token double-colon punctuation\">::</span>readyRead<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        QByteArray recvMsg <span class=\"token operator\">=</span> m_tcp<span class=\"token operator\">-></span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        ui<span class=\"token operator\">-></span>rec<span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器say:\"</span><span class=\"token operator\">+</span>recvMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        ui<span class=\"token operator\">-></span>rec<span class=\"token operator\">-></span><span class=\"token function\">setAlignment</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>AlignRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 检测服务器是否断开了连接</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_tcp<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QTcpSocket<span class=\"token double-colon punctuation\">::</span>disconnected<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        ui<span class=\"token operator\">-></span>rec<span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器已经断开了连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        ui<span class=\"token operator\">-></span>connect<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        ui<span class=\"token operator\">-></span>close<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token class-name\">client</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">void</span> client<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_connect_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    QString ip <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>ip<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>port<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 连接服务器</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    m_tcp<span class=\"token operator\">-></span><span class=\"token function\">connectToHost</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    ui<span class=\"token operator\">-></span>connect<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    ui<span class=\"token operator\">-></span>close<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">void</span> client<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_close_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    m_tcp<span class=\"token operator\">-></span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    ui<span class=\"token operator\">-></span>connect<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    ui<span class=\"token operator\">-></span>close<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">void</span> client<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_send_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    QString sendMsg <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>msg<span class=\"token operator\">-></span><span class=\"token function\">toPlainText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    m_tcp<span class=\"token operator\">-></span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>sendMsg<span class=\"token punctuation\">.</span><span class=\"token function\">toUtf8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    ui<span class=\"token operator\">-></span>rec<span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端Say:\"</span><span class=\"token operator\">+</span>sendMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    ui<span class=\"token operator\">-></span>rec<span class=\"token operator\">-></span><span class=\"token function\">setAlignment</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>AlignLeft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    ui<span class=\"token operator\">-></span>msg<span class=\"token operator\">-></span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsjDYUbUeUpnsDUlSjZPqtibxwVvib82pHXYUD401Bn7CJpONrOPY47AfMbXA8ne7Uyg3cJrGjI9Zzg/640?wx_fmt=png\" alt=\"TCP通信\" title=\"TCP通信\" /></p>\n<h1 id=\"udp通信\"><a class=\"anchor\" href=\"#udp通信\">#</a> UDP 通信</h1>\n<blockquote>\n<p>Qt 的客户端和服务端不区分，实现双向通信，彼此即是服务端，也是接收端</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbsjDYUbUeUpnsDUlSjZPqtibvZhnlh8sbDNJcWUAE9zPQxODcfuKwJbqaMjrhVCWhDRWn8QvFLUYJA/640?wx_fmt=jpeg\" alt=\"UDP通信流程\" title=\"UDP通信流程\" /></p>\n<h2 id=\"udp通信案例\"><a class=\"anchor\" href=\"#udp通信案例\">#</a>  <code>UDP</code>  通信案例</h2>\n<h3 id=\"服务端-2\"><a class=\"anchor\" href=\"#服务端-2\">#</a> 服务端</h3>\n<h4 id=\"ui-3\"><a class=\"anchor\" href=\"#ui-3\">#</a>  <code>UI</code></h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsjDYUbUeUpnsDUlSjZPqtibTrQBLmG6Kd9llQ6wic5iavEW5Yt7X1PCjv8QBIriaejLYkP0N9jEUTiaBw/640?wx_fmt=png\" alt=\"服务端UI\" title=\"服务端UI\" /></p>\n<h4 id=\"serverh-2\"><a class=\"anchor\" href=\"#serverh-2\">#</a>  <code>server.h</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">UDF_SERVER_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">UDF_SERVER_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMainWindow></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QUdpSocket></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> Ui <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">udf_server</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">udf_server</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QMainWindow</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">udf_server</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">udf_server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_send_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_connect_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    Ui<span class=\"token double-colon punctuation\">::</span>udf_server <span class=\"token operator\">*</span>ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    QUdpSocket<span class=\"token operator\">*</span> server<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// UDF_SERVER_H</span></span></pre></td></tr></table></figure><h4 id=\"servercpp-2\"><a class=\"anchor\" href=\"#servercpp-2\">#</a>  <code>server.cpp</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"udf_server.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ui_udf_server.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>udf_server<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">udf_server</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>udf_server<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">setWindowTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UDP 服务器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QUdpSocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ui<span class=\"token operator\">-></span>ip<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ui<span class=\"token operator\">-></span>port_self<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"8888\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前主机绑定端口号</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 读取对方发送的数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QUdpSocket<span class=\"token double-colon punctuation\">::</span>readyRead<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        QByteArray datagram<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        datagram<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>server<span class=\"token operator\">-></span><span class=\"token function\">pendingDatagramSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        server<span class=\"token operator\">-></span><span class=\"token function\">readDatagram</span><span class=\"token punctuation\">(</span>datagram<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>datagram<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读数据</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        ui<span class=\"token operator\">-></span>recev<span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对方:\"</span><span class=\"token operator\">+</span>datagram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token class-name\">udf_server</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">udf_server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> udf_server<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_send_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 发送环节设置</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 读取要发送的内容</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    QByteArray datagram <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>send_text<span class=\"token operator\">-></span><span class=\"token function\">toPlainText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUtf8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 发送的信息，大小，IP 和端口</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    server<span class=\"token operator\">-></span><span class=\"token function\">writeDatagram</span><span class=\"token punctuation\">(</span>datagram<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>datagram<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">QHostAddress</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>ip<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>ui<span class=\"token operator\">-></span>port<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    ui<span class=\"token operator\">-></span>recev<span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本机\"</span> <span class=\"token operator\">+</span> ui<span class=\"token operator\">-></span>send_text<span class=\"token operator\">-></span><span class=\"token function\">toPlainText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    ui<span class=\"token operator\">-></span>send_text<span class=\"token operator\">-></span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 启动服务器</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">void</span> udf_server<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_connect_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 当前服务端绑定端口号</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    server<span class=\"token operator\">-></span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">QHostAddress</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>ip<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>ui<span class=\"token operator\">-></span>port_self<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置当前主机绑定的端口</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    ui<span class=\"token operator\">-></span>connect<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"客户端-2\"><a class=\"anchor\" href=\"#客户端-2\">#</a> 客户端</h3>\n<h4 id=\"ui-4\"><a class=\"anchor\" href=\"#ui-4\">#</a> UI</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsjDYUbUeUpnsDUlSjZPqtibNgoiceVXrHYrN7v6b2bfP0rpRticlZrFS5lTN21z4zR9sgyZhsTibIiaEw/640?wx_fmt=png\" alt=\"客户端UI\" title=\"客户端UI\" /></p>\n<h4 id=\"clienth-2\"><a class=\"anchor\" href=\"#clienth-2\">#</a> client.h</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">UDF_CLIENT_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">UDF_CLIENT_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMainWindow></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QUdpSocket></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> Ui <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">udf_client</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">udf_client</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QMainWindow</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">udf_client</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">udf_client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_connect_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_send_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    Ui<span class=\"token double-colon punctuation\">::</span>udf_client <span class=\"token operator\">*</span>ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    QUdpSocket <span class=\"token operator\">*</span> recever<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// UDF_CLIENT_H</span></span></pre></td></tr></table></figure><h4 id=\"clientcpp-2\"><a class=\"anchor\" href=\"#clientcpp-2\">#</a>  <code>client.cpp</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"udf_client.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ui_udf_client.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>udf_client<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">udf_client</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>udf_client<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">setWindowTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UDP 绑定IP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    ui<span class=\"token operator\">-></span>ip<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    recever <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QUdpSocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">udf_client</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">udf_client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> udf_client<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_connect_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 点击连接之后，进入接受状态</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    recever<span class=\"token operator\">-></span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">QHostAddress</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>ip<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>ui<span class=\"token operator\">-></span>port<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 绑定 IP</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>recever<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QUdpSocket<span class=\"token double-colon punctuation\">::</span>readyRead<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        QByteArray datagram<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        datagram<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>recever<span class=\"token operator\">-></span><span class=\"token function\">pendingDatagramSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        recever<span class=\"token operator\">-></span><span class=\"token function\">readDatagram</span><span class=\"token punctuation\">(</span>datagram<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>datagram<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读数据</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        ui<span class=\"token operator\">-></span>rev<span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对方:\"</span><span class=\"token operator\">+</span>datagram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    ui<span class=\"token operator\">-></span>connect<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">//ui->rev->setEnabled(false);</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">void</span> udf_client<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_send_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 发送环节设置</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 读取要发送的内容</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    QByteArray datagram <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>send_test<span class=\"token operator\">-></span><span class=\"token function\">toPlainText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUtf8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 发送的信息，大小，IP 和端口</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    recever<span class=\"token operator\">-></span><span class=\"token function\">writeDatagram</span><span class=\"token punctuation\">(</span>datagram<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>datagram<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">QHostAddress</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>ip<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>ui<span class=\"token operator\">-></span>port_other<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    ui<span class=\"token operator\">-></span>rev<span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本机\"</span> <span class=\"token operator\">+</span> ui<span class=\"token operator\">-></span>send_test<span class=\"token operator\">-></span><span class=\"token function\">toPlainText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    ui<span class=\"token operator\">-></span>send_test<span class=\"token operator\">-></span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsjDYUbUeUpnsDUlSjZPqtib0vbgtA8ZD7nZLIxTLlVA72QKn4ZZRwo9K7ibicVCUQtM7tRmRrDCKE1Q/640?wx_fmt=png\" alt=\"UDP通信\" title=\"UDP通信\" /></p>\n<h1 id=\"tcp文件传输\"><a class=\"anchor\" href=\"#tcp文件传输\">#</a> TCP 文件传输</h1>\n<blockquote>\n<p>客户端连接服务器，可以实现多种文件向服务器进行发送</p>\n</blockquote>\n<h2 id=\"服务端接收端\"><a class=\"anchor\" href=\"#服务端接收端\">#</a> 服务端 ` 接收端</h2>\n<h3 id=\"ui-5\"><a class=\"anchor\" href=\"#ui-5\">#</a>  <code>UI</code></h3>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsjDYUbUeUpnsDUlSjZPqtib10LicwbJr6JAkkX4AXiahU4zMfqtdjicrZ8ic4SoEicCnLX8d3swGawFeGg/640?wx_fmt=png\" alt=\"服务端UI\" title=\"服务端UI\" /></p>\n<h3 id=\"serverh-3\"><a class=\"anchor\" href=\"#serverh-3\">#</a>  <code>server.h</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">SERVER_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SERVER_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMainWindow></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QTcpSocket></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QTcpServer></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QFile></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QTimer></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QFileDialog></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QFileInfo></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDebug></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMessageBox></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">namespace</span> Ui <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">server</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">server</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QMainWindow</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">private</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_startServer_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    Ui<span class=\"token double-colon punctuation\">::</span>server <span class=\"token operator\">*</span>ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    QTcpServer<span class=\"token operator\">*</span> m_server<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    QTcpSocket<span class=\"token operator\">*</span> m_tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">bool</span> headinfo <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    QString filename<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    qint64 filesize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    qint64 recvsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    QFile file<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// SERVER_H</span></span></pre></td></tr></table></figure><h3 id=\"servercpp-3\"><a class=\"anchor\" href=\"#servercpp-3\">#</a>  <code>server.cpp</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"server.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ui_server.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>server<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">server</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>server<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">setWindowTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TCP - 服务器接受文件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 创建 QTcpServer 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    m_server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QTcpServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 客户端断开了连接</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//    connect(m_tcp,&amp;QTcpSocket::disconnected,this,[=]()</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//    &#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//         m_tcp->deleteLater();</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//         ui->m_status->setText (\"已断开\");</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//    &#125;);</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token class-name\">server</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> server<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_startServer_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>port<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 设置服务器监听</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    m_server<span class=\"token operator\">-></span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>QHostAddress<span class=\"token double-colon punctuation\">::</span>LocalHost<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 检测是否有新链接</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_server<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QTcpServer<span class=\"token double-colon punctuation\">::</span>newConnection<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>       m_tcp <span class=\"token operator\">=</span> m_server<span class=\"token operator\">-></span><span class=\"token function\">nextPendingConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 TCP 连接</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>       ui<span class=\"token operator\">-></span>m_status<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>       <span class=\"token comment\">// 客户端发送过来了数据</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>       <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_tcp<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QTcpSocket<span class=\"token double-colon punctuation\">::</span>readyRead<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>       <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 读取数据</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>           QByteArray array <span class=\"token operator\">=</span> m_tcp<span class=\"token operator\">-></span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>headinfo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>           <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>               headinfo <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>               recvsize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>               filename <span class=\"token operator\">=</span> <span class=\"token function\">QString</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">section</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"**\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 起始，结束</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>               filesize <span class=\"token operator\">=</span> <span class=\"token function\">QString</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">section</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"**\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>               file<span class=\"token punctuation\">.</span><span class=\"token function\">setFileName</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置文件</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>               file<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QIODevice<span class=\"token double-colon punctuation\">::</span>WriteOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 只读的方式打开文件</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>               <span class=\"token comment\">// 设置传输的进度条</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>               ui<span class=\"token operator\">-></span>progressBar<span class=\"token operator\">-></span><span class=\"token function\">setMinimum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>               ui<span class=\"token operator\">-></span>progressBar<span class=\"token operator\">-></span><span class=\"token function\">setMaximum</span><span class=\"token punctuation\">(</span>filesize <span class=\"token operator\">/</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>               ui<span class=\"token operator\">-></span>progressBar<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置当前值为 0</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>           <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>           <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>               <span class=\"token comment\">// 处理数据文件</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                qint64 length <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                    recvsize <span class=\"token operator\">+=</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                ui<span class=\"token operator\">-></span>progressBar<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>recvsize <span class=\"token operator\">/</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"接收大小\"</span><span class=\"token operator\">&lt;&lt;</span> recvsize <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"文件大小\"</span><span class=\"token operator\">&lt;&lt;</span> filesize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>recvsize <span class=\"token operator\">==</span> filesize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                    <span class=\"token class-name\">QMessageBox</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">information</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"完成\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"文件接受完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                    file<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"客户端发送端\"><a class=\"anchor\" href=\"#客户端发送端\">#</a> 客户端 <code>发送端</code></h2>\n<h3 id=\"ui-6\"><a class=\"anchor\" href=\"#ui-6\">#</a>  <code>UI</code></h3>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsjDYUbUeUpnsDUlSjZPqtib1CTW28SQjicTxliaYdYcuGZRicesk71XAPvVznIBvib3UFCHMRufB7IibRQ/640?wx_fmt=png\" alt=\"客户端UI\" title=\"客户端UI\" /></p>\n<h3 id=\"clienth-3\"><a class=\"anchor\" href=\"#clienth-3\">#</a>  <code>client.h</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">CLIENT_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CLIENT_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMainWindow></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QTcpSocket></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QFile></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QTimer></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">namespace</span> Ui <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">client</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">client</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QMainWindow</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">client</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">private</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_connect_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_close_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_send_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_open_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    Ui<span class=\"token double-colon punctuation\">::</span>client <span class=\"token operator\">*</span>ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    QTcpSocket<span class=\"token operator\">*</span> m_tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    QString filename<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    qint64 filesize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    QFile file<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    QTimer <span class=\"token operator\">*</span>myTimer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// CLIENT_H</span></span></pre></td></tr></table></figure><h3 id=\"clientcpp-3\"><a class=\"anchor\" href=\"#clientcpp-3\">#</a>  <code>client.cpp</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"client.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ui_client.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QFileDialog></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QFileInfo></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDebug></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>client<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">client</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>client<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">setWindowTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TCP - 客户端上传文件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 创建通信的套接字对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ui<span class=\"token operator\">-></span>ip<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    m_tcp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QTcpSocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    ui<span class=\"token operator\">-></span>close<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 检测是否和服务器连接成功</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_tcp<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QTcpSocket<span class=\"token double-colon punctuation\">::</span>connected<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//ui->rec->append (\"恭喜，服务器连接成功！\");</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        ui<span class=\"token operator\">-></span>status<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        ui<span class=\"token operator\">-></span>connect<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        ui<span class=\"token operator\">-></span>close<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 检测服务器是都恢复了数据</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//    connect(m_tcp,&amp;QTcpSocket::readyRead,[=]()</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//    &#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//        QByteArray recvMsg = m_tcp->readAll();</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">//        ui->rec->append (\"服务器 say:\"+recvMsg);</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//        ui->rec->setAlignment(Qt::AlignRight);</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//    &#125;);</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 检测服务器是否断开了连接</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_tcp<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QTcpSocket<span class=\"token double-colon punctuation\">::</span>disconnected<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">//ui->rec->append (\"服务器已经断开了连接\");</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        ui<span class=\"token operator\">-></span>status<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        ui<span class=\"token operator\">-></span>connect<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        ui<span class=\"token operator\">-></span>close<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    myTimer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QTimer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>myTimer<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QTimer<span class=\"token double-colon punctuation\">::</span>timeout<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        myTimer<span class=\"token operator\">-></span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭定时器</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        qint64 sendSize <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        qint64 len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            len <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每次读取的空间</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            m_tcp<span class=\"token operator\">-></span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取的文件缓冲区放到 buf 里面</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            sendSize <span class=\"token operator\">+=</span>len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            ui<span class=\"token operator\">-></span>progressBar<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>sendSize <span class=\"token operator\">/</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sendSize <span class=\"token operator\">==</span> filesize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"文件发送成功\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            file<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            m_tcp<span class=\"token operator\">-></span><span class=\"token function\">disconnectFromHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            m_tcp<span class=\"token operator\">-></span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token class-name\">client</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">void</span> client<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_connect_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    QString ip <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>ip<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>port<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\">// 连接服务器</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    m_tcp<span class=\"token operator\">-></span><span class=\"token function\">connectToHost</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">void</span> client<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_close_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    m_tcp<span class=\"token operator\">-></span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    ui<span class=\"token operator\">-></span>connect<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    ui<span class=\"token operator\">-></span>close<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">void</span> client<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_send_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token comment\">// 点击 开始之后，发送数据，先发送头名称和大小</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">// 文件名 ** 文件大小</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    QString head <span class=\"token operator\">=</span> filename <span class=\"token operator\">+</span> <span class=\"token string\">\"**\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span>filesize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    qint64 length  <span class=\"token operator\">=</span> m_tcp<span class=\"token operator\">-></span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">toUtf8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将头文件发送过去</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token comment\">// 发送成功</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        myTimer<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//20 毫秒之后再发，避免粘包</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token comment\">// 发送失败</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        file<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭文件</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token keyword\">void</span> client<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_open_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    QString filepath <span class=\"token operator\">=</span> <span class=\"token class-name\">QFileDialog</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getOpenFileName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token comment\">// 同时发送文件名称和文件大小</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    QFileInfo <span class=\"token function\">FileData</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    filename <span class=\"token operator\">=</span> FileData<span class=\"token punctuation\">.</span><span class=\"token function\">fileName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 文件名称</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    filesize <span class=\"token operator\">=</span> FileData<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 文件大小</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"文件名\"</span><span class=\"token operator\">&lt;&lt;</span>filename <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"  文件大小:\"</span><span class=\"token operator\">&lt;&lt;</span>filesize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>filepath<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        ui<span class=\"token operator\">-></span>file<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        file<span class=\"token punctuation\">.</span><span class=\"token function\">setFileName</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置文件</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        file<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QIODevice<span class=\"token double-colon punctuation\">::</span>ReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 只读的方式打开文件</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token comment\">// 设置传输的进度条</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    ui<span class=\"token operator\">-></span>progressBar<span class=\"token operator\">-></span><span class=\"token function\">setMinimum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    ui<span class=\"token operator\">-></span>progressBar<span class=\"token operator\">-></span><span class=\"token function\">setMaximum</span><span class=\"token punctuation\">(</span>filesize <span class=\"token operator\">/</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    ui<span class=\"token operator\">-></span>progressBar<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置当前值为 0</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsjDYUbUeUpnsDUlSjZPqtibgMYQmNTMC0lfqK17Y88at1NMYdo0xOduHodoWWOv03HjID0p5G8KYA/640?wx_fmt=png\" alt=\"文件发送\" title=\"文件发送\" /></p>\n",
            "tags": [
                "计算机科学",
                "C++",
                "Qt",
                "套接字通信",
                "Qt"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Linux/Linux%E4%BF%A1%E5%8F%B7/",
            "url": "https://www.blog.foryouos.cn/computer-science/Linux/Linux%E4%BF%A1%E5%8F%B7/",
            "title": "linux信号",
            "date_published": "2023-06-15T11:26:43.000Z",
            "content_html": "<h1 id=\"信号\"><a class=\"anchor\" href=\"#信号\">#</a> 信号</h1>\n<blockquote>\n<p><code>信号</code> 本质是一个 <code>整数</code> ，不同的信号对应不同 <code>的值</code> ，由于信号的结构简单，不能携带大量信息量，在系统中的 <code>优先级非常高</code></p>\n</blockquote>\n<h2 id=\"信号编号\"><a class=\"anchor\" href=\"#信号编号\">#</a> 信号编号</h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuAZEWbsPKptycVwDzZkVekAeF40TOFSQZEJriaz5jNYmwCS5ZTVZSRWQkYpbTu3M7aQUTbMALeBGg/640?wx_fmt=png\" alt=\"信号编号\" title=\"信号编号\" /></p>\n<ul>\n<li><code>SIGHUP </code> : 用户 <code>退出shell</code>  时，由 shell 启动的 <code>所有进程都收到此信号</code></li>\n<li><code>SIGINT</code>  ： 用户按 <code>下Ctrl + C</code>  组合键，用户终端向所有 <code>正在运行</code> 的由该终端启动的程序发出 <code>此信号</code></li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 查看man文档的信号描述</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">man</span> <span class=\"token number\">7</span> signal</pre></td></tr></table></figure><h2 id=\"信号状态\"><a class=\"anchor\" href=\"#信号状态\">#</a> 信号状态</h2>\n<ul>\n<li><code>产生</code> ：输入，函数 <code>调用</code> ，执行设立了 <code>指令</code></li>\n<li><code>未决</code> ：信号残生，但此信号还没有被 <code>处理掉</code></li>\n<li><code>抵达:</code>  信号 <code>被处理了</code></li>\n</ul>\n<h2 id=\"信号函数\"><a class=\"anchor\" href=\"#信号函数\">#</a> 信号函数</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#inlcude &lt;signal.h></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//给某个进程发送信号</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>int kill<span class=\"token punctuation\">(</span>pid_t pid,int sig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//pid 进程ID</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//sig 要发送的信号</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//杀死自己</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>kill<span class=\"token punctuation\">(</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>,9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>// 子进程杀死自己父进程</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>kill<span class=\"token punctuation\">(</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>,10<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>//raise给当前进程发送指定的信号</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>int raise<span class=\"token punctuation\">(</span>int sig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //参数就是要给当前进程发送信号</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>// abort给当前进程发送一个固定信号<span class=\"token punctuation\">(</span>SIGABRT<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#include &lt;stdlib.h></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>void abort<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>//定时器</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>unsigned int alarm<span class=\"token punctuation\">(</span>unsigned int seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>// 倒计时seconds秒，倒计时完成发送一个信号SIGALRM,当前进程收到这个信号，默认处理中断当前进程</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>// 大于0 表示倒计时剩余多少秒，返回0表示倒计时完成</pre></td></tr></table></figure><h3 id=\"计算一秒数数\"><a class=\"anchor\" href=\"#计算一秒数数\">#</a> 计算一秒数数</h3>\n<blockquote>\n<p>文件 <code>IO</code>  操作需要进行 <code>用户区到核心区</code> 的切换，处理方式不同，两者 <code>切换频率</code> 不同。对 <code>文件IO</code>  操作进行优化是可以 <code>提供程序</code> 的执行效率。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 1. 设置一个定时器，定时 1s</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">alarm</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 1s 之后会发出一个信号，这个信号将中断当前进程</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输出信号 : %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 运行数据 直接通过终端数据</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>time <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>time </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 将数据重定向到磁盘文件中，用户实际时间增长</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>time <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>time <span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span>txt</pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuAZEWbsPKptycVwDzZkVekCmSfyqTdFH9RsS3hxBsjHibaryFwSS2ibyMniarkicH508TGib0GxUzkQBA/640?wx_fmt=png\" alt=\"输出信号\" title=\"输出信号\" /></p>\n<h2 id=\"周期性信号函数\"><a class=\"anchor\" href=\"#周期性信号函数\">#</a> 周期性信号函数</h2>\n<blockquote>\n<p><code>setitimer()</code>  函数可以进行周期性定时， <code>每</code> 触发 <code>一次</code> 就会 <code>发射出</code> 一个 <code>信号</code></p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">itimerval</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> it_interval<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 时间间隔 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> it_value<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 第一次触发定时器的时长 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 举例: </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 早晨 5 点起床，第一次闹钟响起时可能起不来，之后每隔 5 分钟再响一次</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//  - it_value: 当前设置闹钟的时间点 到 明天早晨 7 点 对应的总秒数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//  - it_interval: 闹钟第一次响过之后，每隔 5 分钟响一次</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 这个结构体表示的是一个时间段: tv_sec + tv_usec</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token class-name\">time_t</span>      tv_sec<span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* 秒 */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token class-name\">suseconds_t</span> tv_usec<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 微妙 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">setitimer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> which<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">itimerval</span> <span class=\"token operator\">*</span>new_value<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>              <span class=\"token keyword\">struct</span> <span class=\"token class-name\">itimerval</span> <span class=\"token operator\">*</span>old_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//which 定时器使用什么样的计时法</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token operator\">*</span> ITIMER_REAL<span class=\"token operator\">:</span>自然计数法，发出的信号为SIGALRM<span class=\"token punctuation\">,</span>自然计时法时间<span class=\"token operator\">=</span>用户区<span class=\"token operator\">+</span>内核<span class=\"token operator\">+</span>消耗的时间<span class=\"token punctuation\">(</span>从进程的用户区到内核区切换的总时间<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">*</span> ITIMER_VIRTUAL<span class=\"token operator\">:</span>只计算用户区运行使用的时间，发射的信号为SIGVTALRM</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">*</span> ITIMER_PROF<span class=\"token operator\">:</span> 只计算内核运行使用的时间，发出的信号为SIGPROF</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//new_value : 定时器设置的定时信息，传入参数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//old_value : 上一次给定时器设置的定时信息，传出参数，如果不需要指定为 NULL</span></pre></td></tr></table></figure><h2 id=\"信号集\"><a class=\"anchor\" href=\"#信号集\">#</a> 信号集</h2>\n<ul>\n<li><code>信号</code> 的 <code>未决</code> 是一种状态，指的是信号的产生到信号 <code>被处理前</code> 的这 <code>一段时间</code></li>\n<li>信号的 <code>阻塞</code> 是一个 <code>开关动作</code> ，值得使阻止信号被处理，但不是 <code>阻止信号产生</code> 。信号的阻塞就是让系统 <code>暂时保留</code> 信号待以后发送。</li>\n</ul>\n<blockquote>\n<p>阻塞信号集和未决信号集在内核中 <code>结构相同</code> ，都是 <code>整型数组</code> ，一共 <code>128字节</code> ， <code>1024</code>  个标志位，前 <code>31</code>  个标志位。</p>\n<p>默认 <code>没有信号被阻塞</code> ，信号标识为为 <code>0</code> ， <code>阻塞</code> 状态为 <code>1</code> .</p>\n<p>如果信号 <code>被阻塞</code> ，不能处理则 <code>标志位</code> 被设置为 <code>1</code></p>\n<p>阻塞 <code>被解除</code> ，未决信号 <code>马上被处理</code> ，信号标志位为 <code>0</code></p>\n</blockquote>\n<h3 id=\"信号集函数\"><a class=\"anchor\" href=\"#信号集函数\">#</a> 信号集函数</h3>\n<h4 id=\"sigprocmask读写信号集\"><a class=\"anchor\" href=\"#sigprocmask读写信号集\">#</a>  <code>sigprocmask</code>  读写信号集</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sigprocmask</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> how<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">sigset_t</span> <span class=\"token operator\">*</span>set<span class=\"token punctuation\">,</span><span class=\"token class-name\">sigset_t</span> <span class=\"token operator\">*</span>oldset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 参数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// how</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token operator\">*</span> SIG_BLOCK<span class=\"token operator\">:</span>将参数set集合中数据添加到阻塞信号集中</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">*</span> SIG_UNBLOCK<span class=\"token operator\">:</span>将参数set集合中在阻塞信号中解除阻塞</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span> SIG_SETMASK <span class=\"token operator\">:</span> 使参数set集合中的数据覆盖内核的阻塞信号集数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//oldset: 通过此参数将之前的阻塞数据集传出，若不需要指定 NULL</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 返回值：调用成功返回 0，调用失败返回 - 1</span></pre></td></tr></table></figure><h4 id=\"sigset_ts初始化\"><a class=\"anchor\" href=\"#sigset_ts初始化\">#</a>  <code>sigset_t</code> s 初始化</h4>\n<blockquote>\n<p>在程序中读写 <code>sigset_t</code>  类型的变量，阻塞信号和未决信号集都存储在 <code>sigset_t</code>  类型的 <code>变量中</code> ，这个变量对应一块 <code>内存</code> ，则是 <code>信号集</code> 和 <code>未决信号集</code> ，对应内存 <code>1024bit = 128</code>  字节</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将 set 集合中所有的标志位设置为 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sigemptyset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">sigset_t</span> <span class=\"token operator\">*</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 将 set 集合中所有的标志为设置为 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sigfillset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">sigset_t</span> <span class=\"token operator\">*</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 将 set 集合中的某一个信号 (signum) 对应的标志位设置为 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sigaddset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">sigset_t</span> <span class=\"token operator\">*</span>set<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> signum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 将 set 集合中某一个信号 (signum) 对应的标志位设置为 0``</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sigdelset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">sigset_t</span> <span class=\"token operator\">*</span>set<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> signum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 判断某个信号在集合中对应的标志位是 0 还是 1，返回对应标志位</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sigismember</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">sigset_t</span> <span class=\"token operator\">*</span>set<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> signum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 读内核未决信号集</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sigpending</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">sigset_t</span> <span class=\"token operator\">*</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"信号捕捉\"><a class=\"anchor\" href=\"#信号捕捉\">#</a> 信号捕捉</h2>\n<blockquote>\n<p>程序中每个信号产生之后都会有对应的 <code>默认处理动作</code> 。程序中 <code>信号捕捉</code> ，需要 <code>提前注册</code> ，告诉应用程序信号产生之后做什么样的处理。</p>\n</blockquote>\n<h3 id=\"signal\"><a class=\"anchor\" href=\"#signal\">#</a>  <code>signal</code></h3>\n<blockquote>\n<p>可以 <code>捕捉</code> 进程中产生的 <code>信号</code> ，并且 <code>修改捕</code> 捉到的 <code>函数行为</code> ，信号自定义动作时回调函数，内核通过 <code>signal()</code>  得到这个回调函数地址，在信号产生之后会被内核调用， <code>信号产生之前，提前注册</code></p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">sighandler_t</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> signum<span class=\"token punctuation\">,</span><span class=\"token class-name\">sighandler_t</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//sighandler_t 需要捕捉的信号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//handler 信号捕捉到之后的处理动作，函数指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token class-name\">sighandler_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 定时器信号的处理动作</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">doing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前捕捉到的信号是: %d\\n\"</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 打印当前的时间</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 注册要捕捉哪一个信号，执行什么样的处理动作</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGALRM<span class=\"token punctuation\">,</span> doing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 1. 调用定时器函数设置定时器函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">itimerval</span> newact<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 3s 之后发出第一个定时器信号，之后每隔 1s 发出一个定时器信号</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    newact<span class=\"token punctuation\">.</span>it_value<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    newact<span class=\"token punctuation\">.</span>it_value<span class=\"token punctuation\">.</span>tv_usec <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    newact<span class=\"token punctuation\">.</span>it_interval<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    newact<span class=\"token punctuation\">.</span>it_interval<span class=\"token punctuation\">.</span>tv_usec <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 这个函数也不是阻塞函数，函数调用成功，倒计时开始</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 倒计时过程中程序是继续运行的</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">setitimer</span><span class=\"token punctuation\">(</span>ITIMER_REAL<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>newact<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 编写一个业务处理，阻止当前进程自己结束，让当前进程被发出的信号杀死</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"sigaction\"><a class=\"anchor\" href=\"#sigaction\">#</a> sigaction</h3>\n<blockquote>\n<p>同 <code>signal</code>  信号捕捉</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sigaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> signum<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sigaction</span> <span class=\"token operator\">*</span>act<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sigaction</span> <span class=\"token operator\">*</span>oldact<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sigaction</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span>     <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sa_handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 指向一个函数 (回调函数)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">void</span>     <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sa_sigaction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">siginfo_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">sigset_t</span>   sa_mask<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 初始化为空即可，处理函数执行期间不屏蔽任何信号</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span>        sa_flags<span class=\"token punctuation\">;</span>\t        <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">void</span>     <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sa_restorer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 不用</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//sa_handler: 函数指针，指向捕捉到信号的处理动作</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//sa_sigaction: 上同</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//sa_mask: 在信号处理函数执行期间，临时屏蔽某些信号</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//sa_flags: 使用那个指针函数 0 使用 sa_handler, SA_SIGINFO 使用 sa_sigaction 使用信号传递数据 == 进程间通信</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 信号的处理动作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"捕捉信号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前捕捉的信号: %d\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 1. 初始化信号集</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">sigset_t</span> myset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">sigemptyset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>myset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 设置阻塞的信号</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">sigaddset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>myset<span class=\"token punctuation\">,</span> SIGINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">sigaddset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>myset<span class=\"token punctuation\">,</span> SIGQUIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">sigaddset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>myset<span class=\"token punctuation\">,</span> SIGKILL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9 测试不能被阻塞</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 当阻塞的信号被解除阻塞，该信号就可以被捕捉到了</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 如果信号被捕捉到之后，马上就被处理掉了 --> 递达状态</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sigaction</span> act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    act<span class=\"token punctuation\">.</span>sa_handler <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 回调函数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    act<span class=\"token punctuation\">.</span>sa_flags <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 对应 sa_handler</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 将 set 集合中所有标志位设置为 0</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">sigemptyset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>act<span class=\"token punctuation\">.</span>sa_mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化为空，不屏蔽任何信号</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 设置信号捕捉</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">sigaction</span><span class=\"token punctuation\">(</span>SIGINT<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>act<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//CTRL +C</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 和 sigint 的处理动作相同</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">sigaction</span><span class=\"token punctuation\">(</span>SIGQUIT<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>act<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">sigaction</span><span class=\"token punctuation\">(</span>SIGKILL<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>act<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 2. 将初始化的信号集中的数据设置给内核</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token class-name\">sigset_t</span> old<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 使用此函数修改内核中阻塞信号集，</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">sigprocmask</span><span class=\"token punctuation\">(</span>SIG_BLOCK<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>myset<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>old<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 3. 让进程一直运行，在当前进程中产生对应的信号</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 4. 读内核的未决信号集</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">sigset_t</span> curset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// 读取集合中哪个信号是未决状态</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token function\">sigpending</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">// 遍历这个信号集</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">32</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token comment\">// 判断某个信号在集合中对应的标志位是 0 还是 1，</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">sigismember</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curset<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token comment\">// 解除阻塞，重新设置阻塞信号集</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token comment\">//sigprocmask(SIG_UNBLOCK, &amp;myset, NULL);</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token function\">sigprocmask</span><span class=\"token punctuation\">(</span>SIG_SETMASK<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>old<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuAZEWbsPKptycVwDzZkVekpsRPgBL2lUzicqdiaxhcf1OSmKbM60NFzwtCrX9DDLRR0b1dnB8APFgw/640?wx_fmt=png\" alt=\"捕捉信号\" title=\"捕捉信号\" /></p>\n<h3 id=\"sigchld\"><a class=\"anchor\" href=\"#sigchld\">#</a>  <code>SIGCHLD</code></h3>\n<blockquote>\n<p>当子进程 <code>退出,暂停，从暂停恢复运行</code> ，在子进程中会产生一个 <code>SIFGCHLD</code>  信号，并将其发送给 <code>父进程</code> 。父进程可以捕捉子进程 <code>发送过来的信号来回收子进程的资源</code> 。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/wait.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 回收子进程处理函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">recycle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"捕捉到的信号是: %d\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 子进程的资源回收，非阻塞</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// SIGCHLD 信号 17 号信号，1-31 号信号不支持排队 17 子进程中执行完毕</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 如果这些信号同时产生多个，最终处理的时候只处理一次</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 假设多个子进程同时退出，父进程同时收到了多个 sigchld 信号</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 父进程只会处理一次这个信号，因此当前函数被调用了一次，waitpid 被调用一次</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 相当于只回收了一个子进程，但是是同时死了多个子进程，因此就出现了僵尸进程</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 解决方案：循环回收即可</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 如果是阻塞回收，就回不到另外一个处理逻辑上去了</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">pid_t</span> pid <span class=\"token operator\">=</span> <span class=\"token function\">waitpid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> WNOHANG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child died, pid = %d\\n\"</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 没有死亡的子进程，直接退出当前循环</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"所有子进程都回收完毕了, 拜拜...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 设置 sigchld 信号阻塞</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token class-name\">sigset_t</span> myset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">sigemptyset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>myset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将集合中的所有标志位设置为 0</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// 将 myset 集合中所有标志位设置为 0</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">sigaddset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>myset<span class=\"token punctuation\">,</span> SIGCHLD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// SIG_BLOCK 将参数 set 集合中的数据追加到阻塞信号集中</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">sigprocmask</span><span class=\"token punctuation\">(</span>SIG_BLOCK<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>myset<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// 循环创建多个子进程 - 20</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 循环创建 20 个进程</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 子进程退出，父进程继续创建进程</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是子进程, pid = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是父进程, pid = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token comment\">// 注册信号捕捉，捕捉 sigchld</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sigaction</span> act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        act<span class=\"token punctuation\">.</span>sa_flags  <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        act<span class=\"token punctuation\">.</span>sa_handler <span class=\"token operator\">=</span> recycle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token function\">sigemptyset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>act<span class=\"token punctuation\">.</span>sa_mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token comment\">// 注册信号捕捉，委托内核处理将来产生的信号</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">// 当信号产生之后，当前进程优先处理信号，之前的处理动作会暂停</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\">// 信号处理完毕之后，回到原来的暂停的位置继续运行</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token function\">sigaction</span><span class=\"token punctuation\">(</span>SIGCHLD<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>act<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// 解除 sigcld 信号的阻塞</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">// 信号被阻塞之后，就捕捉不到了，解除阻塞之后才能捕捉到这个信号</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token function\">sigprocmask</span><span class=\"token punctuation\">(</span>SIG_UNBLOCK<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>myset<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token comment\">// 父进程执行其他业务逻辑就可以了</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token comment\">// 默认父进程执行这个 while 循环，但是信号产生了，这个执行逻辑或强迫暂停</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token comment\">// \t父进程去处理信号的处理函数</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuAZEWbsPKptycVwDzZkVek3scegkoZ6EFD8W2l1QLLYvxGUIKz8fe0UdmamKs8kbQ1gRCXPsjQuQ/640?wx_fmt=png\" alt=\"检测子进程\" title=\"检测子进程\" /></p>\n",
            "tags": [
                "计算机科学",
                "Linux",
                "Linux",
                "信号"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Linux/Linux%E5%A5%97%E6%8E%A5%E5%AD%97%E9%80%9A%E4%BF%A1UDP/",
            "url": "https://www.blog.foryouos.cn/computer-science/Linux/Linux%E5%A5%97%E6%8E%A5%E5%AD%97%E9%80%9A%E4%BF%A1UDP/",
            "title": "linux套接字通信UDP",
            "date_published": "2023-06-15T01:26:43.000Z",
            "content_html": "<h2 id=\"udp通信\"><a class=\"anchor\" href=\"#udp通信\">#</a> UDP 通信</h2>\n<blockquote>\n<p><code>UDP</code>  是一个面向 <code>无连接</code> 的 (不需要 connect 操作)，不安全的，报式传输层协议， <code>UDP</code>  的通信过程也是 <code>默认阻塞</code> 的</p>\n<p><code>UDP</code>  首部没有关于数据顺序的信息，若数据丢失，就 <code>全部丢失</code> ，不存在一半的情况，发送端不知道数据是否非正确接受，也不会重发数据。</p>\n<p>在 <code>UDP通信</code> 过程中，哪一段是接受数据的角色，那么这个接收端就 <code>必须绑定</code> 一个固定的 <code>端口</code></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvmibuwoQgfcoib5NIC1Lr4VBxpddJQRVWicmLkibthzMib0vcXLricRIQmTl8OCvCl1icKoA9sK2JDxI1fQ/640?wx_fmt=jpeg\" alt=\"UDP通信流程\" title=\"UDP通信流程\" /></p>\n<h3 id=\"udp发送端\"><a class=\"anchor\" href=\"#udp发送端\">#</a>  <code>UDP</code>  发送端</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PORT_ID</span>\t<span class=\"token expression\"><span class=\"token number\">18899</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SIZE</span>\t<span class=\"token expression\"><span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 客户端发送数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//./client IP  : ./client 192.168.217.1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> server_addr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于存储服务器信息的结构体</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello UDP\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: ./client [server IP address]\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">//1.socket()</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tsockfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_DGRAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 初始化服务器地址信息</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tserver_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 绑定的 IPV4</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tserver_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>PORT_ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将端口号转换为大端</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tserver_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取用户传入的地址</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 发送数据</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token function\">sendto</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> SIZE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>server_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token comment\">// 0： flags, 套接字属性，一般使用默认属性</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token comment\">//dest_addr: 接受数据的一段对应的地址信息 IP 和端口</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token comment\">//addrlen 参数 dest_addr 指向的内存大小</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">// 函数调用成功返回实际发送的字节数，调用失败返回 - 1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" UDP向端口8899发送数据 %s: %s\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"udp接收端\"><a class=\"anchor\" href=\"#udp接收端\">#</a>  <code>UDP</code>  接收端</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//UDP 通信</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PORT_ID</span> <span class=\"token expression\"><span class=\"token number\">18899</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SIZE</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 服务器接受数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> my_addr<span class=\"token punctuation\">,</span> client_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> addr_len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">//1.socket () 绑定套接字 SOCK_DGRAM 设置为 UDP</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 通过指定 SOCK_DGRAM 来指定报式传输协议的套接字</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 第三个参数 0 表示使用报式协议中的 UDP</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    sockfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_DGRAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sockfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">//2.bind () 将套接字绑定端口与 IP，</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    my_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    my_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>PORT_ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    my_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>my_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 绑定后可直接接受数据 UDP 传输</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    addr_len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">char</span> ipbuf<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 一直接收</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server is waiting for client to connect:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">//4.recv () 接受数据</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">int</span> rlen <span class=\"token operator\">=</span> <span class=\"token function\">recvfrom</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> SIZE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>client_addr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">// 接受数据，如果没有数据，该函数阻塞</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">//sockfd: 基于 UDP 通信的文件描述符</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">//buf 指针指向地址用来存储接受的数据</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">//len:buf 指针指向的内存容量</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">//flags：设置套接字属性，一般使用默认属性，指定为 0</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">//src_addr：发送数据端的地址信息，IP 和端口都存储在这里边，大端存储</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">//addrlen：传入 src_addr 参数指向的内存大小，传出的也是</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端的IP地址: %s, 端口: %d\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token function\">inet_ntop</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>client_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">,</span>ipbuf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ipbuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>client_addr<span class=\"token punctuation\">.</span>sin_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到客户端发送的数据: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuAZEWbsPKptycVwDzZkVekbc16acLM762MRyicU0jc9t558XEkOcw9JuCmOUg6Aibbc8p4WgcG9n7g/640?wx_fmt=png\" alt=\"UDP运行\" title=\"UDP运行\" /></p>\n<h2 id=\"udp广播特性\"><a class=\"anchor\" href=\"#udp广播特性\">#</a>  <code>UDP</code>  广播特性</h2>\n<blockquote>\n<p>通过广播可以向 <code>子网中多台</code> 计算机发送消息，并且子网中所有的计算机都可以 <code>接受发送方</code> 发送的消息</p>\n<p>发送端可以将消息同时发送到 <code>局域网</code> 的多台主机上，数据发送必须要把数据发送到广播低地址上，广播只能在 <code>局域网使用</code> 。只要接收端在广播内，就 <code>无法拒绝发送端的信息</code> 。广播的 <code>开销很小</code> ，是局域网快速传播消息的方式。</p>\n</blockquote>\n<h3 id=\"设置广播属性\"><a class=\"anchor\" href=\"#设置广播属性\">#</a> 设置广播属性</h3>\n<blockquote>\n<p>广播属性 <code>默认是关闭的</code></p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> optname<span class=\"token punctuation\">,</span> \t<span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>optval<span class=\"token punctuation\">,</span> <span class=\"token class-name\">socklen_t</span> optlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//sockfd ：UDP 通信文件描述符</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//level 套接字级别，需要设置为 SOL_SOCKET</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//optname 选项名，此处设置 UDP 广播属性 SO_BROADCAST</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//optval 设置广播属性，该指针实际指向一个 int 类型内存</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 0 关闭广播属性</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 1 打开广播属性</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//optlen ： optval 指针指向的内存大小即 sizeof (int)</span></pre></td></tr></table></figure><h3 id=\"通信流程\"><a class=\"anchor\" href=\"#通信流程\">#</a> 通信流程</h3>\n<blockquote>\n<p>发送端在固定端口发送数据，接收端绑定到端口，只接受广播信息、在数据接收端要绑定固定的端口，发送端可以随机端口</p>\n</blockquote>\n<h4 id=\"发送端-广播端\"><a class=\"anchor\" href=\"#发送端-广播端\">#</a> 发送端 广播端</h4>\n<ul>\n<li>创建套接字</li>\n<li>设置广播属性</li>\n<li><code>sendto</code>  发送数据到 <code>端口上</code></li>\n<li>关闭套接字 (文件描述符)</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 发送端 server</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 1. 创建通信的套接字</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_DGRAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 2. 设置广播属性</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> opt  <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//0 关闭广播属性，1 打开广播属性</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_BROADCAST<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>opt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> cliaddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cliaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cliaddr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span> <span class=\"token comment\">//IPV4</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cliaddr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接收端需要绑定 9999 端口</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 只要主机在 217 网段，并且绑定了 9999 端口，这个接收端就能收到广播消息</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token string\">\"192.168.217.255\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cliaddr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此处设置成自身 Linux 所处的网段</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 3. 通信</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello, client...%d\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 数据广播</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">sendto</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>cliaddr<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送的广播的数据: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"接收端\"><a class=\"anchor\" href=\"#接收端\">#</a> 接收端</h4>\n<ul>\n<li>创建通信的套接字</li>\n<li>绑定 <code>固定</code> 的端口和 <code>本地IP地址</code></li>\n<li><code>recvfrom</code>  接收广播消息 (接受的数据从接收端打开的时刻开始 <code>对应数据</code> )</li>\n<li>关闭套接字</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 多个接收端都可以接受到数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 1. 创建通信的套接字</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_DGRAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 设置端口复用，以便多个客户端连接此端口进行接受数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> opt <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1 开启端口复用 0 关闭</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>opt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 2. 通信的套接字和本地的 IP 与端口绑定</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 大端 端口要与服务器相同</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 发送端时本机的 217 网段，客户接收端任意 IP 皆可</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 0.0.0.0 接收端的 IP 任意 </span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 3. 通信</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 客户端接受广播</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 接收广播消息</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 阻塞等待数据达到</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function\">recvfrom</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到的广播消息: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuAZEWbsPKptycVwDzZkVekOPt9V8JpXf4TYCJlv7qOdtvnSQO0eOpDbQSn7yGiaico5RciaicTicbvICw/640?wx_fmt=png\" alt=\"广播\" title=\"广播\" /></p>\n<h2 id=\"udp组播\"><a class=\"anchor\" href=\"#udp组播\">#</a>  <code>UDP</code>  组播</h2>\n<blockquote>\n<p>组播是主机间 <code>一对多</code> 通讯模型，允许一个或多个组播源发送同一报文到多个接受者的技术。组播源将一份报文发送到特定的组播地址，一个 <code>组播地址表示一个群</code> 组，需要接受组播报文接收者都 <code>加入</code> 这个群组。 <code>群聊</code></p>\n<ul>\n<li>组播也可用于 <code>广域网</code></li>\n<li>组播可以控制发送端的数据被哪些接受</li>\n<li>组播使用组播地址</li>\n<li><code>组播地址</code> 不属于服务器或个人，类似 <code>QQ群号</code> 。任何组播源往 <code>组播IP</code>  发送消息 (组播数据)，这个组播接受者都会接收到此消息</li>\n<li><code>setsockopt</code>  函数开启默认关闭的组播属性</li>\n<li>通过端口复用可以多个发送端，多个接收端，接收端可以同步接受所有发送端的数据</li>\n</ul>\n</blockquote>\n<h3 id=\"ipv4组播地址\"><a class=\"anchor\" href=\"#ipv4组播地址\">#</a>  <code>IPV4</code>  组播地址</h3>\n<table>\n<thead>\n<tr>\n<th><code>IP 地址</code></th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>224.0.0.0~224.0.0.255</code></td>\n<td><code>局部</code> 链接多播地址：是为路由协议和其它用途保留的地址</td>\n</tr>\n<tr>\n<td>只能用于 <code>局域网</code> 中</td>\n<td>路由器是 <code>不会转发的</code> 地址 224.0.0.0 不能用，是保留地址</td>\n</tr>\n<tr>\n<td><code>224.0.1.0~224.0.1.255</code></td>\n<td>为 <code>用户可用的组播地址</code> （临时组地址），可以用于  <code>Internet</code>  上的</td>\n</tr>\n<tr>\n<td><code>224.0.2.0~238.255.255.255</code></td>\n<td>用户可用的 <code>组播地址</code> （临时组地址），全网范围内有效</td>\n</tr>\n<tr>\n<td><code>239.0.0.0~239.255.255.255</code></td>\n<td>为 <code>本地管理组播地址</code> ，仅在 <code>特定的本地范围内</code> 有效</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"发送端\"><a class=\"anchor\" href=\"#发送端\">#</a> 发送端</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 发送端</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 1. 创建通信的套接字 SOCK_DGRAM，0 使用 UDP 协议</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_DGRAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 2. 设置组播属性</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span> opt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 将组播地址初始化到这个结构体成员中即可</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token string\">\"239.0.1.10\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>opt<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// IP 地址转换，将中间 IPV4 地址转为网络字节序到最后的输出参数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 设置组播属性</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> IPPROTO_IP<span class=\"token punctuation\">,</span> IP_MULTICAST_IF<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>opt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//fd 套接字， IPPROTO_IP 为 level 参数，套接字界别</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">//IP_MULTICAST_IF 套接字选项名</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//opt 为指向 struct in_addr &#123;&#125; 的结构体地址，用于存储组播地址，大端存储</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 设置绑定信息</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> cliaddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cliaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    cliaddr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span> <span class=\"token comment\">//IPV4</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    cliaddr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接收端需要绑定 9999 端口</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 发送组播消息，需要使用组播地址，和设置组播属性使用的组播地址一致就可以</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token string\">\"239.0.1.10\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cliaddr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//IP 地址转换</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 3. 通信</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 设置发送的数据</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello, client...%d\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 数据广播 </span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 通过 sendto 函数发送数据到组播地址，并在程序中数据发送到接收端 9999 端口，接收端必须绑定此端口才能收到组播</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">sendto</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>cliaddr<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送的组播的数据: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"接收端-2\"><a class=\"anchor\" href=\"#接收端-2\">#</a> 接收端</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;net/if.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 组播数据接收方，需要加入组播方可</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 1. 创建通信的套接字</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_DGRAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 设置端口复用，以便多个客户端连接此端口进行接受数据</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> opts <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1 开启端口复用 0 关闭</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>opts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 2. 通信的套接字和本地的 IP 与端口绑定</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 大端</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 0.0.0.0</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 接收端需要绑定固定端口</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 3. 加入到多播组，入群之后就可以接受组播信息</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ip_mreqn</span> opt<span class=\"token punctuation\">;</span> <span class=\"token comment\">//struct ip_mreqn 用于接入组播机构提</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 要加入到哪个多播组，通过组播地址来区分</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token string\">\"239.0.1.10\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>opt<span class=\"token punctuation\">.</span>imr_multiaddr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转换为大端网络字节序</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    opt<span class=\"token punctuation\">.</span>imr_address<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 接收任何源地址组播地址发送的组播信息</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">//if_nametoindex 函数将网络接口名 \"ens33\" 转换为对应的索引值，</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 并将结果存储在 opt.imr_ifindex 中。</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">//if_nametoindex 函数用于根据网络接口名获取对应的索引值。</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    opt<span class=\"token punctuation\">.</span>imr_ifindex <span class=\"token operator\">=</span> <span class=\"token function\">if_nametoindex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ens33\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 将当前主机加入到指定的多播组中 IP_ADD_MEMBERSHIP 表示加入多播组的</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">//&amp;opt 为指向包含加入多播组参数的结构体的指针，sizeof (opt) 表示结构体的大小。</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> IPPROTO_IP<span class=\"token punctuation\">,</span> IP_ADD_MEMBERSHIP<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>opt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 3. 通信</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">// 接收广播消息</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// 阻塞等待数据达到</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token function\">recvfrom</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到的组播消息: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuAZEWbsPKptycVwDzZkVek640yDZpFbnib7icUgNete0knXBYQiaI9jPoRhicz7OfOY0OBTdABqRtVUQ/640?wx_fmt=png\" alt=\"组播\" title=\"组播\" /></p>\n",
            "tags": [
                "计算机科学",
                "Linux",
                "Linux",
                "套接字通信",
                "UDP"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Linux/Linux%E5%A5%97%E6%8E%A5%E5%AD%97%E9%80%9A%E4%BF%A1TCP/",
            "url": "https://www.blog.foryouos.cn/computer-science/Linux/Linux%E5%A5%97%E6%8E%A5%E5%AD%97%E9%80%9A%E4%BF%A1TCP/",
            "title": "套接字通信 TCP",
            "date_published": "2023-06-14T11:39:43.000Z",
            "content_html": "<h1 id=\"套接字通信\"><a class=\"anchor\" href=\"#套接字通信\">#</a> 套接字通信</h1>\n<blockquote>\n<p>设计者开发的 <code>接口</code> ，以便应用程序调用该通信接口进行 <code>通信</code> <br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvmibuwoQgfcoib5NIC1Lr4VBdg4IDdiaZCFfxhmZDRwLefN5W0KhhNMFlHgwWH5hLGs4MSdWp2hB7TA/640?wx_fmt=jpeg\" alt=\"网络层次\" title=\"网络层次\" /></p>\n</blockquote>\n<h2 id=\"字节序\"><a class=\"anchor\" href=\"#字节序\">#</a> 字节序</h2>\n<blockquote>\n<p>字节的顺机序，大于一个字节类型的数据在内存中的存放顺序。</p>\n</blockquote>\n<ul>\n<li><code>Little-Endian</code>  小端模式：数据的 <code>低</code> 位字节存在 <code>低位</code> ，PC 机默认低位</li>\n<li><code>Big-Endian</code> ：大端模式 (网络字节序) 数据的 <code>低位</code> 字节存储到 <code>高地</code> 址位，套接字 <code>通信</code> 中操作的数据都是 <code>大端存储</code> ，包括: <code>接受/发送数据，IP地址，端口</code></li>\n</ul>\n<h3 id=\"字节转换函数\"><a class=\"anchor\" href=\"#字节转换函数\">#</a> 字节转换函数</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 将一个短整型 short 从主机字节序 -> 网络字节序</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">uint16_t</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span> hostshort<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 整型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> hostlong<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 将一个短整型 short 从网络字节序 -> 主机字节序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">uint16_t</span> <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span> netshort<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 将一个整型从网络字节序 -> 主机字节序</span></pre></td></tr></table></figure><h3 id=\"ip地址转换\"><a class=\"anchor\" href=\"#ip地址转换\">#</a>  <code>IP</code>  地址转换</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将主机小端字节序转换为网络字节序打断</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> af<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//af: 地址族 (IP 地址的家族包括 IPV4,IPV6)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// * AF_INET : IPV4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// * AF_INET6 :IPV6</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//src 传入参数  ip 地址</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//dst 传出参数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 函数返回值：成功返回 0，失败返回 - 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 将大端的整形数，转换为小端的点分十进制的 IP 地址</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">inet_ntop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> af<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>dst<span class=\"token punctuation\">,</span><span class=\"token class-name\">socklen_t</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 上同</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//size : 传出参数 dst 最多存储多少个字节</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 成功 返回取出转换得到的 IP 字符串，失败 NULL</span></pre></td></tr></table></figure><h3 id=\"sockaddr-数据结构\"><a class=\"anchor\" href=\"#sockaddr-数据结构\">#</a>  <code>sockaddr </code> 数据结构</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">sa_family_t</span> sa_family<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 地址族协议，ipv4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">char</span>        sa_data<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 端口 (2 字节) + IP 地址 (4 字节) + 填充 (8 字节)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// sizeof(struct sockaddr) == sizeof(struct sockaddr_in)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">sa_family_t</span> sin_family<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* 地址族协议: AF_INET */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">in_port_t</span> sin_port<span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* 端口，2 字节 -> 大端  */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span> sin_addr<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* IP 地址，4 字节 -> 大端  */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/* 填充 8 字节 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> sin_zero<span class=\"token punctuation\">[</span><span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sin_family<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>               <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">in_port_t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"套接字函数\"><a class=\"anchor\" href=\"#套接字函数\">#</a> 套接字函数</h3>\n<h4 id=\"socket-套接字\"><a class=\"anchor\" href=\"#socket-套接字\">#</a>  <code>socket</code>  套接字</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 创建一个套接字</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> domain<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Domains 地址族协议，上同</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//type:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//\tSOCK_STREAM: 流式传输协议，默认使用 TCP</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//\tSOCK_DGRAM: 报文传输协议，默认使用 UDP</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//  protecol: 一般为 0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 返回值；成功返回套接字通信的文件描述符，失败返回 -1</span></pre></td></tr></table></figure><h4 id=\"bind-绑定\"><a class=\"anchor\" href=\"#bind-绑定\">#</a>  <code>bind</code>  绑定</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将文件描述符和本地的 IP 与端口进行绑定   </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">socklen_t</span> addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//sockfd : 监听的文件描述符，socket 的返回值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//addr ：传入参数 IP 和端口数据结构</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//addrlen: 参数 addr 指向的内存大小 sizeof (struct sockaddr)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 返回值：成功返回 0 失败返回 - 1</span></pre></td></tr></table></figure><h4 id=\"listen-监听\"><a class=\"anchor\" href=\"#listen-监听\">#</a>  <code>listen </code> 监听</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 给监听的套接字设置监听</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> backlog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//fd 文件描述符，socket 的返回值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//backlog： 同时能处理的最大连接请求，最大值 128</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 成功返回 0 失败返回 - 1</span></pre></td></tr></table></figure><h4 id=\"accept-接受\"><a class=\"anchor\" href=\"#accept-接受\">#</a>  <code>accept</code>  接受</h4>\n<blockquote>\n<p>阻塞函数，在没有新的客户端连接请求的时候，该函数阻塞，返回一个文件描述符，基于此文件描述符和客户端通信</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 等待并接受客户端的连接请求，建立新的连接，会得到一个新的文件描述符 (通信的)\t\t</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">socklen_t</span> <span class=\"token operator\">*</span>addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//sockfd : 监听的文件描述符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//addr 传出参数 IP 和端口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//addrlen :addr 指向内存大小</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 失败返回 - 1</span></pre></td></tr></table></figure><h4 id=\"接受数据\"><a class=\"anchor\" href=\"#接受数据\">#</a> 接受数据</h4>\n<blockquote>\n<p>如果连接没有断开，接收端接受不到数据，接受数据的函数阻塞等待。数据到达后解除阻塞，开始接受数据，当发送端断开连接，接收端无法接收到任何数据，函数直接返回 0</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ssize_t</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">ssize_t</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//fd accept 的返回文件描述符</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//buf 有效内存，存储接受的数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//size 参数 buf 指向的内存容量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//flags 一般为 0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 返回值：大于 0 实际接受的字节数 等于 0 对方断开了连接，-1 接受数据失败</span></pre></td></tr></table></figure><h4 id=\"发送数据\"><a class=\"anchor\" href=\"#发送数据\">#</a> 发送数据</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 发送数据的函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ssize_t</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">ssize_t</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//buf 传入的字符串，</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 返回值：大于 0，实际发送的字节数，和参数 len 是相等</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//-1 发送数据失败了</span></pre></td></tr></table></figure><h4 id=\"connect\"><a class=\"anchor\" href=\"#connect\">#</a>  <code>connect</code></h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 成功连接服务器之后，客户端会自动随机绑定一个端口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 服务器端调用 accept () 的函数，客户端调用 connect 连接</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">socklen_t</span> addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//sockfd 文件描述符，调用 socket 得到</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 连接成功 0 失败 - 1</span></pre></td></tr></table></figure><h2 id=\"tcp-linux通信\"><a class=\"anchor\" href=\"#tcp-linux通信\">#</a>  <code>TCP Linux</code>  通信</h2>\n<blockquote>\n<p>TCP 协议是一个安全的，面向连接的，流式传输协议。在客户端调用 connect 函数，完成三次握手，close 函数完成四次挥手。</p>\n</blockquote>\n<h3 id=\"三次握手\"><a class=\"anchor\" href=\"#三次握手\">#</a>  <code>三次握手</code></h3>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbsj1OS0lAvlnpXy0v6sC4KPKyhWvGKXCqGytxz0QhdibFc1n5YX7GXcgk9XxpeXXdRc68ewWplGvUA/640?wx_fmt=jpeg\" alt=\"三次握手\" title=\"三次握手\" /></p>\n<h3 id=\"四次挥手\"><a class=\"anchor\" href=\"#四次挥手\">#</a>  <code>四次挥手</code></h3>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbsj1OS0lAvlnpXy0v6sC4KPN3LLdYSSCtEAWBNR4ibkdf4O9UxGydeLQJuEI2NRoVTUKRvfgic31ic6g/640?wx_fmt=jpeg\" alt=\"四次挥手\" title=\"四次挥手\" /></p>\n<h3 id=\"socket通信\"><a class=\"anchor\" href=\"#socket通信\">#</a>  <code>socket</code>  通信</h3>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvmibuwoQgfcoib5NIC1Lr4VBZBH5hh98BHyHSy3E6KFI4ZzePtdqVpvW8uS7yIyusC7W62cKUJOWsA/640?wx_fmt=jpeg\" alt=\"TCP通信流程\" title=\"TCP通信流程\" /></p>\n<h3 id=\"clientc\"><a class=\"anchor\" href=\"#clientc\">#</a>  <code>client.c</code></h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PORT_ID</span>\t<span class=\"token expression\"><span class=\"token number\">8800</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SIZE</span>\t<span class=\"token expression\"><span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//./client IP  : ./client 192.168.0.10</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在运行时需要输入参数，即 IP 地址</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> server_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: ./client [server IP address]\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">//1.socket () 建立套接字</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tsockfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">//2.connect()</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tserver_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tserver_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>PORT_ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将端口转化为大端网络通信模式</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">//inet_addr 将一个十进制的数转化为二进制数用于 IPV4 的 IP 转换</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tserver_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 间接 IP 和端口</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>server_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 接受数据存入 buf 缓冲当中</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">int</span> re <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> SIZE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>re <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器断开了连接\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>re <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接受数据失败\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Client receive from server: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"serverc\"><a class=\"anchor\" href=\"#serverc\">#</a>  <code>server.c</code></h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 设置的端口号</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PORT_ID</span>\t<span class=\"token expression\"><span class=\"token number\">8800</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 设置发送文件的大小</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SIZE</span>\t<span class=\"token expression\"><span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> client_sockfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> my_addr<span class=\"token punctuation\">,</span> client_addr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义结构体用户存储 IP 和端口号</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">int</span> addr_len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">char</span> welcome<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Welcome to connect to the sever!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//1.socket () 创建监听的套接字 AF_INET IPV4 SOCK_STREAM TCP 通信</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tsockfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sockfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"套接字创建失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">//2.bind()</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tmy_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tmy_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>PORT_ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将端口号整型转换为网络字节序打断存储</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tmy_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 宏值，绑定任意端口号</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 绑定套接字与端口 IP</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>my_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"套接字与IP绑定失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">//3.listen () 建立连接，给佳宁的套接字设置最大连接请求</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"套接字设置监听失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\taddr_len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server is waiting for client to connect:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">//4.accept () 阻塞函数，等待客户端连接</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tclient_sockfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>client_addr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Client IP address = %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span>client_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token comment\">//5.send()</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> sed <span class=\"token operator\">=</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>client_sockfd<span class=\"token punctuation\">,</span> welcome<span class=\"token punctuation\">,</span> SIZE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sed <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送了%d字节的数据\"</span><span class=\"token punctuation\">,</span>sed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sed <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端断开了连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sed <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送数据失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Disconnect the client request.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token comment\">//6.close()</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>client_sockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token comment\">// 关闭套接字</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsj1OS0lAvlnpXy0v6sC4KPjLj5pUog8sEd3pBBISrsGegareAz78rlMXDQ3LuZ4mWic7uGy6T0Tyg/640?wx_fmt=png\" alt=\"套接字通信\" title=\"套接字通信\" /></p>\n<h3 id=\"tcp流量控制\"><a class=\"anchor\" href=\"#tcp流量控制\">#</a>  <code>TCP流量控制</code></h3>\n<blockquote>\n<p>流量控制可以根据接收端的实际接受能力，接收端主机向发送端主机通知自己可以接受数据的大小，于是发送端发送不会超过该大小的数据，</p>\n<p>TCP 首部，专门设置一个字段来通知窗口大小，当接收端的缓冲区面临数据溢出时，窗口的大小值也随之发生改变，设置一个更小的值通知发送端，从而控制数据的发送量，从而达到流量控制的目录 -- 滑动窗口</p>\n</blockquote>\n<h3 id=\"tcp半关闭\"><a class=\"anchor\" href=\"#tcp半关闭\">#</a>  <code>TCP半关闭</code></h3>\n<blockquote>\n<p>TCP 连接只有一方发送了 FIN 请求连接，处于半关闭状态，数据仍可以单向通信。套接字本身时双向通信</p>\n</blockquote>\n<ul>\n<li>服务器调用了 close 函数，不能发送数据，只能接受数据</li>\n<li>客户端没有调用 close 函数，可以发送数据，但是不能接受数据</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 可以由选择的关闭读 / 写，close 只能关闭写操作</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> how<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//sockfd 要操作的文件描述符</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// how</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//SHUT_RD: 关闭文件描述符对应的读操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//SHUT_WR: 关闭文件描述符对应的写操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//SHUT_RDWR: 关闭文件描述符对应的读写操作</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 返回值：函数调用成功返回 0，失败返回 - 1</span></pre></td></tr></table></figure><h3 id=\"端口复用\"><a class=\"anchor\" href=\"#端口复用\">#</a>  <code>端口复用</code></h3>\n<blockquote>\n<p>服务器进程主动断开连接，最后状态编程 TIME_WAIT 状态，这个进程会等待 2msl (1 分钟左右) 才会退出，如该进程不退出，其绑定的端口就不会释放。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设置端口复用多功能函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> optname<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>optval<span class=\"token punctuation\">,</span> <span class=\"token class-name\">socklen_t</span> optlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//sockfd 用于监听的文件描述符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//level 设置端口复用需要使用 SOL_SOCKET 宏</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//optname 设置属性皆可端口复用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//optval 设置去除端口复用属性还是端口复用属性，实际应该使用 int 型变量 0 不设置，1 设置</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//optlen: optval 指针指向的内存大小 sizeof (int)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 在绑定之前设置端口复用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 创建监听的套接字</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> lfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 绑定</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> serv_addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>serv_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    serv_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>INADDR_ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 本地多有的ＩＰ</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 127.0.0.1</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// inet_pton(AF_INET, \"127.0.0.1\", &amp;serv_addr.sin_addr.s_addr);</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 设置端口复用</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> opt <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>opt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 绑定端口</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>lfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>serv_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"tcp数据粘包处理\"><a class=\"anchor\" href=\"#tcp数据粘包处理\">#</a> TCP 数据 <code>粘包</code> 处理</h2>\n<blockquote>\n<p>在发送数据块之前，在数据块最前边添加一个固定大小的数据头。数据头存储当前的总字节数，接收到先接受数据头，然后根据数据头结构对应字节大小的数据块</p>\n</blockquote>\n<h3 id=\"发送端实现\"><a class=\"anchor\" href=\"#发送端实现\">#</a> 发送端实现</h3>\n<ul>\n<li>发送 N 数据长度申请 <code>N+4</code>  块大小内存</li>\n<li>将待发送数据总长度写入前四个字节中 (需要转为大端 <code>网络字节序</code> )</li>\n<li>待发送的数据拷贝到包头后边的地址空间，将完整数据包发送出去</li>\n<li>释放申请的 <code>堆空间</code></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 发送指定的字节数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//fd: 套接字的文件描述符</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//msg: 待发送的原始数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//size : 待发送的原始数据总字节数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">writen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//buf 数据缓存区</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buf <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 原始数据大小</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//len 返回已经发送的数据长度</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送失败</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 缓冲区地址后移</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        buf <span class=\"token operator\">+=</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 待发送长度减去已经发送的</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        count <span class=\"token operator\">-=</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 发送带有包头的数据包</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sendMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>msg <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> len <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> cfd <span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 如果发送缓存区，或长度，或套接字为空失败</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token comment\">// 申请内存空间：数据长度 + 包头 4 字节 (存储数据长度)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token keyword\">int</span> bigLen <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将数据包长度转换为网络字节序</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bigLen<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把 bigLen 写入 data 当中</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把 msg 数据写入，data+4 指针后移 4 位</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token comment\">// 发送数据</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">writen</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> len<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将数据发送过去</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   <span class=\"token comment\">// 释放内存</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回发送的字节数</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"接收端实现\"><a class=\"anchor\" href=\"#接收端实现\">#</a> 接收端实现</h3>\n<ul>\n<li>将接受的 <code>4字节</code> 数据，从网络字节序转换为主机字节序</li>\n<li>根据长度申请堆内存，用于存储 <code>待接收的数据</code></li>\n<li>根据得到的数据长度固定数目保存到堆内存中</li>\n<li>处理 <code>接受的数据</code></li>\n<li>释放存储数据的 <code>堆内存</code></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 套接字，缓存区，大小</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">readn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pt <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 直到读完所有数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 接受数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> size <span class=\"token operator\">-</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        pt <span class=\"token operator\">+=</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        count <span class=\"token operator\">-=</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回接受的字节数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 接受带数据头的数据包</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">recvMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 1. 读数据头</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 先读 4 个字节，读取其数据长度</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">readn</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>len<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    len <span class=\"token operator\">=</span> <span class=\"token function\">ntohl</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 大端转换为小端</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据块大小: %d\\n\"</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 根据读出的长度分配内存，+1 -> 这个字节存储 \\0</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 根据指定大小读取数据</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">readn</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">!=</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    buf<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符串结尾</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token operator\">*</span>msg <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"c封装tcp\"><a class=\"anchor\" href=\"#c封装tcp\">#</a> C++ 封装 TCP</h1>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbuAZEWbsPKptycVwDzZkVekuUFpELRZt6EQFsebicpkwBY4HWKibGw9w4ribDjw2KaRK6paz2T932KVQ/640?wx_fmt=jpeg\" alt=\"C++封装TCP\" title=\"C++封装TCP\" /></p>\n<h2 id=\"tcpsocketh\"><a class=\"anchor\" href=\"#tcpsocketh\">#</a> TcpSocket.h</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TcpSocket</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">TcpSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">TcpSocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">TcpSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">connectToHost</span><span class=\"token punctuation\">(</span>string ip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">sendMsg</span><span class=\"token punctuation\">(</span>string msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    string <span class=\"token function\">recvMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">readn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">writen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span> m_fd<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 通信的套接字</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"tcpsocketcpp\"><a class=\"anchor\" href=\"#tcpsocketcpp\">#</a> TcpSocket.cpp</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"TcpSocket.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">TcpSocket</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">TcpSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    m_fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建 IPV4 的套接字</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">TcpSocket</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">TcpSocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    m_fd <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">TcpSocket</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">TcpSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_fd <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>m_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">TcpSocket</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connectToHost</span><span class=\"token punctuation\">(</span>string ip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 连接服务器 IP port</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> saddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    saddr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    saddr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>saddr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>saddr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>saddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"成功和服务器建立连接...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">TcpSocket</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sendMsg</span><span class=\"token punctuation\">(</span>string msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 申请内存空间：数据长度 + 包头 4 字节 (存储数据长度)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">int</span> bigLen <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bigLen<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 发送数据</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">writen</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>string <span class=\"token class-name\">TcpSocket</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">recvMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">// 1. 读数据头</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">readn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>len<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    len <span class=\"token operator\">=</span> <span class=\"token function\">ntohl</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"数据块大小: \"</span> <span class=\"token operator\">&lt;&lt;</span> len <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 根据读出的长度分配内存</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>len <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">readn</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">!=</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    buf<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    string <span class=\"token function\">retStr</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">return</span> retStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">TcpSocket</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">readn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">int</span> nread <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nread <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>m_fd<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            p <span class=\"token operator\">+=</span> nread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            left <span class=\"token operator\">-=</span> nread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nread <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">TcpSocket</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">writen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">int</span> nwrite <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nwrite <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>m_fd<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            p <span class=\"token operator\">+=</span> nwrite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            left <span class=\"token operator\">-=</span> nwrite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nwrite <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"tcpserverh\"><a class=\"anchor\" href=\"#tcpserverh\">#</a> TcpServer.h</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"TcpSocket.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TcpServer</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">TcpServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">TcpServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">setListen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    TcpSocket<span class=\"token operator\">*</span> <span class=\"token function\">acceptConn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span><span class=\"token operator\">*</span> addr <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接受数据库连接</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> m_fd<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 监听的套接字</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"tcpservercpp\"><a class=\"anchor\" href=\"#tcpservercpp\">#</a> TcpServer.cpp</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"TcpServer.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">TcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">TcpServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    m_fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">TcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">TcpServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>m_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">TcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setListen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> saddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    saddr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    saddr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    saddr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 0 = 0.0.0.0</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>m_fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>saddr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>saddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"套接字绑定成功, ip: \"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span>saddr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", port: \"</span> <span class=\"token operator\">&lt;&lt;</span> port <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>m_fd<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"设置监听成功...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>TcpSocket<span class=\"token operator\">*</span> <span class=\"token class-name\">TcpServer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">acceptConn</span><span class=\"token punctuation\">(</span>sockaddr_in<span class=\"token operator\">*</span> addr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 传递的可以返回客户端 IP 和端口的结构体</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    socklen_t addrlen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">int</span> cfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>m_fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>addr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cfd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功和客户端建立连接...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TcpSocket</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回套接字文件描述符</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"servercpp\"><a class=\"anchor\" href=\"#servercpp\">#</a> server.cpp</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"TcpServer.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">SockInfo</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    TcpServer<span class=\"token operator\">*</span> s<span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    TcpSocket<span class=\"token operator\">*</span> tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> addr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">working</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SockInfo</span><span class=\"token operator\">*</span> pinfo <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">SockInfo</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 连接建立成功，打印客户端的 IP 和端口信息</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">char</span> ip<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端的IP: %s, 端口: %d\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">inet_ntop</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pinfo<span class=\"token operator\">-></span>addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>pinfo<span class=\"token operator\">-></span>addr<span class=\"token punctuation\">.</span>sin_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 5. 通信</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收数据: .....\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        string msg <span class=\"token operator\">=</span> pinfo<span class=\"token operator\">-></span>tcp<span class=\"token operator\">-></span><span class=\"token function\">recvMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> msg <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">delete</span> pinfo<span class=\"token operator\">-></span>tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">delete</span> pinfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 1. 创建监听的套接字</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    TcpServer s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 2. 绑定本地的 IP port 并设置监听</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">setListen</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 3. 阻塞并等待客户端的连接</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        SockInfo<span class=\"token operator\">*</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SockInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        TcpSocket<span class=\"token operator\">*</span> tcp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">acceptConn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>info<span class=\"token operator\">-></span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 监听连接请求</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tcp <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"重试....\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 创建子线程</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        pthread_t tid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        info<span class=\"token operator\">-></span>s <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        info<span class=\"token operator\">-></span>tcp <span class=\"token operator\">=</span> tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> working<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token function\">pthread_detach</span><span class=\"token punctuation\">(</span>tid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"clientcpp\"><a class=\"anchor\" href=\"#clientcpp\">#</a> client.cpp</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"TcpSocket.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 1. 创建通信的套接字</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    TcpSocket tcp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 2. 连接服务器 IP port</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> tcp<span class=\"token punctuation\">.</span><span class=\"token function\">connectToHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.217.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 3. 通信</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> fd1 <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"english.txt\"</span><span class=\"token punctuation\">,</span> O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">char</span> tmp<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd1<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 发送数据</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        tcp<span class=\"token punctuation\">.</span><span class=\"token function\">sendMsg</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"send Msg: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> tmp <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 接收数据</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"运行结果\"><a class=\"anchor\" href=\"#运行结果\">#</a> 运行结果</h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuAZEWbsPKptycVwDzZkVekZYkMPZXy5Pia8ib1AQIlpJ3lVebFKL11bsbGatSSN2agVu1sf9WVictAg/640?wx_fmt=png\" alt=\"发送信息\" title=\"发送信息\" /></p>\n",
            "tags": [
                "计算机科学",
                "Linux",
                "Linux",
                "套接字通信",
                "UDP"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Linux/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B/",
            "url": "https://www.blog.foryouos.cn/computer-science/Linux/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B/",
            "title": "linux多线程总",
            "date_published": "2023-06-12T22:39:43.000Z",
            "content_html": "<h1 id=\"linux多线程\"><a class=\"anchor\" href=\"#linux多线程\">#</a> Linux 多线程</h1>\n<blockquote>\n<p>线程时轻量级的进程 ( <code>LWP: light weight process</code> )，在 <code>linux</code>  环境下线程的本质仍是 <code>进程</code> ，进程时资源分配的 <code>最小单位</code> ，线程时操作系统调度执行的 <code>最小单位</code></p>\n<p>上下文切换：进程 / 线程 <code>分时复用CPU时间片</code> ，在切换之前会将上一个任务的状态进行保存，下次切换回这个任务的时候，加载这个状态继续运行，任务从保存到再次加载这个进程就是一次 <code>上下文切换</code> ，线程更加廉价，启动速度更快，退出也快，对系统资源 <code>冲击小</code> 。线程并不是越多越好，</p>\n<p>文件 IO 操作 ： 线程的个数 =  <code>2* CPU核心数</code>  (效率最高)</p>\n<p>处理 <code>复杂算法</code> （主要 CPU 进行运算，压力大)  <code>线程个数 =CPU核心数</code></p>\n<p>多线程的编程功力直接决定服务器性能的优异<br />\n充分利用内核：使用到所有的内核，内核不空闲</p>\n</blockquote>\n<h2 id=\"posix多线程\"><a class=\"anchor\" href=\"#posix多线程\">#</a>  <code>POSIX</code>  多线程</h2>\n<blockquote>\n<p>需要依赖头文件 <code>pthread.h</code>  在编译的时候要加上库 <code>pthread</code>  表示包含多线程库文件<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbshWwiapqz7vzD3cbGKibtuwOReBOO82NbC1FtNBCqsswFqef8Q9ugZEPIuKRL6u0Q5IDsYCNP7PcQg/640?wx_fmt=jpeg\" alt=\"常见的API函数\" title=\"常见的API函数\" /></p>\n</blockquote>\n<h3 id=\"线程id\"><a class=\"anchor\" href=\"#线程id\">#</a> 线程 ID</h3>\n<blockquote>\n<p>每个线程都有唯一的 <code>线程ID</code> ，ID 类型为 <code>pthread_t</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回当前线程的线程 ID</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pthread_t <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"线程的创建\"><a class=\"anchor\" href=\"#线程的创建\">#</a> 线程的创建</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pthread_t tid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span>pthread_t <span class=\"token operator\">*</span>pid<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> pthread_attr_t <span class=\"token operator\">*</span>attr<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>start_routine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//pid 为线程创建后的 id</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//attr 为指向线程属性结构的 pthread_attr_t 的指针，NULL 使用默认属性</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//start_routine 指向线程函数的地址，要执行的函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//arg 指向线程函数的参数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 如果成功，函数返回 0</span></pre></td></tr></table></figure><h3 id=\"pthread_join\"><a class=\"anchor\" href=\"#pthread_join\">#</a>  <code>pthread_join</code></h3>\n<blockquote>\n<p>函数 <code>pthread_join</code>  来 <code>等待子线程结束</code> ，函数会让主线程挂起 (即休眠， <code>让出CPU</code> )，指导子线程退出，同时 <code>pthread_join</code>  能让子线程所占资源也释放</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>pthread_t pid<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>value_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//pid 是所等待线程的 ID，value_ptr 通常设为 NULL。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 如果不为 NULL，pthread_join 复制一份线程退出值到一个内存区域，因此 pthread_join 还有一个重要功能就是获得子线程的返回值。如果函数成功，返回 0, 否则返回错误码</span></pre></td></tr></table></figure><h3 id=\"创建线程不传参数\"><a class=\"anchor\" href=\"#创建线程不传参数\">#</a> 创建线程 (不传参数)</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span> <span class=\"token comment\">//sleep</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">thfunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in thfunc\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    pthread_t tidp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tidp<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> thfunc<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建线程，如果成功返回 0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token comment\">//0 不会 执行</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pthread_create fail:%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//main 线程挂起 一秒钟</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in main:thread is created!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"线程退出\"><a class=\"anchor\" href=\"#线程退出\">#</a> 线程退出</h3>\n<blockquote>\n<p>调用线程退出函数，当前线程会马上退出，不会影响其他线程的正常运行，不管是在子线程和主线程都可以使用</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">pthread_exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> retval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 参数：线程退出时携带的数据，当前子线程会得到该数据，若不需要指定为 NULL</span></pre></td></tr></table></figure><h3 id=\"回收子线程数据\"><a class=\"anchor\" href=\"#回收子线程数据\">#</a> 回收子线程数据</h3>\n<blockquote>\n<p>1，在子线程退出的时候可以使用 <code>pthread_exit()</code>  的参数将数据传出，在回收这个子线程的时候通过 <code>pthread_join()</code>  的第二个参数来接受子线程传递出的数据，<br />\n2，使用全局变量，在主函数上定义 <code>struct Persion p;</code> \t// 定义全局变量<br />\n 3，使用传给子线程参数的形式，在结束时，再传递给主线程的形式</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// pthread_join.c</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 定义结构</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Persion</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">36</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 子线程的处理代码</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">working</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是子线程, 线程ID: %ld\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child == i: = %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Persion</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            p<span class=\"token punctuation\">.</span>age  <span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            p<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 该函数的参数将这个地址传递给了主线程的 pthread_join ()</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token function\">pthread_exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 代码执行不到这个位置就退出了</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 1. 创建一个子线程</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    pthread_t tid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> working<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程创建成功, 线程ID: %ld\\n\"</span><span class=\"token punctuation\">,</span> tid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 2. 子线程不会执行下边的代码，主线程执行</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是主线程, 线程ID: %ld\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 阻塞等待子线程退出</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">//ptr 是一个传出参数，在函数内部让这个指针指向一块有效内存</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 这个内存地址就是 pthread_exit () 参数指向的内存</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>tid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">// 打印信息</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Persion</span><span class=\"token operator\">*</span> pp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Persion</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程返回数据: name: %s, age: %d, id: %d\\n\"</span><span class=\"token punctuation\">,</span> pp<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> pp<span class=\"token operator\">-></span>age<span class=\"token punctuation\">,</span> pp<span class=\"token operator\">-></span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程资源被成功回收...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"线程分离\"><a class=\"anchor\" href=\"#线程分离\">#</a> 线程分离</h3>\n<blockquote>\n<p>实现子线程和主线程分离，当子线程退出的时候，其占用的内核资源就被系统的其他进程接管并回收。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 参数就子线程的线程 ID, 主线程就可以和这个子线程分离了</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_detach</span><span class=\"token punctuation\">(</span>pthread_t thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"线程取消\"><a class=\"anchor\" href=\"#线程取消\">#</a> 线程取消</h3>\n<blockquote>\n<p>线程取消，主线程调用取消函数 <code>pthread_Cancel</code>  指定杀死线程，线程 B 需要进行一次系统调用 (从用户区切换到内核去，否则子线程会一直运行  <code>hread_self()</code>  是一次 <code>接的系统调用</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 参数是子线程的线程 ID</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_cancel</span><span class=\"token punctuation\">(</span>pthread_t thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"线程id比较\"><a class=\"anchor\" href=\"#线程id比较\">#</a> 线程 ID 比较</h3>\n<blockquote>\n<p>在 Linux 中线程 ID 时一个无符号长整型，</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//t1,t2 要比较的线程 ID，如相等返回非 0，如果不相等返回 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_equal</span><span class=\"token punctuation\">(</span>pthread_t t1<span class=\"token punctuation\">,</span> pthread_t t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"线程同步\"><a class=\"anchor\" href=\"#线程同步\">#</a> 线程同步</h2>\n<blockquote>\n<p>CPU 对应寄存器、一级缓存、二级缓存、三级缓存是独占的，用于存储处理的数据和线程的状态信息，数据被 CPU 处理完成需要再次被写入到物理内存中，物理内存数据也可以通过文件 IO 操作写入到磁盘中。<br />\n <code>共享资源</code> 就是多个线程共同访问的变量，这些变量通常为全局数据区变量或者堆区变量，这些变量对应的共享资源也被称为 <code>临界资源</code> <br />\n找到临界资源，确认临界区的上下文代码，临界区越小越好，之后进行进程同步，临界区上面加锁，下面解锁。</p>\n</blockquote>\n<h3 id=\"互斥锁\"><a class=\"anchor\" href=\"#互斥锁\">#</a> 互斥锁</h3>\n<blockquote>\n<p>被锁定的代码块顺序执行 (不能并行处理)，执行效率低<br />\n一个互斥锁变量智能被一个线程锁定，被锁定之后其他线程再对互斥锁变量加锁就会阻塞，直到互斥锁被解锁。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 互斥锁类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pthread_mutex_t  mutex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化互斥锁</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//restrict: 是一个关键字，用来修饰指针，只有这个关键字修饰的指针可以访问指向的内存地址，其他指针是不行的，attr 一般默认属性，指定为 NULL</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//mutex 为互斥锁变量的地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_mutex_init</span><span class=\"token punctuation\">(</span>pthread_mutex_t <span class=\"token operator\">*</span>restrict mutex<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           <span class=\"token keyword\">const</span> pthread_mutexattr_t <span class=\"token operator\">*</span>restrict attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 释放互斥锁资源            </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_mutex_destroy</span><span class=\"token punctuation\">(</span>pthread_mutex_t <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"尝试加锁\"><a class=\"anchor\" href=\"#尝试加锁\">#</a> 尝试加锁</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 尝试加锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_mutex_trylock</span><span class=\"token punctuation\">(</span>pthread_mutex_t <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 如果没有被锁，线程加锁成功</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 如果被锁住，调用此函数，不会被阻塞，加锁失败返回错误信号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 对互斥锁解锁</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span>pthread_mutex_t <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"死锁\"><a class=\"anchor\" href=\"#死锁\">#</a> 死锁</h4>\n<ul>\n<li>加锁忘记解锁</li>\n<li>重复加锁</li>\n<li>多个共享资源，注意相互阻塞</li>\n</ul>\n<h3 id=\"读写锁\"><a class=\"anchor\" href=\"#读写锁\">#</a> 读写锁</h3>\n<blockquote>\n<p>读写锁为互斥锁的升级版，在做读操作的时候可以提高程序的执行效率，如果所有线程都是 <code>读</code> 的可以 <code>并行</code> 。 <code>写锁死独占的</code> ，同时 <code>写锁</code> 的 <code>优先级</code> 更高</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建读写锁类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pthread_rwlock_t rwlock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化读写锁</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_init</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>restrict rwlock<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           <span class=\"token keyword\">const</span> pthread_rwlockattr_t <span class=\"token operator\">*</span>restrict attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 释放读写锁占用的系统资源</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_destroy</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"锁\"><a class=\"anchor\" href=\"#锁\">#</a> 锁</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在程序中对读写锁加读锁，锁定的是读操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_rdlock</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 这个函数可以有效的避免死锁</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 如果加读锁失败，不会阻塞当前线程，直接返回错误号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_tryrdlock</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 在程序中对读写锁加写锁，锁定的是写操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_wrlock</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 这个函数可以有效的避免死锁</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 如果加写锁失败，不会阻塞当前线程，直接返回错误号</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_trywrlock</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 解锁，不管锁定了读还是写都可用解锁</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_unlock</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"条件变量\"><a class=\"anchor\" href=\"#条件变量\">#</a> 条件变量</h3>\n<blockquote>\n<p>条件变量配合互斥锁实现线程同步</p>\n<p>条件变量只有在满足指定条件下才会阻塞线程，如果天剑不满足，多个线程可以同时进入临界区，同时读写临界资源。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 条件变量类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 被条件比那辆阻塞的线程的线程信息会被记录在这个变量中，</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pthread_cond_t cond<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 条件变量的初始化与销毁释放资源</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pthread_cond_t cond<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_cond_init</span><span class=\"token punctuation\">(</span>pthread_cond_t <span class=\"token operator\">*</span>restrict cond<span class=\"token punctuation\">,</span>cond pthread_condattr_t <span class=\"token operator\">*</span>restrict  attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 销毁释放资源</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_cond_destory</span><span class=\"token punctuation\">(</span>pthread_cond_t <span class=\"token operator\">*</span>cond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//cond 条件变量的地址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//attr：条件变量的属性，一般使用默认属性，执行为 NULL</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 线程阻塞函数，哪个线程调用这个函数，哪个线程就会被阻塞</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 参数：条件变量，互斥锁</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_cond_wait</span><span class=\"token punctuation\">(</span>pthread_cond_t <span class=\"token operator\">*</span>restrict cond<span class=\"token punctuation\">,</span> pthread_mutex_t <span class=\"token operator\">*</span>restrict mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 互斥锁主要功能是线程同步，让线程顺序进入临界区，避免出现共享资源的数据混乱，</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 在阻塞线程的时候，如果线程以及对互斥锁 mutex 上说，那么将把锁打开，当线程解除阻塞，函数内部会帮助 mutex 锁上，继续向下访问临界区</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 表示的时间是从 1971.1.1 到某个时间点的时间，总长度使用秒 / 纳秒表示</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timespec</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\ttime_t tv_sec<span class=\"token punctuation\">;</span>      <span class=\"token comment\">/* Seconds */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">long</span>   tv_nsec<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* Nanoseconds [0 .. 999999999] */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 将线程阻塞一定的时间长度，时间到达之后，线程就解除阻塞了</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_cond_timedwait</span><span class=\"token punctuation\">(</span>pthread_cond_t <span class=\"token operator\">*</span>restrict cond<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>           pthread_mutex_t <span class=\"token operator\">*</span>restrict mutex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timespec</span> <span class=\"token operator\">*</span>restrict abstime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>           </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>           </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>time_t mytim <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 1970.1.1 0:0:0 到当前的总秒数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timespec</span> tmsp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>tmsp<span class=\"token punctuation\">.</span>tv_nsec <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>tmsp<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 线程阻塞 100s</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 唤醒阻塞在条件变量上的线程，至少有一个被解除阻塞</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_cond_signal</span><span class=\"token punctuation\">(</span>pthread_cond_t <span class=\"token operator\">*</span>cond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 唤醒阻塞在条件变量上的线程，被阻塞的线程全部解除阻塞</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_cond_broadcast</span><span class=\"token punctuation\">(</span>pthread_cond_t <span class=\"token operator\">*</span>cond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"条件变量实现生产者与消费者\"><a class=\"anchor\" href=\"#条件变量实现生产者与消费者\">#</a> 条件变量实现生产者与消费者</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbshWwiapqz7vzD3cbGKibtuwOs6KyaQ2btRX3T6kALPB6dau2WzS4hQ0lIzLsDg8u9h6c6ricNYtwltg/640?wx_fmt=png\" alt=\"条件变量\" title=\"生产者与消费者问题\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 链表的节点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 定义条件变量，控制消费者线程</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>pthread_cond_t cond<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 互斥锁变量</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>pthread_mutex_t mutex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 指向头结点的指针</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 生产者的回调函数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">producer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 一直生产</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 对生产者上锁</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 创建一个链表的新节点</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> pnew <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 节点初始化</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        pnew<span class=\"token operator\">-></span>number <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 节点的连接，添加到链表的头部，新节点就新的头结点</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        pnew<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">//head 指针前移</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        head <span class=\"token operator\">=</span> pnew<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 输出当前线程</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+++producer, number = %d, tid = %ld\\n\"</span><span class=\"token punctuation\">,</span> pnew<span class=\"token operator\">-></span>number<span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 解锁</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 生产了任务，通知消费者消费</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">pthread_cond_broadcast</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通知消费者消费</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 生产慢一点</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">// 消费者的回调函数</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">consumer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 消费者上锁</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// 一直消费，删除链表中的一个节点</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">//        if (head == NULL)   // 这样写有 bug</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 没有数据，阻塞在此</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token comment\">// 任务队列，也就是链表中已经没有节点可以消费了</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token comment\">// 消费者线程需要阻塞</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 线程加互斥锁成功，但是线程阻塞在这行代码上，锁还没解开</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token comment\">// 其他线程在访问这把锁的时候也会阻塞，生产者也会阻塞 ==> 死锁</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token comment\">// 这函数会自动将线程拥有的锁解开</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token function\">pthread_cond_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cond<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 会将 mutex 解锁</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token comment\">// 当消费者线程解除阻塞之后，会自动将这把锁锁上</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">// 这时候当前这个线程又重新拥有了这把互斥锁</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">// 取出链表的头结点，将其删除</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> pnode <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--consumer: number: %d, tid = %ld\\n\"</span><span class=\"token punctuation\">,</span> pnode<span class=\"token operator\">-></span>number<span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        head  <span class=\"token operator\">=</span> pnode<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重新指向头结点</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 释放表头</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 对互斥锁进行解锁  </span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token comment\">// 初始化条件变量</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token function\">pthread_cond_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cond<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token function\">pthread_mutex_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">// 单词仍然是一个生产者，消费者会被阻塞到条件变量，随机去抢生成者生产数据资源</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token comment\">// 创建 5 个生产者，5 个消费者</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    pthread_t ptid<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    pthread_t ctid<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> producer<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ctid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> consumer<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token comment\">// 释放资源</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token comment\">// 阻塞等待子线程退出</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>ptid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>ctid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token comment\">// 销毁条件变量</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token function\">pthread_cond_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token function\">pthread_mutex_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"信号量\"><a class=\"anchor\" href=\"#信号量\">#</a> 信号量</h3>\n<blockquote>\n<p>信号量用在多线程多任务同步时，一个线程完成了某一个动作就通过信号量告诉别的线程，别的线程再进行某些动作。<br />\n信号量 (灯)，灯亮资源可用，灯灭则意味着不可用。信号量主要阻塞线程，不能完全保证线程安全，需要与互斥锁一起使用</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;semaphore.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sem_t sem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化信号量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sem_init</span><span class=\"token punctuation\">(</span>sem_t <span class=\"token operator\">*</span>sem<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pshared<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 资源释放，线程销毁之后调用这个函数即可</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 参数 sem 就是 sem_init () 的第一个参数    </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//pshared: 0: 线程同步，非 0: 进程同步</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//value: 初始化当前信号量拥有的资源数 (>=0), 如果资源数为 0, 线程就会被阻塞</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sem_destroy</span><span class=\"token punctuation\">(</span>sem_t <span class=\"token operator\">*</span>sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 函数被调用 sem 中的资源就会被消耗 1 个，资源数 - 1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 如果 sem 资源数 > 0 则不会阻塞</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sem_wait</span><span class=\"token punctuation\">(</span>sem_t <span class=\"token operator\">*</span>sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 函数被调用 sem 中的资源就会被消耗 1 个，资源数 - 1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 当 sem 中的资源数减为 0 时，资源好近，线程不会阻塞，直接返回错误信号</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sem_trywait</span><span class=\"token punctuation\">(</span>sem_t <span class=\"token operator\">*</span>sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 表示的时间是从 1971.1.1 到某个时间点的时间，总长度使用秒 / 纳秒表示</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timespec</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\ttime_t tv_sec<span class=\"token punctuation\">;</span>      <span class=\"token comment\">/* Seconds */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">long</span>   tv_nsec<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* Nanoseconds [0 .. 999999999] */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 调用该函数线程获取 sem 中的一个资源，当资源数为 0 时，线程阻塞，在阻塞 abs_timeout 对应的时长之后，解除阻塞。</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//abs_timeout: 阻塞的时间长度，单位是 s, 是从 1970.1.1 开始计算的</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sem_timedwait</span><span class=\"token punctuation\">(</span>sem_t <span class=\"token operator\">*</span>sem<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timespec</span> <span class=\"token operator\">*</span>abs_timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//abs_timeout 和 pthread_cond_timedwait 的最后一个参数是一样的</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 调用该函数给 sem 中的资源数 + 1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sem_post</span><span class=\"token punctuation\">(</span>sem_t <span class=\"token operator\">*</span>sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 调用之后 sem_wait,sem_trywait,sem_timedwait 这些线程会解除阻塞，获得资源之后继续向下运行</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 查看信号量 sem 中的整形数的当前值，这个值会被写入到 sval 指针对应的内存中</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//sval 是一个传出参数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sem_getvalue</span><span class=\"token punctuation\">(</span>sem_t <span class=\"token operator\">*</span>sem<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>sval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"生产者与消费者案例\"><a class=\"anchor\" href=\"#生产者与消费者案例\">#</a> 生产者与消费者案例</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbshWwiapqz7vzD3cbGKibtuwOQuXflL98ZV6larh3ic8Qp65g2kCNx0FEFwtZv0VvFIcLgzKwDHrDHxA/640?wx_fmt=png\" alt=\"信号量\" title=\"信号量生产者与消费者问题\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;semaphore.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 链表的节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 生产者线程信号量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>sem_t psem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 消费者线程信号量</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>sem_t csem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 互斥锁变量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>pthread_mutex_t mutex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 指向头结点的指针</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 生产者的回调函数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">producer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 一直生产</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 生产者拿一个信号灯</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">sem_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>psem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 加锁，这句代码放到 sem_wait () 上边，有可能会造成死锁</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 创建一个链表的新节点</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> pnew <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 节点初始化</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        pnew<span class=\"token operator\">-></span>number <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 节点的连接，添加到链表的头部，新节点就新的头结点</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        pnew<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">//head 指针前移</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        head <span class=\"token operator\">=</span> pnew<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+++producer, number = %d, tid = %ld\\n\"</span><span class=\"token punctuation\">,</span> pnew<span class=\"token operator\">-></span>number<span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 通知消费者消费</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">sem_post</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>csem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 生产慢一点</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">// 消费者的回调函数</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">consumer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token function\">sem_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>csem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> pnode <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--consumer: number: %d, tid = %ld\\n\"</span><span class=\"token punctuation\">,</span> pnode<span class=\"token operator\">-></span>number<span class=\"token punctuation\">,</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        head  <span class=\"token operator\">=</span> pnode<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 取出链表的头结点，将其删除</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">// 通知生产者生成，给生产者加信号灯</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token function\">sem_post</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>psem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">// 初始化信号量</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token function\">sem_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>psem<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 生成者线程一共有 5 个信号灯</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token function\">sem_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>csem<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 消费者线程一共有 0 个信号灯</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token comment\">// 初始化互斥锁</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token function\">pthread_mutex_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token comment\">// 创建 5 个生产者，5 个消费者</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    pthread_t ptid<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    pthread_t ctid<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> producer<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ctid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> consumer<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token comment\">// 释放资源</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>ptid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>ctid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token function\">sem_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>psem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token function\">sem_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>csem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token function\">pthread_mutex_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Linux",
                "Linux",
                "多线程"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/STL%E5%AE%B9%E5%99%A8%E9%80%82%E9%85%8D%E5%99%A8/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/STL%E5%AE%B9%E5%99%A8%E9%80%82%E9%85%8D%E5%99%A8/",
            "title": "STL容器适配器",
            "date_published": "2023-06-12T00:57:39.628Z",
            "content_html": "<h1 id=\"容器适配器\"><a class=\"anchor\" href=\"#容器适配器\">#</a> 容器适配器</h1>\n<blockquote>\n<p>容器适配器为顺序容器提供了不同的 <code>接口</code></p>\n</blockquote>\n<ul>\n<li><code>stack</code> : 适配一个容器已提供 <code>栈</code>  ( <code>LIFO</code>  数据结构)</li>\n<li><code>queue</code> : 适配一个容器以提供 <code>队列</code>  ( <code>FIFO</code>  数据结构)</li>\n<li><code>priority_queue</code> : 适配一个 <code>容</code> 器以提供 <code>优先级队列</code></li>\n</ul>\n<h2 id=\"stack\"><a class=\"anchor\" href=\"#stack\">#</a> stack</h2>\n<blockquote>\n<p><code>stack</code>  类是容器适配器，它给予程序员栈的功能 -- 特别是 <code>FILO</code>  (先进后出) 数据结构。该类模版表现为底层容器的包装器 -- 只提供特定函数集合。栈从被称作栈顶的容器尾部推弹元素</p>\n</blockquote>\n<h3 id=\"元素访问\"><a class=\"anchor\" href=\"#元素访问\">#</a> 元素访问</h3>\n<ul>\n<li><code>top</code> : 访问 <code>栈顶</code> 元素</li>\n</ul>\n<h3 id=\"容量\"><a class=\"anchor\" href=\"#容量\">#</a> 容量</h3>\n<ul>\n<li><code>empty</code> : 检查栈顶容器是否为 <code>空</code></li>\n<li><code>size</code> : 返回容纳的元素数</li>\n</ul>\n<h3 id=\"修改器\"><a class=\"anchor\" href=\"#修改器\">#</a> 修改器</h3>\n<ul>\n<li><code>push</code> : 向 <code>栈顶插入</code> 元素</li>\n<li><code>emplace</code> : 在栈顶原位构造元素</li>\n<li><code>pop</code> : <code>删除</code> 栈顶元素</li>\n<li><code>swap</code> : <code>交换</code> 内容</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 创建栈</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 向栈顶插入元素</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">51</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 输出栈的数量</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" elements on stack\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 访问栈顶元素</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s Top element:\"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 删除栈顶元素</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 输出栈的数量</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s elements on stack\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 将 s 内容与 a 进行交换</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a elements on stack\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 输出 a 的栈顶元素</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a Top element:\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>3 elements on stack</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>s Top element:51</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>2s elements on stack</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>2a elements on stack</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>a Top element:6</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>*/</span></pre></td></tr></table></figure><hr />\n<h2 id=\"queue\"><a class=\"anchor\" href=\"#queue\">#</a> queue</h2>\n<blockquote>\n<p><code>queue</code>  类是容器适配器，它给予程序员队列的功能 -- 尤其是 <code>FIFO</code>  (先进先出) 数据结构。</p>\n</blockquote>\n<h3 id=\"元素访问-2\"><a class=\"anchor\" href=\"#元素访问-2\">#</a> 元素访问</h3>\n<ul>\n<li><code>front</code> : 访问 <code>第一</code> 个元素</li>\n<li><code>back</code> : 访问 <code>最后一个</code> 元素</li>\n</ul>\n<h3 id=\"容量-2\"><a class=\"anchor\" href=\"#容量-2\">#</a> 容量</h3>\n<ul>\n<li><code>empty</code> : 检查栈顶容器是否为 <code>空</code></li>\n<li><code>size</code> : 返回容纳的元素数</li>\n</ul>\n<h3 id=\"修改器-2\"><a class=\"anchor\" href=\"#修改器-2\">#</a> 修改器</h3>\n<ul>\n<li><code>push</code> : 向 <code>栈顶插入</code> 元素</li>\n<li><code>emplace</code> : 在栈顶原位构造元素</li>\n<li><code>pop</code> : <code>删除</code> 栈顶元素</li>\n<li><code>swap</code> : <code>交换</code> 内容</li>\n</ul>\n<h2 id=\"priority_queue\"><a class=\"anchor\" href=\"#priority_queue\">#</a> priority_queue</h2>\n<blockquote>\n<p><code>priority_queue</code>  是容器适配器 (最大优先队列)，它提供 <code>常数时间</code> 的 (默认) <code>最大元素</code> 最大查找，对数代价的插入与提取。可以通过用户提供的 Compare 更改顺序，例如用 std::greater&lt;T&gt; 将导致最小元素作为 top () 出现，用 piority_queue 工作类似管理某些随机访问容器的堆，优势是堆不可能突然失效。</p>\n</blockquote>\n<h3 id=\"元素访问-3\"><a class=\"anchor\" href=\"#元素访问-3\">#</a> 元素访问</h3>\n<ul>\n<li><code>top</code> : 访问 <code>栈顶</code> 元素</li>\n</ul>\n<h3 id=\"容量-3\"><a class=\"anchor\" href=\"#容量-3\">#</a> 容量</h3>\n<ul>\n<li><code>empty</code> : 检查栈顶容器是否为 <code>空</code></li>\n<li><code>size</code> : 返回容纳的元素数</li>\n</ul>\n<h3 id=\"修改器-3\"><a class=\"anchor\" href=\"#修改器-3\">#</a> 修改器</h3>\n<ul>\n<li><code>push</code> : 向 <code>栈顶插入</code> 元素</li>\n<li><code>emplace</code> : 在栈顶原位构造元素</li>\n<li><code>pop</code> : <code>删除</code> 栈顶元素</li>\n<li><code>swap</code> : <code>交换</code> 内容</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>environment:C++20</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string_view></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string_view name<span class=\"token punctuation\">,</span> T <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> n <span class=\"token operator\">:</span> q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Q</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print_queue</span><span class=\"token punctuation\">(</span>string_view name<span class=\"token punctuation\">,</span> Q q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 注意按照值传递 q，这是因为无法再不清楚队列的情况下遍历 priority_queue 的内容</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>cout <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \\t\"</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 最大优先队列</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tpriority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q1<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token comment\">// 向栈顶插入元素</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tq1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">print_queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"q1\"</span><span class=\"token punctuation\">,</span> q1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// 最小优先队列</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">//std::gerater&lt;int > 使得最大优先队列的行为变成最小优先队列的行为</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tpriority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token function\">minq1</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">print_queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minq1\"</span><span class=\"token punctuation\">,</span> minq1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>data:   1 8 5 6 3 4 0 9 7 2</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>q1:     9 8 7 6 5 4 3 2 1 0</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>minq1:  0 1 2 3 4 5 6 7 8 9</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>*/</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "汇编与STl新特征",
                "C++",
                "计算机科学",
                "STL"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/STL%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/STL%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/",
            "title": "STL顺序容器",
            "date_published": "2023-06-12T00:57:39.628Z",
            "content_html": "<h1 id=\"顺序容器\"><a class=\"anchor\" href=\"#顺序容器\">#</a> 顺序容器</h1>\n<blockquote>\n<p>容器库是 <code>类</code> 与 <code>算法</code> 的汇集</p>\n</blockquote>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<ul>\n<li>静态的连续数组 <code>array</code></li>\n<li>动态连续数组 <code>vector</code></li>\n</ul>\n<h2 id=\"array\"><a class=\"anchor\" href=\"#array\">#</a> array</h2>\n<h3 id=\"头文件\"><a class=\"anchor\" href=\"#头文件\">#</a> 头文件</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr></table></figure><h3 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>注意：当期长度为零时，array (N==0) 有特殊情况，此时 array.begin ()==array.end (), 并拥有某个唯一值，在零长亦可将 array 上调用 front 或 back () 是未定义的</p>\n</blockquote>\n<h3 id=\"元素访问\"><a class=\"anchor\" href=\"#元素访问\">#</a> 元素访问</h3>\n<ul>\n<li><code>at</code> : 访问 <code>指定</code> 的元素，同时进行越界检查</li>\n<li><code>operator[]</code> : 访问指定的元素</li>\n<li><code>front</code> : 访问 <code>第一个</code> 元素</li>\n<li><code>back</code> : 访问 <code>最后一个</code> 元素</li>\n<li><code>data</code> : 直接访问底层数组的指针，返回的指针使得返回 [data (),data ()+size ()] 始终是合法范围，即使容器为空 (此时 data () 不可解引用)。对于底层元素存储的指针，对于非空容器，返回的指针与首元素地址比较相等</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//array 数组元素访问</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"at(2)=\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"operator[2]=\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"首front=\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"尾back=\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//a.data 返回 array 首元素地址</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"data =\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 遍历数组</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin </code> : 访问指向起始的 <code>迭代器</code></li>\n<li><code>end / cend </code> ：返回指向末位的迭代器</li>\n<li><code>rbegin / crbegin</code>  ：返回指向起始的 <code>逆向</code> 迭代器</li>\n<li><code>rend / crend</code>  ： 返回指向末位的逆向迭代器<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/ORog4TEnkbuePicu1R2efjibjI98CKvwRyNZKMibnLGzAgA3jeOicpRUBu8ZP7KztbBHCBud16YU608lPDibewnMczg/0?wx_fmt=gif\" alt=\"迭代器区别\" title=\"迭代器区别\" /></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//array 的迭代器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 打印首元素</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; *a.begin() &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 打印所有元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//for_each(a.cbegin(), a.cend(),</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//\t[](int x)&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//\t\tcout &lt;&lt; x &lt;&lt; \" \";</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//\t&#125;);</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; \"\\n\";</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//// 不加 c</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//for_each(a.begin(), a.end(),</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">//\t[](int x)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//\t&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//\t\tcout &lt;&lt; x &lt;&lt; \" \";</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">//\t&#125;);</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; \"\\n\";</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 使用 while 正序</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">auto</span> first <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">auto</span> last <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">!=</span> last<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 逆序 r</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 使用 while</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">auto</span> first_r <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">auto</span> last_r <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first_r <span class=\"token operator\">!=</span>last_r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>first_r <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tfirst_r<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>1 2 3 4 5 6</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>6 5 4 3 2 1</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"容器\"><a class=\"anchor\" href=\"#容器\">#</a> 容器</h3>\n<ul>\n<li><code>empty</code>  : 检查容器是否为空，若为空 0, 否则 1</li>\n<li><code>size </code> : 返回容纳的元素数</li>\n<li><code>max_size </code> ：返回可容纳的最大元素数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tarray <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token operator\">></span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 判断是否为空</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> boolalpha<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把 bool 值显示为 true 或 false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a.empty() ： \"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"no.empty() ： \"</span> <span class=\"token operator\">&lt;&lt;</span> no<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 返回元素个数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a.size() :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 返回元素最大，由于 array 大小固定等于 size</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a.max_size() :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>a.empty() ： false</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>no.empty() ： true</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>a.size() :3</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>a.max_size() :3</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"操作\"><a class=\"anchor\" href=\"#操作\">#</a> 操作</h3>\n<ul>\n<li><code>fill</code> : 以指定值填充容器</li>\n<li><code>swap </code> : 交换内容</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">></span> b <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 判断是否为空</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> boolalpha<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把 bool 值显示为 true 或 false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a.empty() ： \"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 将所有元素用 2 填充</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tb<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 将 a 的元素与 b 元素交换</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 返回 a 元素个数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a.size() :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 返回 a 的所有元素</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"A数组:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">auto</span> first_ra <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">auto</span> last_ra <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first_ra <span class=\"token operator\">!=</span> last_ra<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>first_ra <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tfirst_ra<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 返回 b 元素个数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b.size() :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 返回 b 的所有元素</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">auto</span> first_rb <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">auto</span> last_rb <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"B数组:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first_rb <span class=\"token operator\">!=</span> last_rb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>first_rb <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tfirst_rb<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>a.empty () ： false</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>a.size () :3</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>A 数组：6 6 6</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>b.size () :3</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>B 数组：2 2 2</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"辅助类\"><a class=\"anchor\" href=\"#辅助类\">#</a> 辅助类</h3>\n<ul>\n<li><code>tuple_size(std::array)</code> : 提供用于编译时常量表达式访问 array 中元素数量的方法</li>\n<li><code>tuple_element&lt;std::array&gt;</code> : 获取 array 元素的类型。提供 tuple 接口，提供 array 元素类型编译时代下标访问</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 辅助类 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>T t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>tuple_size<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 能用于编译时</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> tuple_size<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>value <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">></span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span> arr <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>3</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"vector\"><a class=\"anchor\" href=\"#vector\">#</a> vector</h2>\n<h3 id=\"头文件-2\"><a class=\"anchor\" href=\"#头文件-2\">#</a> 头文件</h3>\n<blockquote>\n<p><code>vector</code>  是封装动态数组的顺序容器， <code>vector</code>  的存储是自动管理的，按需扩张收缩， <code>vector</code>  通产占用 <code>多余</code> 静态数组的空间，因此要分配更多内存以管理将来的增长。 <code>vector</code>  所用的方式不在每次插入元素时，而只在额外内存耗尽时重分配。分配的内存总量可用 <code>capacity()</code>  函数查询，可以通过调用 <code>shrink_to_fit()</code>  返回多出的内存给系统。重分配通常是性能上有开销的操作，如果元素数量已知，那么 reserve () 函数可用于消除重分配</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr></table></figure><h3 id=\"元素访问-2\"><a class=\"anchor\" href=\"#元素访问-2\">#</a> 元素访问</h3>\n<ul>\n<li><code>at</code>  ： 访问指定的元素，同时进行越界检查</li>\n<li><code>operator[]</code> ：访问指定的元素</li>\n<li><code>front</code> ：访问第一个元素</li>\n<li><code>back</code> ：访问之后一个元素</li>\n<li><code>data</code> ：直接访问底层数组</li>\n</ul>\n<h3 id=\"迭代器-2\"><a class=\"anchor\" href=\"#迭代器-2\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code> ：返回指向起始的迭代器</li>\n<li><code>end/cend</code> ：返回指向末位的迭代器</li>\n<li><code>rbegin/crbegin</code> : 返回指向起始的逆向迭代器</li>\n<li><code>rend/crend</code> : 返回指向末尾的逆向迭代器</li>\n</ul>\n<h3 id=\"容量\"><a class=\"anchor\" href=\"#容量\">#</a> 容量</h3>\n<ul>\n<li><code>empty</code> : 检查容器是否为空</li>\n<li><code>size</code> : 返回容纳的元素数</li>\n<li><code>max_size</code> : 返回可容纳的最大元素数 (根据系统或库实现限制的容器可保有的元素最大数量)，此值通常反应容器大小的理论极限</li>\n<li><code>reserve</code> : 预留存储空间</li>\n<li><code>capacity</code> : 返回当前存储空间能够容纳的元素数</li>\n<li><code>shrink_to_fit</code> ：通过释放未使用的内存减少内存的使用</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* project： vector 容器语法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 返回当前可容纳元素容量的理论最大值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Maximum size of a vector is :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">//capacity 返回容器当前已为之分配空间的元素数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"capacity size of a vector is :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 增加 vector 的容量到大约或等于 new_cap 的值，参数 vector 的新容量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//capacity 返回容器当前已为之分配空间的元素数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"New capacity size of a vector is :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\ta <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 请求移除未使用的容量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">shrink_to_fit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//capacity 返回容器当前已为之分配空间的元素数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Shrink capacity size of a vector is :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Maximum size of a vector is :4611686018427387903</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>capacity size of a vector is :0</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>New capacity size of a vector is :10</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Shrink capacity size of a vector is :4</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"修改器\"><a class=\"anchor\" href=\"#修改器\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清除内容</li>\n<li><code>insert</code> : 插入元素\n<ul>\n<li>参数；</li>\n<li><code>pos</code> : 将内容那个插入到它前面的迭代器</li>\n<li><code>value</code> : 要插入的元素值</li>\n<li><code>first,last</code> ：要插入的元素范围，不能是指向调用 insert 所用的容器中的迭代器</li>\n<li><code>ilist</code> ：要插入来源的 initializer_list</li>\n<li>注意：如果新的 size () 大于留的 capacity 就会导致 <code>重分配</code> ，如果新的 size () 大于 capacity ()，那么所有迭代器和引用都会失效，否则只有在插入点前的迭代器和引用会保持有效</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//project:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iterator></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 动态数组输出函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\". \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> x <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 创建动态数组</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">c1</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 插入元素</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 在 c1 受元素插入 200</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tit <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 将上面的两个值 it 初始位置插入两个 300</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tc1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">//it 已经是失效，提供新迭代器</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tit <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 创建 c2 数组</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 在 c1 中插入 it 的位置插入 c2 从 begin 到 end</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tc1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>1. 100 100 100</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>2. 200 100 100 100</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>3. 300 300 200 100 100 100</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>4. 300 300 400 400 200 100 100 100</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>*/</span></pre></td></tr></table></figure><hr />\n<ul>\n<li><code>emplace</code>  : 原位构造元素，直接与 <code>pos</code>  前插入元素到容器中</li>\n<li><code>push_back</code> : 将元素添加到容器 <code>末尾</code></li>\n<li><code>emplace_back</code> : 在容器末尾就地构造元素</li>\n</ul>\n<hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyString</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 普通构造函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyString<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    MyString<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyString<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 赋值函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> m_data<span class=\"token punctuation\">;</span><span class=\"token comment\">// 用于保存字符串</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 普通构造函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">MyString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        m_data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token operator\">*</span>m_data <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        m_data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>m_data<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"construct:\"</span> <span class=\"token operator\">&lt;&lt;</span> m_data <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// String 的析构函数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token class-name\">MyString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"deconstruct:\"</span> <span class=\"token operator\">&lt;&lt;</span> m_data <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> m_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token class-name\">MyString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyString<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>m_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    m_data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>m_data<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>m_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copy construct:\"</span> <span class=\"token operator\">&lt;&lt;</span> m_data <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">// 赋值函数</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>MyString<span class=\"token operator\">&amp;</span> MyString<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyString<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copy assignment\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> m_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>m_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    m_data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>m_data<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>m_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"对比push_back和emplace_back的效率\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"push_back\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>MyString<span class=\"token operator\">></span> vStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 预先分配，否则整个 vector 在容量不够的情况下重新分配内存</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        vStr<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">// 将元素增加到末尾</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        vStr<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"can ge ge blog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"emplace_back\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>MyString<span class=\"token operator\">></span> vStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token comment\">// 预先分配，否则整个 vector 在容量不够的情况下重新分配内存</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        vStr<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        vStr<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>对比 push_back 和 emplace_back 的效率</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>push_back</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>construct:can ge ge blog</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>copy construct:can ge ge blog</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>deconstruct:can ge ge blog</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>deconstruct:can ge ge blog</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>emplace_back</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>construct:hello world</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>deconstruct:hello world</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>*/</span></pre></td></tr></table></figure><blockquote>\n<p>从运行结果行， <code>emplace_back</code>  只调用一次构造和析构，其 <code>效率</code> 不言而喻</p>\n</blockquote>\n<hr />\n<ul>\n<li><code>erase</code>  : 擦除元素\n<ul>\n<li>移除位于 <code>pos</code>  的元素</li>\n<li>移除范围 <code>[first,last]</code>  中的元素</li>\n</ul>\n</li>\n<li><code>pop_back</code> : 移除莫末元素</li>\n<li><code>resize</code> : 改变容器中可存储元素的个数\n<ul>\n<li>参数:</li>\n<li><code>count</code> ：容量的大小</li>\n<li><code>value</code> ：用以初始化新元素的值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> el <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> el <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 增加大小，多余的赋值为 0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> el <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> el <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 添加到 7，赋值为 6</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> el <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> el <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>1 2 3</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>1 2 3 0 0</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>1 2 3 0 0 6 6</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>*/</span></pre></td></tr></table></figure><ul>\n<li><code>swap</code> : 交换内容</li>\n</ul>\n<blockquote>\n<p>将内容以及容器与 <code>other</code>  交换， <code>不</code> 在单独的元素上调用任何移动，复制或交换操作</p>\n</blockquote>\n<h2 id=\"deque\"><a class=\"anchor\" href=\"#deque\">#</a> deque</h2>\n<blockquote>\n<p><code>deque</code>  双端队列，允许在它的首尾快速插入语删除，在 <code>deque</code>  任一端插入或删除都不会使指向其余元素的指针或引用失效。 <code>deque</code>  的存储按需自动扩展及收缩</p>\n</blockquote>\n<h3 id=\"元素访问-3\"><a class=\"anchor\" href=\"#元素访问-3\">#</a> 元素访问</h3>\n<ul>\n<li><code>at</code> : 访问 <code>指定</code> 的元素，同时进行越界检查</li>\n<li><code>operator[]</code> : 访问指定的元素</li>\n<li><code>front</code> : 访问 <code>第一个</code> 元素</li>\n<li><code>back</code> : 访问 <code>最后一个</code> 元素</li>\n</ul>\n<h3 id=\"迭代器-3\"><a class=\"anchor\" href=\"#迭代器-3\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code> ：返回指向起始的迭代器</li>\n<li><code>end/cend</code> ：返回指向末位的迭代器</li>\n<li><code>rbegin/crbegin</code> : 返回指向起始的逆向迭代器</li>\n<li><code>rend/crend</code> : 返回指向末尾的逆向迭代器</li>\n</ul>\n<h3 id=\"容量-2\"><a class=\"anchor\" href=\"#容量-2\">#</a> 容量</h3>\n<ul>\n<li><code>empty</code> : 检查容器是否为空</li>\n<li><code>size</code> : 返回容纳的元素数</li>\n<li><code>max_size</code> : 返回可容纳的最大元素数 (根据系统或库实现限制的容器可保有的元素最大数量)，此值通常反应容器大小的理论极限</li>\n<li><code>shrink_to_fit</code> ：通过释放未使用的内存减少内存的使用</li>\n</ul>\n<h3 id=\"修改器-2\"><a class=\"anchor\" href=\"#修改器-2\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code>  : 清楚内容</li>\n<li><code>insert</code> : 插入元素</li>\n<li><code>emplace</code> ：原位构造元素</li>\n<li><code>erase</code> : 擦除元素</li>\n<li><code>push_back</code> ：将元素添加到容器末尾</li>\n<li><code>emplace_back</code> ：将容器末尾就地构造元素</li>\n<li><code>pop_back</code> : 移除末元素</li>\n<li><code>pop_front</code> ：移除首元素</li>\n<li><code>push_front</code> ：插入元素到容器起始</li>\n<li><code>emplace_front</code> ：在容器头部原位构造元素</li>\n<li><code>resize</code> : 改变容器中可存储元素的个数</li>\n<li><code>swap</code> : 交换内容</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tdeque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>5 1 2 3 4 5 6</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>1 2 3 4 5</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"forward_list\"><a class=\"anchor\" href=\"#forward_list\">#</a> forward_list</h2>\n<blockquote>\n<p><code>forward_list</code>  支持从容器中的 <code>任何位置</code> 快速插入和移除元素的容器，不支持快速随机访问。它实现为 <code>单链表</code> ，且实质上与其在 C 中实现相比无任何开销，与 list 相比，此容器不需要双向迭代中提供更有效利用空间的存储</p>\n</blockquote>\n<h3 id=\"元素访问-4\"><a class=\"anchor\" href=\"#元素访问-4\">#</a> 元素访问</h3>\n<ul>\n<li><code>front</code> : 访问第一个元素</li>\n</ul>\n<h3 id=\"迭代器-4\"><a class=\"anchor\" href=\"#迭代器-4\">#</a> 迭代器</h3>\n<ul>\n<li><code>before_begin\\cbefore_begin</code> : 返回指向第一个元素之前的迭代器</li>\n<li><code>begin/cbegin</code> : 返回指向起始的迭代器</li>\n<li><code>end/cend</code> : 返回指向末位的迭代器</li>\n</ul>\n<h3 id=\"容量-3\"><a class=\"anchor\" href=\"#容量-3\">#</a> 容量</h3>\n<ul>\n<li>empty: 检查容器是否为空</li>\n<li>max_size: 返回可容纳的最大元素数</li>\n</ul>\n<h3 id=\"修改器-3\"><a class=\"anchor\" href=\"#修改器-3\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清楚内容</li>\n<li><code>insert_after</code> : 在某个元素后插入新元素\n<ul>\n<li>参数:</li>\n<li><code>pos</code> : 内容将其插入到其后的迭代器</li>\n<li><code>value</code> : 要插入的元素值</li>\n<li><code>count</code> : 要插入的副本数</li>\n<li><code>first,last</code> ：要插入的元素范围</li>\n<li><code>ilist</code> : 插入值来源 initializer_list</li>\n</ul>\n</li>\n<li><code>emplace_after</code> ：在元素后原位构造元素</li>\n<li><code>erase_after</code> ：擦除元素后的元素\n<ul>\n<li>参数；</li>\n<li><code>pos</code> : 指向前驱要移除元素的迭代器</li>\n<li><code>first,last</code>  要移除的元素范围</li>\n</ul>\n</li>\n<li><code>push_front</code> : 插入元素到容器起始</li>\n<li><code>emplace_front</code> ：在容器头部构造元素</li>\n<li><code>pop_front</code> : 移除首元素</li>\n<li><code>resize</code> : 改变容器中可存储元素的个数</li>\n<li><code>swap</code> : 交换内容</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;forward_list></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 重载输出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> forward_list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'['</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">char</span> comma<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">,</span><span class=\"token char\">' ,'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'\\0'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\ts <span class=\"token operator\">&lt;&lt;</span> comma <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcomma<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">', '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> s <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">']'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tforward_list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> words<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"the\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"forgurt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"alse\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cursed\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words:\"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">auto</span> beginIn <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>beginIn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"strawberry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// insert_after (3)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">auto</span> anotherIt <span class=\"token operator\">=</span> beginIn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token operator\">++</span>anotherIt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tanotherIt <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>anotherIt<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"strawberry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// insert_after (4)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> V <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tanotherIt <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>anotherIt<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// insert_after (5)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>anotherIt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"jackfruit\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kiwifruit\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lime\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mango\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 更改元素个数</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 移除首元素</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 从容器中移除指定元素</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">erase_after</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_after</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token comment\">// 清除元素</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>words:[the ,forgurt ,is ,alse ,cursed]</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>words: [the ,strawberry ,strawberry ,strawberry ,forgurt ,is ,alse ,cursed]</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>words: [the ,strawberry ,strawberry ,strawberry ,apple ,banana ,cherry ,forgurt ,is ,alse ,cursed]</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>words: [the ,strawberry ,strawberry ,strawberry ,apple ,banana ,cherry ,jackfruit ,kiwifruit ,lime ,mango ,forgurt ,is ,alse ,cursed]</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>words: [the ,strawberry ,strawberry ,strawberry ,apple ,banana]</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>words: [strawberry ,strawberry ,strawberry ,apple ,banana]</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>words: [strawberry ,strawberry ,apple ,banana]</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>words: [strawberry ,hello ,strawberry ,apple ,banana]</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"操作-2\"><a class=\"anchor\" href=\"#操作-2\">#</a> 操作</h3>\n<ul>\n<li><code>merge</code> : 合并两个已排序列表，链表以升序排序，不复制元素，并且操作后容器 other 会变 <code>为空</code> ，</li>\n<li><code>splice_afte</code> r: 从另一个 forward_list 移动元素\n<ul>\n<li>参数:</li>\n<li><code>pos</code> ：指向将插入内容到其后的元素的迭代器</li>\n<li><code>other</code> : 移动内容来源的另一个容器</li>\n<li><code>it</code>  指向从 other 移动到 * this 的元素的迭代器的前驱迭代器</li>\n<li><code>first,last</code> ，从 other 移动到 * this 的元素范围</li>\n</ul>\n</li>\n<li><code>remove/remove_if</code> : 移除满足特定标准的元素\n<ul>\n<li>参数:</li>\n<li><code>value</code>  - 要移除的元素的值</li>\n<li><code>p</code>  若应移除该元素则返回 true 的一元谓词</li>\n</ul>\n</li>\n<li><code>reverse</code> : 将该链表的所有元素顺序反转</li>\n<li><code>unique</code> : 删除连续的重复元素</li>\n<li><code>sort</code> : 对元素进行排序</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;forward_list></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;list></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> ostr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> forward_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> i <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tostr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> ostr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tforward_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tforward_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tforward_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">66</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 对列表排序</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tlist2<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"list1\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"list2\"</span> <span class=\"token operator\">&lt;&lt;</span> list2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 合并后 list2 为空</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"合并后\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">splice_after</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list3<span class=\"token punctuation\">,</span>list3<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list3<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"插入后\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 移除满足条件的值</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 移除等于 1 的</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"移除1后\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 移除 n 大于 10 的</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">remove_if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> n <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"移除大于10后\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 将所有元素反转</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"列表反转后：\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 删除重复元素</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"去重后：\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>list1 1 3 3 3 5 9 9</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>list2 2 3 4 5 7 8</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>合并后 1 2 3 3 3 3 4 5 5 7 8 9 9</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>插入后 1 99 33 2 3 3 3 3 4 5 5 7 8 9 9</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>移除 1 后 99 33 2 3 3 3 3 4 5 5 7 8 9 9</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>移除大于 10 后 2 3 3 3 3 4 5 5 7 8 9 9</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>列表反转后： 9 9 8 7 5 5 4 3 3 3 3 2</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>去重后： 9 8 7 5 4 3 2</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>*/</span></pre></td></tr></table></figure><hr />\n<h2 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> list</h2>\n<blockquote>\n<p>支持 <code>常量</code> 时间从容器任何位置插入和移除元素的容器。它通常实现为双向链表</p>\n</blockquote>\n<h3 id=\"元素访问-5\"><a class=\"anchor\" href=\"#元素访问-5\">#</a> 元素访问</h3>\n<ul>\n<li><code>front</code> : 访问第一个元素</li>\n<li><code>back</code> : 访问最后一个元素</li>\n</ul>\n<h3 id=\"迭代器-5\"><a class=\"anchor\" href=\"#迭代器-5\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code> : 返回指向起始的迭代器</li>\n<li><code>end/cend</code>  : 返回指向末尾的迭代器</li>\n<li><code>rbegin/crbegin</code> : 返回指向起始的逆向迭代器</li>\n<li><code>rend/crend</code> : 返回指向末尾的逆向迭代器</li>\n</ul>\n<h3 id=\"容量-4\"><a class=\"anchor\" href=\"#容量-4\">#</a> 容量</h3>\n<ul>\n<li><code>empty</code> : 检查容器是否为空</li>\n<li><code>size</code> : 返回容纳的元素数</li>\n<li><code>max_size</code> : 返回可容纳的最大元素数</li>\n</ul>\n<h3 id=\"修改器-4\"><a class=\"anchor\" href=\"#修改器-4\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清楚内容</li>\n<li><code>insert</code> : 插入元素</li>\n<li><code>emplace</code> ：原位构造元素</li>\n<li><code>erase</code> ：擦除元素</li>\n<li><code>push_back</code> : 在元素添加到容器末尾</li>\n<li><code>emplace_back</code> ：在容器末尾就地构造元素</li>\n<li><code>pop_back</code> ；移除末元素</li>\n<li><code>push_front</code> : 插入元素到容器起始</li>\n<li><code>emplace_front</code> ：在容器头部构造元素</li>\n<li><code>pop_front</code> : 移除首元素</li>\n<li><code>resize</code> : 改变容器中可存储元素的个数</li>\n<li><code>swap</code> : 交换内容</li>\n</ul>\n<h3 id=\"操作-3\"><a class=\"anchor\" href=\"#操作-3\">#</a> 操作</h3>\n<ul>\n<li><code>merge</code> : 合并 <code>两个已排序</code> 列表</li>\n<li><code>splice</code> : 从另一个 list 中移动元素</li>\n<li><code>remove/remove_if</code> : 移除满足特定标准的元素</li>\n<li><code>reverse</code> : 将该链表的所有元素顺序 <code>反转</code></li>\n<li><code>unique</code> : 删除连续的 <code>重复</code> 元素</li>\n<li><code>sort</code> : 对元素进行排序</li>\n</ul>\n<p>参考资料:<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2NvbnRhaW5lcg==\">cppreference</span></p>\n",
            "tags": [
                "计算机科学",
                "C++",
                "汇编与STl新特征",
                "C++",
                "计算机科学",
                "STL"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/STL%E6%97%A0%E5%BA%8F%E5%92%8C%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/STL%E6%97%A0%E5%BA%8F%E5%92%8C%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/",
            "title": "STL关联容器",
            "date_published": "2023-06-12T00:57:39.628Z",
            "content_html": "<h1 id=\"关联容器\"><a class=\"anchor\" href=\"#关联容器\">#</a> 关联容器</h1>\n<ul>\n<li><code>set</code> : <code>唯一键</code> 的集合，按照键排序</li>\n<li><code>map</code> : 键值队的集合，按照键排序， <code>键是唯一</code> 的</li>\n<li><code>multiset</code> : 键的集合，按照键排序</li>\n<li><code>multimap</code> : 键值对的集合，按照键排序</li>\n</ul>\n<h2 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a>  <code>set</code></h2>\n<blockquote>\n<p><code>set</code>  是关联容器，含有 <code>key</code>  类型对象的已排序集，用比较函数 ( <code>compare</code> ) 进行排序。搜索，移除和插入拥有对数复杂度，set 通常以红黑树实现</p>\n</blockquote>\n<h3 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code>  : 返回指向起始的迭代器</li>\n<li><code>end/cend </code> : 返回指向末位的迭代器</li>\n<li><code>rbegin/crbegin</code>  ：返回指向起始的逆向迭代器</li>\n<li><code>rend/crend</code>  : 返回指向末尾的逆向迭代器</li>\n</ul>\n<h3 id=\"容器\"><a class=\"anchor\" href=\"#容器\">#</a> 容器</h3>\n<ul>\n<li><code>empty</code> : 检查容器是否为空</li>\n<li><code>size</code> : 返回容纳的元素数</li>\n<li><code>max_size</code> ：返回可容纳的最大元素数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 创建关联容器 set</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 使用 set 的迭代器，循环遍历</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 让 bool 显示未 true 或 false</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> boolalpha<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s是否为空:\"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s的元素个数:\"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s可理论容纳的最大数量:\"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 清除 s 内容</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"清除后s是否为空:\"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 插入元素</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>1 2 3 4 5 6</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>s 是否为空:false</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>s 的元素个数：6</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>s 可理论容纳的最大数量：576460752303423487</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>清除后 s 是否为空:true</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>99</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"修改器\"><a class=\"anchor\" href=\"#修改器\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清除内容</li>\n<li><code>insert</code> ：插入元素或 <code>结点C++17</code></li>\n<li><code>emplace</code> : 原位构造元素</li>\n<li><code>emplace_hint</code> : 使用提示原位构造元素</li>\n<li><code>erase</code> : 擦除元素\n<ul>\n<li>参数:</li>\n<li><code>pos</code> : 指向要移除的元素的迭代器</li>\n<li><code>first,last</code> ：要移除的元素范围</li>\n<li><code>key</code> ：要移除的元素键值</li>\n<li><code>x</code> : 任何能与键通透比较的类型的值，自带要移除的元素</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">auto</span> print <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c=&#123;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"&#125;\"</span><span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"移除所有奇数：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token comment\">// 擦除首元素</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tit <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"移除1，移除个数\"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"移除2，移除个数\"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"移除2，移除个数\"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>c=&#123;1 2 3 4&#125;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>移除所有奇数：</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>c=&#123;2 4 &#125;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>移除 1，移除个数 0</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>移除 2，移除个数 1</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>移除 2，移除个数 0</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>c=&#123;4 &#125;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>*/</span></pre></td></tr></table></figure><ul>\n<li><code>swap</code> : 交换内容</li>\n<li><code>extract</code> : 从另一个容器释出结点 <code>C++17</code></li>\n</ul>\n<blockquote>\n<p>解链含 <code>position</code>  所指向的结点并返回占有它的结点柄<br />\n若容器拥有元素而其关键等于 x，则从容器解链该元素并返回占有它的结点柄，否则返回空结点柄<br />\n参数:<br />\n* position: 指向此容器中的合法迭代器<br />\n * k: 鉴别要被释放出的结点的键<br />\n * x: 任何能与键通透比较的类型的值，鉴别要释放的结点<br />\n <code>extract</code>  是 <code>set</code>  带走仅移动对象的唯一方式</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> cont<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">auto</span> print <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>cont<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cont<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//C++17. 解链含 position 所指向元素的结点柄返回占有它的结点柄</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">auto</span> nh <span class=\"token operator\">=</span> cont<span class=\"token punctuation\">.</span><span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 对结点柄重新赋值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tnh<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>cont<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cont<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 将 nh 结点柄插入尾部</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcont<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>nh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>cont<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cont<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> 1 2 3</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> 2 3</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> 2 3 4</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>*/</span></pre></td></tr></table></figure><ul>\n<li><code>merge</code> : 从另一个容器接合结点 <code>C++17</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Os</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Os<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>Os<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>set<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 求出 set 的大小</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'['</span> <span class=\"token operator\">&lt;&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] &#123;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">bool</span> o<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">// 判断是否为空决定是，还是空</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">?</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> os <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" &#125;\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tp<span class=\"token punctuation\">&#123;</span><span class=\"token char\">'C'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'B'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'B'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'A'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tq<span class=\"token punctuation\">&#123;</span> <span class=\"token char\">'E'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'D'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'E'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'C'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p: \"</span> <span class=\"token operator\">&lt;&lt;</span> p <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"q: \"</span> <span class=\"token operator\">&lt;&lt;</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">// 对 set 进行合并</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tp<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 合并自动去重</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">//q 留下重复的部分</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p.merge(q):\"</span> <span class=\"token operator\">&lt;&lt;</span> p <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"q: \"</span> <span class=\"token operator\">&lt;&lt;</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>p: [3] &#123; A, B, C &#125;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>q: [3] &#123; C, D, E &#125;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>p.merge(q):[5] &#123; A, B, C, D, E &#125;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>q: [1] &#123; C &#125;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"查找\"><a class=\"anchor\" href=\"#查找\">#</a> 查找</h3>\n<ul>\n<li><code>count</code> : 返回匹配特定键的元素数量</li>\n<li><code>find</code> : 遵照带有特定键的元素</li>\n<li><code>contains</code> ：检查容器是否含有带特定键的元素</li>\n<li><code>equal_range</code> : 返回匹配特定键的元素范围</li>\n<li><code>lower_bound</code> : 返回指向首个不小于给定键的元素迭代器</li>\n<li><code>upper_bound</code> : 返回指向首个大于给定键的元素的迭代器</li>\n</ul>\n<h3 id=\"观察器\"><a class=\"anchor\" href=\"#观察器\">#</a> 观察器</h3>\n<ul>\n<li><code>key_comp</code> : 返回用于比较键的函数</li>\n<li><code>value_comp</code> ：返回用于在 <code>value_type</code>  类型的对象中比较键的函数</li>\n</ul>\n<h2 id=\"multiset\"><a class=\"anchor\" href=\"#multiset\">#</a> multiset</h2>\n<blockquote>\n<p>multiset 是含有 key 类型对象有序集的容器，与 set 不同，它允许 <code>多个key</code>  拥有等价的值，用关键比较函数 Compare 进行排序，搜索，插入和移除操作拥有对数复杂度<br />\n <code>其用法与set相同</code></p>\n</blockquote>\n<h2 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> map</h2>\n<blockquote>\n<p>有序键值队容器，它的元素的键是惟一的。</p>\n</blockquote>\n<h3 id=\"元素访问\"><a class=\"anchor\" href=\"#元素访问\">#</a> 元素访问</h3>\n<ul>\n<li>at: 访问指定的元素，同时进行越界检查</li>\n<li>operator []: 访问或插入指定的元素</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 输出键值队 map</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">auto</span> print <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span> comment<span class=\"token punctuation\">,</span> <span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> map<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> comment <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#123;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> pair <span class=\"token operator\">:</span> map<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#123;\"</span> <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> letter_counts <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token char\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token char\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"letter_counts初始状态下包含:\"</span><span class=\"token punctuation\">,</span> letter_counts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tletter_counts<span class=\"token punctuation\">[</span><span class=\"token char\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tletter_counts<span class=\"token punctuation\">[</span><span class=\"token char\">'x'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改后的值\"</span><span class=\"token punctuation\">,</span> letter_counts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 统计每个单词出现的次数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tmap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> word_map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> w <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"this\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sentence\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"not\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sentence\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"this\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sentence\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hoax\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token operator\">++</span>word_map<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tword_map<span class=\"token punctuation\">[</span><span class=\"token string\">\"that\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 插入对 &#123;\"that\",0&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输出map:\"</span><span class=\"token punctuation\">,</span>word_map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"迭代器-2\"><a class=\"anchor\" href=\"#迭代器-2\">#</a> 迭代器</h3>\n<ul>\n<li>begin/cbegin：返回指向起始的迭代器</li>\n<li>end/cend: 返回指向末尾的迭代器</li>\n<li>rbegin/crbegin: 返回指向起始的逆向迭代器</li>\n<li>rend/crend: 返回指向末尾的逆向迭代器</li>\n</ul>\n<h3 id=\"容器-2\"><a class=\"anchor\" href=\"#容器-2\">#</a> 容器</h3>\n<ul>\n<li>empty: 检查容器是否为空</li>\n<li>size: 返回容器的元素数</li>\n<li>max_size: 返回可容纳的最大元素数</li>\n</ul>\n<h3 id=\"修改器-2\"><a class=\"anchor\" href=\"#修改器-2\">#</a> 修改器</h3>\n<ul>\n<li>clear: 清楚内容</li>\n<li>insert: 插入元素或结点</li>\n<li>insert_or_assign: 插入元素，或若键已存在赋值给当前元素</li>\n<li>emplace: 原位构造元素</li>\n<li>emplace_hint：使用提示原位构造元素</li>\n<li>try_emplace: 若键不存在则原位插入，若键存在则不做任何事情</li>\n<li>erase: 擦除元素</li>\n<li>swap: 交换内容</li>\n<li>extract：从另一个容器释出结点</li>\n<li>merge: 从另一容器接合结点</li>\n</ul>\n<h3 id=\"查找-2\"><a class=\"anchor\" href=\"#查找-2\">#</a> 查找</h3>\n<ul>\n<li>count: 返回匹配特定键的元素数量</li>\n<li>find: 寻找带有特定键的元素</li>\n<li>contains: 检查容器是否含有带特定键的元素</li>\n<li>equal_range: 返回匹配特定键的元素范围</li>\n<li>lower_bound: 返回指向首个不小于给定键的元素的迭代器</li>\n<li>upper_bound: 返回指向首个大小给定键的元素的迭代器</li>\n</ul>\n<h3 id=\"观察器-2\"><a class=\"anchor\" href=\"#观察器-2\">#</a> 观察器</h3>\n<ul>\n<li>key_comp: 返回用于比较键的函数</li>\n<li>value_comp: 返回用于在 value_type 类型的对象中比较键的函数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 输出键值队 map</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">auto</span> print_map <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span> comment<span class=\"token punctuation\">,</span> map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>map<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> comment <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//C++11 方案</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> pair <span class=\"token operator\">:</span> map<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#123;\"</span> <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tmap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> m<span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"cpu\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"GPU\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"RAM\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">print_map</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始map:\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 以不存在的键执行插入操作</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tm<span class=\"token punctuation\">[</span><span class=\"token string\">\"SSD\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">print_map</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入不存在的：\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 移除 GPU</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GPU\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">print_map</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"移除后：\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 条件移除</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">erase_if</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> pair<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> pair<span class=\"token punctuation\">.</span>second <span class=\"token operator\">></span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">print_map</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"条件移除后：\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> boolalpha <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"m是否为空:\"</span> <span class=\"token operator\">&lt;&lt;</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>初始 map:&#123;GPU:15&#125;&#123;RAM:20&#125;&#123;cpu:10&#125;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>插入不存在的：&#123;GPU:15&#125;&#123;RAM:20&#125;&#123;SSD:30&#125;&#123;cpu:10&#125;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>移除后：&#123;RAM:20&#125;&#123;SSD:30&#125;&#123;cpu:10&#125;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>条件移除后：&#123;RAM:20&#125;&#123;cpu:10&#125;</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>2</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>m 是否为空:true</pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"multimap\"><a class=\"anchor\" href=\"#multimap\">#</a> multimap</h2>\n<blockquote>\n<p>含有键值队的已排序列表，同时容纳许多个元素拥有同一键。与 map 用法相同</p>\n</blockquote>\n<h1 id=\"无序关联容器\"><a class=\"anchor\" href=\"#无序关联容器\">#</a> 无序关联容器</h1>\n<blockquote>\n<p>在内部，元素不以任何特别顺序排序，而是组织进桶中。元素被放进哪个桶完全依赖其值的哈希，这允许对单独元素的快速访问，因为哈希一旦确定，就准确自带元素被放入的桶。 <code>不可修改容器元素</code>  (即使通过非 cons 迭代器), 因为修改更改元素的哈希，并破坏容器</p>\n</blockquote>\n<ul>\n<li><code>unordered_set</code> : 唯一键的集合，按照键生成散列</li>\n<li><code>unordered_map</code> : 键值对的集合，按照键生成散列， <code>键</code> 是唯一的</li>\n<li><code>unordered_multiset</code> : 键的集合，按照键生成散列</li>\n<li><code>unordered_multimap</code> ：键值队的集合，按照键 <code>生成散列</code></li>\n</ul>\n<h2 id=\"unordered_set\"><a class=\"anchor\" href=\"#unordered_set\">#</a> unordered_set</h2>\n<blockquote>\n<p>含有 key 类型的唯一对象集合关联容器</p>\n</blockquote>\n<h3 id=\"迭代器-3\"><a class=\"anchor\" href=\"#迭代器-3\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code> : 返回指向起始的迭代器</li>\n<li><code>end/cend</code> : 返回指向末尾的迭代器</li>\n</ul>\n<h3 id=\"容器-3\"><a class=\"anchor\" href=\"#容器-3\">#</a> 容器</h3>\n<ul>\n<li><code>empty</code> ：检查容器是否为空</li>\n<li><code>size</code> ：返回容纳的元素数</li>\n<li><code>max_size</code> ：返回可容纳的 <code>最大</code> 元素数</li>\n</ul>\n<h3 id=\"修改器-3\"><a class=\"anchor\" href=\"#修改器-3\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清除内容</li>\n<li><code>insert</code> : 插入元素 <code>或结点C++17</code></li>\n<li><code>emplace</code> : 原位构造元素</li>\n<li><code>emplace_hint</code> : 使用提示原位构造元素</li>\n<li><code>erase</code> : 擦除元素</li>\n<li><code>swap</code> ：交换内容</li>\n<li><code>extract</code> ：从另一容器释出结点</li>\n<li><code>merge</code> : 从另一个容器接合结点</li>\n</ul>\n<h3 id=\"查找-3\"><a class=\"anchor\" href=\"#查找-3\">#</a> 查找</h3>\n<ul>\n<li><code>count</code> ：返回匹配特定键的元素数量</li>\n<li><code>find</code> ：寻找带有特定键的元素</li>\n<li><code>contains</code> : 检查容器是否含有带有特定键的元素</li>\n<li><code>equal_range</code> ：返回匹配 <code>特定键</code> 的元素范围</li>\n</ul>\n<h3 id=\"桶接口\"><a class=\"anchor\" href=\"#桶接口\">#</a>  <code>桶接口</code></h3>\n<ul>\n<li><code>begin(size_type)/cbegin(size_type)</code> ：返回一个迭代器，指向指定的桶的开始：返回指向下标为 n 的桶首元素的迭代器</li>\n<li><code>end(size_type)/cend(size_type)</code> : 返回一个迭代器，。返回后随下标为 n 的桶的最后元素的元素的迭代器，此元素表现为占位符，试图访问它会导致未定义行为</li>\n<li><code>bucket_count</code> : 返回容器中的桶数</li>\n<li><code>max_bucket_count</code> : 返回容器由于系统或库实现限制的能保有最大桶数</li>\n<li><code>bucket_size</code> ：返回在特定的桶中的元素数量</li>\n<li><code>bucket</code> : 返回带有特定键的容，key: 要检验的关键值</li>\n</ul>\n<h3 id=\"哈希策略\"><a class=\"anchor\" href=\"#哈希策略\">#</a>  <code>哈希策略</code></h3>\n<ul>\n<li><code>load_factor</code> ：返回每个容的平均元素数量</li>\n<li><code>max_load_factor</code> ：管理每个容的平均数量的最大值</li>\n<li><code>rehash</code> ：为至少为指定数量的桶预留存储空间并重新生成散列表</li>\n<li><code>reserve</code> : 为至少为指定数量的元素预留存储空间并重新生成哈希表</li>\n</ul>\n<h3 id=\"观察器-3\"><a class=\"anchor\" href=\"#观察器-3\">#</a>  <code>观察器</code></h3>\n<ul>\n<li><code>hash_function</code> : 返回用于对键散列的函数</li>\n<li><code>key_eq</code> : 返回用于比较键的相等性的函数</li>\n</ul>\n<h2 id=\"unordered_multiset\"><a class=\"anchor\" href=\"#unordered_multiset\">#</a> unordered_multiset</h2>\n<blockquote>\n<p>含有可能非唯一 key 类型对象的集合</p>\n</blockquote>\n<h2 id=\"unordered_map\"><a class=\"anchor\" href=\"#unordered_map\">#</a> unordered_map</h2>\n<blockquote>\n<p>含有唯一键 - 值 pair</p>\n</blockquote>\n<h3 id=\"迭代器-4\"><a class=\"anchor\" href=\"#迭代器-4\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code> : 返回指向起始的迭代器</li>\n<li><code>end/cend</code> : 返回指向末尾的迭代器</li>\n</ul>\n<h3 id=\"容器-4\"><a class=\"anchor\" href=\"#容器-4\">#</a> 容器</h3>\n<ul>\n<li><code>empty</code> ：检查容器是否为空</li>\n<li><code>size</code> ：返回容纳的元素数</li>\n<li><code>max_size</code> ：返回可容纳的最大元素数</li>\n</ul>\n<h3 id=\"修改器-4\"><a class=\"anchor\" href=\"#修改器-4\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清除内容</li>\n<li><code>insert</code> : 插入元素 <code>或结点C++17</code></li>\n<li><code>emplace</code> : 原位构造元素</li>\n<li><code>emplace_hint</code> : 使用提示原位构造元素</li>\n<li><code>erase</code> : 擦除元素</li>\n<li><code>swap</code> ：交换内容</li>\n<li><code>extract</code> ：从另一容器释出结点</li>\n<li><code>merge</code> : 从另一个容器接合结点</li>\n</ul>\n<h3 id=\"查找-4\"><a class=\"anchor\" href=\"#查找-4\">#</a> 查找</h3>\n<ul>\n<li><code>at</code> ：访问指定的元素，同时进行 <code>越界</code> 检查</li>\n<li><code>operator[]</code> : 访问或插入指定的元素</li>\n<li><code>count</code> ：返回匹配特定键的元素数量</li>\n<li><code>find</code> ：寻找带有特定键的元素</li>\n<li><code>contains``C++20</code> : 检查容器是否含有带有特定键的元素</li>\n<li><code>equal_range</code> ：返回匹配特定键的元素范围</li>\n</ul>\n<h3 id=\"桶接口-2\"><a class=\"anchor\" href=\"#桶接口-2\">#</a>  <code>桶接口</code></h3>\n<ul>\n<li><code>begin(size_type)/cbegin(size_type)</code> ：返回一个迭代器，指向指定的桶的开始：返回指向下标为 n 的桶首元素的迭代器</li>\n<li><code>end(size_type)/cend(size_type)</code> : 返回一个迭代器，。返回后随下标为 n 的桶的最后元素的元素的迭代器，此元素表现为占位符，试图访问它会导致未定义行为</li>\n<li><code>bucket_count</code> : 返回容器中的桶数</li>\n<li><code>max_bucket_count</code> : 返回容器由于系统或库实现限制的能保有最大桶数</li>\n<li><code>bucket_size</code> ：返回在特定的桶中的元素数量</li>\n<li><code>bucket</code> : 返回带有特定键的容，key: 要检验的关键值</li>\n</ul>\n<h3 id=\"哈希策略-2\"><a class=\"anchor\" href=\"#哈希策略-2\">#</a>  <code>哈希策略</code></h3>\n<ul>\n<li><code>load_factor</code> ：返回每个容的平均元素数量</li>\n<li><code>max_load_factor</code> ：管理每个容的平均数量的最大值</li>\n<li><code>rehash</code> ：为至少为指定数量的桶预留存储空间并重新生成散列表</li>\n<li><code>reserve</code> : 为至少为指定数量的元素预留存储空间并重新生成哈希表</li>\n</ul>\n<h3 id=\"观察器-4\"><a class=\"anchor\" href=\"#观察器-4\">#</a>  <code>观察器</code></h3>\n<ul>\n<li><code>hash_function</code> : 返回用于对 <code>键散列</code> 的函数</li>\n<li><code>key_eq</code> : 返回用于比较键的相等性的函数</li>\n</ul>\n<h3 id=\"unordered_multimap\"><a class=\"anchor\" href=\"#unordered_multimap\">#</a> unordered_multimap</h3>\n<blockquote>\n<p>支持等价的键 (一个 unordered_multimap 可含有每个键值的多个副本) 和将键与另一个类型的值关联</p>\n</blockquote>\n<h3 id=\"迭代器-5\"><a class=\"anchor\" href=\"#迭代器-5\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code> : 返回指向起始的迭代器</li>\n<li><code>end/cend</code> : 返回指向末尾的迭代器</li>\n</ul>\n<h3 id=\"容器-5\"><a class=\"anchor\" href=\"#容器-5\">#</a> 容器</h3>\n<ul>\n<li><code>empty</code> ：检查容器是否为空</li>\n<li><code>size</code> ：返回容纳的元素数</li>\n<li><code>max_size</code> ：返回可容纳的最大元素数</li>\n</ul>\n<h3 id=\"修改器-5\"><a class=\"anchor\" href=\"#修改器-5\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清除内容</li>\n<li><code>insert</code> : 插入元素 <code>或结点C++17</code></li>\n<li><code>emplace</code> : 原位构造元素</li>\n<li><code>emplace_hint</code> : 使用提示原位构造元素</li>\n<li><code>erase</code> : 擦除元素</li>\n<li><code>swap</code> ：交换内容</li>\n<li><code>extract</code> ：从另一容器释出结点</li>\n<li><code>merge</code> : 从另一个容器接合结点</li>\n</ul>\n<h3 id=\"查找-5\"><a class=\"anchor\" href=\"#查找-5\">#</a> 查找</h3>\n<ul>\n<li><code>count</code> ：返回匹配特定键的元素数量</li>\n<li><code>find</code> ：寻找带有特定键的元素</li>\n<li><code>contains``C++20</code> : 检查容器是否含有带有特定键的元素</li>\n<li><code>equal_range</code> ：返回匹配特定键的元素范围</li>\n</ul>\n<h3 id=\"桶接口-3\"><a class=\"anchor\" href=\"#桶接口-3\">#</a>  <code>桶接口</code></h3>\n<ul>\n<li><code>begin(size_type)/cbegin(size_type)</code> ：返回一个迭代器，指向指定的桶的开始：返回指向下标为 n 的桶首元素的迭代器</li>\n<li><code>end(size_type)/cend(size_type)</code> : 返回一个迭代器，。返回后随下标为 n 的桶的最后元素的元素的迭代器，此元素表现为占位符，试图访问它会导致未定义行为</li>\n<li><code>bucket_count</code> : 返回容器中的桶数</li>\n<li><code>max_bucket_count</code> : 返回容器由于系统或库实现限制的能保有 <code>最大桶数</code></li>\n<li><code>bucket_size</code> ：返回在特定的桶中的元素数量</li>\n<li><code>bucket</code> : 返回带有特定键的容， <code>key</code> : 要 <code>检验</code> 的 <code>关</code> 键值</li>\n</ul>\n<h3 id=\"哈希策略-3\"><a class=\"anchor\" href=\"#哈希策略-3\">#</a>  <code>哈希策略</code></h3>\n<ul>\n<li><code>load_factor</code> ：返回每个容的平均元素数量</li>\n<li><code>max_load_factor</code> ：管理每个容的平均数量的最大值</li>\n<li><code>rehash</code> ：为至少为指定数量的桶预留存储空间并重新生成散列表</li>\n<li><code>reserve</code> : 为至少为指定数量的元素预留存储空间并重新生成哈希表</li>\n</ul>\n<h3 id=\"观察器-5\"><a class=\"anchor\" href=\"#观察器-5\">#</a>  <code>观察器</code></h3>\n<ul>\n<li><code>hash_function</code> : 返回用于对键散列的函数</li>\n<li><code>key_eq</code> : 返回用于比较键的相等性的函数</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "C++",
                "汇编与STl新特征",
                "C++",
                "计算机科学",
                "STL"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E7%90%86%E8%A7%A3cpp/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E7%90%86%E8%A7%A3cpp/",
            "title": "汇编基础理解C++",
            "date_published": "2023-06-12T00:57:39.628Z",
            "content_html": "<h4 id=\"汇编的用途\"><a class=\"anchor\" href=\"#汇编的用途\">#</a> 汇编的用途</h4>\n<ul>\n<li>掌握编程语言，代码的本质</li>\n<li>破解</li>\n<li>...</li>\n</ul>\n<h4 id=\"汇编\"><a class=\"anchor\" href=\"#汇编\">#</a> 汇编</h4>\n<blockquote>\n<p>汇编语言与机器语言 <code>一一对应</code> ，每一条机器语言指令都有与之 <code>对应</code> 的汇编指令<br />\n高级语言可以通过编译得到汇编语言 / 机器语言，但 <code>汇编语言/机器语言</code> 几乎 <code>不</code> 可能还原成高级语言<br />\n Visual studio 在调试下右键 <code>转汇编</code></p>\n</blockquote>\n<figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">9</span>: \tint arrray<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> &#123; <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> &#125;<span class=\"token comment\">; //C++ 语言</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>汇编<span class=\"token operator\">-</span>   地址  机器指令 汇编代码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>00007FF7BA87191C C7 <span class=\"token number\">45</span> <span class=\"token number\">08</span> <span class=\"token number\">01</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>arrray<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>00007FF7BA871923 C7 <span class=\"token number\">45</span> 0C <span class=\"token number\">02</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>0Ch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>00007FF7BA87192A C7 <span class=\"token number\">45</span> <span class=\"token number\">10</span> <span class=\"token number\">03</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>10h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbu3LChB3TaEOicoSlNDYt5l3KibPGojpqMrcYctmJst3VrnXcgSJsvIqoicGFU9xSD1OYCXvico3nUibrw/0?wx_fmt=png\" alt=\"高级语言转换过程\" title=\"高级语言转换过程\" /></p>\n<ul>\n<li>编译型语言 (不依赖虚拟机)</li>\n</ul>\n<blockquote>\n<p><code>C\\C++\\OC\\Swift</code></p>\n</blockquote>\n<ul>\n<li>脚本语言</li>\n</ul>\n<blockquote>\n<p><code>Python\\JS\\PHP</code></p>\n</blockquote>\n<ul>\n<li>编译型语言 (依赖虚拟机)</li>\n</ul>\n<blockquote>\n<p>Java\\Ruby</p>\n</blockquote>\n<h4 id=\"visual-studio-2022常用快捷键\"><a class=\"anchor\" href=\"#visual-studio-2022常用快捷键\">#</a> Visual studio 2022 常用快捷键</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbu3LChB3TaEOicoSlNDYt5l3XkichAkR5mjxBliczsz07tNu0uLdsibK6KM5yhhiaNCK6CXLNMaZlSXMJw/0?wx_fmt=png\" alt=\"常用快捷键\" title=\"常用快捷键\" /></p>\n<h4 id=\"为什么c支持函数重载\"><a class=\"anchor\" href=\"#为什么c支持函数重载\">#</a> 为什么 C++ 支持函数重载</h4>\n<blockquote>\n<p>采用 <code>name mangling</code>  或者 <code>name decoration</code>  技术</p>\n</blockquote>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_0\"> C++ 编译器默认会对 <code>符号名</code>  (比如函数名) 进行改变，修饰</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> 重载时会生成多个不用的函数名，不同编译器 ( <code>MSVC,g++</code> ) 有不同的生成规则</label></li>\n</ul>\n<h4 id=\"默认参数\"><a class=\"anchor\" href=\"#默认参数\">#</a> 默认参数</h4>\n<ul>\n<li>默认参数必须从右边开始</li>\n<li>如果同时有声明，实现，默认参数只能放在函数声明中</li>\n</ul>\n<h4 id=\"指针存储函数名\"><a class=\"anchor\" href=\"#指针存储函数名\">#</a> 指针存储函数名</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 函数指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">p</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test(int) - \"</span><span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> test<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指针存储函数名</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"extern-c\"><a class=\"anchor\" href=\"#extern-c\">#</a> extern &quot;C&quot;</h4>\n<blockquote>\n<p>被 extern &quot;C&quot; 修饰的代码会按照 <code>C</code>  语言的方式去编译，用在 C 和 C++ 混合开发</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用 C 编译函数重载</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span>  <span class=\"token comment\">// 使用大括号 C 编译内部</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">//“func”: 无法重载具有外部 \"C\" 链接的</span></pre></td></tr></table></figure><blockquote>\n<p>如果函数同时有声明和实现，要让函数声明被 <code>extern &quot;C&quot;</code>  修饰，函数实现可以不修饰 (声明和实现都放，或者放声明处)</p>\n</blockquote>\n<h4 id=\"cpp使用c语言开源库\"><a class=\"anchor\" href=\"#cpp使用c语言开源库\">#</a>  <code>cpp</code>  使用 C 语言开源库</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//math.c 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span>  <span class=\"token comment\">// 使用 c 来编译 c 函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>输出</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>30</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>10</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"c文件写入头文件\"><a class=\"anchor\" href=\"#c文件写入头文件\">#</a>  <code>C</code>  文件写入头文件</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//math.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span>  <span class=\"token comment\">// 使用 c 来编译头文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"math.h\"</span> </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>输出</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>30</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>10</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"宏定义\"><a class=\"anchor\" href=\"#宏定义\">#</a> 宏定义</h4>\n<ul>\n<li>C<ins> 默认会定义宏 <code>#define _cplusplus</code> , 将此应用到都文件中判断是否为 C</ins> 环境来决定是否用 C 编译</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_cplusplus</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//_cplusplus</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_cplusplus</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//_cplusplus</span></span></pre></td></tr></table></figure><h4 id=\"pragma-once\"><a class=\"anchor\" href=\"#pragma-once\">#</a>  <code>#pragma once</code></h4>\n<ul>\n<li>我们经常使用 <code>#ifndef,#define,#endif</code>  来防止头文件的内容被重复包含</li>\n<li><code>#pragma once</code>  可以防止整个文件的内容被重复包含</li>\n</ul>\n<h4 id=\"内联函数与宏\"><a class=\"anchor\" href=\"#内联函数与宏\">#</a> 内联函数与宏</h4>\n<ul>\n<li>内联函数和宏，都可以减少函数调用的开销</li>\n<li>对比宏，内联函数多了语法检测和函数特性</li>\n</ul>\n<h4 id=\"c有些表达式可以被赋值\"><a class=\"anchor\" href=\"#c有些表达式可以被赋值\">#</a> C++ 有些表达式可以被赋值</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 赋值给了 a</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 赋值给了 b</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"const\"><a class=\"anchor\" href=\"#const\">#</a>  <code>const</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//const 的含义，const 修饰的是右边的内容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 修饰 * p1 是常量，而 p1 地址可以改</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同 p1,const 可以和类型互换位置</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p3 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//const 修饰右边的内容 p3 是地址常量，不变，而 * p3 可以修改</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p4 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p5 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//p4 和 p5 等价，地址和 * p4,*p5 都是常量不能变</span></pre></td></tr></table></figure><h4 id=\"引用\"><a class=\"anchor\" href=\"#引用\">#</a> 引用</h4>\n<ul>\n<li>引用的本质就是弱化了的指针</li>\n<li>一个引用占用一个指针的大小</li>\n<li>在 C 语言中，使用指针 (Pointer) 可以间接获取，修改某个变量的值</li>\n<li>在 C++ 中，使用引用 (Reference) 可以起到指针类似的功能<br />\n<strong>注意</strong>:</li>\n<li>引用相当于变量的别名 (基本数据类型，枚举，结构体，类，数组等，都可以有引用)</li>\n<li>对引用做计算，就是对引用所指向的变量做计算</li>\n<li>在定义的事后就必须初始化，一旦指向了某个变量，就不可以再改变，&quot;从一而终&quot;</li>\n<li>可以利用引用初始化另一个引用，相当于某个变量的多个别名</li>\n<li>不存在 (引用的引用，指向引用的指针，引用数组)</li>\n<li>引用存在的价值：比指针更安全，函数返回值可以被赋值</li>\n<li>const 必须卸载 &amp; 符号的左边，才能算常引用</li>\n</ul>\n<h5 id=\"const引用的特点\"><a class=\"anchor\" href=\"#const引用的特点\">#</a>  <code>const</code>  引用的特点</h5>\n<ul>\n<li>可以指向临时数据 (常量，表达式，函数返回值等)</li>\n<li>可以指向不同类型的数据</li>\n<li>作为函数参数时 (此规则也适用于 <code>const指针</code> )</li>\n</ul>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_2\"> 可以接受 <code>const</code>  和非 <code>cons</code>  实参 ( <code>非const</code>  引用，只能接受 <code>非const</code>  实参)</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_3\">  可以跟非 const 引用构成重载</label></li>\n</ul>\n<ul>\n<li>当常引用指向了 <code>不同类型</code> 的数据时，会产生 <code>临时变量</code> ，即引用指向的并不是初始化时的那个变量</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span><span class=\"token operator\">&amp;</span> aAge <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tage <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF71556184D C7 <span class=\"token number\">45</span> <span class=\"token number\">04</span> 0A <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>0Ah  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t00007FF715561854 8B <span class=\"token number\">45</span> <span class=\"token number\">04</span>             mov         eax<span class=\"token punctuation\">,</span>dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t00007FF715561857 <span class=\"token number\">89</span> <span class=\"token number\">45</span> <span class=\"token number\">44</span>             mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>44h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t00007FF71556185A <span class=\"token number\">48</span> 8D <span class=\"token number\">45</span> <span class=\"token number\">44</span>          lea         rax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>44h<span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t00007FF71556185E <span class=\"token number\">48</span> <span class=\"token number\">89</span> <span class=\"token number\">45</span> <span class=\"token number\">28</span>          mov         qword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>28h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>rax  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t00007FF715561862 C7 <span class=\"token number\">45</span> <span class=\"token number\">04</span> 1E <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>1Eh</pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"math.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>两者引用：机器码相同，汇编相同</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ref <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tref <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">9</span>: \tint<span class=\"token operator\">&amp;</span> ref <span class=\"token operator\">=</span> age<span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF759091914 <span class=\"token number\">48</span> 8D <span class=\"token number\">45</span> <span class=\"token number\">04</span>          lea         rax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>00007FF759091918 <span class=\"token number\">48</span> <span class=\"token number\">89</span> <span class=\"token number\">45</span> <span class=\"token number\">28</span>          mov         qword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>28h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>rax</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token number\">10</span>: \tref <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>00007FF75909191C <span class=\"token number\">48</span> 8B <span class=\"token number\">45</span> <span class=\"token number\">28</span>          mov         rax<span class=\"token punctuation\">,</span>qword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>28h<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>00007FF759091920 C7 <span class=\"token number\">00</span> 1E <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span>    mov         dword ptr <span class=\"token punctuation\">[</span>rax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>1Eh</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token number\">11</span>: \tint<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>00007FF6CD505214 <span class=\"token number\">48</span> 8D <span class=\"token number\">45</span> <span class=\"token number\">04</span>          lea         rax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>00007FF6CD505218 <span class=\"token number\">48</span> <span class=\"token number\">89</span> <span class=\"token number\">45</span> <span class=\"token number\">28</span>          mov         qword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>28h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>rax  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token number\">12</span>: \t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>00007FF6CD50521C <span class=\"token number\">48</span> 8B <span class=\"token number\">45</span> <span class=\"token number\">28</span>          mov         rax<span class=\"token punctuation\">,</span>qword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>28h<span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>00007FF6CD505220 C7 <span class=\"token number\">00</span> <span class=\"token number\">19</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span>    mov         dword ptr <span class=\"token punctuation\">[</span>rax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>19h</pre></td></tr></table></figure><h5 id=\"常引用数组\"><a class=\"anchor\" href=\"#常引用数组\">#</a> 常引用数组</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数组名 arr 起始就是数组的地址，也是数组首元素的地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 数组名 arr 可以看做是指向数组首元素的指针 (int *)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// int (&amp;ref)[3] = arr;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span>ref <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 常量要用常引用</span></pre></td></tr></table></figure><h4 id=\"汇编语言\"><a class=\"anchor\" href=\"#汇编语言\">#</a> 汇编语言</h4>\n<h5 id=\"汇编语言的种类\"><a class=\"anchor\" href=\"#汇编语言的种类\">#</a> 汇编语言的种类</h5>\n<ul>\n<li><code>8086</code>  汇编 ( <code>16bit</code> )</li>\n<li><code>x86</code>  汇编（ <code>32bit</code> )</li>\n<li><code>x64汇编(64bit)</code></li>\n<li>ARM 回避那 (嵌入式，移动设备)</li>\n<li>...</li>\n<li><code>x64</code>  汇编根据编译器不同，两种书写格式</li>\n</ul>\n<blockquote>\n<p><code>Intel</code> :<br />\nAT&amp;T</p>\n</blockquote>\n<h5 id=\"att汇编-vs-intel汇编\"><a class=\"anchor\" href=\"#att汇编-vs-intel汇编\">#</a> AT&amp;T 汇编 VS Intel 汇编</h5>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbu3LChB3TaEOicoSlNDYt5l3UxPJ64IgaEHgmkXITT6JSUialo3ibdNSMyia83jTyVdSpNp8N9S1N5Kibg/0?wx_fmt=png\" alt=\"image-20230302073341484\" /></p>\n<h4 id=\"寄存器与内存\"><a class=\"anchor\" href=\"#寄存器与内存\">#</a> 寄存器与内存</h4>\n<p>假设内存中有块红色内存空间的值是 3，现在想把它的值加 1，并将结果存储到蓝色内存空间</p>\n<ul>\n<li><code>cpu</code>  首先会将红色内存空间的值放到 <code>EAX</code>  寄存器中 <code>:mov eax</code> , 红色内存空间</li>\n<li>然后让 <code>eax</code>  寄存器与 <code>1</code>  相加:  <code>add eax,1</code></li>\n<li>最后将值赋值给内存空间: <code>mov</code>  蓝色内存空间， <code>eax</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ta <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">10</span>: \tint a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF6E7DA520D C7 <span class=\"token number\">45</span> <span class=\"token number\">04</span> <span class=\"token number\">05</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">11</span>: \ta <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>00007FF6E7DA5214 8B <span class=\"token number\">45</span> <span class=\"token number\">04</span>             mov         eax<span class=\"token punctuation\">,</span>dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>00007FF6E7DA5217 FF C0                inc         eax  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>00007FF6E7DA5219 <span class=\"token number\">89</span> <span class=\"token number\">45</span> <span class=\"token number\">04</span>             mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr></table></figure><h4 id=\"x64寄存器register\"><a class=\"anchor\" href=\"#x64寄存器register\">#</a> x64 寄存器 Register</h4>\n<ul>\n<li><code>RAX(包含EAX)\\REX\\RCX\\RDX</code> ：通用寄存器</li>\n<li><code>32bit:EAX\\EBX\\ECX\\EDX</code> ：通用寄存器</li>\n<li><code>16bit:AX\\BX\\CX\\DX</code> : 通用寄存器</li>\n<li><code>x64</code>  一个寄存器 <code>8</code>  个字节</li>\n<li><code>R</code>  开头的寄存器是 <code>64bit</code>  的，占 <code>8</code>  字节</li>\n<li><code>E</code>  开头的寄存器是 <code>32bit</code>  的，占 <code>4</code>  个字节</li>\n</ul>\n<h4 id=\"c内联汇编\"><a class=\"anchor\" href=\"#c内联汇编\">#</a> C++ 内联汇编</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 双下划，C++ 嵌入汇编执行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"x86汇编重要指令\"><a class=\"anchor\" href=\"#x86汇编重要指令\">#</a>  <code>x86</code>  汇编重要指令</h4>\n<ul>\n<li><code>mov</code>   <code>dest,src</code></li>\n</ul>\n<blockquote>\n<p>将 src 的内容赋值给 dest，类似于 dest = src</p>\n</blockquote>\n<ul>\n<li><code>[地址值]</code></li>\n</ul>\n<blockquote>\n<ul>\n<li>中括号 [] 里面放的都是内存地址</li>\n</ul>\n</blockquote>\n<pre><code>* `word`是2字节，`dword`是4字节(double word),`qword`是八字节(quad word)\n</code></pre>\n<ul>\n<li><code>call</code>  函数地址</li>\n</ul>\n<blockquote>\n<ul>\n<li>\n<p>调用函数，并不是真实地址</p>\n</li>\n<li>\n<p>CPU 大小端模式，大部分都是小端模式<br />\n小端模式：高高低低，高字节放高地址，低字节放低地址<br />\n一个变量的地址值，是它所在字节地址中的最小值</p>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li><code>lea</code>   <code>dest</code> ,  <code>[地址值]</code></li>\n</ul>\n<blockquote>\n<p>将地址赋值给 <code>dest</code> ，类似 <code>dest = 地址值</code></p>\n</blockquote>\n<ul>\n<li><code>ret </code></li>\n</ul>\n<blockquote>\n<p>函数返回</p>\n</blockquote>\n<ul>\n<li><code>xor</code>   <code>op1</code>  ,  <code>op2</code></li>\n</ul>\n<blockquote>\n<p>将 <code>op1</code>  和 <code>op2``异或</code> 的结果赋值给 <code>op1</code> , 类似于 <code>op1</code>  =  <code>op1</code>  ^  <code>op2</code></p>\n</blockquote>\n<ul>\n<li><code>add</code>    <code>op1</code> , <code>op2</code></li>\n</ul>\n<blockquote>\n<p>类似于 <code>op1 = op1 + op2</code></p>\n</blockquote>\n<ul>\n<li><code>sub</code>   <code>op1</code> , <code>op2</code></li>\n</ul>\n<blockquote>\n<p>类似于 <code>op1</code>  =  <code>op1</code>  -  <code>op2</code></p>\n</blockquote>\n<ul>\n<li><code>inc </code> op</li>\n</ul>\n<blockquote>\n<p>自增，类似于 op = op + 1</p>\n</blockquote>\n<ul>\n<li><code>dec</code>  op</li>\n</ul>\n<blockquote>\n<p>自减，类似于 op = op - 1</p>\n</blockquote>\n<ul>\n<li>\n<p><code>jmp</code>  内存地址</p>\n<ul>\n<li>跳转到某个内存地址去执行代码</li>\n<li>j 开头的一般都是跳转，大多是带条件的跳转，一般跟 <code>test</code> ， <code>cmp</code>  等指令配合使用<br />\n参考权威:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW50ZWwuY29tL2NvbnRlbnQvd3d3L3VzL2VuL2RldmVsb3Blci9hcnRpY2xlcy90ZWNobmljYWwvaW50ZWwtc2RtLmh0bWw=\">Intel 白皮书</span><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></li>\n</ul>\n</li>\n<li>\n<p><code>cmp</code>   <code>eax</code>  , b</p>\n</li>\n</ul>\n<blockquote>\n<p><code>cmp</code>  是 ``compare <code>的简称，比较</code>  eax <code>和</code>  b` 的值是否相等</p>\n</blockquote>\n<h4 id=\"跳转指令表格\"><a class=\"anchor\" href=\"#跳转指令表格\">#</a> 跳转指令表格</h4>\n<table>\n<thead>\n<tr>\n<th>JE, JZ</th>\n<th></th>\n<th>结果为零则跳转 (相等时跳转)</th>\n<th></th>\n<th>ZF=1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>equal</td>\n<td>zero</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JNE, JNZ</td>\n<td></td>\n<td>结果不为零则跳转 (不相等时跳转)</td>\n<td></td>\n<td>ZF=0</td>\n</tr>\n<tr>\n<td>not equal</td>\n<td>not  zero</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JS</td>\n<td></td>\n<td>结果为负则跳转</td>\n<td></td>\n<td>SF=1</td>\n</tr>\n<tr>\n<td>sign (有符号 \\ 有负号)</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JNS</td>\n<td></td>\n<td>结果为非负则跳转</td>\n<td></td>\n<td>SF=0</td>\n</tr>\n<tr>\n<td>not sign (无符号 \\ 无负号)</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JP, JPE</td>\n<td></td>\n<td>结果中 1 的个数为偶数则跳转</td>\n<td></td>\n<td>PF=1</td>\n</tr>\n<tr>\n<td>parity even</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JNP, JPO</td>\n<td></td>\n<td>结果中 1 的个数为偶数则跳转</td>\n<td></td>\n<td>PF=0</td>\n</tr>\n<tr>\n<td>parity odd</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JO</td>\n<td></td>\n<td>结果溢出了则跳转</td>\n<td></td>\n<td>OF=1</td>\n</tr>\n<tr>\n<td>overflow</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JNO</td>\n<td></td>\n<td>结果没有溢出则跳转</td>\n<td></td>\n<td>OF=0</td>\n</tr>\n<tr>\n<td>not overflow</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JB, JNAE</td>\n<td></td>\n<td>小于则跳转 (无符号数)</td>\n<td></td>\n<td>CF=1</td>\n</tr>\n<tr>\n<td>below</td>\n<td>not above equal</td>\n<td></td>\n<td>&lt;</td>\n<td></td>\n</tr>\n<tr>\n<td>JNB, JAE</td>\n<td></td>\n<td>大于等于则跳转 (无符号数)</td>\n<td></td>\n<td>CF=0</td>\n</tr>\n<tr>\n<td>not below</td>\n<td>above  equal</td>\n<td></td>\n<td>&gt;=</td>\n<td></td>\n</tr>\n<tr>\n<td>JBE, JNA</td>\n<td></td>\n<td>小于等于则跳转 (无符号数)</td>\n<td></td>\n<td>CF=1 or ZF=1</td>\n</tr>\n<tr>\n<td>below equal</td>\n<td>not above</td>\n<td></td>\n<td>&lt;=</td>\n<td></td>\n</tr>\n<tr>\n<td>JNBE, JA</td>\n<td></td>\n<td>大于则跳转 (无符号数)</td>\n<td></td>\n<td>CF=0 and ZF=0</td>\n</tr>\n<tr>\n<td>not below equal</td>\n<td>above</td>\n<td></td>\n<td>&gt;</td>\n<td></td>\n</tr>\n<tr>\n<td>JL, JNGE</td>\n<td></td>\n<td>小于则跳转 (有符号数)</td>\n<td></td>\n<td>SF≠ OF</td>\n</tr>\n<tr>\n<td>little</td>\n<td>not great equal</td>\n<td></td>\n<td>&lt;</td>\n<td></td>\n</tr>\n<tr>\n<td>JNL, JGE</td>\n<td></td>\n<td>大于等于则跳转 (有符号数)</td>\n<td></td>\n<td>SF=OF</td>\n</tr>\n<tr>\n<td>not little</td>\n<td>great  equal</td>\n<td></td>\n<td>&gt;=</td>\n<td></td>\n</tr>\n<tr>\n<td>JLE, JNG</td>\n<td></td>\n<td>小于等于则跳转 (有符号数)</td>\n<td></td>\n<td>ZF=1 or SF≠ OF</td>\n</tr>\n<tr>\n<td>little equal</td>\n<td>not great</td>\n<td></td>\n<td>&lt;=</td>\n<td></td>\n</tr>\n<tr>\n<td>JNLE, JG</td>\n<td></td>\n<td>大于则跳转 (有符号数)</td>\n<td></td>\n<td>ZF=0 and SF=OF</td>\n</tr>\n<tr>\n<td>not little equal</td>\n<td>great</td>\n<td></td>\n<td>&gt;</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"汇编符号说明\"><a class=\"anchor\" href=\"#汇编符号说明\">#</a> 汇编符号说明</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbu3LChB3TaEOicoSlNDYt5l3UsvIvXAQyQ9eSXkLbt1AEiavYQqklEPavj3jWYzSsl4QDGSammyfyJQ/0?wx_fmt=png%22%E6%B1%87%E7%BC%96%E7%AC%A6%E5%8F%B7%E8%AF%B4%E6%98%8E%22\" alt=\"汇编符号说明\" /></p>\n<h4 id=\"参考的c变量名规范\"><a class=\"anchor\" href=\"#参考的c变量名规范\">#</a> 参考的 C++ 变量名规范</h4>\n<ul>\n<li>全局变量: <code>g_</code></li>\n<li>成员变量： <code>m_</code></li>\n<li>静态变量:  <code>s_</code></li>\n<li>常量:  <code>c_</code></li>\n</ul>\n<h4 id=\"类补充\"><a class=\"anchor\" href=\"#类补充\">#</a> 类补充</h4>\n<ul>\n<li><code>struct</code>  默认 <code>public</code></li>\n<li><code>class</code>  默认 <code>private</code></li>\n</ul>\n<h5 id=\"如何利用指针间接访问所指向量的成员变量\"><a class=\"anchor\" href=\"#如何利用指针间接访问所指向量的成员变量\">#</a> 如何利用指针间接访问所指向量的成员变量</h5>\n<ul>\n<li>从指针中取出对象的地址</li>\n<li>利用对象的地址  <code>+</code>  成员变量的偏移量计算出成员变量的地址</li>\n<li>根据成员变量的地址访问成员变量的存储空间</li>\n<li>类函数默认会被赋值为 <code>ccccccc</code> ，</li>\n<li><code>cc -&gt; int3</code>  : 起到断点的作用</li>\n<li>中断:interrupt</li>\n</ul>\n<h4 id=\"内存空间的布局\"><a class=\"anchor\" href=\"#内存空间的布局\">#</a> 内存空间的布局</h4>\n<blockquote>\n<p>每个应用都有自己独立的内存空间</p>\n</blockquote>\n<ul>\n<li>栈空间</li>\n</ul>\n<blockquote>\n<p>每调用一个函数就会给它分配一段连续的栈空间，等函数调用完毕后会自动回收这段栈空间<br />\n自动分配和回收</p>\n</blockquote>\n<ul>\n<li>堆空间</li>\n</ul>\n<blockquote>\n<p>需要主动去申请和释放，在程序运行过程，为了能够自由控制内存的声明周期，大小，会经常使用堆空间的内存</p>\n</blockquote>\n<ul>\n<li>代码区 (段)</li>\n</ul>\n<blockquote>\n<p>用于存放代码</p>\n</blockquote>\n<ul>\n<li>全局区 (数据段)</li>\n</ul>\n<blockquote>\n<p>用于存放全局变量等</p>\n</blockquote>\n<h4 id=\"对初始内存初始化\"><a class=\"anchor\" href=\"#对初始内存初始化\">#</a> 对初始内存初始化</h4>\n<blockquote>\n<p><code>memset</code>  函数是将较大的数据结构 (比如对象，数组等) 内存清零的比较快的方法</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//*p=0;// 并不能全部清零，仅前四个字节</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从 p 地址开始，连续个字节，都设置为 0</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Person person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person<span class=\"token punctuation\">.</span>m_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>person<span class=\"token punctuation\">.</span>m_age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>person<span class=\"token punctuation\">.</span>m_height <span class=\"token operator\">=</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 赋值 person 为零</span></pre></td></tr></table></figure><h5 id=\"new的初始化\"><a class=\"anchor\" href=\"#new的初始化\">#</a>  <code>new</code>  的初始化</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 未被初始化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 被初始化为 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 被初始化为 5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 数组元素未被初始化</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//3 个数组元素都被初始化为 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p6 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//3 个数组元素都被初始化为 0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p7 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 数组首元素被初始化为 5，其它元素被初始化为零</span></pre></td></tr></table></figure><h4 id=\"malloc不会调用类的构造析构函数\"><a class=\"anchor\" href=\"#malloc不会调用类的构造析构函数\">#</a>  <code>malloc</code>  不会调用类的构造 &amp; 析构函数</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"释放Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tPerson person<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 会调用默认构造函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Person<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 申请空间也会调用默认构造函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">//malloc 并不调用默认构造函数，</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> q <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 也不会调用析构函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Person ()</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Person ()</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>释放 Person ()</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>释放 Person ()</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"成员变量的初始化\"><a class=\"anchor\" href=\"#成员变量的初始化\">#</a> 成员变量的初始化</h4>\n<ul>\n<li><strong>全局区默认初始化为 0</strong></li>\n<li>如果自定义了构造函数，除了全局区，其他内存空间的成员变量默认都不会被初始化，需要开发人员手动初始化。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Person g_person<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 全局变量初始化为 0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> g_age<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 全局变量默认初始化为 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//Person person; // 堆空间：没有初始化成员变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 堆空间：没有初始化成员变量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p0 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 堆空间：成员变量初始化为 0，// 如果有构造函数则不进行初始化</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> g_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> g_person<span class=\"token punctuation\">.</span>m_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; person.m_age &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> p0<span class=\"token operator\">-></span>m_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token operator\">-></span>m_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/* 输出:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>0</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>0</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>-842150451</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>0</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"构造函数的相互调用\"><a class=\"anchor\" href=\"#构造函数的相互调用\">#</a> 构造函数的相互调用</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">//Person (0,0)// 不可，此命令汇编申请临时对象，而非调用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">m_age</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_height</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"call汇编机械码\"><a class=\"anchor\" href=\"#call汇编机械码\">#</a> call 汇编机械码</h4>\n<ul>\n<li>call 汇编机械码 <code>E8</code>  直接调用，写死</li>\n<li>call 汇编机械码 <code>FF</code>  间接调用，可变</li>\n</ul>\n<h4 id=\"调用多态性虚表的汇编过程\"><a class=\"anchor\" href=\"#调用多态性虚表的汇编过程\">#</a> 调用多态性虚表的汇编过程</h4>\n<figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>调用run</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Animal <span class=\"token operator\">*</span>cat <span class=\"token operator\">=</span> new Cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cat<span class=\"token operator\">-</span><span class=\"token operator\">></span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>ebp<span class=\"token operator\">-</span><span class=\"token number\">8</span>是指针变量cat的地址</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>eax存储的是cat对象的地址</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>move eax<span class=\"token punctuation\">,</span>dword ptr <span class=\"token punctuation\">[</span>ebp<span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>取出cat对象的最前面<span class=\"token number\">4</span>个字节<span class=\"token punctuation\">(</span>虚表地址<span class=\"token punctuation\">)</span>给edx</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mov edx<span class=\"token punctuation\">,</span> dword ptr <span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>跳出虚表的最前面<span class=\"token number\">4</span>个字节，取出<span class=\"token number\">4</span>个字节赋值给eax</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>取出cat::run的函数调用地址给eax</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>mov eax <span class=\"token punctuation\">,</span>dword ptr <span class=\"token punctuation\">[</span>edx<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>call cat::run</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>call eax</pre></td></tr></table></figure><h4 id=\"单例模式简\"><a class=\"anchor\" href=\"#单例模式简\">#</a> 单例模式 (简)</h4>\n<blockquote>\n<p>设计模式的一种，保证某个类永远只创建一个对象</p>\n</blockquote>\n<ul>\n<li>构造函数私有化</li>\n<li>定义一个私有的 static 成员变量指向唯一的那个单例对象</li>\n<li>提供一个公共的访问单例对象的接口</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 安全位置小火箭 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rocket</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">Rocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Rocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">static</span> Rocket <span class=\"token operator\">*</span>ms_rocket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">static</span> Rocket <span class=\"token operator\">*</span><span class=\"token function\">sharedRocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 这里要考虑多线程的安全</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ms_recket <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                ms_rocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Rocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> ms_rocket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteRocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ms_rocket <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">delete</span> ms_rocket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            ms_rocket <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"const成员\"><a class=\"anchor\" href=\"#const成员\">#</a> const 成员</h4>\n<ul>\n<li>const 成员：被 const 修饰的成员变量，非静态成员函数</li>\n<li>const 成员变量\n<ul>\n<li>必须初始化 (类内部初始化) 可以在声明的时候直接初始化赋值</li>\n<li>非 static 的 const 成员变量还可以再初始化列表中初始化</li>\n</ul>\n</li>\n<li>const 成员函数 (非静态)</li>\n<li>const 关键字写在参数列表后面，函数的声明和实现必须带 const</li>\n<li>内部不能修改非 static 成员函数</li>\n<li>内部只能调用 const 成员函数，static 成员函数</li>\n<li>非 const 成员函数可以调用 const 成员函数</li>\n<li>const 成员函数和非 const 成员函数构成重载</li>\n<li>非 const 对象 (指针) 优先调用非 const 成员函数</li>\n<li>const 对象 (指针) 只能调用 const 成员函数，static 成员函数</li>\n</ul>\n<h4 id=\"拷贝函数\"><a class=\"anchor\" href=\"#拷贝函数\">#</a> 拷贝函数</h4>\n<ul>\n<li>利用已经存在的 car3 对象创建一个 car3 新对象</li>\n<li>car4 初始化会调用拷贝构造函数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">car</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> price <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">m_price</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_length</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Car(int price = 0,int length = 0)\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 拷贝构造函数 (会默认生成浅拷贝构造函数)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Car <span class=\"token operator\">&amp;</span>car<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">m_price</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>m_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_length</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>m_length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Car(const Car &amp;car)\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">// m_price = car.m_price;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// m_length = car.m_length;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tcout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"price = \"</span> <span class=\"token operator\">&lt;&lt;</span> m_price <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" , length=\"</span><span class=\"token operator\">&lt;&lt;</span>m_length <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Car <span class=\"token function\">car3</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Car <span class=\"token function\">car4</span><span class=\"token punctuation\">(</span>car3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>car4<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>浅拷贝 (shallow copy): 指针类型的变量只会拷贝地址值<br />\n深拷贝 (deep copy): 将指针指向的内容拷贝到新的存储空间</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>m_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>name <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 申请新的存储空间</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tm_name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>m_name<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"浅深拷贝\"><a class=\"anchor\" href=\"#浅深拷贝\">#</a> 浅，深拷贝</h4>\n<ul>\n<li>编译器默认的提供的拷贝是 <code>浅拷贝</code>  (shallow copy)</li>\n<li>将一个对象中所有成员变量的值拷贝到另一个对象</li>\n<li>如果某个成员变量是个指针，只会拷贝指针中存储的地址值，并不会拷贝指针指向的内存空间</li>\n<li>可能会导致堆空间多次 free 的问题</li>\n<li>如果需要实现 <code>深拷贝</code>  (deep copy)，就需要自定义拷贝构造函数</li>\n<li>将指针类型的成员变量所指向的内存空间，拷贝到新的内存空间</li>\n</ul>\n<h4 id=\"对象类型的参数和返回值\"><a class=\"anchor\" href=\"#对象类型的参数和返回值\">#</a> 对象类型的参数和返回值</h4>\n<blockquote>\n<p>使用对象类型作为函数的参数或者返回值，可能会产生一些不必要的中间对象，返回引用可避免中间值</p>\n</blockquote>\n<h4 id=\"匿名对象\"><a class=\"anchor\" href=\"#匿名对象\">#</a> 匿名对象</h4>\n<blockquote>\n<p>匿名对象：没有变量名，没有被指针指向的对象，用完后马上调用析构</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 一次性对象，调用完之后立即释放空间</span></pre></td></tr></table></figure><h4 id=\"隐式构造转换构造\"><a class=\"anchor\" href=\"#隐式构造转换构造\">#</a> 隐式构造 / 转换构造</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Person p1 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Person <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 都会调用单构造函数</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 隐式构造</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Person <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 隐式构造，会将 40 传递给 Person 单函数对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>可以通过关键字 explicit 在定义构造函数时禁止掉隐式构造</p>\n</blockquote>\n<h4 id=\"编译器何时自动生成构造函数\"><a class=\"anchor\" href=\"#编译器何时自动生成构造函数\">#</a> 编译器何时自动生成构造函数</h4>\n<blockquote>\n<p>virtual function table 在汇编显示:vftable</p>\n</blockquote>\n<ul>\n<li>成员变量在声明的同时进行了初始化</li>\n<li>有定义虚函数</li>\n<li>虚继承其他类</li>\n<li>包含了对象类型的成员，且这个成员有构造函数 (编译器生成或自定义)</li>\n<li>父类有构造函数 (编译器生成或自定义)</li>\n<li>对象创建后，需要做一些额外操作时 (比如内存操作，函数调用)，编译器一般都会为期生成构造函数</li>\n</ul>\n<h4 id=\"内部类\"><a class=\"anchor\" href=\"#内部类\">#</a> 内部类</h4>\n<blockquote>\n<p>如果将类 A 定义在类 C 的内部，那么类 A 就是一个内部类 (嵌套类)</p>\n</blockquote>\n<ul>\n<li>内部类的特点\n<ul>\n<li>支持 public,protected,private 权限</li>\n<li>成员函数可以直接访问其外部类对象的所有成员 (反过来不行)</li>\n<li>成员函数可以直接不带类名，对象名访问其外部类的 static 成员</li>\n<li>不会影响外部类的内存布局</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"局部类\"><a class=\"anchor\" href=\"#局部类\">#</a> 局部类</h4>\n<blockquote>\n<p>在一个 <code>函数内部</code> 定义的类，称为局部类</p>\n</blockquote>\n<ul>\n<li>局部域仅限于所在的函数内部</li>\n<li>其所有的成员必须定义在类内部，不允许定义 static 成员变量</li>\n<li>成员函数不能直接访问函数的局部变量 (static 变量除外)</li>\n<li>在函数内部定义的类如果未调用类和函数，并不会每次调用函数都调用类</li>\n</ul>\n<h4 id=\"类型转换\"><a class=\"anchor\" href=\"#类型转换\">#</a> 类型转换</h4>\n<ul>\n<li>C 语言风格类型转换符\n<ul>\n<li>(type)expression</li>\n<li>type(expression)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span> d2 <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>C++ 中有 <code>4</code>  个类型转换符\n<ul>\n<li>static_cast</li>\n<li>dynamic_cast</li>\n<li>reinterpret_cast</li>\n<li>const_cast</li>\n<li>使用格式:xx_cast&lt;type&gt;(expression)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"const_cast\"><a class=\"anchor\" href=\"#const_cast\">#</a> const_cast</h5>\n<blockquote>\n<p>一般用于 <code>去</code> 除 <code>const</code>  属性，将 <code>const</code>  转换为 <code>非const</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">const</span> Person<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 实现去除 const 属性的强制类型转换</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">const_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 汇编语言相同</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t12: \tPerson* p2 = const_cast&lt;Person*>(p1);</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>00007FF773E2197C 48 8B 45 08          mov         rax,qword ptr [rbp+8]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>00007FF773E21980 48 89 45 28          mov         qword ptr [rbp+28h],rax</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t13: \tPerson* p3 = (Person*)p1;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>00007FF773E21984 48 8B 45 08          mov         rax,qword ptr [rbp+8]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>00007FF773E21988 48 89 45 48          mov         qword ptr [rbp+48h],rax</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"dynamic_cast\"><a class=\"anchor\" href=\"#dynamic_cast\">#</a> dynamic_cast</h5>\n<blockquote>\n<p>一般用于 <code>多态</code> 类型的转换，有 <code>运行</code> 时 <code>安全检测</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"P1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> p1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"P2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> p2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 用于多态类型转换 student 和 Person 没有多态没有虚函数会报错</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 不太安全，Person 赋值给 student，子类赋值给父类，不安全</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tStudent<span class=\"token operator\">*</span> stu1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Student <span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不安全</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tStudent<span class=\"token operator\">*</span> stu2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Student <span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 安全</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 其它方式会把地址完全转过来</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"stu1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> stu1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不安全会清空，安全检测</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"stu2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> stu2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>P1 = 0000019F7CD6C8B0</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>P2 = 0000019F7CD6C2C0 </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>stu1 = 0000000000000000 //p1 赋值失败</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>stu2 = 0000019F7CD6C2C0 //p2 成功</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"static_cast\"><a class=\"anchor\" href=\"#static_cast\">#</a> static_cast</h5>\n<ul>\n<li>对比 dynamic_cast，缺乏运行时安全检测</li>\n<li><code>不能交叉转换</code>  (不是同一继承体系的，无法转换)</li>\n<li>常用语 <code>基本数据类型</code> 的转换， <code>非const转成const</code></li>\n<li>适用较广</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Person<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tCar<span class=\"token operator\">*</span> c1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Car<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 报错，交叉转换不允许 car 和 Person 没有任何关系</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">//Car* c2 = static_cast&lt;Car*>(p1);</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 基本类型转换</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"reinterpret_cast\"><a class=\"anchor\" href=\"#reinterpret_cast\">#</a> reinterpret_cast</h5>\n<ul>\n<li>属于比较 <code>底层的强制转换</code> ，没有任何类型检查和格式转换， <code>仅仅是简单的二进制数据拷贝</code></li>\n<li><code>可以交叉转换</code></li>\n<li><code>可以将指针和整数相互转换</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 小端模式从后面开始读</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 二进制 0000 1010 0000 0000 0000 0000</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 十六进制: 0A 00 00 00</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//int a = 10;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//double 八个字节，double 和 int 并不能简单的二进制 copy</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 00 00 00 00 00 00 24 40</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 二进制纯 copy</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a= \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"d= \"</span> <span class=\"token operator\">&lt;&lt;</span> d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>a= 10</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>d= 8.33713e+80</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>参考资料:《30 小时快速精通 C++ 和外挂》</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW50ZWwuY29tL2NvbnRlbnQvd3d3L3VzL2VuL2RldmVsb3Blci9hcnRpY2xlcy90ZWNobmljYWwvaW50ZWwtc2RtLmh0bWw=\">https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html</span> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "计算机科学",
                "C++",
                "汇编与STl新特征",
                "C++",
                "计算机科学",
                "汇编"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/cpp%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E5%BE%81%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/cpp%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E5%BE%81%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/",
            "title": "C++部分新特征",
            "date_published": "2023-06-12T00:57:39.628Z",
            "content_html": "<h3 id=\"c11新特征与mfc\"><a class=\"anchor\" href=\"#c11新特征与mfc\">#</a> C++11 新特征与 MFC</h3>\n<h4 id=\"auto\"><a class=\"anchor\" href=\"#auto\">#</a>  <code>auto</code></h4>\n<ul>\n<li>可以从初始化表达式中判断出变量的类型</li>\n<li>属于编译器特性，不影响最终机器码质量，不影响运行效率</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//int </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//const char*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Person *</span></pre></td></tr></table></figure><h4 id=\"decltype\"><a class=\"anchor\" href=\"#decltype\">#</a>  <code>decltype</code></h4>\n<blockquote>\n<p>可以获取 <code>变量的类型</code></p>\n</blockquote>\n<h4 id=\"nullptr\"><a class=\"anchor\" href=\"#nullptr\">#</a>  <code>nullptr</code></h4>\n<ul>\n<li>可以解决 <code>NULL</code>  的二义性问题</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func(int) - \"</span> <span class=\"token operator\">&lt;&lt;</span> v <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func(int *) - \"</span> <span class=\"token operator\">&lt;&lt;</span> v <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">auto</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NULL 为宏定义 0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空指针使用 nullptr</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"快速遍历\"><a class=\"anchor\" href=\"#快速遍历\">#</a> 快速遍历</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 快速遍历</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> item <span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> item <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"更加简介的初始化方式\"><a class=\"anchor\" href=\"#更加简介的初始化方式\">#</a> 更加简介的初始化方式</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"lambada表达式\"><a class=\"anchor\" href=\"#lambada表达式\">#</a>  <code>lambada</code>  表达式</h4>\n<blockquote>\n<p>类似于 <code>JavaScript的闭包</code> ， <code>IOS</code>  中的 <code>Block</code>  本质上就是函数</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 完整结果</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>params list<span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> exception <span class=\"token operator\">-></span><span class=\"token keyword\">return</span> type<span class=\"token punctuation\">&#123;</span> function body<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>capture list</code> : 捕获外部变量列表</li>\n<li><code>params list</code> : 形参列表，不能使用默认参数，不能省略参数名</li>\n<li><code>mutable</code> : 用来说用是否可以修改捕获的变量</li>\n<li><code>exception</code> : 异常设定</li>\n<li><code>return type</code> : 返回值类型</li>\n<li><code>function body</code> : 函数体<br />\n<strong>有时可以省略部分结果</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>params list<span class=\"token punctuation\">)</span>  <span class=\"token operator\">-></span><span class=\"token keyword\">return</span> type<span class=\"token punctuation\">&#123;</span> function body<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>params list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> function body<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> function body<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 最简单的调用此表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"funvc()----\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"funvc()----\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用 lambda 表达式</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 计算两个整数和</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">auto</span> q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">q</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">*</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"变量捕获\"><a class=\"anchor\" href=\"#变量捕获\">#</a> 变量捕获</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">//int b = 10;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//auto func = [a, b]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//\tcout &lt;&lt; a &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//\tcout &lt;&lt; b &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//&#125;;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//a = 20;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//func (); // 值捕获，并没有获取最新的 a 值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//auto func = [&amp;a] // 使用地址捕获，可以保证获取最新的 a 值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">//\tcout &lt;&lt; a &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">//&#125;;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">//a = 70; </span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">//func (); // 地址捕获获取最新值</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 值捕获不能加加</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">//auto func = [a]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">//\ta++; // 值捕获不能 ++</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">//&#125;;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">//func();</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 地址捕获可以</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">//auto func = [&amp;a]</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">//\ta++;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">//&#125;;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">//func();</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; a &lt;&lt; endl; // 值 a+1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">//mutable </span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">auto</span> func <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> <span class=\"token comment\">// 内部 a 可以相加</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tb<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"lambda = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"智能指针smart-pointer\"><a class=\"anchor\" href=\"#智能指针smart-pointer\">#</a> 智能指针 ( <code>Smart Pointer</code> )</h4>\n<h5 id=\"传统指针的问题\"><a class=\"anchor\" href=\"#传统指针的问题\">#</a> 传统指针的问题</h5>\n<ul>\n<li>需要手动管理内存</li>\n<li>容易发生内存泄露 (忘记释放，出现异常等)</li>\n<li>释放之后残生野指针</li>\n<li>智能指针就是为了解决传统指针存在的问题</li>\n</ul>\n<h5 id=\"智能指针\"><a class=\"anchor\" href=\"#智能指针\">#</a> 智能指针</h5>\n<ul>\n<li><code>auto_ptr</code> : 属于 C<ins>98 标准，在 C</ins>11 中已经 <code>不推荐</code> 使用</li>\n<li><code>shared_ptr</code> :C++11 标准</li>\n<li><code>unique_ptr</code> :C++11 标准</li>\n</ul>\n<h5 id=\"使用auto_ptr自适应指针\"><a class=\"anchor\" href=\"#使用auto_ptr自适应指针\">#</a> 使用 <code>auto_ptr</code>  自适应指针</h5>\n<ul>\n<li><code>不</code> 能用于数组</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_age</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person(int)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"run() - \"</span> <span class=\"token operator\">&lt;&lt;</span> m_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 创建简单的智能指针</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SmartPointer</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tT <span class=\"token operator\">*</span>m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">SmartPointer</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">m_obj</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">SmartPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_obj <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span> m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tT<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">/*Person *p = new Person(20);</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tp->run();*/</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 可以理解为：智能指针 p 指向了堆空间的 Person 对象</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tauto_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tp<span class=\"token operator\">-></span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">/*Person p(20);</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tp.run();*/</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"share_ptr\"><a class=\"anchor\" href=\"#share_ptr\">#</a>  <code>share_ptr</code></h5>\n<blockquote>\n<p>设计理念：多个 <code>share_ptr</code>  可以指向同一个对象，当 <code>最后</code> 一个 <code>shared_ptr</code>  在作用域范围内结束时，对象才会被自动释放</p>\n</blockquote>\n<ul>\n<li>一个 <code>shared_ptr</code>  会对一个对象产生强引用 ( <code>strong reference</code> )</li>\n<li>每个对象都有个与之对应的强引用计数，记录着当前对象被多少个 <code>share_ptr</code>  强引用着</li>\n<li>可以通过 <code>shared_ptr</code>  的 <code>use_count</code>  函数获得强引用计数</li>\n<li>当有一个新的 <code>shared_ptr</code>  指向对象时，对象的强引用计数就会 + 1</li>\n<li>当有一个 <code>shared_ptr</code>  销毁时 (比如作用域结束) 对象的强引用就会 - 1</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_age</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person(int)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"run() - \"</span> <span class=\"token operator\">&lt;&lt;</span> m_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 创建简单的智能指针</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SmartPointer</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tT <span class=\"token operator\">*</span>m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">SmartPointer</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">m_obj</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">SmartPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_obj <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span> m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tT<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">// 可以</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token comment\">//shared_ptr&lt;Person> p(new Person(20));</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token comment\">// 若为数组</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">//shared_ptr&lt;Person[]> p(new Person[5]);</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">// 当多个智能指针指向一个对象</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tshared_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> p4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当最后一个对象销毁后对象才会销毁</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\tshared_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回使用强引用的数量</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\tshared_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> p2 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> p2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\tshared_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> p3 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> p3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\tp4 <span class=\"token operator\">=</span> p3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> p4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> p4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Person(int)</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>2</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>3</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>4</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>2</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>~Person()</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>3</pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"循环引用\"><a class=\"anchor\" href=\"#循环引用\">#</a> 循环引用</h5>\n<ul>\n<li><code>weak_ptr</code>  可以解决 <code>share_ptr</code>  循环引用导致强引用</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tweak_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> m_person<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 弱引用解决循环引用问题</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Car()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~ Car()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>Car<span class=\"token operator\">></span> m_car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token operator\">~</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~ Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>Car<span class=\"token operator\">></span> <span class=\"token function\">car</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 两个强引用循环引用，导致对象无法销毁</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tperson<span class=\"token operator\">-></span>m_car <span class=\"token operator\">=</span> car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcar<span class=\"token operator\">-></span>m_person <span class=\"token operator\">=</span> person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>Person()</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>Car()</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>~ Person()</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>~ Car()</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"unique_ptr\"><a class=\"anchor\" href=\"#unique_ptr\">#</a>  <code>unique_ptr</code></h4>\n<blockquote>\n<p><code>unique_ptr</code>  也会对一个对象产生强引用，它可以确保同一时间只有一个指针指向对象</p>\n</blockquote>\n<ul>\n<li>当 <code>unique_ptr</code>  销毁时 (作用域结束时)，其指向的对象也就自动销毁了</li>\n<li>可以使用 <code>std::move</code>  函数转移 <code>unique_ptr</code>  的所有权</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//ptr1 强引用着 Person 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 转移之后，ptr2 强引用着 Person 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "汇编与STl新特征",
                "C++",
                "计算机科学"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-3/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-3/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",
            "title": "C和C++线程池汇总",
            "date_published": "2023-06-11T08:20:43.000Z",
            "content_html": "<h1 id=\"多线程\"><a class=\"anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<blockquote>\n<p>C++ 11 提供的线程类 std::thread</p>\n<ul>\n<li>\n<p>thread</p>\n</li>\n<li>\n<p>mutex</p>\n</li>\n<li>\n<p>condition_variable</p>\n</li>\n<li>\n<p>atomix</p>\n</li>\n<li>\n<p>future</p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvXJRJqUjeibMeWIa6MRMpOpCx2vvZvK2Odty70EUcZm0RwySS6eunTGBYStZOmhDWcTkoMr8TZblg/640?wx_fmt=png\" alt=\"多线程\" title=\"多线程\" /></p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 默认构造函数对象，不进行任何操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 将 other 的线程所有权转移给新的 thread 对象，之后 other 不再表示执行线程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//thread t1 (func,ref (n)) //ref (n) 取 n 的引用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//other 可以使用 move (t1)，调用之后 t1 不再运行 func 函数，留给新的线程执行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span> thread<span class=\"token operator\">&amp;&amp;</span> other <span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//f 执行函数，args, 传给函数 f 的餐护士，可多个</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">explicit</span> <span class=\"token function\">thread</span><span class=\"token punctuation\">(</span> Function<span class=\"token operator\">&amp;&amp;</span> f<span class=\"token punctuation\">,</span> Args<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 构造函数 =delete 显示删除拷贝构造，不允许线程对象之间拷贝</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> thread<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"公共成员函数\"><a class=\"anchor\" href=\"#公共成员函数\">#</a> 公共成员函数</h2>\n<ul>\n<li><code>get_id()</code>  : 获取当前线程 <code>id</code></li>\n<li><code>join()</code>   函数 <code>所在线程</code> 等待加入的 <code>线程结束</code>  ，子线程未结束，主线程阻塞等待</li>\n<li><code>detach()</code>  : 主线程与子线程 <code>脱离</code> ， <code>不等待</code> ，子线程执行完毕后会 <code>自行释放</code> 系统资源</li>\n<li><code>bool joinable()</code> ：判断主线程与子线程 <code>是否关联</code>\n<ul>\n<li>创建线程并没有指定函数，子线程不会启动，主线程和子线程也不会连接</li>\n<li>若指定了函数，子线程启动，主线程和子线程自动连接</li>\n<li>若调用 <code>detach函数</code> 之后，两者分离，不再连接</li>\n<li>调用 <code>join() 函数</code> 之后，调用也会 <code>返回false</code> , 子线程任务完毕，jion 会清理当前子线程相关资源，子线程和主线程也就断开 <code>，不再连接</code></li>\n</ul>\n</li>\n<li><code>线程</code> 中的 <code>资源是不能复制</code> 的，不可用  <code>=</code>  重载</li>\n<li><code>thread::hardware_concurrency()</code>  获取当前计算机的 <code>CPU核心数</code> ，返回 <code>int</code></li>\n</ul>\n<h3 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;chrono></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> string str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"子线程：i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", num: \"</span> <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", str :\"</span> <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">// 当前线程阻塞 500ms</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tthis_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep_for</span><span class=\"token punctuation\">(</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">microseconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"子线程：j = \"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 当前线程阻塞 500ms</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tthis_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep_for</span><span class=\"token punctuation\">(</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">microseconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 获取当前 CPU 核心数，</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 每个线程独自占有一个 CPU 核心，这些线程就不用分时复用 CPU 时间片，此时层序并发效率最高</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"当前计算机的CPU核心数\"</span> <span class=\"token operator\">&lt;&lt;</span> thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">hardware_concurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"主线程id :\"</span> <span class=\"token operator\">&lt;&lt;</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取线程 id</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 利用构造函数，创建现车个 t 和 t1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 同时利用参数将子线程函数与参数传入</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tthread <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token number\">520</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"I Love You\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tthread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>func1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 输出子线程 id</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"子线程 t ID ： \"</span> <span class=\"token operator\">&lt;&lt;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"子线程 t1 ID ： \"</span> <span class=\"token operator\">&lt;&lt;</span> t1<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 主线程先执行完毕，</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">//1, 等到子线程结束。将子线程加入到当前线程当中</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tt<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span> <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">//2，子线程与主线程分离，主线程运行完毕，释放空间，子线程可以脱离主线程继续运行，任务运行完毕之后，子线层会自动释放自己占用的系统资源</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tt<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// 0</span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"主线程结束!!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 主线程等待子线程运行结束，等待 5 秒</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tthis_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep_for</span><span class=\"token punctuation\">(</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">microseconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">// 来不及运行的子程序将无法将输出结果呈现到主屏幕上</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"sleep_for\"><a class=\"anchor\" href=\"#sleep_for\">#</a>  <code>sleep_for()</code></h2>\n<blockquote>\n<p>调用该线程会马上从 <code>运行态变成阻塞态</code> ，并在这种状态下休眠一定的时间， <code>让出CPU资源</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Rep 数值类型，表示时钟树类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Period 表示始终的周期</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rep</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Period</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//duration 表示一段时间间隔，</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sleep_for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> chrono<span class=\"token double-colon punctuation\">::</span>duration<span class=\"token operator\">&lt;</span>Rep<span class=\"token punctuation\">,</span>Period<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> rel_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 当前线程休息一秒钟</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep_for</span><span class=\"token punctuation\">(</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 秒： std::chrono::seconds</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 分钟：std::chrono::minutes</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 毫秒：std::chrono::milliseconds</span></pre></td></tr></table></figure><h2 id=\"sleep_until\"><a class=\"anchor\" href=\"#sleep_until\">#</a> ``sleep_until() `</h2>\n<blockquote>\n<p>指定线程阻塞到一个 <code>指定的时间点</code>  time_point 类型， <code>之后解除阻塞</code></p>\n</blockquote>\n<h2 id=\"yield\"><a class=\"anchor\" href=\"#yield\">#</a>  <code>yield()</code></h2>\n<blockquote>\n<p>调用 yield 之后会主 <code>动放弃CPU资源</code> ，变为就绪态，但是会 <code>马上</code> 加入 <code>下</code> 一轮 <code>CPU</code>  的资源 <code>抢夺</code> 。<br />\n· <code>this_thread::yield()</code></p>\n</blockquote>\n<h2 id=\"线程同步\"><a class=\"anchor\" href=\"#线程同步\">#</a> 线程同步</h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvXJRJqUjeibMeWIa6MRMpOpUrBkJatbLhCOg8ZgWQ9X00ZeKiaywFO05iaJav4ZmVOebOsgRdkKesSg/640?wx_fmt=jpeg\" alt=\"线程同步\" title=\"线程同步\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvXJRJqUjeibMeWIa6MRMpOpXbibs6wph6tBu8NuyxfA0LIgwiaNkgicWZPsOA90gXdSFyAA8I4s9MJ6g/640?wx_fmt=png\" alt=\"线程池\" title=\"线程池\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全局创建互斥锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mutex mtx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 加锁</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mtx<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 解锁</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mtx<span class=\"token punctuation\">.</span><span class=\"token function\">unlocl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"线程池\"><a class=\"anchor\" href=\"#线程池\">#</a> 线程池</h2>\n<blockquote>\n<p>指定数量创建好的线程，当需要用时，从线程中取出，如果线程不够，管理者线程将创建线程，若空闲数量过多，将适量销毁不使用的线程。<br />\n避免创建和销毁线程锁需要的开销</p>\n</blockquote>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<ul>\n<li>\n<p>任务队列：需要处理的任务 -&gt; 生产者线程</p>\n</li>\n<li>\n<p>工作的线程：任务队列的消费者 -&gt; 读线程</p>\n</li>\n<li>\n<p>管理者线程： 1 个  任务多，创建线程，任务少，适当销毁线程</p>\n</li>\n</ul>\n<blockquote>\n<p>在线程池初始化过程中，定义一个管理者线程，定义最小初始化的工作线程，工作线程复制运行函数，<br />\n任务队列类，负责封装任务函数指针与参数，在线程池中存入到队列当中，在添加任务时不断更新头结点和尾节点位置。<br />\n管理者线程 如果线程池没有关闭就一直检测线程，读取当前任务个数与存活的线程数，如果任务过多，线程过于紧张，向线程池队列中添加线程。如果运行的线程的二倍小于存活的线程数目<br />\n工作线程，一直不停地工作。每次循环，若任务队列为空，工作线程阻塞，如线程池被关闭了，退出当前工作线程。执行函数，执行函数之后，降低忙碌的线程</p>\n</blockquote>\n<h3 id=\"c-线程池\"><a class=\"anchor\" href=\"#c-线程池\">#</a> C  <code>线程池</code></h3>\n<h4 id=\"头文件\"><a class=\"anchor\" href=\"#头文件\">#</a> 头文件</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_THREADPOOL_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_THREADPOOL_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NUMBER</span> <span class=\"token expression\"><span class=\"token number\">3</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 任务队列</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Task</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 任务队列存储函数指针</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存储函数的参数指针</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Task<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 线程池结构体</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ThreadPool</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    Task<span class=\"token operator\">*</span> taskQ<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 任务队列 (通过申请空间，乘以容量，即可成为任务队列)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> queueCapacity<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 任务队列容量</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> queueSize<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 当前任务个数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> queueFront<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 队头取数据</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> queueRear<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 队尾  放数据</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">pthread_t</span> managerID<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 管理者线程 ID 仅一个</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token class-name\">pthread_t</span> <span class=\"token operator\">*</span>threadIDs<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 工作的线程 ID，同样申请多个</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> minNum<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 最小线程数量</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> maxNum<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 最大小城数量</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">int</span> busyNum<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 忙的线程个数 运行中</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span> liveNum<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存活的线程个数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> exitNum<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 要销毁的线程个数</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token class-name\">pthread_mutex_t</span> mutexPool<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 锁整个的线程池</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token class-name\">pthread_mutex_t</span> mutexBusy<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 锁 busyNum 变量</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">pthread_cond_t</span> notFull<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 任务队列是不是满了</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token class-name\">pthread_cond_t</span> notEmpty<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 任务队列是不是空</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">int</span> shutdown<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 是不是要销毁线程池，销毁为 1，不销毁为 0</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span>ThreadPool<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 创建线程并初始化，传入参数最小线程数量，最大线程数量，和队列容量</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>ThreadPool <span class=\"token operator\">*</span><span class=\"token function\">threadPoolCreate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> queueSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 该线程添加任务</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">// 传入参数线程结构体，执行任务的函数指针，函数参数</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">threadPoolAdd</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 获取当前线程池中工作的线程个数</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">threadPoolBusyNum</span><span class=\"token punctuation\">(</span>ThreadPool <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// 获取当前线程池中活着的线程个数</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">threadPoolAliveNum</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// 工作的线程 (消费者线程) 任务函数</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">// 管理者线程任务函数</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> <span class=\"token function\">manager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">// 单个线程退出</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">threadExit</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">// 销毁线程池  传入线程 pool</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">threadPoolDestroy</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">// 线程池所有线程和任务皆为空</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">threadPoolISEmpty</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h4 id=\"头文件实现\"><a class=\"anchor\" href=\"#头文件实现\">#</a> 头文件实现</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"threadpool.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ThreadPool<span class=\"token operator\">*</span> <span class=\"token function\">threadPoolCreate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> queueSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 初始化结构体空间</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ThreadPool<span class=\"token operator\">*</span> pool <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 判断申请空间是否成功</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc threadPool fail...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 申请工作线程 ID 攻坚</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 申请最大空间的</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        pool<span class=\"token operator\">-></span>threadIDs <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pthread_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pthread_t</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>threadIDs <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc threadIds fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 对工作线程的线程 id 初始化为</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pthread_t</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 对结构体内部数据进行初始化</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        pool<span class=\"token operator\">-></span>minNum <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最小线程数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        pool<span class=\"token operator\">-></span>maxNum <span class=\"token operator\">=</span> max<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大线程数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        pool<span class=\"token operator\">-></span>busyNum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 当前忙碌的线程</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        pool<span class=\"token operator\">-></span>liveNum <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前活着线程数，等于最小个数线程数</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        pool<span class=\"token operator\">-></span>exitNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要销毁的线程个数</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 对互斥锁与条件变量进行初始化</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">pthread_mutex_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token function\">pthread_mutex_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token function\">pthread_cond_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notEmpty<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token function\">pthread_cond_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notFull<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mutex or condition init fail...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 任务队列初始化</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        pool<span class=\"token operator\">-></span>taskQ <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Task<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Task<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> queueSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 大小为参数给定的容量</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">//TODO</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// if(pool->taskQ == NULL)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// &#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">//     printf(\"malloc TaskID fail ... \");</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">//     break;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        pool<span class=\"token operator\">-></span>queueCapacity <span class=\"token operator\">=</span> queueSize<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置任务队列容 量</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        pool<span class=\"token operator\">-></span>queueSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置任务队列大小</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        pool<span class=\"token operator\">-></span>queueFront <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置任务队列头节点</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        pool<span class=\"token operator\">-></span>queueRear <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 队列位节点位置</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        pool<span class=\"token operator\">-></span>shutdown <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是不是要销毁线程池</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 创建管理者线程一个</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>managerID<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>manager<span class=\"token punctuation\">,</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// 创建工作线程</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>worker<span class=\"token punctuation\">,</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">return</span> pool<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\">// 如果上面的申请空间失败，则释放申请的资源</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool <span class=\"token operator\">&amp;&amp;</span> pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool <span class=\"token operator\">&amp;&amp;</span> pool<span class=\"token operator\">-></span>taskQ<span class=\"token punctuation\">)</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>taskQ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">// 销毁当前线程</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">threadPoolDestroy</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// 如果线程池结构体为空</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token comment\">// 关闭线程池</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    pool<span class=\"token operator\">-></span>shutdown <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 通过子线程的不断检测，如关闭线程池，则关闭释放先关线程与执行</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token comment\">// 阻塞回收管理者线程</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>managerID<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">// 唤醒阻塞的消费者线程  还存活的线程个数</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>pool<span class=\"token operator\">-></span>liveNum<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token function\">pthread_cond_signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过信号量唤醒，那些因为任务队列满了，判断是够有空的线程</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token comment\">// 释放对内存</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>taskQ<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>taskQ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token comment\">// 销毁互斥锁与条件变量</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token function\">pthread_mutex_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token function\">pthread_mutex_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token function\">pthread_cond_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token function\">pthread_cond_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notFull<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token comment\">// 释放线程池结构体</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    pool <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程池完全退出.....\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">// 添加线程，在初始化后通过此向线程池中调用线程</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">threadPoolAdd</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token comment\">// 添加整个线程互斥锁</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\">// 当任务队列当前任务个数等于任务队列容量 并且线程池非销毁的状态性，阻塞等待任务队列空闲或者被销毁</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>queueSize <span class=\"token operator\">==</span> pool<span class=\"token operator\">-></span>queueCapacity <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>pool<span class=\"token operator\">-></span>shutdown<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token comment\">// 阻塞生产线程</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token function\">pthread_cond_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notFull<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 处于 线程队列是不是有空 条件变量，解锁线程互斥锁</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token comment\">// 如果处于销毁线程</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>shutdown<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token comment\">// 解锁线程互斥锁</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token comment\">// 添加任务</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    pool<span class=\"token operator\">-></span>taskQ<span class=\"token punctuation\">[</span>pool<span class=\"token operator\">-></span>queueRear<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>function <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用尾插法，传入函数指针</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    pool<span class=\"token operator\">-></span>taskQ<span class=\"token punctuation\">[</span>pool<span class=\"token operator\">-></span>queueRear<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arg <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入参数</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token comment\">// 更新尾插入的位置</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    pool<span class=\"token operator\">-></span>queueRear <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>queueRear <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> pool<span class=\"token operator\">-></span>queueCapacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    pool<span class=\"token operator\">-></span>queueSize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前任务个数 ++</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token comment\">// 任务队列满 控件 </span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token comment\">// 唤醒在条件变量上的线程，至少一个被解除阻塞</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token function\">pthread_cond_signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token comment\">// 解整个线程互斥锁</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token comment\">// 返回当前忙碌的线程个数</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">threadPoolBusyNum</span><span class=\"token punctuation\">(</span>ThreadPool <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token comment\">// 阻塞忙碌的线程</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token keyword\">int</span> busyNum <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>busyNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token keyword\">return</span> busyNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">threadPoolAliveNum</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token comment\">// 阻塞线程池互斥锁</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    <span class=\"token keyword\">int</span> aliveNum <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>liveNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token keyword\">return</span> aliveNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre><span class=\"token comment\">// 工作线程，负责消费线程运行任务队列</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token comment\">// 将传入的结构体转换</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    ThreadPool<span class=\"token operator\">*</span> pool <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token comment\">// 线程池锁</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token comment\">// 当前任务队列是否为空并且不处于销毁线程状态</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>queueSize <span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>pool<span class=\"token operator\">-></span>shutdown<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            <span class=\"token comment\">// 阻塞工作线程，阻塞，任务队列满</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>            <span class=\"token function\">pthread_cond_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notEmpty<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>            <span class=\"token comment\">// 判断是不是要销毁线程</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>exitNum <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 与管理员线程销毁线程相关联</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>                pool<span class=\"token operator\">-></span>exitNum <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>                <span class=\"token comment\">// 如果存活的线程大于最小线程数，适当减小存活的线程</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>liveNum <span class=\"token operator\">></span> pool<span class=\"token operator\">-></span>minNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>                    pool<span class=\"token operator\">-></span>liveNum<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>                    <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>                    <span class=\"token comment\">// 释放线程</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>                    <span class=\"token function\">threadExit</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>        <span class=\"token comment\">// 判断线程池是否被关闭了</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>shutdown<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>            <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>            <span class=\"token function\">threadExit</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"199\"></td><td><pre>        <span class=\"token comment\">// 从任务队列取出一个任务</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        Task task<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        <span class=\"token comment\">// 从队列头部去函数指针与参数</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>        task<span class=\"token punctuation\">.</span>function <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>taskQ<span class=\"token punctuation\">[</span>pool<span class=\"token operator\">-></span>queueFront<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>        task<span class=\"token punctuation\">.</span>arg <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>taskQ<span class=\"token punctuation\">[</span>pool<span class=\"token operator\">-></span>queueFront<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>        <span class=\"token comment\">// 移动头结点</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>        pool<span class=\"token operator\">-></span>queueFront <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>queueFront <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> pool<span class=\"token operator\">-></span>queueCapacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>        pool<span class=\"token operator\">-></span>queueSize<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>        <span class=\"token comment\">// 解锁</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>        <span class=\"token function\">pthread_cond_signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notFull<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断是否满的条件变量，释放一次任务队列是否满空间，仍阻塞的任务队列进入</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 解锁线程池锁</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>        <span class=\"token comment\">// 运行线程</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread %ld start working...\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token comment\">// 加锁，当前正在忙碌的线程 + 1</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>        pool<span class=\"token operator\">-></span>busyNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>        <span class=\"token comment\">// 运行当前线程</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>        task<span class=\"token punctuation\">.</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>        <span class=\"token comment\">// 释放参数空间</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>        <span class=\"token comment\">// 将参数设置为空</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>        task<span class=\"token punctuation\">.</span>arg <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>        <span class=\"token comment\">// 运行之后，忙碌的线程 - 1</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread %ld end working ...\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>        pool<span class=\"token operator\">-></span>busyNum<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">manager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>    <span class=\"token comment\">// 传入的结构体</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>    ThreadPool<span class=\"token operator\">*</span> pool <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>    <span class=\"token comment\">// 当并没有关闭时</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pool<span class=\"token operator\">-></span>shutdown<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>        <span class=\"token comment\">// 每隔 3 秒检测一次</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>        <span class=\"token comment\">// 取出线程池中任务的数量和当前线程的数量</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"243\"></td><td><pre>        <span class=\"token keyword\">int</span> queueSize <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>queueSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>        <span class=\"token keyword\">int</span> liveNum <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>liveNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>        <span class=\"token comment\">// 取出忙的线程数量</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>        <span class=\"token keyword\">int</span> busyNum <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>busyNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"253\"></td><td><pre>        <span class=\"token comment\">// 添加线程</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>        <span class=\"token comment\">// 当任务的个数 > 存活的线程个数 & amp;&amp; 存活的线程数 &lt; 最大线程数</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>queueSize <span class=\"token operator\">></span> liveNum <span class=\"token operator\">&amp;&amp;</span> liveNum <span class=\"token operator\">&lt;</span> pool<span class=\"token operator\">-></span>maxNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>            <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>            <span class=\"token keyword\">int</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pool<span class=\"token operator\">-></span>maxNum <span class=\"token operator\">&amp;&amp;</span> counter <span class=\"token operator\">&lt;</span> NUMBER <span class=\"token operator\">&amp;&amp;</span> pool<span class=\"token operator\">-></span>liveNum <span class=\"token operator\">&lt;</span> pool<span class=\"token operator\">-></span>maxNum<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>                    <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>worker<span class=\"token punctuation\">,</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>                    counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>                    pool<span class=\"token operator\">-></span>liveNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存活的线程个数</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>            <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>        <span class=\"token comment\">// 销毁线程</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>        <span class=\"token comment\">// 忙的线程 * 2 &lt; 存活的线程数 &amp;&amp; 存活的线程 > 最小线程数</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>busyNum <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> liveNum <span class=\"token operator\">&amp;&amp;</span> liveNum <span class=\"token operator\">></span> pool<span class=\"token operator\">-></span>minNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>            <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>            pool<span class=\"token operator\">-></span>exitNum <span class=\"token operator\">=</span> NUMBER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>            <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>            <span class=\"token comment\">// 让工作的线程自杀</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>NUMBER<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>                <span class=\"token function\">pthread_cond_signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 释放工作线程，使其释放线程</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre><span class=\"token comment\">// 退出线程</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">threadExit</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>    <span class=\"token class-name\">pthread_t</span> tid <span class=\"token operator\">=</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pool<span class=\"token operator\">-></span>maxNum<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> tid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>            pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"threadExit() called, %ld exiting...\\n\"</span><span class=\"token punctuation\">,</span> tid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>    <span class=\"token function\">pthread_exit</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">threadPoolISEmpty</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>    <span class=\"token comment\">// 要销毁线程，任务队列，忙的线程和都为零</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>queueSize <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> pool<span class=\"token operator\">-></span>busyNum <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">threadPoolAliveNum</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pool<span class=\"token operator\">-></span>minNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"测试函数\"><a class=\"anchor\" href=\"#测试函数\">#</a> 测试函数</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"threadpool.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">taskFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread %ld is working,number = %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 创建线程池</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ThreadPool <span class=\"token operator\">*</span>pool <span class=\"token operator\">=</span> <span class=\"token function\">threadPoolCreate</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> num <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token operator\">*</span>num <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 添加任务队列</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">threadPoolAdd</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">,</span>taskFunc<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">threadPoolISEmpty</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"销毁线程池 ing \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">threadPoolDestroy</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"基于posix线程池\"><a class=\"anchor\" href=\"#基于posix线程池\">#</a> 基于 POSIX 线程池</h3>\n<h4 id=\"头文件-2\"><a class=\"anchor\" href=\"#头文件-2\">#</a> 头文件</h4>\n<h5 id=\"threadpoolh\"><a class=\"anchor\" href=\"#threadpoolh\">#</a> threadpool.h</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_THREADPOOL_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_THREADPOOL_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NUMBER</span> <span class=\"token expression\"><span class=\"token number\">3</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 任务队列</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Task</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 任务队列存储函数指针</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存储函数的参数指针</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Task<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 线程池结构体</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ThreadPool</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    Task<span class=\"token operator\">*</span> taskQ<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 任务队列 (通过申请空间，乘以容量，即可成为任务队列)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> queueCapacity<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 任务队列容量</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> queueSize<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 当前任务个数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> queueFront<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 队头取数据</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> queueRear<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 队尾  放数据</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    pthread_t managerID<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 管理者线程 ID 仅一个</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    pthread_t <span class=\"token operator\">*</span>threadIDs<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 工作的线程 ID，同样申请多个</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> minNum<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 最小线程数量</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> maxNum<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 最大小城数量</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">int</span> busyNum<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 忙的线程个数 运行中</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span> liveNum<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存活的线程个数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> exitNum<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 要销毁的线程个数</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    pthread_mutex_t mutexPool<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 锁整个的线程池</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    pthread_mutex_t mutexBusy<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 锁 busyNum 变量</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    pthread_cond_t notFull<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 任务队列是不是满了</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    pthread_cond_t notEmpty<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 任务队列是不是空</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">int</span> shutdown<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 是不是要销毁线程池，销毁为 1，不销毁为 0</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span>ThreadPool<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 创建线程并初始化，传入参数最小线程数量，最大线程数量，和队列容量</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>ThreadPool <span class=\"token operator\">*</span><span class=\"token function\">threadPoolCreate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> queueSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 该线程添加任务</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">// 传入参数线程结构体，执行任务的函数指针，函数参数</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">threadPoolAdd</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 获取当前线程池中工作的线程个数</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">threadPoolBusyNum</span><span class=\"token punctuation\">(</span>ThreadPool <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// 获取当前线程池中活着的线程个数</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">threadPoolAliveNum</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// 工作的线程 (消费者线程) 任务函数</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">// 管理者线程任务函数</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> <span class=\"token function\">manager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">// 单个线程退出</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">threadExit</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">// 销毁线程池  传入线程 pool</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">threadPoolDestroy</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">// 线程池所有线程和任务皆为空</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">threadPoolISEmpty</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h5 id=\"taskqueueh\"><a class=\"anchor\" href=\"#taskqueueh\">#</a> TaskQueue.h</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_TASKQUEUE_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_TASKQUEUE_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 定义任务结构体 定义别名</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> callback <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 任务结构体</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Task</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">Task</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        function <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        arg <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 有参函数构造</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">Task</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>callback f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        function <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>arg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 类 函数指针</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    callback function<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 函数参数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    T<span class=\"token operator\">*</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 任务队列</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskQueue</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">TaskQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">TaskQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 添加任务</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span>Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span>callback func<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// 取出一个任务</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">takeTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 获取当前队列中任务个数</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">inline</span> size_t <span class=\"token function\">taskNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 内联函数提高效率</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> m_queue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回队列个数</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 取任务和添加任务，加锁</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    pthread_mutex_t m_mutex<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 互斥锁</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 任务结构体的队列</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>queue<span class=\"token operator\">&lt;</span>Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span> m_queue<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 任务队列</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h4 id=\"实现函数\"><a class=\"anchor\" href=\"#实现函数\">#</a> 实现函数</h4>\n<h5 id=\"threadpoolcpp\"><a class=\"anchor\" href=\"#threadpoolcpp\">#</a> threadpool.cpp</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"threadpool.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ThreadPool<span class=\"token operator\">*</span> <span class=\"token function\">threadPoolCreate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> queueSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 初始化结构体空间</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ThreadPool<span class=\"token operator\">*</span> pool <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 判断申请空间是否成功</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc threadPool fail...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 申请工作线程 ID 攻坚</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 申请最大空间的</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        pool<span class=\"token operator\">-></span>threadIDs <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>pthread_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>pthread_t<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>threadIDs <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc threadIds fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 对工作线程的线程 id 初始化为</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>pthread_t<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 对结构体内部数据进行初始化</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        pool<span class=\"token operator\">-></span>minNum <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最小线程数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        pool<span class=\"token operator\">-></span>maxNum <span class=\"token operator\">=</span> max<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大线程数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        pool<span class=\"token operator\">-></span>busyNum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 当前忙碌的线程</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        pool<span class=\"token operator\">-></span>liveNum <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前活着线程数，等于最小个数线程数</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        pool<span class=\"token operator\">-></span>exitNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要销毁的线程个数</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 对互斥锁与条件变量进行初始化</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">pthread_mutex_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token function\">pthread_mutex_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token function\">pthread_cond_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notEmpty<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token function\">pthread_cond_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notFull<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mutex or condition init fail...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 任务队列初始化</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        pool<span class=\"token operator\">-></span>taskQ <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Task<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Task<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> queueSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 大小为参数给定的容量</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">//TODO</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// if(pool->taskQ == NULL)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// &#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">//     printf(\"malloc TaskID fail ... \");</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">//     break;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        pool<span class=\"token operator\">-></span>queueCapacity <span class=\"token operator\">=</span> queueSize<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置任务队列容 量</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        pool<span class=\"token operator\">-></span>queueSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置任务队列大小</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        pool<span class=\"token operator\">-></span>queueFront <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置任务队列头节点</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        pool<span class=\"token operator\">-></span>queueRear <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 队列位节点位置</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        pool<span class=\"token operator\">-></span>shutdown <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是不是要销毁线程池</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 创建管理者线程一个</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>managerID<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>manager<span class=\"token punctuation\">,</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// 创建工作线程</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>worker<span class=\"token punctuation\">,</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">return</span> pool<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\">// 如果上面的申请空间失败，则释放申请的资源</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool <span class=\"token operator\">&amp;&amp;</span> pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool <span class=\"token operator\">&amp;&amp;</span> pool<span class=\"token operator\">-></span>taskQ<span class=\"token punctuation\">)</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>taskQ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">// 销毁当前线程</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">threadPoolDestroy</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// 如果线程池结构体为空</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token comment\">// 关闭线程池</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    pool<span class=\"token operator\">-></span>shutdown <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 通过子线程的不断检测，如关闭线程池，则关闭释放先关线程与执行</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token comment\">// 阻塞回收管理者线程</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进入管理者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>managerID<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token comment\">// 唤醒阻塞的消费者线程  还存活的线程个数</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"阻塞在管理者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>pool<span class=\"token operator\">-></span>liveNum<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token function\">pthread_cond_signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过信号量唤醒，那些因为任务队列满了，判断是够有空的线程</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token comment\">// 释放对内存</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>taskQ<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>taskQ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token comment\">// 销毁互斥锁与条件变量</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token function\">pthread_mutex_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token function\">pthread_mutex_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token function\">pthread_cond_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token function\">pthread_cond_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notFull<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token comment\">// 释放线程池结构体</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    pool <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token comment\">// 添加线程，在初始化后通过此向线程池中调用线程</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">threadPoolAdd</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token comment\">// 添加整个线程互斥锁</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token comment\">// 当任务队列当前任务个数等于任务队列容量 并且线程池非销毁的状态性，阻塞等待任务队列空闲或者被销毁</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>queueSize <span class=\"token operator\">==</span> pool<span class=\"token operator\">-></span>queueCapacity <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>pool<span class=\"token operator\">-></span>shutdown<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token comment\">// 阻塞生产线程</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token function\">pthread_cond_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notFull<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 处于 线程队列是不是有空 条件变量，解锁线程互斥锁</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token comment\">// 如果处于销毁线程</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>shutdown<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token comment\">// 解锁线程互斥锁</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token comment\">// 添加任务</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    pool<span class=\"token operator\">-></span>taskQ<span class=\"token punctuation\">[</span>pool<span class=\"token operator\">-></span>queueRear<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>function <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用尾插法，传入函数指针</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    pool<span class=\"token operator\">-></span>taskQ<span class=\"token punctuation\">[</span>pool<span class=\"token operator\">-></span>queueRear<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arg <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入参数</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token comment\">// 更新尾插入的位置</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    pool<span class=\"token operator\">-></span>queueRear <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>queueRear <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> pool<span class=\"token operator\">-></span>queueCapacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    pool<span class=\"token operator\">-></span>queueSize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前任务个数 ++</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token comment\">// 任务队列满 控件 </span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token comment\">// 唤醒在条件变量上的线程，至少一个被解除阻塞</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token function\">pthread_cond_signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token comment\">// 解整个线程互斥锁</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token comment\">// 返回当前忙碌的线程个数</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">threadPoolBusyNum</span><span class=\"token punctuation\">(</span>ThreadPool <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token comment\">// 阻塞忙碌的线程</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token keyword\">int</span> busyNum <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>busyNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token keyword\">return</span> busyNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">threadPoolAliveNum</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token comment\">// 阻塞线程池互斥锁</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token keyword\">int</span> aliveNum <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>liveNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token keyword\">return</span> aliveNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre><span class=\"token comment\">// 工作线程，负责消费线程运行任务队列</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    <span class=\"token comment\">// 将传入的结构体转换</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    ThreadPool<span class=\"token operator\">*</span> pool <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token comment\">// 线程池锁</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token comment\">// 当前任务队列是否为空并且不处于销毁线程状态</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>queueSize <span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>pool<span class=\"token operator\">-></span>shutdown<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>            <span class=\"token comment\">// 阻塞工作线程，阻塞，任务队列满</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>            <span class=\"token function\">pthread_cond_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notEmpty<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>            <span class=\"token comment\">// 判断是不是要销毁线程</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>exitNum <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 与管理员线程销毁线程相关联</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>                pool<span class=\"token operator\">-></span>exitNum <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>                <span class=\"token comment\">// 如果存活的线程大于最小线程数，适当减小存活的线程</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>liveNum <span class=\"token operator\">></span> pool<span class=\"token operator\">-></span>minNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>                    pool<span class=\"token operator\">-></span>liveNum<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>                    <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>                    <span class=\"token comment\">// 释放线程</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>                    <span class=\"token function\">threadExit</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>        <span class=\"token comment\">// 判断线程池是否被关闭了</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>shutdown<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>            <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>            <span class=\"token function\">threadExit</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token comment\">// 从任务队列取出一个任务</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        Task task<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>        <span class=\"token comment\">// 从队列头部去函数指针与参数</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>        task<span class=\"token punctuation\">.</span>function <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>taskQ<span class=\"token punctuation\">[</span>pool<span class=\"token operator\">-></span>queueFront<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>        task<span class=\"token punctuation\">.</span>arg <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>taskQ<span class=\"token punctuation\">[</span>pool<span class=\"token operator\">-></span>queueFront<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>        <span class=\"token comment\">// 移动头结点</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>        pool<span class=\"token operator\">-></span>queueFront <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>queueFront <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> pool<span class=\"token operator\">-></span>queueCapacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>        pool<span class=\"token operator\">-></span>queueSize<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>        <span class=\"token comment\">// 解锁</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>        <span class=\"token function\">pthread_cond_signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notFull<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断是否满的条件变量，释放一次任务队列是否满空间，仍阻塞的任务队列进入</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 解锁线程池锁</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>        <span class=\"token comment\">// 运行线程</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread %ld start working...\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>        <span class=\"token comment\">// 加锁，当前正在忙碌的线程 + 1</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>        pool<span class=\"token operator\">-></span>busyNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>        <span class=\"token comment\">// 运行当前线程</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>        task<span class=\"token punctuation\">.</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>        <span class=\"token comment\">// 释放参数空间</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>        <span class=\"token comment\">// 将参数设置为空</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>        task<span class=\"token punctuation\">.</span>arg <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>        <span class=\"token comment\">// 运行之后，忙碌的线程 - 1</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread %ld end working ...\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>        pool<span class=\"token operator\">-></span>busyNum<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">manager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>    <span class=\"token comment\">// 传入的结构体</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>    ThreadPool<span class=\"token operator\">*</span> pool <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>    <span class=\"token comment\">// 当并没有关闭时</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pool<span class=\"token operator\">-></span>shutdown<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>        <span class=\"token comment\">// 每隔 3 秒检测一次</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>        <span class=\"token comment\">// 取出线程池中任务的数量和当前线程的数量</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"244\"></td><td><pre>        <span class=\"token keyword\">int</span> queueSize <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>queueSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>        <span class=\"token keyword\">int</span> liveNum <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>liveNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>        <span class=\"token comment\">// 取出忙的线程数量</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>        <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>        <span class=\"token keyword\">int</span> busyNum <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>busyNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>        <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexBusy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"254\"></td><td><pre>        <span class=\"token comment\">// 添加线程</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>        <span class=\"token comment\">// 当任务的个数 > 存活的线程个数 & amp;&amp; 存活的线程数 &lt; 最大线程数</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>queueSize <span class=\"token operator\">></span> liveNum <span class=\"token operator\">&amp;&amp;</span> liveNum <span class=\"token operator\">&lt;</span> pool<span class=\"token operator\">-></span>maxNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>            <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>            <span class=\"token keyword\">int</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pool<span class=\"token operator\">-></span>maxNum <span class=\"token operator\">&amp;&amp;</span> counter <span class=\"token operator\">&lt;</span> NUMBER <span class=\"token operator\">&amp;&amp;</span> pool<span class=\"token operator\">-></span>liveNum <span class=\"token operator\">&lt;</span> pool<span class=\"token operator\">-></span>maxNum<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>                    <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>worker<span class=\"token punctuation\">,</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>                    counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>                    pool<span class=\"token operator\">-></span>liveNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存活的线程个数</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>            <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>        <span class=\"token comment\">// 销毁线程</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>        <span class=\"token comment\">// 忙的线程 * 2 &lt; 存活的线程数 &amp;&amp; 存活的线程 > 最小线程数</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>busyNum <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> liveNum <span class=\"token operator\">&amp;&amp;</span> liveNum <span class=\"token operator\">></span> pool<span class=\"token operator\">-></span>minNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>            <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>            pool<span class=\"token operator\">-></span>exitNum <span class=\"token operator\">=</span> NUMBER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>            <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>mutexPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>            <span class=\"token comment\">// 让工作的线程自杀</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>NUMBER<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>                <span class=\"token function\">pthread_cond_signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pool<span class=\"token operator\">-></span>notEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 释放工作线程，使其释放线程</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre><span class=\"token comment\">// 退出线程</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">threadExit</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>    pthread_t tid <span class=\"token operator\">=</span> <span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>pool<span class=\"token operator\">-></span>maxNum<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>threadIDs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span>tid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>            pool<span class=\"token operator\">-></span>threadIDs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"threadExit() called, %ld exiting ...\\n\"</span><span class=\"token punctuation\">,</span>tid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>    <span class=\"token function\">pthread_exit</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">threadPoolISEmpty</span><span class=\"token punctuation\">(</span>ThreadPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>    <span class=\"token comment\">// 要销毁线程，任务队列，忙的线程和都为零</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>queueSize <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> pool<span class=\"token operator\">-></span>busyNum <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">threadPoolAliveNum</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pool<span class=\"token operator\">-></span>minNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"taskqueuecpp\"><a class=\"anchor\" href=\"#taskqueuecpp\">#</a> TaskQueue.cpp</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"TaskQueue.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">TaskQueue</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">TaskQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">pthread_mutex_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m_mutex<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>TaskQueue<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">TaskQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">pthread_mutex_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">TaskQueue</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span>Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> task<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    m_queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将任务压入队列</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 重载添加任务队列</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">TaskQueue</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span>callback func<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> task<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建结构体，将所需要的函数和参数传入结构体，然后压入队列</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    task<span class=\"token punctuation\">.</span>function <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    task<span class=\"token punctuation\">.</span>arg <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    m_queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token class-name\">TaskQueue</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">takeTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_queue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        t <span class=\"token operator\">=</span> m_queue<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取头部节点</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        m_queue<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 弹出</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"调用测试\"><a class=\"anchor\" href=\"#调用测试\">#</a> 调用测试</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"threadpool.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">taskFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread %ld is working,number = %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">pthread_self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 创建线程池</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    ThreadPool <span class=\"token operator\">*</span>pool <span class=\"token operator\">=</span> <span class=\"token function\">threadPoolCreate</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> num <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token operator\">*</span>num <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 添加任务队列</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">threadPoolAdd</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">,</span>taskFunc<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">threadPoolISEmpty</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"销毁线程池 ing \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token function\">threadPoolDestroy</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"基于c11的跨平台线程池\"><a class=\"anchor\" href=\"#基于c11的跨平台线程池\">#</a> 基于 C++11 的跨平台线程池</h3>\n<h4 id=\"头文件-3\"><a class=\"anchor\" href=\"#头文件-3\">#</a> 头文件</h4>\n<h5 id=\"threadpoolh-2\"><a class=\"anchor\" href=\"#threadpoolh-2\">#</a> threadpool.h</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_THREADPOOL_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_THREADPOOL_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"TaskQueue.h\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"TaskQueue.cpp\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mutex></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;condition_variable></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 线程池类</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPool</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 默认构造函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">ThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">ThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 添加任务</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span>Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 获取忙线程的个数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getBusyNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 获取活着的线程个数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getAliveNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 工作的线程的任务函数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 管理者线程的任务函数</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">manager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    mutex m_lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    condition_variable m_notEmpty<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>thread<span class=\"token operator\">></span> m_threadIDs<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 工作线程</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    thread m_managerID<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 管理者线 程</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    TaskQueue<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> m_taskQ<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 任务队列</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> NUMBER <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">int</span> m_minNum<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 最小数量</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">int</span> m_maxNum<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 最大数量</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">int</span> m_busyNum<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 忙碌的线程</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">int</span> m_aliveNum<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存活的线程数</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">int</span> m_exitNum<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 要销毁的线程数</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">bool</span> m_shutdown <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 是否要销毁线程池</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h5 id=\"taskqueueh-2\"><a class=\"anchor\" href=\"#taskqueueh-2\">#</a> TaskQueue.h</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_TASKQUEUE_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_TASKQUEUE_H</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mutex></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;condition_variable></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 定义任务结构体 定义别名</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">using</span> callback <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 任务结构体</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Task</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">Task</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        function <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        arg <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 有参函数构造</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">Task</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>callback f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        function <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>arg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 类 函数指针</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    callback function<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 函数参数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    T<span class=\"token operator\">*</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 任务队列</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskQueue</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">TaskQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">TaskQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 添加任务</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span>Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span>callback func<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 取出一个任务</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">takeTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 获取当前队列中任务个数</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">inline</span> size_t <span class=\"token function\">taskNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 内联函数提高效率</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">return</span> m_queue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回队列个数</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">// 取任务和添加任务，加锁</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    mutex m_mutex<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 互斥锁</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">// 任务结构体的队列</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>queue<span class=\"token operator\">&lt;</span>Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span> m_queue<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 任务队列</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h4 id=\"实现函数-2\"><a class=\"anchor\" href=\"#实现函数-2\">#</a> 实现函数</h4>\n<h5 id=\"threadpoolcpp-2\"><a class=\"anchor\" href=\"#threadpoolcpp-2\">#</a> threadpool.cpp</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"threadPool.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 初始化线程池，需要的最小和最大数量参数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">ThreadPool</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minNum<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 实例化任务队列</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    m_taskQ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> TaskQueue<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 初始化线程池</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        m_minNum <span class=\"token operator\">=</span> minNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        m_maxNum <span class=\"token operator\">=</span> maxNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        m_busyNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        m_aliveNum <span class=\"token operator\">=</span> minNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        m_managerID <span class=\"token operator\">=</span> <span class=\"token function\">thread</span><span class=\"token punctuation\">(</span>manager<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        m_threadIDs<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>m_maxNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_minNum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            m_threadIDs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">thread</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>ThreadPool<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程进入退出程序 ....!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    m_shutdown <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 销毁管理者线程</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">//pthread_join(m_managerID, NULL);</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_managerID<span class=\"token punctuation\">.</span><span class=\"token function\">joinable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        m_managerID<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 唤醒所有消费者线程</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    m_notEmpty<span class=\"token punctuation\">.</span><span class=\"token function\">notify_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_maxNum<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_threadIDs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">joinable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            m_threadIDs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"线程退出完毕.....!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span>Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> task<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_shutdown<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 添加任务，不需要加锁，任务队列中有锁</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 调用 任务队列函数，从线程池中调用即可</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    m_taskQ<span class=\"token operator\">-></span><span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 唤醒工作的线程</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">//pthread_cond_signal (&amp;m_notEmpty); // 不是空的，会进行对应的任务处理</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    m_notEmpty<span class=\"token punctuation\">.</span><span class=\"token function\">notify_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getAliveNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">int</span> threadNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    threadNum <span class=\"token operator\">=</span> m_aliveNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">return</span> threadNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getBusyNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">int</span> busyNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    busyNum <span class=\"token operator\">=</span> m_busyNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    m_lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">return</span> busyNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token comment\">// 工作线程任务函数</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">worker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    ThreadPool<span class=\"token operator\">*</span> pool <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ThreadPool<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">// 一直不停的工作</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token comment\">// 访问任务队列 (共享资源) 加锁</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lk</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">// 判断任务队列是否为空，如果为空工作线程阻塞</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>m_taskQ<span class=\"token operator\">-></span><span class=\"token function\">taskNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>pool<span class=\"token operator\">-></span>m_shutdown<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"thread \"</span> <span class=\"token operator\">&lt;&lt;</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" waiting...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token comment\">// 阻塞线程</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token comment\">//pthread_cond_wait(&amp;pool->m_notEmpty, &amp;pool->m_lock);</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            pool<span class=\"token operator\">-></span>m_notEmpty<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>lk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token comment\">// 解除阻塞之后，判断是否要销毁线程</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>m_exitNum <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                pool<span class=\"token operator\">-></span>m_exitNum<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>m_aliveNum <span class=\"token operator\">></span> pool<span class=\"token operator\">-></span>m_minNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    pool<span class=\"token operator\">-></span>m_aliveNum<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"threadId :\"</span> <span class=\"token operator\">&lt;&lt;</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"exit ......\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                    lk<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token comment\">// 判断线程池是否被关闭了</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>m_shutdown<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"threadId :\"</span> <span class=\"token operator\">&lt;&lt;</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"exit ......\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token comment\">//lk.unlock();</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token comment\">// 从任务队列中取出一个任务</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> task <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>m_taskQ<span class=\"token operator\">-></span><span class=\"token function\">takeTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token comment\">// 工作的线程 + 1</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        pool<span class=\"token operator\">-></span>m_busyNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token comment\">// 线程池解锁</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        lk<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token comment\">// 执行任务</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"thread \"</span> <span class=\"token operator\">&lt;&lt;</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" start working...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token comment\">// 执行取出的函数</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        task<span class=\"token punctuation\">.</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token keyword\">delete</span> task<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        task<span class=\"token punctuation\">.</span>arg <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token comment\">// 任务处理结束</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"thread \"</span> <span class=\"token operator\">&lt;&lt;</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" end working...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        lk<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        pool<span class=\"token operator\">-></span>m_busyNum<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        lk<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token comment\">// 管理者线程任务函数</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">manager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    ThreadPool<span class=\"token operator\">*</span> pool <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ThreadPool<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token comment\">// 如果线程池没有关闭，就一直检测</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pool<span class=\"token operator\">-></span>m_shutdown<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token comment\">// 每隔 5s 检测一次</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep_for</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token comment\">// 取出线程池中的任务数和线程数量</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>        <span class=\"token comment\">//  取出工作的线程池数量</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        unique_lock<span class=\"token operator\">&lt;</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lk</span><span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>m_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        <span class=\"token keyword\">int</span> queueSize <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>m_taskQ<span class=\"token operator\">-></span><span class=\"token function\">taskNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        <span class=\"token keyword\">int</span> liveNum <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>m_aliveNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        <span class=\"token keyword\">int</span> busyNum <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span>m_busyNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        lk<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token comment\">// 创建线程</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token comment\">// 当前任务个数 > 存活的线程数 &amp;&amp; 存活的线程数 & lt; 最大线程个数</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queueSize <span class=\"token operator\">></span> liveNum <span class=\"token operator\">&amp;&amp;</span> liveNum <span class=\"token operator\">&lt;</span> pool<span class=\"token operator\">-></span>m_maxNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>            <span class=\"token comment\">// 线程池加锁</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>            lk<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pool<span class=\"token operator\">-></span>m_maxNum <span class=\"token operator\">&amp;&amp;</span> num <span class=\"token operator\">&lt;</span> NUMBER</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>                <span class=\"token operator\">&amp;&amp;</span> pool<span class=\"token operator\">-></span>m_aliveNum <span class=\"token operator\">&lt;</span> pool<span class=\"token operator\">-></span>m_maxNum<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pool<span class=\"token operator\">-></span>m_threadIDs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>                    <span class=\"token comment\">//pthread_create(&amp;pool->m_threadIDs[i], NULL, worker, pool);</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>                    pool<span class=\"token operator\">-></span>m_threadIDs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">thread</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span> pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>                    num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>                    pool<span class=\"token operator\">-></span>m_aliveNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>            lk<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        <span class=\"token comment\">// 销毁多余的线程</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>        <span class=\"token comment\">// 忙线程 * 2 &lt; 存活的线程数目 &amp;&amp; 存活的线程数 > 最小线程数量</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>busyNum <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> liveNum <span class=\"token operator\">&amp;&amp;</span> liveNum <span class=\"token operator\">></span> pool<span class=\"token operator\">-></span>m_minNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>            lk<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>            pool<span class=\"token operator\">-></span>m_exitNum <span class=\"token operator\">=</span> NUMBER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>            lk<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NUMBER<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>                pool<span class=\"token operator\">-></span>m_notEmpty<span class=\"token punctuation\">.</span><span class=\"token function\">notify_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"taskqueuecpp-2\"><a class=\"anchor\" href=\"#taskqueuecpp-2\">#</a> TaskQueue.cpp</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"TaskQueue.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">TaskQueue</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">TaskQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//pthread_mutex_init(&amp;m_mutex, NULL);</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>TaskQueue<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">TaskQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//pthread_mutex_destroy(&amp;m_mutex);</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">TaskQueue</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span>Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> task<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    m_mutex<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    m_queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将任务压入队列</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    m_mutex<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 重载添加任务队列</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">TaskQueue</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span>callback func<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    m_mutex<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> task<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建结构体，将所需要的函数和参数传入结构体，然后压入队列</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    task<span class=\"token punctuation\">.</span>function <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    task<span class=\"token punctuation\">.</span>arg <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    m_queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    m_mutex<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token class-name\">TaskQueue</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">takeTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    m_mutex<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_queue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        t <span class=\"token operator\">=</span> m_queue<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取头部节点</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        m_queue<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 弹出</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    m_mutex<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"测试代码调用\"><a class=\"anchor\" href=\"#测试代码调用\">#</a> 测试代码调用</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"threadPool.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"threadPool.cpp\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mutex></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;condition_variable></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">taskFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"thread\"</span> <span class=\"token operator\">&lt;&lt;</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is working, number =\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep_for</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 创建线程池</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    ThreadPool<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">pool</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//new 和 delete 对应</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 添加任务队列</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        pool<span class=\"token punctuation\">.</span><span class=\"token function\">addTask</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">Task</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>taskFunc<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep_for</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "C++开源库",
                "C++",
                "计算机科学",
                "C",
                "线程池"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-4/C%E5%91%98%E5%B7%A5%E5%B7%A5%E8%B5%84%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-4/C%E5%91%98%E5%B7%A5%E5%B7%A5%E8%B5%84%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "title": "C实现员工工资管理系统",
            "date_published": "2023-06-11T00:20:43.000Z",
            "content_html": "<h1 id=\"员工工资管理系统\"><a class=\"anchor\" href=\"#员工工资管理系统\">#</a> 员工工资管理系统</h1>\n<h2 id=\"实现功能\"><a class=\"anchor\" href=\"#实现功能\">#</a> 实现功能</h2>\n<blockquote>\n<ul>\n<li>程序中的数据存储到文件中。</li>\n<li>可以录入员工工资信息，格式如下:<br />\n(工号 (8 位) 姓名、部门、年份、月份、应发工资，实发工资)<br />\n 其中，实发工资 = 应发工资 - 税费，税费扣除方法请自行调查。实发工资由系统自动计算。</li>\n<li>输出所有员工工资信息。</li>\n</ul>\n<ul>\n<li>先按年份升序输出，同一年的工资信息按月份升序输出，同一月的工资信息按工号升序输出。</li>\n<li>先按部门降序输出，同一部门的工资信息按实发工资升序输出</li>\n</ul>\n<ul>\n<li>可以删除某个员工的工资信息。(删除时按工号删除)。</li>\n<li>工资查询\n<ul>\n<li>根据姓名查找该员工的工资信息，若有同名，则输出所有同名员工的工资信息。</li>\n<li>根据部门查找该部门的所有工资信息，并按实发工资降序 输出。</li>\n<li>根据所给的年份和月份，查询该月份所有员工的工资信息，按部门降序显示。</li>\n</ul>\n</li>\n<li>统计\n<ul>\n<li>统计每个员工入职以来的平均工资，并按升序输出统计信息。</li>\n<li>统计某年中，每个部门总工资最高的前三名和总工资最低的后三名，并输出统计信息。</li>\n<li>统计某年月每个部门所有员工的纳税总额，按部门升序显。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"头文件\"><a class=\"anchor\" href=\"#头文件\">#</a> 头文件</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 员工工资管理系统头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;wchar.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;io.h></span>  <span class=\"token comment\">// 判断文件是否存在</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">filename</span> <span class=\"token string\">\"staff.txt\"</span>  <span class=\"token comment\">// 保存的文件名称</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>* 存储方案</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>* 顺序依次为：年份，月份，部门，员工编号</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 工号</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 姓名</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">char</span> department<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 部门</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 年份</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 月份</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">float</span> salary<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 应发工资</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">float</span> realsalary<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 实发工资</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Employee<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 链表结构体</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tEmployee data<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 员工信息</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下一个节点指针</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Node<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>NodeList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 员工信息链表结构体</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 头结点</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 链表长度</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span>EmployeeList<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>LinkList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">average</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">float</span> a_salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">average</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span>average<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">salary</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">float</span> all_salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> department<span class=\"token punctuation\">;</span><span class=\"token comment\">// 部门</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">salary</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span>salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">// 纳税表  计算税率的时候可以初始化此表</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">//typedef </span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">// 初始化链表</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">// 存储所有用户数据</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>LinkList list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">InsertList</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">// 计算税费\t参数：工资</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">float</span> <span class=\"token function\">tax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">// 主菜单框架</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">menu_frame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">// 菜单底部框架</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">menu_bottom_frame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">// 对用输入进入子菜单进行分配</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">// 主菜单无参数输入，返回用户输入的子菜单系统</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">// 信息录入菜单</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">information_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">// 员工工资查询菜单</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">staff_search_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token comment\">// 删除员工信息菜单</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">delete_staff_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">// 工资查询菜单</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">staff_salary_search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">// 进入统计功能菜单</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">staff_statistics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token comment\">// 文件保存功能 将结构体文件保存到本地</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">save_staff</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">open_staff_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token comment\">// 输出链表</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\">// 输出链表</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\">// 按年月份升序 (同一月工号升序)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sort_month</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token comment\">// 按照部门降序，实发工资升序</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sort_department</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token comment\">// 根据员工工号删除员工的信息</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">delete_id</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token comment\">// 根据姓名搜索所有员工工资信息</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">search_name_salary</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\">// 查找部门所有员工信息，按实发工资降序</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token comment\">// 传入参数 部门</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">dept_staff</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> department<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token comment\">// 根据年月，按部门降序输出所有员工工资</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token comment\">// 参数链表，年份，月份</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">year_month_salary</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token comment\">// 统计部分</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token comment\">// 入职以来每个员工的平均工资，升序</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sort_id</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\">//TODO</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">every_staff_average_salary</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token comment\">// 根据年份，总工资前三名，和最后三名</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token comment\">// 根据部门输出员工信息，工资降序 得出前三名最高工资，最后三名最低</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">dept_max_min</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">// 参数 ：年月</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token comment\">// 输出 ：部门 纳税总额 </span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token comment\">// 部门升序输出</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token comment\">// 计算出每个人的纳税总额</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">year_month_tax_all</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"实现函数\"><a class=\"anchor\" href=\"#实现函数\">#</a> 实现函数</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 员工工资管理系统算法实现函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"head.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 根据主菜单用户输入，分配子系统</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token function\">main_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 对 cmd 页面信息进行清空</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">//printf (\"进入信息录入\");</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">information_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">//printf (\"进入员工信息查询\");</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token function\">staff_search_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">//printf (\"删除员工信息\");</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">delete_staff_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">//printf (\"工资查询\");</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token function\">staff_salary_search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token comment\">//printf (\"进入统计功能\");</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token function\">staff_statistics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t正在退出员工工资系统.....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t请重新输入！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">float</span> <span class=\"token function\">tax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> salary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token comment\">// 强制取整数</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token comment\">//int t_salary = (int)salary;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">float</span> tax_need<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 需要交的税额</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 使用 switch 根据不同工资计算出其所需要的交的 money</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t <span class=\"token comment\">// 参数必须为整形</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token comment\">// 除以 5000 根据其得出的结果，判断其税率区间</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">// 税率计算使用超额累进税率</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>salary <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\ttax_need <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>salary <span class=\"token operator\">></span> <span class=\"token number\">5000</span> <span class=\"token operator\">&amp;&amp;</span> salary <span class=\"token operator\">&lt;=</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\ttax_need <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>salary <span class=\"token operator\">-</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.03</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>salary <span class=\"token operator\">></span> <span class=\"token number\">8000</span> <span class=\"token operator\">&amp;&amp;</span> salary <span class=\"token operator\">&lt;=</span> <span class=\"token number\">17000</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token comment\">// 工资大于 8000 小于 17000</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token comment\">//5000~8000 按照 3% 税率，超过 8000 的部分按照 10%</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\ttax_need <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8000</span> <span class=\"token operator\">-</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.03</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>salary <span class=\"token operator\">-</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>salary <span class=\"token operator\">></span> <span class=\"token number\">17000</span> <span class=\"token operator\">&amp;&amp;</span> salary <span class=\"token operator\">&lt;=</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t<span class=\"token comment\">// 工资在 17000 到 30000 之间</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\ttax_need <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token operator\">-</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.03</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">17000</span> <span class=\"token operator\">-</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>salary <span class=\"token operator\">-</span> <span class=\"token number\">17000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>salary <span class=\"token operator\">></span> <span class=\"token number\">30000</span> <span class=\"token operator\">&amp;&amp;</span> salary <span class=\"token operator\">&lt;=</span> <span class=\"token number\">40000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token comment\">// 工资在 30000 到 40000 之间</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\ttax_need <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8000</span> <span class=\"token operator\">-</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.03</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">17000</span> <span class=\"token operator\">-</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">30000</span> <span class=\"token operator\">-</span> <span class=\"token number\">17000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.2</span> </pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>salary <span class=\"token operator\">-</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>salary <span class=\"token operator\">></span> <span class=\"token number\">40000</span> <span class=\"token operator\">&amp;&amp;</span> salary <span class=\"token operator\">&lt;=</span> <span class=\"token number\">60000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t<span class=\"token comment\">// 工资在 4 万 到 6 万之间</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\ttax_need <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8000</span> <span class=\"token operator\">-</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.03</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">17000</span> <span class=\"token operator\">-</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">30000</span> <span class=\"token operator\">-</span> <span class=\"token number\">17000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.24</span> </pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">40000</span> <span class=\"token operator\">-</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.25</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>salary <span class=\"token operator\">-</span> <span class=\"token number\">40000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>salary <span class=\"token operator\">></span> <span class=\"token number\">60000</span> <span class=\"token operator\">&amp;&amp;</span> salary <span class=\"token operator\">&lt;=</span> <span class=\"token number\">85000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token comment\">// 工资在 6 万 到 8.5 万之间</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\ttax_need <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8000</span> <span class=\"token operator\">-</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.03</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">17000</span> <span class=\"token operator\">-</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">30000</span> <span class=\"token operator\">-</span> <span class=\"token number\">17000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.2</span> </pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">40000</span> <span class=\"token operator\">-</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.25</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60000</span> <span class=\"token operator\">-</span> <span class=\"token number\">40000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.3</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>salary <span class=\"token operator\">-</span> <span class=\"token number\">60000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.35</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>salary <span class=\"token operator\">></span> <span class=\"token number\">85000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token comment\">// 工资大于 8.5 万的部分 45%</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\ttax_need <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8000</span> <span class=\"token operator\">-</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.03</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">17000</span> <span class=\"token operator\">-</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">30000</span> <span class=\"token operator\">-</span> <span class=\"token number\">17000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.2</span> </pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">40000</span> <span class=\"token operator\">-</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.25</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60000</span> <span class=\"token operator\">-</span> <span class=\"token number\">40000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.3</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">85000</span> <span class=\"token operator\">-</span> <span class=\"token number\">60000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.35</span> </pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>salary <span class=\"token operator\">-</span> <span class=\"token number\">85000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.45</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token keyword\">return</span> tax_need<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\">// 将节点数据插入到 list 表中</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">InsertList</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\tNode <span class=\"token operator\">*</span>n_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\tn_list <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\tn_list<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\tLinkList listIsert <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token comment\">//list 中的总长度 + 1</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listIsert<span class=\"token operator\">-></span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\tlistIsert<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\tlistIsert<span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> n_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\tNode<span class=\"token operator\">*</span> N_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>NodeList<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>NodeList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\tN_list <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\tN_list <span class=\"token operator\">=</span> listIsert<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token comment\">// 根据 n 的信息判断插入位置</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> listIsert<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n_list<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;=</span> N_list<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\tn_list<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> N_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t\t<span class=\"token comment\">//N_list = &amp;n;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t\tlistIsert<span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> n_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t\tlistIsert<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t<span class=\"token comment\">//TODO</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\t<span class=\"token comment\">//else if (n.data.id > N_list->data.id &amp;&amp;  N_list->next != NULL)</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n_list<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">></span> N_list<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\tn_list<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> N_list<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t\tN_list<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> n_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t\tlistIsert<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\t\tN_list <span class=\"token operator\">=</span> N_list<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 往后循环</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t<span class=\"token comment\">//li->head->next = N_list;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">save_staff</span><span class=\"token punctuation\">(</span>LinkList list_file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t<span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t<span class=\"token comment\">//TODO 保存文件</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\tFILE<span class=\"token operator\">*</span> fp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\tfp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 文件以只读的形式</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fp <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t<span class=\"token comment\">// 根据 ID 进行排序保存</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t<span class=\"token function\">sort_id</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t<span class=\"token comment\">// 将头文件存入</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> list_file<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\tNodeList staff <span class=\"token operator\">=</span> list_file<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token comment\">// 写入数据</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d %s %s %d %d %.2f %.2f\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t\t\tstaff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">,</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">,</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>realsalary <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t\tstaff <span class=\"token operator\">=</span> staff<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\tfp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre></pre></td></tr><tr><td data-num=\"181\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">open_staff_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\t<span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 用 int 类型的变量存储 EOF</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\tFILE<span class=\"token operator\">*</span> fp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\tfp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span>  <span class=\"token operator\">*</span>staff <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>\t\tstaff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\t\tstaff<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d %s %s %d %d %f %f\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>realsalary<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>\t\t\t<span class=\"token function\">InsertList</span><span class=\"token punctuation\">(</span>staff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"203\"></td><td><pre></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>\t<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>\tfp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre></pre></td></tr><tr><td data-num=\"209\"></td><td><pre></pre></td></tr><tr><td data-num=\"210\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">menu_frame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t  欢迎进入员工工资管理系统！您可以进行以下操作！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t********************************************\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t               员工工资管理系统         \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t********************************************\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.0—————[0]退 出 | 返回 主 系 统             \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">menu_bottom_frame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[其它]返回上一层                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t====>请输入相对应的信息:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>\t<span class=\"token keyword\">int</span> choose<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>\t<span class=\"token function\">menu_frame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.1—————[1]信息录入                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2—————[2]查看员工信息            \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.3—————[3]删除员工信息            \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.4—————[4]工资查询                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.5—————[5]统计功能                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>\t<span class=\"token function\">menu_bottom_frame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>choose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>\t<span class=\"token keyword\">return</span> choose<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre><span class=\"token comment\">// 插入员工信息</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">information_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"243\"></td><td><pre>\t<span class=\"token comment\">// 定义员工节点</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>staff <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>\tstaff<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>\t<span class=\"token function\">menu_frame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.0*****员工信息目录:                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\\t\\t\\t\\t====>请输入对应的用户信息(空格分割):\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\t\\t\\t\\t\\tNo.1*****[1]年份:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\t\\t\\t\\t\\tNo.2*****[2]月份:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\t\\t\\t\\t\\tNo.2*****[3]部门(营销部,开发部,人事部):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\t\\t\\t\\t\\tNo.3*****[3]工号(8位):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\t\\t\\t\\t\\tNo.2*****[2]姓名:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\t\\t\\t\\t\\tNo.2*****[2]应发工资:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>\tstaff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>realsalary <span class=\"token operator\">=</span> staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">-</span> <span class=\"token function\">tax</span><span class=\"token punctuation\">(</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.1*****工号:%d\\n \\t\\t\\t\\t\\tNo.4*****姓名：%s\\n\\t\\t\\t\\t\\tNo.4*****部门: %s\\n \\t\\t\\t\\t\\tNo.4*****年份:%d\\n \\t\\t\\t\\t\\tNo.4*****月份:%d\\n \\t\\t\\t\\t\\tNo.4*****应发工资:%.2f\\n \\t\\t\\t\\t\\tNo.4*****实发工资:%.2f\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>\t\tstaff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">,</span> staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span> staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">,</span>staff<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>realsalary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>\t<span class=\"token keyword\">int</span> choose<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.1*****[1]保存继续添加信息\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[2]删除不保存，重新添加信息\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.3*****[3]退出不保存信息\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.4*****[其它]退出保存信息\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\\t\\t\\t\\t====>请输入对应的用户信息(空格分割):\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>choose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>choose<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>\t\t<span class=\"token comment\">// 插入输入函数，传入 Node 节点</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>\t\t<span class=\"token function\">InsertList</span><span class=\"token punctuation\">(</span>staff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>\t\t<span class=\"token function\">save_staff</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>\t\t<span class=\"token comment\">// 继续添加数据</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>\t\t<span class=\"token function\">information_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>\t\t<span class=\"token comment\">// 不保存继续添加数据</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>\t\t<span class=\"token function\">information_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>\t\t<span class=\"token comment\">// 不保存退回到主菜单</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>\t\t<span class=\"token function\">main_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>\t\t<span class=\"token comment\">// 插入输入函数，传入 Node 节点</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>\t\t<span class=\"token function\">InsertList</span><span class=\"token punctuation\">(</span> staff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>\t\t<span class=\"token function\">save_staff</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>\t\t<span class=\"token function\">main_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"298\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre><span class=\"token comment\">// 员工信息搜索菜单</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">staff_search_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>\t<span class=\"token keyword\">int</span> choose<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>\t<span class=\"token function\">menu_frame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.0*****请选择输出方式:                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.1*****[1]按年月份升序(同一月工号升序)                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[2]按照部门降序(实发工资升序)                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>\t<span class=\"token function\">menu_bottom_frame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>choose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>choose<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>\t\t<span class=\"token comment\">//TODO 按年月份升序 (同一月工号升序)</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>\t\t<span class=\"token function\">sort_month</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"316\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.1*****[0]退出系统                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[1]返回员工信息输出                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[3]返回主菜单                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t====>请输入相对应功能的编号(:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre>\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"326\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"327\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"328\"></td><td><pre>\t\t\t<span class=\"token function\">staff_search_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"329\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"330\"></td><td><pre>\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre>\t\t\t<span class=\"token function\">main_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"333\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre>\t\t<span class=\"token comment\">//TODO 按照部门降序 (实发工资升序) </span></pre></td></tr><tr><td data-num=\"335\"></td><td><pre>\t\t<span class=\"token comment\">// 按照部门降序 (实发工资升序)</span></pre></td></tr><tr><td data-num=\"336\"></td><td><pre>\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>\t\t<span class=\"token function\">sort_department</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre></pre></td></tr><tr><td data-num=\"339\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.1*****[0]退出系统                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"340\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[1]返回员工信息输出                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[3]返回主菜单                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"342\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t====>请输入相对应功能的编号(:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"344\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"345\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"346\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"347\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"348\"></td><td><pre>\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"349\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"351\"></td><td><pre>\t\t\t<span class=\"token function\">staff_search_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"352\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"353\"></td><td><pre>\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"354\"></td><td><pre>\t\t\t<span class=\"token function\">main_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"355\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"356\"></td><td><pre></pre></td></tr><tr><td data-num=\"357\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"358\"></td><td><pre>\t\t<span class=\"token comment\">// 返回上一层</span></pre></td></tr><tr><td data-num=\"359\"></td><td><pre>\t\t<span class=\"token function\">main_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"360\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"361\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"362\"></td><td><pre><span class=\"token comment\">// 删除员工信息菜单</span></pre></td></tr><tr><td data-num=\"363\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">delete_staff_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"364\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"365\"></td><td><pre>\t<span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 员工 if</span></pre></td></tr><tr><td data-num=\"366\"></td><td><pre>\t<span class=\"token function\">menu_frame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"367\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[0]返回上一层                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"368\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[工号]要删除的员工工号:       \\n \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"369\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"370\"></td><td><pre>\t<span class=\"token function\">menu_bottom_frame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"372\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"373\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"374\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"375\"></td><td><pre>\t\t<span class=\"token comment\">// 返回主菜单</span></pre></td></tr><tr><td data-num=\"376\"></td><td><pre>\t\t<span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"377\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"378\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"379\"></td><td><pre>\t\t<span class=\"token comment\">// 根据工号删除相应的员工信息</span></pre></td></tr><tr><td data-num=\"380\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除员工信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"381\"></td><td><pre>\t\t<span class=\"token comment\">// 进入删除员工处理，传入参数 id</span></pre></td></tr><tr><td data-num=\"382\"></td><td><pre>\t\t<span class=\"token function\">delete_id</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"383\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"384\"></td><td><pre></pre></td></tr><tr><td data-num=\"385\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"386\"></td><td><pre></pre></td></tr><tr><td data-num=\"387\"></td><td><pre></pre></td></tr><tr><td data-num=\"388\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"389\"></td><td><pre><span class=\"token comment\">// 员工工资查询菜单</span></pre></td></tr><tr><td data-num=\"390\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">staff_salary_search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"391\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"392\"></td><td><pre>\t<span class=\"token keyword\">int</span> choose<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"393\"></td><td><pre>\t<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"394\"></td><td><pre>\t<span class=\"token function\">menu_frame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"395\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.0*****请选择输出方式:                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"396\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.1*****[1]根据姓名查询(同名全部输出)                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"397\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[2]根据部门查询(实发工资降序)                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"398\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[3]根据年月查询(月份部门降序)                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"399\"></td><td><pre>\t<span class=\"token function\">menu_bottom_frame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"400\"></td><td><pre>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"401\"></td><td><pre>\t<span class=\"token keyword\">char</span> department<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"402\"></td><td><pre>\t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"403\"></td><td><pre>\t<span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"404\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>choose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"405\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>choose<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"406\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"407\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"408\"></td><td><pre>\t\t<span class=\"token comment\">// 根据姓名查询 (同名全部输出) </span></pre></td></tr><tr><td data-num=\"409\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\\t\\t\\t\\t====>请输入您要查询的员工姓名:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"410\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"411\"></td><td><pre>\t\t<span class=\"token function\">search_name_salary</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"412\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\\t\\t\\t\\t\\tNo.1*****[0]退出系统                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"413\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[1]返回上一级                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"414\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[3]返回主菜单                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"415\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t====>请输入相对应功能的编号(:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"416\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"417\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"418\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"419\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"420\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"421\"></td><td><pre>\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"422\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"423\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"424\"></td><td><pre>\t\t\t<span class=\"token function\">staff_salary_search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"425\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"426\"></td><td><pre>\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"427\"></td><td><pre>\t\t\t<span class=\"token function\">main_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"428\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"429\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"430\"></td><td><pre></pre></td></tr><tr><td data-num=\"431\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"432\"></td><td><pre>\t\t<span class=\"token comment\">// 根据部门查询 (实发工资降序)  </span></pre></td></tr><tr><td data-num=\"433\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\\t\\t\\t\\t====>请输入您要查询的部门:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"434\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>department<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"435\"></td><td><pre>\t\t<span class=\"token function\">dept_staff</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> department<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"436\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\\t\\t\\t\\t\\tNo.1*****[0]退出系统                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"437\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[1]返回上一级                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"438\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[3]返回主菜单                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"439\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t====>请输入相对应功能的编号(:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"440\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"441\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"442\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"443\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"444\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"445\"></td><td><pre>\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"446\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"447\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"448\"></td><td><pre>\t\t\t<span class=\"token function\">staff_salary_search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"449\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"450\"></td><td><pre>\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"451\"></td><td><pre>\t\t\t<span class=\"token function\">main_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"452\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"453\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"454\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"455\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"456\"></td><td><pre>\t\t<span class=\"token comment\">// 根据年月查询 (月份部门降序)</span></pre></td></tr><tr><td data-num=\"457\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"458\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\\t\\t\\t\\t====>请输入您要查询的年份:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"459\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"460\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\t\\t\\t\\t====>请输入您要查询的月份:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"461\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"462\"></td><td><pre>\t\t<span class=\"token function\">year_month_salary</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span>year<span class=\"token punctuation\">,</span>month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"463\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\\t\\t\\t\\t\\tNo.1*****[0]退出系统                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"464\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[1]返回上一级                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"465\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[3]返回主菜单                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"466\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t====>请输入相对应功能的编号(:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"467\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"468\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"469\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"470\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"471\"></td><td><pre>\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"472\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"473\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"474\"></td><td><pre>\t\t\t<span class=\"token function\">staff_salary_search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"475\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"476\"></td><td><pre>\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"477\"></td><td><pre>\t\t\t<span class=\"token function\">main_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"478\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"479\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"480\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"481\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"482\"></td><td><pre>\t\t<span class=\"token comment\">// 返回主菜单</span></pre></td></tr><tr><td data-num=\"483\"></td><td><pre>\t\t<span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"484\"></td><td><pre></pre></td></tr><tr><td data-num=\"485\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"486\"></td><td><pre></pre></td></tr><tr><td data-num=\"487\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"488\"></td><td><pre></pre></td></tr><tr><td data-num=\"489\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"490\"></td><td><pre><span class=\"token comment\">// 员工工资统计</span></pre></td></tr><tr><td data-num=\"491\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">staff_statistics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"492\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"493\"></td><td><pre>\t<span class=\"token keyword\">int</span> choose<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"494\"></td><td><pre>\t<span class=\"token keyword\">int</span> year <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"495\"></td><td><pre>\t<span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"496\"></td><td><pre>\t<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"497\"></td><td><pre>\t<span class=\"token function\">menu_frame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"498\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.0*****请选择输出方式:                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"499\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.1*****[1]每个员工平均工资(升序)                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"500\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[2]年份工资前三名和后三名                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"501\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[3]某年月每个部门纳税总额(按部门升序显示)                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"502\"></td><td><pre>\t<span class=\"token function\">menu_bottom_frame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"503\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>choose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"504\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>choose<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"505\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"506\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"507\"></td><td><pre>\t\t<span class=\"token comment\">// 每个员工平均工资 (升序)</span></pre></td></tr><tr><td data-num=\"508\"></td><td><pre>\t\t<span class=\"token comment\">//sort_id(list);</span></pre></td></tr><tr><td data-num=\"509\"></td><td><pre>\t\t<span class=\"token function\">every_staff_average_salary</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"510\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\\t\\t\\t\\t\\tNo.1*****[0]退出系统                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"511\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[1]返回上一级                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"512\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[3]返回主菜单                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"513\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t====>请输入相对应功能的编号(:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"514\"></td><td><pre></pre></td></tr><tr><td data-num=\"515\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"516\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"517\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"518\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"519\"></td><td><pre>\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"520\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"521\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"522\"></td><td><pre>\t\t\t<span class=\"token function\">staff_statistics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"523\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"524\"></td><td><pre>\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"525\"></td><td><pre>\t\t\t<span class=\"token function\">main_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"526\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"527\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"528\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"529\"></td><td><pre>\t\t<span class=\"token comment\">// 年份工资前三名和后三名</span></pre></td></tr><tr><td data-num=\"530\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\\t\\t\\t\\t====>请输入您要查询的年份:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"531\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"532\"></td><td><pre>\t\t<span class=\"token function\">dept_max_min</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"533\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\\t\\t\\t\\t\\tNo.1*****[0]退出系统                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"534\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[1]返回上一级                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"535\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[3]返回主菜单                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"536\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t====>请输入相对应功能的编号(:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"537\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"538\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"539\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"540\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"541\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"542\"></td><td><pre>\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"543\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"544\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"545\"></td><td><pre>\t\t\t<span class=\"token function\">staff_statistics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"546\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"547\"></td><td><pre>\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"548\"></td><td><pre>\t\t\t<span class=\"token function\">main_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"549\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"550\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"551\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"552\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"553\"></td><td><pre>\t\t<span class=\"token comment\">//TODO 某年月每个部门纳税总额 (按部门升序显示)</span></pre></td></tr><tr><td data-num=\"554\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\\t\\t\\t\\t====>请输入您要查询的年份:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"555\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"556\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\t\\t\\t\\t====>请输入您要查询的月份:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"557\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"558\"></td><td><pre>\t\t<span class=\"token function\">year_month_tax_all</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span>year<span class=\"token punctuation\">,</span> month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"559\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\\t\\t\\t\\t\\tNo.1*****[0]退出系统                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"560\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[1]返回上一级                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"561\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\tNo.2*****[3]返回主菜单                \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"562\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t====>请输入相对应功能的编号(:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"563\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"564\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"565\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"566\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"567\"></td><td><pre>\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"568\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"569\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"570\"></td><td><pre>\t\t\t<span class=\"token function\">staff_statistics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"571\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"572\"></td><td><pre>\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"573\"></td><td><pre>\t\t\t<span class=\"token function\">main_menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"574\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"575\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"576\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"577\"></td><td><pre>\t\t<span class=\"token comment\">// 返回主菜单</span></pre></td></tr><tr><td data-num=\"578\"></td><td><pre>\t\t<span class=\"token function\">menu</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"579\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"580\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"581\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"582\"></td><td><pre><span class=\"token comment\">// 对链表输出</span></pre></td></tr><tr><td data-num=\"583\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"584\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"585\"></td><td><pre>\tNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"586\"></td><td><pre>\tp <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"587\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"588\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"589\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t\\t%d %s %s %d %d %.2f %.2f\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>realsalary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"590\"></td><td><pre>\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"591\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"592\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"593\"></td><td><pre><span class=\"token comment\">// 根据年份月份工号排序</span></pre></td></tr><tr><td data-num=\"594\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sort_month</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"595\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"596\"></td><td><pre>\t<span class=\"token comment\">// 对 list 数据从首位开始，另一个依次向后，根据年份，月份，工号的顺序，若比首位小，两者交换顺序，依次类推到最后实现排序</span></pre></td></tr><tr><td data-num=\"597\"></td><td><pre>\tNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> q<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 节点复制保存排序后的结果，q 负责一直向后寻找小值替换 p，temp 为中间值</span></pre></td></tr><tr><td data-num=\"598\"></td><td><pre>\ttemp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"599\"></td><td><pre>\tp <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 的地址将使用 list 的地址</span></pre></td></tr><tr><td data-num=\"600\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"601\"></td><td><pre>\t<span class=\"token comment\">//while(p !=NULL)</span></pre></td></tr><tr><td data-num=\"602\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"603\"></td><td><pre>\t\tq <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//q 指向下一个节点</span></pre></td></tr><tr><td data-num=\"604\"></td><td><pre>\t\t<span class=\"token comment\">//q 负责一直向后循环寻找最小值与 q 所在位置替换</span></pre></td></tr><tr><td data-num=\"605\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"606\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"607\"></td><td><pre>\t\t\t<span class=\"token comment\">// 如果条件满足，则替换，否则</span></pre></td></tr><tr><td data-num=\"608\"></td><td><pre>\t\t\t<span class=\"token comment\">//q 的年份小于 p</span></pre></td></tr><tr><td data-num=\"609\"></td><td><pre>\t\t\t<span class=\"token comment\">// 或者 q p 年份相等，但是月份 q 小月 p</span></pre></td></tr><tr><td data-num=\"610\"></td><td><pre>\t\t\t<span class=\"token comment\">// 年月相等但是 q 的 id 小于 p 调换位置</span></pre></td></tr><tr><td data-num=\"611\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>year <span class=\"token operator\">&lt;</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>year <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>year <span class=\"token operator\">==</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>year <span class=\"token operator\">&amp;&amp;</span> q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>month <span class=\"token operator\">&lt;</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>year <span class=\"token operator\">==</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>year <span class=\"token operator\">&amp;&amp;</span> q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>month <span class=\"token operator\">==</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>month <span class=\"token operator\">&amp;&amp;</span> q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"612\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"613\"></td><td><pre></pre></td></tr><tr><td data-num=\"614\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//q p 通过 temp 调换位置</span></pre></td></tr><tr><td data-num=\"615\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 节点交换</span></pre></td></tr><tr><td data-num=\"616\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//temp = q;</span></pre></td></tr><tr><td data-num=\"617\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//q = q->next;</span></pre></td></tr><tr><td data-num=\"618\"></td><td><pre>\t\t\t\t<span class=\"token comment\">////p->next = temp->next;   // 切记，该变了 list 的文件</span></pre></td></tr><tr><td data-num=\"619\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//p->next = q;</span></pre></td></tr><tr><td data-num=\"620\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//temp->next = p;</span></pre></td></tr><tr><td data-num=\"621\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//p = temp;</span></pre></td></tr><tr><td data-num=\"622\"></td><td><pre>\t\t\t\ttemp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"623\"></td><td><pre>\t\t\t\tp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"624\"></td><td><pre>\t\t\t\tq<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"625\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 核心代码</span></pre></td></tr><tr><td data-num=\"626\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"627\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"628\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"629\"></td><td><pre>\t\t\t\tq <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"630\"></td><td><pre>\t\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"631\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"632\"></td><td><pre></pre></td></tr><tr><td data-num=\"633\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"634\"></td><td><pre>\t\tp <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"635\"></td><td><pre>\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 首节点最小，往后走继续判断</span></pre></td></tr><tr><td data-num=\"636\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"637\"></td><td><pre>\t<span class=\"token function\">printList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"638\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"639\"></td><td><pre><span class=\"token comment\">// 按照部分降序，同部门工资升序排序</span></pre></td></tr><tr><td data-num=\"640\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sort_department</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"641\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"642\"></td><td><pre>\t<span class=\"token comment\">// 思路：比较部门以及工资数</span></pre></td></tr><tr><td data-num=\"643\"></td><td><pre>\tNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> q<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 节点复制保存排序后的结果，q 负责一直向后寻找小值替换 p，temp 为中间值</span></pre></td></tr><tr><td data-num=\"644\"></td><td><pre>\tp <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"645\"></td><td><pre>\ttemp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"646\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"647\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"648\"></td><td><pre>\t\tq <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//q 指向下一个节点</span></pre></td></tr><tr><td data-num=\"649\"></td><td><pre>\t\t<span class=\"token comment\">//q 负责一直向后循环寻找最小值与 q 所在位置替换</span></pre></td></tr><tr><td data-num=\"650\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"651\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"652\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">wcscmp</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">,</span> q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span>  </pre></td></tr><tr><td data-num=\"653\"></td><td><pre>\t\t\t\t<span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token function\">wcscmp</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">,</span> q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>realsalary <span class=\"token operator\">&lt;</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>realsalary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"654\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"655\"></td><td><pre></pre></td></tr><tr><td data-num=\"656\"></td><td><pre>\t\t\t\ttemp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"657\"></td><td><pre>\t\t\t\tp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"658\"></td><td><pre>\t\t\t\tq<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"659\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"660\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"661\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"662\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"663\"></td><td><pre>\t\t\t\tq <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"664\"></td><td><pre>\t\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"665\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"666\"></td><td><pre></pre></td></tr><tr><td data-num=\"667\"></td><td><pre></pre></td></tr><tr><td data-num=\"668\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"669\"></td><td><pre>\t\tp <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"670\"></td><td><pre>\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 首节点最小，往后走继续判断</span></pre></td></tr><tr><td data-num=\"671\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"672\"></td><td><pre>\t<span class=\"token function\">printList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"673\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"674\"></td><td><pre><span class=\"token comment\">// 根据工号删除员工的所有信息</span></pre></td></tr><tr><td data-num=\"675\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">delete_id</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"676\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"677\"></td><td><pre>\t<span class=\"token comment\">// 先删除</span></pre></td></tr><tr><td data-num=\"678\"></td><td><pre>\tNode<span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>pre<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 节点复制保存排序后的结果，q 负责一直向后寻找小值替换 p，temp 为中间值</span></pre></td></tr><tr><td data-num=\"679\"></td><td><pre>\t<span class=\"token comment\">//Employee *temp;</span></pre></td></tr><tr><td data-num=\"680\"></td><td><pre>\t<span class=\"token comment\">//H = list->head;</span></pre></td></tr><tr><td data-num=\"681\"></td><td><pre>\td <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"682\"></td><td><pre>\tpre <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"683\"></td><td><pre>\t<span class=\"token keyword\">int</span> lenght <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"684\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"685\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"686\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"687\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"688\"></td><td><pre>\t\t\tpre<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"689\"></td><td><pre>\t\t\tlist<span class=\"token operator\">-></span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"690\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"691\"></td><td><pre>\t\tpre <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"692\"></td><td><pre>\t\td <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"693\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"694\"></td><td><pre>\t<span class=\"token comment\">// 保存本地</span></pre></td></tr><tr><td data-num=\"695\"></td><td><pre>\t<span class=\"token function\">save_staff</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"696\"></td><td><pre></pre></td></tr><tr><td data-num=\"697\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"698\"></td><td><pre><span class=\"token comment\">// 根据员工姓名输出选定的员工工资信息</span></pre></td></tr><tr><td data-num=\"699\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">search_name_salary</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"700\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"701\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"702\"></td><td><pre>\tNode<span class=\"token operator\">*</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"703\"></td><td><pre>\ts <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"704\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"705\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"706\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"707\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"708\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\t\\t\\t\\t====>  %s在%d年%d月在%s的实发工资为%.2f\"</span><span class=\"token punctuation\">,</span>s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span>s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span>s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">,</span>s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>realsalary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"709\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"710\"></td><td><pre>\t\ts <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"711\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"712\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"713\"></td><td><pre><span class=\"token comment\">// 查找部门所有员工信息，按实发工资降序</span></pre></td></tr><tr><td data-num=\"714\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">dept_staff</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> department<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"715\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"716\"></td><td><pre>\tNode<span class=\"token operator\">*</span> d<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"717\"></td><td><pre>\td <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"718\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> emp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"719\"></td><td><pre>\t<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"720\"></td><td><pre>\temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"721\"></td><td><pre>\ts <span class=\"token operator\">=</span> emp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"722\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"723\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"724\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">,</span> department<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"725\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"726\"></td><td><pre>\t\t\t<span class=\"token comment\">// 将对应的部门加入链表</span></pre></td></tr><tr><td data-num=\"727\"></td><td><pre>\t\t\tNode <span class=\"token operator\">*</span>temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"728\"></td><td><pre>\t\t\ttemp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"729\"></td><td><pre>\t\t\ttemp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"730\"></td><td><pre>\t\t\ts<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"731\"></td><td><pre>\t\t\ts <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"732\"></td><td><pre>\t\t\tlength<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"733\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"734\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"735\"></td><td><pre>\t\td <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"736\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"737\"></td><td><pre>\t<span class=\"token comment\">// 将 emp 按照实际工资降序</span></pre></td></tr><tr><td data-num=\"738\"></td><td><pre>\tNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> q<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 节点复制保存排序后的结果，q 负责一直向后寻找小值替换 p，temp 为中间值</span></pre></td></tr><tr><td data-num=\"739\"></td><td><pre>\ttemp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"740\"></td><td><pre>\tp <span class=\"token operator\">=</span> emp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"741\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"742\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"743\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"744\"></td><td><pre>\t\tq <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//q 指向下一个节点</span></pre></td></tr><tr><td data-num=\"745\"></td><td><pre>\t\t<span class=\"token comment\">//q 负责一直向后循环寻找最小值与 q 所在位置替换</span></pre></td></tr><tr><td data-num=\"746\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"747\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"748\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>realsalary <span class=\"token operator\">&lt;</span> q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>realsalary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"749\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"750\"></td><td><pre>\t\t\t\ttemp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"751\"></td><td><pre>\t\t\t\tp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"752\"></td><td><pre>\t\t\t\tq<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"753\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 核心代码</span></pre></td></tr><tr><td data-num=\"754\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"755\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"756\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"757\"></td><td><pre>\t\t\t\tq <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"758\"></td><td><pre>\t\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"759\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"760\"></td><td><pre></pre></td></tr><tr><td data-num=\"761\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"762\"></td><td><pre>\t\tp <span class=\"token operator\">=</span> emp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"763\"></td><td><pre>\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 首节点最小，往后走继续判断</span></pre></td></tr><tr><td data-num=\"764\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"765\"></td><td><pre>\t<span class=\"token comment\">// 输出 emp</span></pre></td></tr><tr><td data-num=\"766\"></td><td><pre>\temp <span class=\"token operator\">=</span> emp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"767\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>emp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"768\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"769\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\t\\t\\t\\t====>  %s在%d年%d月在%s的实发工资为%.2f\"</span><span class=\"token punctuation\">,</span> emp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> emp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span> emp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> emp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">,</span> emp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>realsalary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"770\"></td><td><pre>\t\temp <span class=\"token operator\">=</span> emp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"771\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"772\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"773\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"774\"></td><td><pre></pre></td></tr><tr><td data-num=\"775\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">year_month_salary</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"776\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"777\"></td><td><pre>\tNode<span class=\"token operator\">*</span> d<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"778\"></td><td><pre>\td <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"779\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> emp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"780\"></td><td><pre>\t<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"781\"></td><td><pre>\temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"782\"></td><td><pre>\ts <span class=\"token operator\">=</span> emp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"783\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"784\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"785\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>year<span class=\"token operator\">==</span>year <span class=\"token operator\">&amp;&amp;</span> d<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>month <span class=\"token operator\">==</span> month<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"786\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"787\"></td><td><pre>\t\t\t<span class=\"token comment\">// 将对应的部门加入链表</span></pre></td></tr><tr><td data-num=\"788\"></td><td><pre>\t\t\tNode<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"789\"></td><td><pre>\t\t\ttemp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"790\"></td><td><pre>\t\t\ttemp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"791\"></td><td><pre>\t\t\ts<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"792\"></td><td><pre>\t\t\ts <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"793\"></td><td><pre>\t\t\tlength<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"794\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"795\"></td><td><pre></pre></td></tr><tr><td data-num=\"796\"></td><td><pre>\t\td <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"797\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"798\"></td><td><pre>\t<span class=\"token comment\">// 将 emp 按照实际工资降序</span></pre></td></tr><tr><td data-num=\"799\"></td><td><pre>\tNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> q<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 节点复制保存排序后的结果，q 负责一直向后寻找小值替换 p，temp 为中间值</span></pre></td></tr><tr><td data-num=\"800\"></td><td><pre>\ttemp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"801\"></td><td><pre>\tp <span class=\"token operator\">=</span> emp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"802\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"803\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"804\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"805\"></td><td><pre>\t\tq <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//q 指向下一个节点</span></pre></td></tr><tr><td data-num=\"806\"></td><td><pre>\t\t<span class=\"token comment\">//q 负责一直向后循环寻找最小值与 q 所在位置替换</span></pre></td></tr><tr><td data-num=\"807\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"808\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"809\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">,</span> q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"810\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"811\"></td><td><pre>\t\t\t\ttemp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"812\"></td><td><pre>\t\t\t\tp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"813\"></td><td><pre>\t\t\t\tq<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"814\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 核心代码</span></pre></td></tr><tr><td data-num=\"815\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"816\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"817\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"818\"></td><td><pre>\t\t\t\tq <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"819\"></td><td><pre>\t\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"820\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"821\"></td><td><pre></pre></td></tr><tr><td data-num=\"822\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"823\"></td><td><pre>\t\tp <span class=\"token operator\">=</span> emp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"824\"></td><td><pre>\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 首节点最小，往后走继续判断</span></pre></td></tr><tr><td data-num=\"825\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"826\"></td><td><pre>\t<span class=\"token comment\">// 输出 emp</span></pre></td></tr><tr><td data-num=\"827\"></td><td><pre>\temp <span class=\"token operator\">=</span> emp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"828\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>emp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"829\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"830\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\t\\t\\t\\t====>  %s在%d年%d月在%s的实发工资为%.2f\"</span><span class=\"token punctuation\">,</span> emp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> emp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span> emp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> emp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">,</span> emp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>realsalary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"831\"></td><td><pre>\t\temp <span class=\"token operator\">=</span> emp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"832\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"833\"></td><td><pre></pre></td></tr><tr><td data-num=\"834\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"835\"></td><td><pre><span class=\"token comment\">// 根据 id 进行排序</span></pre></td></tr><tr><td data-num=\"836\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sort_id</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"837\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"838\"></td><td><pre>\tNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> q<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 节点复制保存排序后的结果，q 负责一直向后寻找小值替换 p，temp 为中间值</span></pre></td></tr><tr><td data-num=\"839\"></td><td><pre>\tp <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"840\"></td><td><pre>\ttemp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"841\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"842\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"843\"></td><td><pre>\t\tq <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//q 指向下一个节点</span></pre></td></tr><tr><td data-num=\"844\"></td><td><pre>\t\t<span class=\"token comment\">//q 负责一直向后循环寻找最小值与 q 所在位置替换</span></pre></td></tr><tr><td data-num=\"845\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"846\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"847\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">></span> q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"848\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"849\"></td><td><pre></pre></td></tr><tr><td data-num=\"850\"></td><td><pre>\t\t\t\ttemp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"851\"></td><td><pre>\t\t\t\tp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"852\"></td><td><pre>\t\t\t\tq<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"853\"></td><td><pre></pre></td></tr><tr><td data-num=\"854\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"855\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"856\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"857\"></td><td><pre>\t\t\t\tq <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"858\"></td><td><pre>\t\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"859\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"860\"></td><td><pre></pre></td></tr><tr><td data-num=\"861\"></td><td><pre></pre></td></tr><tr><td data-num=\"862\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"863\"></td><td><pre>\t\tp <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"864\"></td><td><pre>\t\t<span class=\"token comment\">//p = p->next; // 首节点最小，往后走继续判断</span></pre></td></tr><tr><td data-num=\"865\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"866\"></td><td><pre>\t<span class=\"token comment\">//printList(list);</span></pre></td></tr><tr><td data-num=\"867\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"868\"></td><td><pre><span class=\"token comment\">// 每个员工的平均工资</span></pre></td></tr><tr><td data-num=\"869\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">every_staff_average_salary</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"870\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"871\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">average</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>average<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>average<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"872\"></td><td><pre>\ts<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"873\"></td><td><pre>\tNode<span class=\"token operator\">*</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"874\"></td><td><pre>\taverage<span class=\"token operator\">*</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>average<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>average<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"875\"></td><td><pre>\ta<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"876\"></td><td><pre>\td <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"877\"></td><td><pre>\ta <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"878\"></td><td><pre>\t<span class=\"token comment\">// 根据 id 进行排序</span></pre></td></tr><tr><td data-num=\"879\"></td><td><pre>\t<span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"880\"></td><td><pre>\t<span class=\"token function\">sort_id</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"881\"></td><td><pre>\t<span class=\"token keyword\">float</span> total_salary <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"882\"></td><td><pre>\t<span class=\"token keyword\">int</span> total_month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"883\"></td><td><pre>\t<span class=\"token keyword\">float</span> average_salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"884\"></td><td><pre>\t<span class=\"token keyword\">int</span> p_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"885\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"886\"></td><td><pre>\t<span class=\"token keyword\">int</span> id_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"887\"></td><td><pre>\tid_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"888\"></td><td><pre>\t<span class=\"token comment\">// 根据顺序和规则计算出所有 Id 入职依赖的总收入 / 月数</span></pre></td></tr><tr><td data-num=\"889\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> d <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"890\"></td><td><pre>\t<span class=\"token comment\">//for(int i=0;i&lt;list->size;i++)</span></pre></td></tr><tr><td data-num=\"891\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"892\"></td><td><pre>\t\ttotal_salary <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"893\"></td><td><pre>\t\ttotal_month <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"894\"></td><td><pre>\t\tp_id <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"895\"></td><td><pre>\t\tname <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"896\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> p_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"897\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"898\"></td><td><pre>\t\t\ttotal_month<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算月份</span></pre></td></tr><tr><td data-num=\"899\"></td><td><pre>\t\t\ttotal_salary <span class=\"token operator\">=</span> total_salary <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算总工资</span></pre></td></tr><tr><td data-num=\"900\"></td><td><pre>\t\t\td <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"901\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"902\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"903\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"904\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"905\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"906\"></td><td><pre>\t\t<span class=\"token comment\">// 计算出平均工资</span></pre></td></tr><tr><td data-num=\"907\"></td><td><pre>\t\taverage_salary <span class=\"token operator\">=</span> total_salary <span class=\"token operator\">/</span> total_month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"908\"></td><td><pre>\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">average</span><span class=\"token operator\">*</span> lin_a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>average<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>average<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"909\"></td><td><pre>\t\tlin_a<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"910\"></td><td><pre>\t\tlin_a<span class=\"token operator\">-></span>id <span class=\"token operator\">=</span> p_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"911\"></td><td><pre>\t\tlin_a<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"912\"></td><td><pre>\t\tlin_a<span class=\"token operator\">-></span>a_salary <span class=\"token operator\">=</span> average_salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"913\"></td><td><pre>\t\ta<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> lin_a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"914\"></td><td><pre>\t\ta <span class=\"token operator\">=</span> a<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"915\"></td><td><pre>\t\tid_count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"916\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"917\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"918\"></td><td><pre>\t<span class=\"token comment\">// 对生成的平均工资结构体进行升序派别</span></pre></td></tr><tr><td data-num=\"919\"></td><td><pre>\taverage<span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> q<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 节点复制保存排序后的结果，q 负责一直向后寻找小值替换 p，temp 为中间值</span></pre></td></tr><tr><td data-num=\"920\"></td><td><pre>\tp <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"921\"></td><td><pre>\ttemp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>average<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>average<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"922\"></td><td><pre>\t<span class=\"token comment\">//while (p != NULL)</span></pre></td></tr><tr><td data-num=\"923\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>id_count<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"924\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"925\"></td><td><pre>\t\tq <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"926\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> id_count <span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"927\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"928\"></td><td><pre></pre></td></tr><tr><td data-num=\"929\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>a_salary <span class=\"token operator\">></span> q<span class=\"token operator\">-></span>a_salary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"930\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"931\"></td><td><pre></pre></td></tr><tr><td data-num=\"932\"></td><td><pre>\t\t\t\ttemp<span class=\"token operator\">-></span>id <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"933\"></td><td><pre>\t\t\t\ttemp<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"934\"></td><td><pre>\t\t\t\ttemp<span class=\"token operator\">-></span>a_salary <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>a_salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"935\"></td><td><pre>\t\t\t\tp<span class=\"token operator\">-></span>id <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"936\"></td><td><pre>\t\t\t\tp<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"937\"></td><td><pre>\t\t\t\tp<span class=\"token operator\">-></span>a_salary <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>a_salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"938\"></td><td><pre>\t\t\t\tq<span class=\"token operator\">-></span>id <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"939\"></td><td><pre>\t\t\t\tq<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"940\"></td><td><pre>\t\t\t\tq<span class=\"token operator\">-></span>a_salary <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>a_salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"941\"></td><td><pre>\t\t\t\tq <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"942\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">-></span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> q<span class=\"token operator\">-></span>a_salary <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"943\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"944\"></td><td><pre>\t\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"945\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"946\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"947\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"948\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"949\"></td><td><pre>\t\t\t\tq <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"950\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> q<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> q<span class=\"token operator\">-></span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> q<span class=\"token operator\">-></span>a_salary <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"951\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"952\"></td><td><pre>\t\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"953\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"954\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"955\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"956\"></td><td><pre>\t\tp <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"957\"></td><td><pre></pre></td></tr><tr><td data-num=\"958\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"959\"></td><td><pre>\t<span class=\"token comment\">// 对排序号的链表进行输出</span></pre></td></tr><tr><td data-num=\"960\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> id_count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"961\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"962\"></td><td><pre>\t\ts <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"963\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> s<span class=\"token operator\">-></span>a_salary <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"964\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"965\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t ID: %d,Name: %s,平均工资: %.2f\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">-></span>id<span class=\"token punctuation\">,</span> s<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> s<span class=\"token operator\">-></span>a_salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"966\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"967\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"968\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">dept_max_min</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"969\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"970\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">salary</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>salary<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"971\"></td><td><pre>\ts<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"972\"></td><td><pre>\tNode<span class=\"token operator\">*</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"973\"></td><td><pre>\tsalary<span class=\"token operator\">*</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>salary<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"974\"></td><td><pre>\ta<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"975\"></td><td><pre>\td <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"976\"></td><td><pre>\ta <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"977\"></td><td><pre>\t<span class=\"token comment\">// 根据 id 进行排序</span></pre></td></tr><tr><td data-num=\"978\"></td><td><pre>\t<span class=\"token function\">sort_id</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"979\"></td><td><pre>\t<span class=\"token keyword\">float</span> total_salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"980\"></td><td><pre>\t<span class=\"token keyword\">int</span> total_month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"981\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>department<span class=\"token punctuation\">;</span><span class=\"token comment\">// 部门</span></pre></td></tr><tr><td data-num=\"982\"></td><td><pre>\t<span class=\"token keyword\">int</span> p_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"983\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"984\"></td><td><pre>\t<span class=\"token keyword\">int</span> id_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"985\"></td><td><pre>\tid_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"986\"></td><td><pre>\t<span class=\"token comment\">// 计算部门，每个人的总工资，建立新的链表</span></pre></td></tr><tr><td data-num=\"987\"></td><td><pre>\t<span class=\"token comment\">// 根据顺序和规则计算出所有 Id 入职依赖的总收入 / 月数</span></pre></td></tr><tr><td data-num=\"988\"></td><td><pre></pre></td></tr><tr><td data-num=\"989\"></td><td><pre>\t\t<span class=\"token comment\">//for(int i=0;i&lt;list->size;i++)</span></pre></td></tr><tr><td data-num=\"990\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"991\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"992\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"993\"></td><td><pre>\t\ttotal_salary <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"994\"></td><td><pre>\t\ttotal_month <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"995\"></td><td><pre>\t\tp_id <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"996\"></td><td><pre>\t\tname <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"997\"></td><td><pre>\t\tdepartment <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"998\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> p_id <span class=\"token operator\">&amp;&amp;</span> d<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>year <span class=\"token operator\">==</span> year<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 加上年份，计算年份每个人的总工资</span></pre></td></tr><tr><td data-num=\"999\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"1000\"></td><td><pre>\t\t\ttotal_month<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算月份</span></pre></td></tr><tr><td data-num=\"1001\"></td><td><pre>\t\t\ttotal_salary <span class=\"token operator\">=</span> total_salary <span class=\"token operator\">+</span> d<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算总工资</span></pre></td></tr><tr><td data-num=\"1002\"></td><td><pre>\t\t\td <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1003\"></td><td><pre></pre></td></tr><tr><td data-num=\"1004\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"1005\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1006\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"1007\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>total_month <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"1008\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"1009\"></td><td><pre>\t\t\t<span class=\"token comment\">// 计算出平均工资</span></pre></td></tr><tr><td data-num=\"1010\"></td><td><pre>\t\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">salary</span><span class=\"token operator\">*</span> lin_a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>salary<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1011\"></td><td><pre>\t\t\tlin_a<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1012\"></td><td><pre>\t\t\tlin_a<span class=\"token operator\">-></span>id <span class=\"token operator\">=</span> p_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1013\"></td><td><pre>\t\t\tlin_a<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1014\"></td><td><pre>\t\t\tlin_a<span class=\"token operator\">-></span>department <span class=\"token operator\">=</span> department<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1015\"></td><td><pre>\t\t\tlin_a<span class=\"token operator\">-></span>all_salary <span class=\"token operator\">=</span> total_salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1016\"></td><td><pre>\t\t\ta<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> lin_a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1017\"></td><td><pre>\t\t\ta <span class=\"token operator\">=</span> a<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1018\"></td><td><pre>\t\t\tid_count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1019\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"1020\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"1021\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"1022\"></td><td><pre>\t\t\td <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1023\"></td><td><pre></pre></td></tr><tr><td data-num=\"1024\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"1025\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1026\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"1027\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"1028\"></td><td><pre>\tsalary<span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> q<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 节点复制保存排序后的结果，q 负责一直向后寻找小值替换 p，temp 为中间值</span></pre></td></tr><tr><td data-num=\"1029\"></td><td><pre>\tp <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1030\"></td><td><pre>\ttemp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>salary<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1031\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"1032\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"1033\"></td><td><pre>\t\tq <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//q 指向下一个节点</span></pre></td></tr><tr><td data-num=\"1034\"></td><td><pre>\t\t<span class=\"token comment\">//q 负责一直向后循环寻找最小值与 q 所在位置替换</span></pre></td></tr><tr><td data-num=\"1035\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"1036\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"1037\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">wcscmp</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>department<span class=\"token punctuation\">,</span> q<span class=\"token operator\">-></span>department<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"1038\"></td><td><pre>\t\t\t\t<span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token function\">wcscmp</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>department<span class=\"token punctuation\">,</span> q<span class=\"token operator\">-></span>department<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> q<span class=\"token operator\">-></span>all_salary <span class=\"token operator\">></span> p<span class=\"token operator\">-></span>all_salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"1039\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"1040\"></td><td><pre>\t\t\t\ttemp<span class=\"token operator\">-></span>id <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1041\"></td><td><pre>\t\t\t\ttemp<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1042\"></td><td><pre>\t\t\t\ttemp<span class=\"token operator\">-></span>department <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>department<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1043\"></td><td><pre>\t\t\t\ttemp<span class=\"token operator\">-></span>all_salary <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>all_salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1044\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"1045\"></td><td><pre>\t\t\t\tp<span class=\"token operator\">-></span>id <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1046\"></td><td><pre>\t\t\t\tp<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1047\"></td><td><pre>\t\t\t\tp<span class=\"token operator\">-></span>department <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>department<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1048\"></td><td><pre>\t\t\t\tp<span class=\"token operator\">-></span>all_salary <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>all_salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1049\"></td><td><pre></pre></td></tr><tr><td data-num=\"1050\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"1051\"></td><td><pre>\t\t\t\tq<span class=\"token operator\">-></span>id <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1052\"></td><td><pre>\t\t\t\tq<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1053\"></td><td><pre>\t\t\t\tq<span class=\"token operator\">-></span>department <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>department<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1054\"></td><td><pre>\t\t\t\tq<span class=\"token operator\">-></span>all_salary <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>all_salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1055\"></td><td><pre></pre></td></tr><tr><td data-num=\"1056\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"1057\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"1058\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"1059\"></td><td><pre>\t\t\t\tq <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1060\"></td><td><pre>\t\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1061\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"1062\"></td><td><pre></pre></td></tr><tr><td data-num=\"1063\"></td><td><pre></pre></td></tr><tr><td data-num=\"1064\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"1065\"></td><td><pre>\t\tp <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1066\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"1067\"></td><td><pre></pre></td></tr><tr><td data-num=\"1068\"></td><td><pre>\t<span class=\"token comment\">// 得出部门下，按照员工总工资得到的排序</span></pre></td></tr><tr><td data-num=\"1069\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> id_count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"1070\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"1071\"></td><td><pre>\t\ts <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1072\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> s<span class=\"token operator\">-></span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> s<span class=\"token operator\">-></span>all_salary <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"1073\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1074\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\t\\t\\tID: %d,Name: %s,部门: %s , 在%d年内总工资工资: %.2f\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">-></span>id<span class=\"token punctuation\">,</span> s<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> s<span class=\"token operator\">-></span>department<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">,</span> s<span class=\"token operator\">-></span>all_salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1075\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"1076\"></td><td><pre></pre></td></tr><tr><td data-num=\"1077\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"1078\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">year_month_tax_all</span><span class=\"token punctuation\">(</span>LinkList list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"1079\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"1080\"></td><td><pre>\t<span class=\"token comment\">// 找到此数据建立新的链表加入纳税总额 ，计算即可，</span></pre></td></tr><tr><td data-num=\"1081\"></td><td><pre>\t<span class=\"token keyword\">char</span> dept<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"人事部\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"营销部\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"开发部\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1082\"></td><td><pre>\t<span class=\"token keyword\">int</span> Tax<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1083\"></td><td><pre>\t<span class=\"token keyword\">int</span> Person_tax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 人事部</span></pre></td></tr><tr><td data-num=\"1084\"></td><td><pre>\t<span class=\"token keyword\">int</span> Sales_tax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 销售部</span></pre></td></tr><tr><td data-num=\"1085\"></td><td><pre>\t<span class=\"token keyword\">int</span> Develop_tax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 开发部</span></pre></td></tr><tr><td data-num=\"1086\"></td><td><pre>\t<span class=\"token comment\">// 计算出每个部门的纳税总额，部门升序，直接根据部门输出即可</span></pre></td></tr><tr><td data-num=\"1087\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"1088\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"1089\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"1090\"></td><td><pre>\t\t<span class=\"token comment\">// 遍历 List 求出对应部门的总纳税额</span></pre></td></tr><tr><td data-num=\"1091\"></td><td><pre>\t\tNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 节点复制保存排序后的结果，q 负责一直向后寻找小值替换 p，temp 为中间值</span></pre></td></tr><tr><td data-num=\"1092\"></td><td><pre>\t\tp <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1093\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"1094\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"1095\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"1096\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"1097\"></td><td><pre>\t\t\t\tTax<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Tax<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">-</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span>realsalary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1098\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"1099\"></td><td><pre>\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1100\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"1101\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"1102\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1103\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"1104\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"1105\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"1106\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"1107\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"1108\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\t\\t\\t %s 部门的总纳税额为： %d\\n\"</span><span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>Tax<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"1109\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"1110\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"1111\"></td><td><pre></pre></td></tr><tr><td data-num=\"1112\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"主函数\"><a class=\"anchor\" href=\"#主函数\">#</a> 主函数</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 员工工作管理系统 主文件 调用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"head.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 单链表初始化</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tlist <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkList<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tlist<span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tlist<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//TODO 启动时将文件中所有用户信息初始化到链表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">_access</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token number\">00</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果此文件存咋</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token function\">open_staff_file</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//printList(list);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 进入员工工作管理系统菜单</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 测试代码</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//printf (\"部门排序\");</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//sort_month(list);</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">//sort_department(list);</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">/*printList(list);</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tdelete_id(list,10);</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tprintList(list);*/</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">//search_name_salary (list, \"刘德华\");</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">//dept_staff (list, \"营销部\");</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">//year_month_salary(list, 2023, 3);</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 统计部分</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">//sort_id(list);</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">//every_staff_average_salary(list);</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">//dept_max_min(list,2023);</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">//year_month_tax_all(list, 2023, 5);</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>开源 <code>DEV C</code>  和 <code>VS2022</code>  查看 <code>开源地址</code> ：  <code>https://github.com/foryouos/Cplus_study/tree/master/C++练习/员工工资管理</code></p>\n</blockquote>\n",
            "tags": [
                "计算机科学",
                "C++",
                "C和C++项目",
                "C++",
                "计算机科学",
                "C项目"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-5/Qt%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-5/Qt%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/",
            "title": "Qt实现串口通信",
            "date_published": "2023-06-03T13:20:43.000Z",
            "content_html": "<h1 id=\"串口\"><a class=\"anchor\" href=\"#串口\">#</a> 串口</h1>\n<blockquote>\n<p>串口：一种计算即通信接口，通过穿行传输数据，用于将计算机与外部设备 (例如打印机，调制解调器，传感器等) 连接起来</p>\n</blockquote>\n<ul>\n<li><code>QSerialPort</code> ：Qt 中的 <code>串口</code> 类，用于实现串口通信功能。</li>\n<li><code>QSerialPortInfo</code> ：Qt 中的 <code>串口信息类</code> ，用于获取系统中 <code>可用</code> 的串口信息。</li>\n<li>波特率（ <code>Baud Rate</code> ）：表示 <code>每秒钟传输的比特数</code> ，也就是串口传输数据的速度。在 Qt 中，可以使用 ``QSerialPort::setBaudRate () <code>函数设置</code> 波特率。`</li>\n<li>数据位（Data Bits）：表示 <code>每个字符使用的比特数</code> ，通常为 7 或 8 位。在 Qt 中，可以使用 <code>QSerialPort::setDataBits()</code>  函数设置 <code>数据位</code> 。</li>\n<li>停止位（Stop Bits）：表示在每个字符传输结束后，发送端在传输线上保持的电平状态。通常为 <code>1或2位</code> 。在 Qt 中，可以使用 <code>QSerialPort::setStopBits()</code>  函数设置 <code>停止位</code> 。</li>\n<li>校验位（Parity Bit）：用于 <code>检查数据传输是否出错</code> ，常用的校验方式有 <code>奇偶校验、偶校验和无校验</code> 。如果使用校验位，通常为 <code>1位</code> 。在 Qt 中，可以使用 <code>QSerialPort::setParity()</code>  函数设置校验位。</li>\n<li>数据流控制（ <code>Flow Control</code> ）：用于控制数据传输的速度，常用的方式有硬件流控制和软件流控制。在 Qt 中，可以使用 QSerialPort::setFlowControl () 函数设置数据流控制。硬件流控制通常使用 <code>RTS</code> （请求发送）和 <code>CTS</code> （清除发送） <code>控制信号</code> ， <code>软件流控制</code> 通常使用 <code>XON</code>  和 <code>XOFF</code>  字符。</li>\n<li>串口缓冲区（Serial Buffer）：用于存储串口接收和发送的数据，Qt 中提供了 <code>QSerialPort::read()</code>  和 <code>QSerialPort::write()</code>  函数用于读取和发送数据。</li>\n<li>帧（ <code>Frame</code> ）：表示一个数据包，通常包含起始位、数据位、校验位和停止位。在 Qt 中，可以使用 <code>QSerialPort::setFrameSize()</code>  函数设置帧的长度。</li>\n<li>串口状态（ <code>Serial Port Status</code> ）：用于表示串口的 <code>状态</code> ，包括 <code>是否打开</code> 、 <code>是否有可用数据</code> 等。在 Qt 中，可以使用 <code>QSerialPort::isOpen()</code>  函数判断串口 <code>是否打开</code> ，使用 <code>QSerialPort::bytesAvailable()</code>  函数获取 ` 可用数据的字节数。</li>\n</ul>\n<h2 id=\"ui\"><a class=\"anchor\" href=\"#ui\">#</a> UI</h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsMW39IOCFlyaIVRyBjA9Z0tBicdvLdozkyLrEib7E1OVV3opeNnUicWBibicxv1qRvTEr9AC1uTOAS4LQ/640?wx_fmt=png\" alt=\"串口调试UI\" title=\"串口调试UI\" /></p>\n<h2 id=\"头文件\"><a class=\"anchor\" href=\"#头文件\">#</a> 头文件</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">WIDGET_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIDGET_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QWidget></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QtSerialPort/QtSerialPort></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QTimer></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">namespace</span> Ui <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Widget</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Widget</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QWidget</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">Widget</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Widget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">private</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">TimerEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 定时器实现</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_pushButton_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">serialPort_readyRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接受数据</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_checkBox_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_checkBox_2_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_checkBox_3_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_pushButton_2_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_pushButton_3_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">on_pushButton_4_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    Ui<span class=\"token double-colon punctuation\">::</span>Widget <span class=\"token operator\">*</span>ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    QTimer <span class=\"token operator\">*</span>timer<span class=\"token punctuation\">;</span><span class=\"token comment\">// 定时器</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    QStringList portStringList<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 串口列表</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    QSerialPort <span class=\"token operator\">*</span>serial<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建串口</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    QString Receivetext<span class=\"token punctuation\">,</span> Sendtext<span class=\"token punctuation\">;</span><span class=\"token comment\">// 接受的数据和发送的数据</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">long</span> Receive_Byte<span class=\"token punctuation\">,</span> Send_Byte<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接受的总字节数和发送的总字节数</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// WIDGET_H</span></span></pre></td></tr></table></figure><h2 id=\"实现函数\"><a class=\"anchor\" href=\"#实现函数\">#</a> 实现函数</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"widget.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ui_widget.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDebug></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMessageBox></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Widget</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">QWidget</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>Widget<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 窗口大小</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">setWindowTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"串口调试助手\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 串口标题</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 设置定时器</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    timer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QTimer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    timer<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//500 毫秒</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 扫描有没有可以用的串口端口</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QTimer<span class=\"token double-colon punctuation\">::</span>timeout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Widget<span class=\"token double-colon punctuation\">::</span>TimerEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    serial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QSerialPort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 初始化串口</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 对相关数据进行默认处理</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ui<span class=\"token operator\">-></span>comboBox_2<span class=\"token operator\">-></span><span class=\"token function\">setCurrentIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    ui<span class=\"token operator\">-></span>comboBox_3<span class=\"token operator\">-></span><span class=\"token function\">setCurrentIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    ui<span class=\"token operator\">-></span>comboBox_4<span class=\"token operator\">-></span><span class=\"token function\">setCurrentIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    ui<span class=\"token operator\">-></span>comboBox_5<span class=\"token operator\">-></span><span class=\"token function\">setCurrentIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 初始化数据清零操作</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    Receive_Byte <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录接收数据的字节数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    Send_Byte <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录发送数据的字节数</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 信号连接接受数据</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 当 serial 收到数据，readRead 接受数据就绪，之后调用读取接受到的数据</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>serial<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>readyRead<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Widget<span class=\"token double-colon punctuation\">::</span>serialPort_readyRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    ui<span class=\"token operator\">-></span>checkBox<span class=\"token operator\">-></span><span class=\"token function\">setCheckState</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>Checked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认 ACSII 码是被选中的</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Widget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">TimerEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 更新可用的端口</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    QStringList newPortStringList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    newPortStringList<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 遍历可用的串口</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">// 将串口放到可用的容器里面</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token function\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> QSerialPortInfo <span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">,</span> <span class=\"token class-name\">QSerialPortInfo</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">availablePorts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        newPortStringList <span class=\"token operator\">+=</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">portName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//info.portName 为 QString 类型</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 如果串口数据有更新，</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newPortStringList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> portStringList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        portStringList <span class=\"token operator\">=</span> newPortStringList<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将串口设置成现在的</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        ui<span class=\"token operator\">-></span>comboBox<span class=\"token operator\">-></span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清空之前的串口 Box</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        ui<span class=\"token operator\">-></span>comboBox<span class=\"token operator\">-></span><span class=\"token function\">addItems</span><span class=\"token punctuation\">(</span>portStringList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 添加现在有的串口</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 打开串口之后的操作</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>pushButton<span class=\"token operator\">-></span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">QString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打开串口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        serial<span class=\"token operator\">-></span><span class=\"token function\">setPortName</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>comboBox<span class=\"token operator\">-></span><span class=\"token function\">currentText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取串口号</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        serial<span class=\"token operator\">-></span><span class=\"token function\">setBaudRate</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>comboBox_2<span class=\"token operator\">-></span><span class=\"token function\">currentText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取波特率转成 Int</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>comboBox_3<span class=\"token operator\">-></span><span class=\"token function\">currentText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 波特率 // 根据数据为执行相关操作</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>serial<span class=\"token operator\">-></span><span class=\"token function\">setDataBits</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>Data5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>serial<span class=\"token operator\">-></span><span class=\"token function\">setDataBits</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>Data6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>serial<span class=\"token operator\">-></span><span class=\"token function\">setDataBits</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>Data7<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>serial<span class=\"token operator\">-></span><span class=\"token function\">setDataBits</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>Data8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>serial<span class=\"token operator\">-></span><span class=\"token function\">setDataBits</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>UnknownDataBits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不知道波特率</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>comboBox_4<span class=\"token operator\">-></span><span class=\"token function\">currentIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 校验位</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>serial<span class=\"token operator\">-></span><span class=\"token function\">setParity</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>EvenParity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置校验位</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>serial<span class=\"token operator\">-></span><span class=\"token function\">setParity</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>OddParity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>serial<span class=\"token operator\">-></span><span class=\"token function\">setParity</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>NoParity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>serial<span class=\"token operator\">-></span><span class=\"token function\">setParity</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>UnknownParity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不知道波特率</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>comboBox_5<span class=\"token operator\">-></span><span class=\"token function\">currentIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 停止位</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>serial<span class=\"token operator\">-></span><span class=\"token function\">setStopBits</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>OneStop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>serial<span class=\"token operator\">-></span><span class=\"token function\">setStopBits</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>OneAndHalfStop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>serial<span class=\"token operator\">-></span><span class=\"token function\">setStopBits</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>TwoStop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>serial<span class=\"token operator\">-></span><span class=\"token function\">setStopBits</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>UnknownStopBits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        serial<span class=\"token operator\">-></span><span class=\"token function\">setFlowControl</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>NoFlowControl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>serial<span class=\"token operator\">-></span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QIODevice<span class=\"token double-colon punctuation\">::</span>ReadWrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 打开串口</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token class-name\">QMessageBox</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">information</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"错误提示\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"无法打开串口\"</span><span class=\"token punctuation\">,</span> QMessageBox<span class=\"token double-colon punctuation\">::</span>Ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token comment\">// 打开串口之后，让相关设置改为不可修改</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        ui<span class=\"token operator\">-></span>comboBox<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        ui<span class=\"token operator\">-></span>comboBox_2<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        ui<span class=\"token operator\">-></span>comboBox_3<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        ui<span class=\"token operator\">-></span>comboBox_4<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        ui<span class=\"token operator\">-></span>comboBox_5<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        ui<span class=\"token operator\">-></span>pushButton<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"关闭串口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">else</span>  <span class=\"token comment\">// 如果是关闭串口，用户关闭串口</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token comment\">// 关闭串口之后，可以修改相关设备</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        serial<span class=\"token operator\">-></span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        ui<span class=\"token operator\">-></span>comboBox<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        ui<span class=\"token operator\">-></span>comboBox_2<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        ui<span class=\"token operator\">-></span>comboBox_3<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        ui<span class=\"token operator\">-></span>comboBox_4<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        ui<span class=\"token operator\">-></span>comboBox_5<span class=\"token operator\">-></span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        ui<span class=\"token operator\">-></span>pushButton<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打开串口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">serialPort_readyRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 接受数据函数实现</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    QString last_text<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接受数据的存储位置</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>checkBox_3<span class=\"token operator\">-></span><span class=\"token function\">checkState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> Qt<span class=\"token double-colon punctuation\">::</span>Checked<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 判断接受设置是否是暂停，如果是暂停则不进行相关操作</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        last_text <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">toPlainText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取当前接受框的数据</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        Receivetext <span class=\"token operator\">=</span> serial<span class=\"token operator\">-></span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取接受到的数据 readAll ()</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        Receive_Byte <span class=\"token operator\">+=</span> Receivetext<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 原有的数据长度加上新接受的数据长度.length</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        ui<span class=\"token operator\">-></span>label_9<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span>Receive_Byte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在下面的接受字节更新接受数据长度 QString::number 将数字转换为字符串</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token comment\">// 判断接受数据设置是使用 HExo 还是 ACSII 并进行分别处理</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>checkBox_2<span class=\"token operator\">-></span><span class=\"token function\">checkState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Qt<span class=\"token double-colon punctuation\">::</span>Checked<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//hex</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            Receivetext <span class=\"token operator\">=</span> Receivetext<span class=\"token punctuation\">.</span><span class=\"token function\">toLatin1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将收到的数据转换为 16 进制的代码</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>            length <span class=\"token operator\">=</span> Receivetext<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取当前的数据长度</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 两个一组，总长度 / 2</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>                <span class=\"token comment\">// 每两个字符后面添加空格，添加空格后次序为 2 5 8 11 为 2+3*i</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>                Receivetext<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">,</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 在数据背后添加空格</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token keyword\">else</span>  <span class=\"token comment\">//ASCII</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            Receivetext <span class=\"token operator\">=</span> Receivetext<span class=\"token punctuation\">.</span><span class=\"token function\">toLatin1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//toLatin1 将接受的 ASCII 字符数组转换为 QString</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        last_text <span class=\"token operator\">=</span> last_text<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>Receivetext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将原有的数据后面加上新接受到的数据 append 追加</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>last_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre></pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token comment\">// 对接受设置只能选中一个，当选中一个，其它参数不能选中</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre><span class=\"token comment\">//TODO 单选可解决！！！</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_checkBox_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    ui<span class=\"token operator\">-></span>checkBox<span class=\"token operator\">-></span><span class=\"token function\">setCheckState</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>Checked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    ui<span class=\"token operator\">-></span>checkBox_2<span class=\"token operator\">-></span><span class=\"token function\">setCheckState</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>Unchecked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    ui<span class=\"token operator\">-></span>checkBox_3<span class=\"token operator\">-></span><span class=\"token function\">setCheckState</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>Unchecked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_checkBox_2_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    ui<span class=\"token operator\">-></span>checkBox<span class=\"token operator\">-></span><span class=\"token function\">setCheckState</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>Unchecked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    ui<span class=\"token operator\">-></span>checkBox_2<span class=\"token operator\">-></span><span class=\"token function\">setCheckState</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>Checked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    ui<span class=\"token operator\">-></span>checkBox_3<span class=\"token operator\">-></span><span class=\"token function\">setCheckState</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>Unchecked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_checkBox_3_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    ui<span class=\"token operator\">-></span>checkBox<span class=\"token operator\">-></span><span class=\"token function\">setCheckState</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>Unchecked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    ui<span class=\"token operator\">-></span>checkBox_2<span class=\"token operator\">-></span><span class=\"token function\">setCheckState</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>Unchecked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    ui<span class=\"token operator\">-></span>checkBox_3<span class=\"token operator\">-></span><span class=\"token function\">setCheckState</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>Checked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre><span class=\"token comment\">// 点击发送之后，发送数据</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_2_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    QByteArray bytearray<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 定义字符</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>    Sendtext <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>textEdit_2<span class=\"token operator\">-></span><span class=\"token function\">toPlainText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 捕获读取发送框的数据 QString 类型</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    bytearray <span class=\"token operator\">=</span> Sendtext<span class=\"token punctuation\">.</span><span class=\"token function\">toLatin1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将字符串转换为 QByteArray 类型</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    serial<span class=\"token operator\">-></span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytearray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 写入</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    Receive_Byte <span class=\"token operator\">+=</span> Sendtext<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 更新写入长度</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    ui<span class=\"token operator\">-></span>label_11<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span>Receive_Byte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将写入的字节呈现到下面</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre><span class=\"token comment\">// 清空接收区</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_3_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>    ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre><span class=\"token comment\">// 清空发送区</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_4_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>    ui<span class=\"token operator\">-></span>textEdit_2<span class=\"token operator\">-></span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "Qt",
                "C++",
                "计算机科学",
                "Qt"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-5/Qt%E4%BA%8B%E4%BB%B6/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-5/Qt%E4%BA%8B%E4%BB%B6/",
            "title": "Qt事件",
            "date_published": "2023-06-02T13:20:43.000Z",
            "content_html": "<h1 id=\"事件\"><a class=\"anchor\" href=\"#事件\">#</a> 事件</h1>\n<blockquote>\n<p>事件时系统或者 <code>Qt</code>  本身在不同的场景下发出的。当用户按钮 / 移动鼠标，敲下键盘，或者关闭窗口 / 大小发生变化 / 隐藏或显示都会发出一个相应的事件。基于窗口的应用程序都是基于事件，其目的主要用来实现回调。事件发生经过: <code>事件派发-&gt;事件过滤-&gt;事件分发-&gt;事件处理</code> . <code>event</code>  事件派发到指定窗口， <code>eventFilter</code>  事件过滤事件， <code>enterEvent</code>  事件分发， <code>mouseMoveEvent</code>  具体的时间处理<br />\n每个 Qt 都对应唯一的 <code>QApplication</code>  应用程序，然后调用这个对象 <code>exec()函数</code>  - 程序将进入事件循环来 <code>监听应用程序事件</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    QApplication <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    MainWindow<span class=\"token operator\">*</span> w <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> MainWindow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    w<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"鼠标事件\"><a class=\"anchor\" href=\"#鼠标事件\">#</a> 鼠标事件</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 鼠标按下左键右键中键被按下，该函数自动调用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">protected</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QWidget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">mousePressEvent</span><span class=\"token punctuation\">(</span>QMouseEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 鼠标释放</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">protected</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QWidget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">mouseReleaseEvent</span><span class=\"token punctuation\">(</span>QMouseEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 鼠标移动</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">protected</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QWidget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">mouseMoveEvent</span><span class=\"token punctuation\">(</span>QMouseEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 鼠标双击事件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">protected</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QWidget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">mouseDoubleClickEvent</span><span class=\"token punctuation\">(</span>QMouseEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 当鼠标进入窗口一瞬间，触发该事件只在进入的瞬间触发一次该事件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">protected</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QWidget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">enterEvent</span><span class=\"token punctuation\">(</span>QEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 鼠标离开事件，当鼠标离开窗口的一瞬间，触发该事件只在离开的瞬间触发一次该事件</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">protected</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QWidget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">leaveEvent</span><span class=\"token punctuation\">(</span>QEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"鼠标事件的使用\"><a class=\"anchor\" href=\"#鼠标事件的使用\">#</a> 鼠标事件的使用</h3>\n<ul>\n<li>鼠标点击 (局部 / 全局坐标)</li>\n<li>鼠标释放</li>\n<li>鼠标双击</li>\n<li>鼠标实现窗体移动</li>\n<li>滚轮放大输入框的文字</li>\n</ul>\n<h3 id=\"头文件\"><a class=\"anchor\" href=\"#头文件\">#</a> 头文件</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">WIDGET_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIDGET_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QWidget></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QMouseEvent></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> Ui <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Widget</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Widget</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QWidget</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">Widget</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Widget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">mousePressEvent</span><span class=\"token punctuation\">(</span>QMouseEvent<span class=\"token operator\">*</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 鼠标点击事件</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">mouseReleaseEvent</span><span class=\"token punctuation\">(</span>QMouseEvent<span class=\"token operator\">*</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 鼠标释放事件</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">mouseDoubleClickEvent</span><span class=\"token punctuation\">(</span>QMouseEvent<span class=\"token operator\">*</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 鼠标双击事件</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">mouseMoveEvent</span><span class=\"token punctuation\">(</span>QMouseEvent<span class=\"token operator\">*</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 鼠标移动 // 实现移动窗口的效果</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 滚轮方法输入的文字</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">wheelEvent</span><span class=\"token punctuation\">(</span>QWheelEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    Ui<span class=\"token double-colon punctuation\">::</span>Widget <span class=\"token operator\">*</span>ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    QPoint pos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// WIDGET_H</span></span></pre></td></tr></table></figure><h3 id=\"函数实现\"><a class=\"anchor\" href=\"#函数实现\">#</a> 函数实现</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"widget.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ui_widget.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDebug></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Widget</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">QWidget</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>Widget<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>pushButton<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QPushButton<span class=\"token double-colon punctuation\">::</span>clicked<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>ui<span class=\"token operator\">-></span>widget<span class=\"token operator\">-></span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获得当前的值，点击之后</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Widget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">mousePressEvent</span><span class=\"token punctuation\">(</span>QMouseEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">-></span><span class=\"token function\">button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Qt<span class=\"token double-colon punctuation\">::</span>LeftButton<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果点击左键</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"左键局部坐标:\"</span><span class=\"token operator\">&lt;&lt;</span>event<span class=\"token operator\">-></span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>event<span class=\"token operator\">-></span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">-></span><span class=\"token function\">button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Qt<span class=\"token double-colon punctuation\">::</span>RightButton<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"右键全局坐标:\"</span><span class=\"token operator\">&lt;&lt;</span>event<span class=\"token operator\">-></span><span class=\"token function\">globalX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>event<span class=\"token operator\">-></span><span class=\"token function\">globalY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 线束全局坐标</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">mouseReleaseEvent</span><span class=\"token punctuation\">(</span>QMouseEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 鼠标释放</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">Q_UNUSED</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Button is released\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">mouseDoubleClickEvent</span><span class=\"token punctuation\">(</span>QMouseEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 鼠标双击</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">-></span><span class=\"token function\">button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Qt<span class=\"token double-colon punctuation\">::</span>LeftButton<span class=\"token punctuation\">)</span><span class=\"token comment\">// 左键双击</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 判断是否全屏</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">windowState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>Qt<span class=\"token double-colon punctuation\">::</span>WindowFullScreen<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// 设置全屏</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token function\">setWindowState</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>WindowFullScreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">// 若已经全屏，再双击会到初始状态</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token function\">setWindowState</span><span class=\"token punctuation\">(</span>Qt<span class=\"token double-colon punctuation\">::</span>WindowNoState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">mouseMoveEvent</span><span class=\"token punctuation\">(</span>QMouseEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">-></span><span class=\"token function\">buttons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> Qt<span class=\"token double-colon punctuation\">::</span>LeftButton<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        QPoint tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        tmp <span class=\"token operator\">=</span> event<span class=\"token operator\">-></span><span class=\"token function\">globalPos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> pos<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 鼠标当前的位置 - 窗口所在的位置</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 移动这个差值</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">wheelEvent</span><span class=\"token punctuation\">(</span>QWheelEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">-></span><span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 向上滚动</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">zoomOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 字体放大</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">zoomIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字体缩小</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"键盘事件\"><a class=\"anchor\" href=\"#键盘事件\">#</a> 键盘事件</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 键盘按下事件，并通过参数得知按下的键</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">protected</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QWidget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">keyPressEvent</span><span class=\"token punctuation\">(</span>QKeyEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 键盘释放事件，该参数被自动调用，通过参数通知那个键</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">protected</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QWidget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">keyReleaseEvent</span><span class=\"token punctuation\">(</span>QKeyEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"窗口事件\"><a class=\"anchor\" href=\"#窗口事件\">#</a> 窗口事件</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 当窗口需要刷新时，该函数就会被自动调用：窗口大小，显示等</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">protected</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QWidget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">paintEvent</span><span class=\"token punctuation\">(</span>QPaintEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 窗口标题栏的关闭按钮被按下，窗口关闭之前该函数被调用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">protected</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QWidget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">closeEvent</span><span class=\"token punctuation\">(</span>QCloseEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 当窗口大小发生变化，该函数被调用，重置窗口大小事件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">protected</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QWidget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">resizeEvent</span><span class=\"token punctuation\">(</span>QResizeEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"重写事件处理函数\"><a class=\"anchor\" href=\"#重写事件处理函数\">#</a> 重写事件处理函数</h2>\n<blockquote>\n<p>事件处理函数都是虚函数，通过添加标砖窗口类的派生类，使子类继承父类的属性，同时在这个子类中重写父类的虚函数</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头文件中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 重写事件处理器函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">closeEvent</span><span class=\"token punctuation\">(</span>QCloseEvent<span class=\"token operator\">*</span> ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">resizeEvent</span><span class=\"token punctuation\">(</span>QResizeEvent<span class=\"token operator\">*</span> ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 函数实现</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">closeEvent</span><span class=\"token punctuation\">(</span>QCloseEvent <span class=\"token operator\">*</span>ev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    QMessageBox<span class=\"token double-colon punctuation\">::</span>Button btn <span class=\"token operator\">=</span> <span class=\"token class-name\">QMessageBox</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">question</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"关闭窗口\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"您确定要关闭窗口吗?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>btn <span class=\"token operator\">==</span> QMessageBox<span class=\"token double-colon punctuation\">::</span>Yes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 接收并处理这个事件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        ev<span class=\"token operator\">-></span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 忽略这个事件</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        ev<span class=\"token operator\">-></span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">resizeEvent</span><span class=\"token punctuation\">(</span>QResizeEvent <span class=\"token operator\">*</span>ev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"oldSize: \"</span> <span class=\"token operator\">&lt;&lt;</span> ev<span class=\"token operator\">-></span><span class=\"token function\">oldSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>             <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"currentSize: \"</span> <span class=\"token operator\">&lt;&lt;</span> ev<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"自定义按钮\"><a class=\"anchor\" href=\"#自定义按钮\">#</a> 自定义按钮</h2>\n<h3 id=\"按钮头文件\"><a class=\"anchor\" href=\"#按钮头文件\">#</a> 按钮头文件</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">MYBUTTON_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MYBUTTON_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QWidget></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyButton</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QWidget</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">MyButton</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setImage</span><span class=\"token punctuation\">(</span>QString normal<span class=\"token punctuation\">,</span> QString hover<span class=\"token punctuation\">,</span> QString pressed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">mousePressEvent</span><span class=\"token punctuation\">(</span>QMouseEvent<span class=\"token operator\">*</span> ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">mouseReleaseEvent</span><span class=\"token punctuation\">(</span>QMouseEvent<span class=\"token operator\">*</span> ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">enterEvent</span><span class=\"token punctuation\">(</span>QEvent<span class=\"token operator\">*</span> ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">leaveEvent</span><span class=\"token punctuation\">(</span>QEvent<span class=\"token operator\">*</span> ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">paintEvent</span><span class=\"token punctuation\">(</span>QPaintEvent<span class=\"token operator\">*</span> ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    QPixmap m_normal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    QPixmap m_press<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    QPixmap m_hover<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    QPixmap m_current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// MYBUTTON_H</span></span></pre></td></tr></table></figure><h3 id=\"按钮实现\"><a class=\"anchor\" href=\"#按钮实现\">#</a> 按钮实现</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mybutton.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QPainter></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">MyButton</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MyButton</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QWidget</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MyButton</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setImage</span><span class=\"token punctuation\">(</span>QString normal<span class=\"token punctuation\">,</span> QString hover<span class=\"token punctuation\">,</span> QString pressed<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 加载图片</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    m_normal<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    m_hover<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>hover<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    m_press<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>pressed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    m_current <span class=\"token operator\">=</span> m_normal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 设置按钮和图片大小一致</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">setFixedSize</span><span class=\"token punctuation\">(</span>m_normal<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MyButton</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">mousePressEvent</span><span class=\"token punctuation\">(</span>QMouseEvent <span class=\"token operator\">*</span>ev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 鼠标被按下，发射这个自定义信号</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    emit <span class=\"token function\">clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    m_current <span class=\"token operator\">=</span> m_press<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MyButton</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">mouseReleaseEvent</span><span class=\"token punctuation\">(</span>QMouseEvent <span class=\"token operator\">*</span>ev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    m_current <span class=\"token operator\">=</span> m_normal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MyButton</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">enterEvent</span><span class=\"token punctuation\">(</span>QEvent <span class=\"token operator\">*</span>ev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    m_current <span class=\"token operator\">=</span> m_hover<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MyButton</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">leaveEvent</span><span class=\"token punctuation\">(</span>QEvent <span class=\"token operator\">*</span>ev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    m_current <span class=\"token operator\">=</span> m_normal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MyButton</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">paintEvent</span><span class=\"token punctuation\">(</span>QPaintEvent <span class=\"token operator\">*</span>ev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    QPainter <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">drawPixmap</span><span class=\"token punctuation\">(</span><span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m_current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"按钮使用\"><a class=\"anchor\" href=\"#按钮使用\">#</a> 按钮使用</h3>\n<ul>\n<li>在 <code>UI</code>  自定义 <code>QWidget</code>  类型</li>\n<li>鼠标 <code>右键</code></li>\n<li>点击 <code>提升为</code> ，输入指定类名</li>\n<li>将提升的 <code>类名</code> 称改为 <code>指定按钮的类名</code></li>\n<li><code>点击添加</code></li>\n<li><code>点击提升</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">,</span> <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>MainWindow<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 给自定义按钮设置图片</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ui<span class=\"token operator\">-></span>button<span class=\"token operator\">-></span><span class=\"token function\">setImage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":/ghost-1.png\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":/ghost-2.png\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":/ghost-3.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 处理自定义按钮的鼠标点击事件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>button<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>MyButton<span class=\"token double-colon punctuation\">::</span>clicked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">QMessageBox</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">information</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"按钮\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"莫要调戏我...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"时间过滤器\"><a class=\"anchor\" href=\"#时间过滤器\">#</a> 时间过滤器</h2>\n<h3 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//filterObj 来过滤当前对象中的指定事件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">installEventFilter</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>filterObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 建立事件过滤器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">bool</span> <span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">eventFilter</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>watched<span class=\"token punctuation\">,</span> QEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"使用案例\"><a class=\"anchor\" href=\"#使用案例\">#</a> 使用案例</h2>\n<blockquote>\n<p>在 <code>QTextEdit</code>  中屏蔽掉回车键</p>\n</blockquote>\n<h3 id=\"头文件-2\"><a class=\"anchor\" href=\"#头文件-2\">#</a> 头文件</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>QT_BEGIN_NAMESPACE</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">namespace</span> Ui <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainWindow</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>QT_END_NAMESPACE</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MainWindow</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QMainWindow</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">eventFilter</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>watched<span class=\"token punctuation\">,</span> QEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Ui<span class=\"token double-colon punctuation\">::</span>MainWindow <span class=\"token operator\">*</span>ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"函数实现-2\"><a class=\"anchor\" href=\"#函数实现-2\">#</a> 函数实现</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">,</span> <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>MainWindow<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 安装过滤器，由 this 对应的主窗口进行事件过滤</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//this 可以换成对应 QWidget 窗口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">installEventFilter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">eventFilter</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>watched<span class=\"token punctuation\">,</span> QEvent <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 判断对象和事件</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>watched <span class=\"token operator\">==</span> ui<span class=\"token operator\">-></span>textEdit <span class=\"token operator\">&amp;&amp;</span> event<span class=\"token operator\">-></span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> QEvent<span class=\"token double-colon punctuation\">::</span>KeyPress<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        QKeyEvent<span class=\"token operator\">*</span> keyEv <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>QKeyEvent<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>keyEv<span class=\"token operator\">-></span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Qt<span class=\"token double-colon punctuation\">::</span>Key_Enter <span class=\"token operator\">||</span>         <span class=\"token comment\">// 小键盘确认</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                keyEv<span class=\"token operator\">-></span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Qt<span class=\"token double-colon punctuation\">::</span>Key_Return<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 大键盘回车</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"我是回车, 被按下了...\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "Qt",
                "C++",
                "计算机科学",
                "Qt"
            ]
        }
    ]
}