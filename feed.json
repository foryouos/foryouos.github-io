{
    "version": "https://jsonfeed.org/version/1",
    "title": "瓶子的跋涉",
    "subtitle": "YuHeShui",
    "icon": "https://www.blog.foryouos.cn/images/favicon.ico",
    "description": "瓶子的跋涉 & 编程笔记",
    "home_page_url": "https://www.blog.foryouos.cn",
    "items": [
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-5/Qt%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-5/Qt%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/",
            "title": "Qt初步间接",
            "date_published": "2023-05-26T13:20:43.000Z",
            "content_html": "<h1 id=\"qt初步简介\"><a class=\"anchor\" href=\"#qt初步简介\">#</a> QT 初步简介</h1>\n<h2 id=\"qt模块\"><a class=\"anchor\" href=\"#qt模块\">#</a> Qt 模块</h2>\n<table>\n<thead>\n<tr>\n<th>模块</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Qt Core</td>\n<td>Qt 类库的核心，所有其他模块都依赖于此模块</td>\n</tr>\n<tr>\n<td>Qt GUI</td>\n<td>设计 GUI 界面的基础类，包括 OpenGL</td>\n</tr>\n<tr>\n<td>Qt Multimedia</td>\n<td>音频、视频、摄像头和广播功能的类</td>\n</tr>\n<tr>\n<td>Qt Multimedia Widgets</td>\n<td>实现多媒体功能的界面组件类</td>\n</tr>\n<tr>\n<td>Qt Network</td>\n<td>使网络编程更简单和轻便的类</td>\n</tr>\n<tr>\n<td>Qt QML</td>\n<td>用于 QML 和 JavaScript 语言的类</td>\n</tr>\n<tr>\n<td>Qt Quick</td>\n<td>用于构建具有定制用户界面的动态应用程序的声明框架</td>\n</tr>\n<tr>\n<td>Qt Quick Controls</td>\n<td>创建桌面样式用户界面，基于 Qt Quick 的用户界面控件</td>\n</tr>\n<tr>\n<td>Qt Quick Dialogs</td>\n<td>用于 Qt Quick 的系统对话框类型</td>\n</tr>\n<tr>\n<td>Qt Quick Layouts</td>\n<td>用于 Qt Quick 2 界面元素的布局项</td>\n</tr>\n<tr>\n<td>Qt SQL</td>\n<td>使用 SQL 用于数据库操作的类</td>\n</tr>\n<tr>\n<td>Qt Test</td>\n<td>用于应用程序和库进行单元测试的类</td>\n</tr>\n<tr>\n<td>Qt Widgets</td>\n<td>用于构建 GUI 界面的 C++ 图形组件类</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"内容重述\"><a class=\"anchor\" href=\"#内容重述\">#</a> 内容重述</h2>\n<blockquote>\n<p><code>QT</code> ，hello word!, 初步 <code>建立</code>  UI， <code>代码生成</code>  UI，代码和手动 UI <code>优缺点</code> 对比， <code>默认生成文件对比</code> ，Object Trees <code>自动释放</code> 子类 new 空间， <code>信号和槽</code></p>\n<ul>\n<li>Qt 的安装路径和文件命名不能有中文</li>\n<li>Qt 默认 UFTF8 编码</li>\n</ul>\n</blockquote>\n<h2 id=\"启动qt\"><a class=\"anchor\" href=\"#启动qt\">#</a> 启动 QT</h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtic2O0MkovYJ6NZ3JsfkuGFTHsLKFIzTeuosptkh8ic67iciazAB2J10IBC5LCn05O19NnJlDfjfbhFw/0?wx_fmt=png\" alt=\"启动QT桌面的应用\" title=\"启动QT桌面的应用\" /></p>\n<h3 id=\"基于对话框dialog\"><a class=\"anchor\" href=\"#基于对话框dialog\">#</a> 基于对话框！Dialog</h3>\n<blockquote>\n<p>创建新项目，基于如下相关设置， <code>QDialog</code>  基于对话框的 QT</p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtic2O0MkovYJ6NZ3JsfkuGFIKcRTOEV1LiaM2r0czibdiaziaDpxSR3oIOML6OHURTcR0bRAWsBL1wxZQ/0?wx_fmt=png\" alt=\"选择建立的系统\" title=\"选择建立的系统使用qmake\" /></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtic2O0MkovYJ6NZ3JsfkuGFCfv06x86Yoviavkiak6B2sN0Ku21XPU6SFeGQnqOzhNOuTVCxgxTKxpg/0?wx_fmt=png\" alt=\"选择class类型以及class名字\" title=\"选择class类型以及class名字\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtic2O0MkovYJ6NZ3JsfkuGFN9wUtwt1zpASrxn1xZOdcTMWY6HsjefSgVWcIpic8KheIlsiaQNbg8JA/0?wx_fmt=png\" alt=\"选择编译组件\" title=\"选择编译组件\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtic2O0MkovYJ6NZ3JsfkuGFiaDzEf5CVSHz2ypwNMgAq5QSJlSeBCX7ibPAoRjVeCktPlcx68Um3nsw/0?wx_fmt=png\" alt=\"最后的summary\" title=\"最后的summary\" /></p>\n<h3 id=\"ui编辑区\"><a class=\"anchor\" href=\"#ui编辑区\">#</a> UI 编辑区</h3>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtic2O0MkovYJ6NZ3JsfkuGF5oDibYkAK5e8yt9GlGELzUzA4K5WYibnyne0ibFaHFf7icTCynrI8WKGlg/0?wx_fmt=png\" alt=\"UI编辑区\" title=\"UI编辑区\" /></p>\n<h3 id=\"修改logo\"><a class=\"anchor\" href=\"#修改logo\">#</a> 修改 logo</h3>\n<blockquote>\n<p>在编辑的 <code>pro</code>  文件下，最后添加 <code>RC_ICONS = myico.ico</code></p>\n<p>此 ico 文件需要 <code>提前</code> 在下载并放到文件代码所在位置</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtic2O0MkovYJ6NZ3JsfkuGF9sxMr2mqdGdiaLvajMtk3dzeTMxc3oa6XWSMfhmwibaZRcsPO9lcGo3g/0?wx_fmt=png\" alt=\"添加窗口logo\" title=\"添加窗口logo\" /></p>\n<h3 id=\"运行\"><a class=\"anchor\" href=\"#运行\">#</a> 运行</h3>\n<blockquote>\n<p>点击左下角的运行，可选择 <code>调试</code> 和 <code>发布</code> 两种，当要发布当前文件时选择 <code>release</code></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtic2O0MkovYJ6NZ3JsfkuGF8DAb3fejQicx7WcJsCf6rMkgqEBc6AC0mnicSH1WQBbJmKGtlj6VAiaVQ/0?wx_fmt=png\" alt=\"hello word执行窗口\" title=\"hello word执行窗口\" /></p>\n<h3 id=\"qt软件的发布\"><a class=\"anchor\" href=\"#qt软件的发布\">#</a> QT 软件的发布</h3>\n<blockquote>\n<p>在 QT 文件夹下使用 <code>QT cmd</code>  窗口输入，使用 <code>windeployqt</code>  将 QT 运行所需要的动态库存入到 myfirstQTAPP 当中（注意 myfirstQTAPP 需要提前将 QT release 所生成的 exe 文件存入到此文件夹中）。</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>windeployqt E:<span class=\"token punctuation\">\\</span>C++study<span class=\"token punctuation\">\\</span>QT<span class=\"token punctuation\">\\</span>QT_exercise<span class=\"token punctuation\">\\</span>QT01<span class=\"token punctuation\">\\</span>myfirstQTAPP</pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtic2O0MkovYJ6NZ3JsfkuGFlhA4DnQS3r76YBs3BRQbZEsIibs31X4Czw0PC409qDkleuIFG6A1n6A/0?wx_fmt=png\" alt=\"生成后发布的文件\" title=\"生成后发布的文件\" /></p>\n<h3 id=\"qwidget\"><a class=\"anchor\" href=\"#qwidget\">#</a> Qwidget</h3>\n<blockquote>\n<p>创建项目 <code>Base class </code> 选择 <code>Qwidget</code>  创建的界面对所有的界面相关组件都是支持的</p>\n</blockquote>\n<h4 id=\"pro文件详解\"><a class=\"anchor\" href=\"#pro文件详解\">#</a> .pro 文件详解</h4>\n<pre><code># 在此项目中加入core gui核心（控制台不需要)\n# QT是以模块的形式组织类库，根据项目需求不同添加不同类库的支持\nQT       += core gui\n\n# 当QT版本大于4，在当前项目中添加widgets\ngreaterThan(QT_MAJOR_VERSION, 4): QT += widgets\n\nCONFIG += c++17\n\n# You can make your code fail to compile if it uses deprecated APIs.\n# In order to do so, uncomment the following line.\n#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0\n\n# 都为自动生成的\n# 源代码\nSOURCES += \\\n    main.cpp \\\n    widgets.cpp\n# 头文件\nHEADERS += \\\n    widgets.h\n# ui文件\nFORMS += \\\n    widgets.ui\n\n# Default rules for deployment.默认部署规则\nqnx: target.path = /tmp/$$&#123;TARGET&#125;/bin\nelse: unix:!android: target.path = /opt/$$&#123;TARGET&#125;/bin\n!isEmpty(target.path): INSTALLS += target\n</code></pre>\n<hr />\n<blockquote>\n<p>槽类似 <code>信号</code> ，当点击之后对相关函数进行响应。</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtic2O0MkovYJ6NZ3JsfkuGFHaHZr1RLWMYOMUEluvIV81h1ImicrpXcLVLh3MviarCnX1kswv30xv1A/0?wx_fmt=png\" alt=\"槽\" title=\"槽\" /></p>\n<blockquote>\n<p><code>Signals and Slots Editor</code>  信号与槽编辑，</p>\n</blockquote>\n<ul>\n<li>发送者即点击的对象，如图点击 pushButton_2 上面 close，</li>\n<li>第二个信号为 <code>clicked()</code>  即当点击发送者的时候，</li>\n<li>接受者为  发送者执行信号 <code>clicked()</code>  然后接受者 <code>执行</code> 槽</li>\n<li>close () 接受者 widgets (窗口) 即 <code>关闭窗口</code> ，<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtic2O0MkovYJ6NZ3JsfkuGFbicJEs1RPFfE0M27m036v8lHdD3jogquSNWjYNxrXUibQz9tTUxqCI9w/0?wx_fmt=png\" alt=\"信号与槽操作\" title=\"信号与槽操作\" /></li>\n</ul>\n<h3 id=\"maincpp\"><a class=\"anchor\" href=\"#maincpp\">#</a> main.cpp</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"widgets.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QApplication></span>  <span class=\"token comment\">//qt 的标准应用程序，QT 必须有得</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 应用程序对应，在一个 Qt 项目中实例对应有且仅有一个</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 类的作用：检测触发的事件，进行事件循环并处理</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    QApplication <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 必须引用对应的 #include &lt;QApplication></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//widgets 创建 w 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    widgets w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//w 调用 show 方法，显示窗体</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    w<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">//a 为 qt 的应用程序，返回让 qt 执行起来。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 应用程序对应开始事件循环，保证应用程序不退出，阻塞函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"widgetsh\"><a class=\"anchor\" href=\"#widgetsh\">#</a> widgets.h</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">WIDGETS_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIDGETS_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QWidget></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>QT_BEGIN_NAMESPACE</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 命名空间 Ui 里面的 widgets 类</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">namespace</span> Ui <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">widgets</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>QT_END_NAMESPACE</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 此 widgets 与上面命名空间的 ui 里的 widgets 不同，在不同的命名空间</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">widgets</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QWidget</span> <span class=\"token comment\">// 来自 Qwidget 基类</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 宏，使用 QT 的信号与槽都要使用到此宏</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 构造函数和析构函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">widgets</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">widgets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 私有成员 ui 命名空间里面的 widgets</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 定义指针指向窗口的 UI 对象</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    Ui<span class=\"token double-colon punctuation\">::</span>widgets <span class=\"token operator\">*</span>ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// WIDGETS_H</span></span></pre></td></tr></table></figure><h3 id=\"widgetscpp\"><a class=\"anchor\" href=\"#widgetscpp\">#</a> widgets.cpp</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"widgets.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ui_widgets.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"testwidget.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>widgets<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">widgets</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">QWidget</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>widgets<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 开辟类内存空间</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 调用 setupUi，</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 通过此就可修改主窗口的相关设置于获取</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 实现窗口的各种空间属性，信号与槽关联等</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 一般在 qt 的构造函数中进行数据初始化操作 (窗口，数据....)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 如显示当前窗口，并显示另一个窗口</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 要独立显示窗口，必须要进行 show 操作</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span><span class=\"token operator\">:</span></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    TestWidget<span class=\"token operator\">*</span> w <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> TestWidget<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 显示当前窗体</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    w<span class=\"token operator\">-></span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 指定了父对象，子窗口和父窗口一起显示出来，内嵌入父窗口</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tTestWidget<span class=\"token operator\">*</span> w <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TestWidget</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 显示到 this 里面，testwidget 被嵌入到 this 对应的主窗口</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endig</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token class-name\">widgets</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">widgets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 析构函数释放 new 的空间</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"使用代码实现在widgets上的功能\"><a class=\"anchor\" href=\"#使用代码实现在widgets上的功能\">#</a> 使用代码实现在 widgets 上的功能</h2>\n<blockquote>\n<p><code>QMainWindow带菜单栏</code> 的窗口<br />\n使用代码实现不创建 UI 相关文件</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsEWEBQFD3s86j0r70OwDwAqTwpibY7k59fZf52rnegUiapUnDx6YpDWpZKtHgfAmDeYrnCvUHic753Q/640?wx_fmt=png\" alt=\"文件列表\" title=\"文件列表\" /></p>\n<h3 id=\"可视化和代码编写对比\"><a class=\"anchor\" href=\"#可视化和代码编写对比\">#</a> 可视化和代码编写对比：</h3>\n<ul>\n<li>可视化 <code>不</code> 用编写代码，极大的省去界面布局调节时间成本</li>\n<li>但有些组件没法完全通过 ui 进行可视化添加需要设计 <code>纯代码</code></li>\n<li>纯代码确实效率会低，繁琐，但 <code>可补充ui</code>  无法实现的功能</li>\n</ul>\n<h3 id=\"对象数object-trees\"><a class=\"anchor\" href=\"#对象数object-trees\">#</a> 对象数 Object Trees</h3>\n<blockquote>\n<p>QObjects organize themselves in object trees. When you create a  <code>QObject</code>  with another object as  <code>parent</code> , it's added to the parent's children() list, and is deleted when the parent is. It turns out that this approach fits the needs of GUI objects very well. For example, a QShortcut (keyboard shortcut) is a child of the relevant window, so when the user closes that window, the shortcut is deleted too.<br />\nQQuickItem, the basic visual element of the Qt Quick module, inherits from QObject, but has a concept of the visual parent which differs from that of the QObject parent. An item's visual parent may not necessarily be the same as its object parent. See Concepts - Visual Parent in Qt Quick for more details.<br />\nQWidget, the fundamental class of the Qt Widgets module, extends the parent-child relationship. A child normally also becomes a child widget, i.e. it is displayed in its parent's coordinate system and is graphically clipped by its parent's boundaries. For example,  <code>when</code>  the application deletes a message box after it has been closed, the message box's buttons and label are  <code>also</code>  deleted, just as we'd want, because the buttons and label are children of the message box.<br />\nYou can also delete child objects yourself, and they will remove themselves from their parents. For example, when the user removes a toolbar it may lead to the application deleting one of its QToolBar objects, in which case the tool bar's QMainWindow parent would detect the change and reconfigure its screen space accordingly.<br />\nThe debugging functions QObject::dumpObjectTree() and QObject::dumpObjectInfo() are often useful when an application looks or acts strangely.</p>\n</blockquote>\n<h3 id=\"qdebug\"><a class=\"anchor\" href=\"#qdebug\">#</a> QDebug</h3>\n<blockquote>\n<p>In the common case, it is useful to call the qDebug() function to obtain a default QDebug object to use for  <code>writing debugging information</code> .</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDebug></span> <span class=\"token comment\">// 引用 QDebug 头文件</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Date:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token class-name\">QDate</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"在no_ui新建一个qmyclass类\"><a class=\"anchor\" href=\"#在no_ui新建一个qmyclass类\">#</a> 在 NO_UI 新建一个 QMyClass 类</h3>\n<blockquote>\n<p>验证 Object Trees 关闭是否可以 <code>自动释放</code>  new 的空间，而 <code>无需</code> 再析构函数手动 delete 申请的空间</p>\n</blockquote>\n<h3 id=\"代码验证\"><a class=\"anchor\" href=\"#代码验证\">#</a> 代码验证</h3>\n<h4 id=\"widgeth\"><a class=\"anchor\" href=\"#widgeth\">#</a> widget.h</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">WIDGET_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIDGET_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QWidget></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Widget</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QWidget</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">Widget</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Widget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// WIDGET_H</span></span></pre></td></tr></table></figure><h4 id=\"widgetcpp\"><a class=\"anchor\" href=\"#widgetcpp\">#</a> widget.cpp</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"widget.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QLabel></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QPushButton></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"qmyclass.h\"</span> <span class=\"token comment\">// 引用刚才自己创建的类</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 对象树 // 窗口部件的销毁也会相应销毁子部件 label 等内容申请的空间</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 所以只需申请 new 而无需 delete</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Widget</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">:</span> <span class=\"token function\">QWidget</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 让其窗口隶属于父类 1,2,3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 请求 Qlabel 空间</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    QLabel <span class=\"token operator\">*</span>label <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QLabel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//3, 直接带参数，直接隶属于其父类</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 设立 text 文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    label<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I Love You,XinXin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 设置位置</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    label<span class=\"token operator\">-></span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//c 创建按钮，但并未有操作功能</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    QPushButton <span class=\"token operator\">*</span>button <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QPushButton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//this 内嵌到父类</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    button<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Close\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置 Pushbutton 内的文字</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    button<span class=\"token operator\">-></span><span class=\"token function\">setFixedSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置按钮的固定大小</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    button<span class=\"token operator\">-></span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 起点为父类的左上角</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 当窗口被关闭后，QMyClass 的析构函数也被自动调用</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 只需写 new，无需再手动写含 delete 的内容</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    QMyClass <span class=\"token operator\">*</span>myclass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QMyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">//1, 此形式呈现会呈现在独立的窗口</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">//label->show();</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">//2, 让 label 隶属于其父类</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">//label->setParent(this);</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 指定窗体的大小</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 锁定大小，不可改变</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">//setFixedSize(400,300);</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">setWindowTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My First No UI\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token class-name\">Widget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Widget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"qmyclassh\"><a class=\"anchor\" href=\"#qmyclassh\">#</a> qmyclass.h</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">QMYCLASS_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">QMYCLASS_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QWidget></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">QMyClass</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QWidget</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">QMyClass</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">QMyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 作为判断析构函数是否被调用到</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// QMYCLASS_H</span></span></pre></td></tr></table></figure><h4 id=\"qmyclasscpp\"><a class=\"anchor\" href=\"#qmyclasscpp\">#</a> qmyclass.cpp</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"qmyclass.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDebug></span>  <span class=\"token comment\">// 输出内容头文件</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">QMyClass</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">QMyClass</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">:</span> QWidget<span class=\"token punctuation\">&#123;</span>parent<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">QMyClass</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">QMyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//QT 打印内容，qDebug 输出内容</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"delete myclass\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当手动关系窗口，析构函数被调用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"maincpp和no_uipro不变\"><a class=\"anchor\" href=\"#maincpp和no_uipro不变\">#</a> main.cpp 和 NO_UI.pro 不变</h4>\n<h2 id=\"基础窗口类\"><a class=\"anchor\" href=\"#基础窗口类\">#</a> 基础窗口类</h2>\n<ul>\n<li><code>QWidget</code>\n<ul>\n<li><code>所有窗口</code> 类的 <code>基类</code></li>\n<li>Qt 中的控件 (按钮，输入框，单选框…) 也属于窗口，基类都是  <code>QWidget</code></li>\n<li><code>可以内嵌</code> 到其他窗口中：没有边框</li>\n<li>可以不内嵌单独显示：独立的窗口，有边框</li>\n</ul>\n</li>\n<li><code>QDialog</code>\n<ul>\n<li><code>对话框类</code> ，</li>\n<li><code>不能内嵌</code> 到其他窗口中，必须调用 show 方法才显示。</li>\n</ul>\n</li>\n<li><code>QMainWindow</code>\n<ul>\n<li>有 <code>工具栏，状态栏，菜单栏</code> ，</li>\n<li><code>不能内嵌</code> 到其他窗口中</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"窗口的显示\"><a class=\"anchor\" href=\"#窗口的显示\">#</a> 窗口的显示</h2>\n<ul>\n<li>内嵌窗口\n<ul>\n<li><code>依附于</code> 某一个大的窗口，作为了大窗口的一部分</li>\n<li>大窗口就是这个内嵌窗口的父窗口</li>\n<li>父窗口显示的时候，内嵌的窗口也就被显示出来了</li>\n</ul>\n</li>\n<li>不内嵌窗口\n<ul>\n<li>这类窗口有边框，有标题栏</li>\n<li>需要调用函数才可以显示 show</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//QWidget 是所有窗口类的基类，调用这个提供的 show () 方法显示窗口 非模态显示</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QWidget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显示当前窗口和它的子窗口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 对话框窗口的模态显示，// 会阻塞当前窗口，不能切换到其它窗口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span> slot<span class=\"token punctuation\">]</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">QDialog</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"qt坐标\"><a class=\"anchor\" href=\"#qt坐标\">#</a> Qt 坐标</h2>\n<blockquote>\n<p>Qt 的坐标原点在窗口 <code>左上角</code> 。内嵌的情况下基于其父窗口。<br />\n <code>x轴</code> 向 <code>右</code> 递增，<br />\n <code>y轴</code> 向 <code>下</code> 递增</p>\n</blockquote>\n<h2 id=\"qt内存回收\"><a class=\"anchor\" href=\"#qt内存回收\">#</a> Qt 内存回收</h2>\n<blockquote>\n<p>new 创建堆内存，<br />\n析构顺序从子窗口到顶层主窗口<br />\n若创建的对应是 QObject 类的之类 (间接之类也可). 创建的对应，必须要指定其父对象是谁，</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过构造函数 parent 当前窗口的父对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">QWidget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">QWidget</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> Q_NULLPTR<span class=\"token punctuation\">,</span>Qt<span class=\"token double-colon punctuation\">::</span>WindowFlags f <span class=\"token operator\">=</span> <span class=\"token class-name\">Qt</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">WindowFlags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">QTimer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">QTimer</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//2，通过 setParent () 方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QWidget</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"qt-log输出\"><a class=\"anchor\" href=\"#qt-log输出\">#</a> Qt log 输出</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDebug></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">QDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"输出日志\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>若向将 <code>log日志</code> 文件输出到 <code>控制台</code> ，进入 pro 文件，在 <code>CONFIG</code>  后面加  <code>console</code> , 重新构建即可。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CONFIG <span class=\"token operator\">+=</span> C<span class=\"token operator\">++</span><span class=\"token number\">11</span> console</pre></td></tr></table></figure><h2 id=\"字符类型\"><a class=\"anchor\" href=\"#字符类型\">#</a> 字符类型</h2>\n<h3 id=\"qbytearray\"><a class=\"anchor\" href=\"#qbytearray\">#</a> QByteArray</h3>\n<blockquote>\n<p><code>char*</code>  的升级版</p>\n</blockquote>\n<h3 id=\"qstring\"><a class=\"anchor\" href=\"#qstring\">#</a> QString</h3>\n<blockquote>\n<p>QString 是 <code>QByteArray</code>  的 <code>封装</code> ，<br />\nQString 计算长度根据字符个数，而 QByteArray 是将一个中文字符对应三个<br />\n具体参考 原文</p>\n</blockquote>\n<h3 id=\"qvariant\"><a class=\"anchor\" href=\"#qvariant\">#</a> QVariant</h3>\n<blockquote>\n<p>使用 <code>QVariant</code>  对 <code>自定义类型</code> 进行处理</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tQString name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 引用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 创建 Person 对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Person p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 将其设置为 QVariant 有两种方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tQVariant v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tQVariant v <span class=\"token operator\">=</span> <span class=\"token class-name\">QVariant</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromValue</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 取出 V 对象中的数据</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">canConvert</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">// 转换</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tPerson tmp <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">value</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>tmp<span class=\"token punctuation\">.</span>id<span class=\"token operator\">&lt;&lt;</span>tmp<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>参考资料:<br />\n* 爱编程的大丙：详细部分  <code>https://subingwen.cn/qt/qt-basetype/</code> <br />\n* 嵌入式开发设计</p>\n",
            "tags": [
                "计算机科学",
                "C++",
                "Qt",
                "C++",
                "计算机科学",
                "Qt"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Linux/Linux%E7%9A%84Makefile/",
            "url": "https://www.blog.foryouos.cn/computer-science/Linux/Linux%E7%9A%84Makefile/",
            "title": "Makefile",
            "date_published": "2023-05-08T01:26:43.000Z",
            "content_html": "<h1 id=\"静态库\"><a class=\"anchor\" href=\"#静态库\">#</a> 静态库</h1>\n<blockquote>\n<p>对源文件进行汇编操作 <code>(使用参数-c)</code>  得到二进制的目标文件 <code>(.o 格式)</code> , 然后通过 <code>ar工具</code> 将目标文件打包就可以得到 <code>静态库文件``(libxxxx.a)</code></p>\n</blockquote>\n<h2 id=\"ar参数\"><a class=\"anchor\" href=\"#ar参数\">#</a>  <code>ar</code>  参数</h2>\n<ul>\n<li>参数 c: 创建一个库，不管库是否存在</li>\n<li>参数 s: 创建目标文件索引，在创建较大库时加快时间</li>\n<li>参数 r: 在库中插入模块 (替代)。默认新的成员添加在库的结尾处，若该模块已经存在，则替换同名模块</li>\n</ul>\n<h2 id=\"生成静态链接库\"><a class=\"anchor\" href=\"#生成静态链接库\">#</a> 生成静态链接库</h2>\n<ul>\n<li>对源文件进行汇编，得到 <code>.o</code>  文件</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc 源文件<span class=\"token punctuation\">(</span>*.c<span class=\"token punctuation\">)</span> <span class=\"token parameter variable\">-c</span></pre></td></tr></table></figure><ul>\n<li>将得到的.o 进行打包，得到静态库</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ar rcs 静态库名字<span class=\"token punctuation\">(</span>libxxx.a<span class=\"token punctuation\">)</span> 原材料<span class=\"token punctuation\">(</span>*.0<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>发布静态库</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#发布静态库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>,提供头文件**.h</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>,提供制作出来的静态库 libxxxx.a</pre></td></tr></table></figure><h2 id=\"静态库测试\"><a class=\"anchor\" href=\"#静态库测试\">#</a> 静态库测试</h2>\n<blockquote>\n<p>通过对函数生成对应的静态库 <code>.a</code>  文件，然后根据其头文件以及对应的 <code>静态库文件</code> ，即可让其它函数进行调用</p>\n</blockquote>\n<ul>\n<li><code>add.c</code></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"head.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>sub.c</code></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"head.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>mult.c</code></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"head.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>div.c</code></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"head.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>head.h</code></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_HEAD_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_HEAD_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 加法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 减法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 乘法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 除法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><ul>\n<li>调用文件 <code>main.c</code></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"head.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = %d, b = %d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a + b = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a - b = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a * b = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a / b = %f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"生成静态库\"><a class=\"anchor\" href=\"#生成静态库\">#</a> 生成静态库</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 生成对应的汇编.o 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ gcc add.c div.c mult.c sub.c <span class=\"token parameter variable\">-c</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 打包成静态库</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ar rcs lib名称.a add.o div.o mult.o sub.o</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//即可生成静态库</pre></td></tr></table></figure><p><img data-src=\"https://i.imgtg.com/2023/04/24/Ie4fs.png\" alt=\"静态库\" title=\"静态库\" /></p>\n<h1 id=\"动态库\"><a class=\"anchor\" href=\"#动态库\">#</a> 动态库</h1>\n<blockquote>\n<p>动态库时 <code>运行时</code> 加载的库，是多个程序可以共用的 <code>共享库</code> 。动态链接库是目标文件的集合，使用相对地址，其真实地址是在应用程序加载动态库时形成的。 <code>Linux</code>  以 <code>.so</code>  作为后缀。 <code>libxxx.so</code> .    <code>window</code>  使用以 <code>lib</code>  作为前缀，以 <code>dll</code>  作为后缀， <code>libxxx.dll</code> .<br />\n 动态链接库直接使用 <code>gcc</code>  命令需要添加 <code> -fPIC (-fpic)</code>  以及 <code>-shared</code>  参数，其作用时使得 gcc 生成的代码与位置无关，也就是使用相对位置， <code>-shared</code>  参数是 <code>告诉</code> 编译器生成一个 <code>动态链接库</code></p>\n</blockquote>\n<h2 id=\"生成动态链接库\"><a class=\"anchor\" href=\"#生成动态链接库\">#</a> 生成动态链接库</h2>\n<ul>\n<li>将源文件进行汇编操作，需要使用 <code>-c</code> ，还需要添加额外参数 <code>-fpic / -fPIC</code></li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 得到汇编.o 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gcc 源文件<span class=\"token punctuation\">(</span>*.c<span class=\"token punctuation\">)</span> <span class=\"token parameter variable\">-c</span> -fpic/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 将得到的.o 文件打包成动态库使用参数 - shared 指定动态库</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>gcc <span class=\"token parameter variable\">-shared</span> 有关的目标文件<span class=\"token punctuation\">(</span>*.o<span class=\"token punctuation\">)</span> <span class=\"token parameter variable\">-o</span> 动态库<span class=\"token punctuation\">(</span>libxxx.so<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 发布动态库和头文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 1, 提供头文件  xxx.h</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 2, 提供动态库: libxxx.so</span></pre></td></tr></table></figure><h3 id=\"无法加载问题\"><a class=\"anchor\" href=\"#无法加载问题\">#</a> 无法加载问题</h3>\n<blockquote>\n<p>将库路径添加到环境变量  <code>LD_LIBRARY_PATH</code>  中</p>\n</blockquote>\n<h4 id=\"方法一\"><a class=\"anchor\" href=\"#方法一\">#</a> 方法一</h4>\n<blockquote>\n<p>1, 找到相关的配置文件</p>\n<ul>\n<li>\n<p>用户级别:  <code>~/.bashrc —&gt; </code> 设置对当前用户有效</p>\n</li>\n<li>\n<p>系统级别: <code>/etc/profile</code> —&gt; 设置对所有用户有效<br />\n 2, 使用 <code>vim</code>  打开配置文件，在文件最后添加</p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 自己把路径写进去就行了</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">LIBRARY_PATH</span><span class=\"token operator\">=</span><span class=\"token variable\">$LIBRARY_PATH</span>:动态库的绝对路径</pre></td></tr></table></figure><p>3, 让配置文件生效</p>\n<ul>\n<li>修改用户级别的配置文件，关闭当前终端，即可</li>\n<li>系统级别，重启</li>\n<li>或者</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> 作用让文件内容被重新加载</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">source</span> ~/.bashrc          <span class=\"token punctuation\">(</span>. ~/.bashrc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">source</span> /etc/profile       <span class=\"token punctuation\">(</span>. /etc/profile<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"方法二\"><a class=\"anchor\" href=\"#方法二\">#</a> 方法二</h4>\n<blockquote>\n<p>更新 <code>/etc/ld.so.cache</code>  文件</p>\n</blockquote>\n<ul>\n<li>找到动态库所在的绝对路径: <code>/home/robin/Library/</code></li>\n<li>使用 vim 修改 <code>/etc/ld.so.conf</code>  文件，将上面的路径添加，独占一行</li>\n<li>更新 <code>/etc/ld.so.conf</code>  中的数据到 <code>/etc/ld/so.cache</code>  中</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> ldconfig</pre></td></tr></table></figure><h4 id=\"方法三\"><a class=\"anchor\" href=\"#方法三\">#</a> 方法三</h4>\n<blockquote>\n<p>拷贝拷贝动态库文件到系统库目录  <code>/lib/</code>  或者 <code>/usr/lib</code>  中 (或者将库的软链接文件放进去)</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 库拷贝</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> /xxx/xxx/libxxx.so /usr/lib</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 创建软连接</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /xxx/xxx/libxxx.so /usr/lib/libxxx.so</pre></td></tr></table></figure><h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<blockquote>\n<p>静态库：在程序编译的最后一个阶段 -- 链接阶段，提供静态库被打包到可执行程序中，当可执行程序执行，静态库中的代码也会一并加载到内存中<br />\n动态库：使用参数 - L 查看库文件是否存在。在程序执行先检测是否动态库被加载，当动态库的函数在程序中被调用，这个动态库被加载到内存，不掉用不加载。动态库的检测和内存操作都是由动态连接器来完成</p>\n</blockquote>\n<h2 id=\"对比\"><a class=\"anchor\" href=\"#对比\">#</a> 对比</h2>\n<ul>\n<li>静态库:\n<ul>\n<li>优点:</li>\n<li>静态库被打包到应用程序中加载速度快</li>\n<li>发布程序无需提供静态库，移植方便</li>\n<li>缺点:</li>\n<li>相同的库文件数据被加载多份，消耗资源，浪费内存</li>\n<li>库文件更新需要重新编译项目文件，生成新的可执行程序浪费时间</li>\n</ul>\n</li>\n<li>动态库\n<ul>\n<li>优点</li>\n<li>不同进程资源共享</li>\n<li>动态库升级，只需替换库文件，可以控制何时加载动态库</li>\n<li>缺点:</li>\n<li>加载速度慢，</li>\n<li>发布程序需要依赖动态库</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"makefile\"><a class=\"anchor\" href=\"#makefile\">#</a> Makefile</h1>\n<blockquote>\n<p>make 是一个命令工具，是一个解释 makefile 中指令的命令工具。<br />\nMakefile--- 自动化编译，只需要一个 make 命令，整个工程完全自动编译，极大的提高了软件开发的效率。</p>\n</blockquote>\n<h2 id=\"规则\"><a class=\"anchor\" href=\"#规则\">#</a> 规则</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>target1,target2<span class=\"token punctuation\">..</span>.: depend1,depend2, <span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token builtin class-name\">command</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr></table></figure><ul>\n<li><code>command</code> ：命令，一般情况下这个动作就是一个 shell 命令</li>\n<li><code>depend</code> : 规则所必需的依赖条件，</li>\n<li><code>target</code> : 目标，目标和规则在命令中是对应的。</li>\n</ul>\n<blockquote>\n<p>在调用 <code>Makefile</code>  命令编译程序时， <code>make</code>  会首先找到 Makefile 文件中的第一个规则，分析并执行相关的动作</p>\n</blockquote>\n<blockquote>\n<p>根据上面的代码</p>\n</blockquote>\n<p><img data-src=\"http://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtOIzIt3wviaOTmSHf4uYTliaHH1JxE4jeibGNSK8agvqKFKRVflbRUatguU24omMJWpDTnib5GFr6qwg/640?wx_fmt=png\" alt=\"运行结果\" /></p>\n<blockquote>\n<p>运行结果</p>\n</blockquote>\n<p><img data-src=\"http://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtOIzIt3wviaOTmSHf4uYTliaSnFNDGOfTcXicRhOymWKiaglDKaVZqeOYycvy3aqP0hMlu5M8Rpcg4EA/640?wx_fmt=png\" alt=\"运行结果\" /></p>\n<h2 id=\"自动推导\"><a class=\"anchor\" href=\"#自动推导\">#</a> 自动推导</h2>\n<blockquote>\n<p>当源文件的编译规则 <code>不明确</code> 时，make 会使用 <code>默认</code> 的编译规则，按照默认规则完成对 <code>.c</code>  文件你的编译， <code>生成</code> 对应的 <code>.o</code>  文件，它使用 <code>cc -c</code>  编译 <code>.c</code>  源文件。</p>\n</blockquote>\n<h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h2>\n<blockquote>\n<p>为了使 <code>makefile</code>  进行规则设定时更加的 <code>灵活</code> 。</p>\n</blockquote>\n<h3 id=\"自定义变量\"><a class=\"anchor\" href=\"#自定义变量\">#</a> 自定义变量</h3>\n<blockquote>\n<p>在对 makefile 进行规则设定时，用户可以自己定义变量，用户自定义变量。其变量没有类型，直接赋值即可</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 定义变量名，定义 多个中间用空格即可</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>变量名<span class=\"token operator\">=</span>变量值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 取出变量名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">$(</span>变量名<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><h4 id=\"自定义变量自动推导\"><a class=\"anchor\" href=\"#自定义变量自动推导\">#</a> 自定义变量自动推导</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>obj <span class=\"token operator\">=</span> add.o sub.o mult.o div.o main.o</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>target <span class=\"token operator\">=</span> calc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">$(</span>target<span class=\"token variable\">)</span></span> <span class=\"token builtin class-name\">:</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>obj<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        gcc <span class=\"token variable\"><span class=\"token variable\">$(</span>obj<span class=\"token variable\">)</span></span> <span class=\"token parameter variable\">-o</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>target<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><h3 id=\"预定义变量\"><a class=\"anchor\" href=\"#预定义变量\">#</a> 预定义变量</h3>\n<blockquote>\n<p>此变量为 Makefile 已经预先定义的，变量名 都是大写，可以直接使用这些变量。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>变 量 名</th>\n<th>含 义</th>\n<th>默 认 值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>AR </code></td>\n<td>生成静态库库文件的程序名称</td>\n<td><code>ar</code></td>\n</tr>\n<tr>\n<td><code>AS </code></td>\n<td><code>汇编</code> 编译器的名称</td>\n<td><code>as</code></td>\n</tr>\n<tr>\n<td><code>CC</code></td>\n<td><code>C</code>  语言编译器的名称</td>\n<td><code>cc  </code></td>\n</tr>\n<tr>\n<td><code>CPP </code></td>\n<td><code>C </code> 语言预编译器的名称</td>\n<td><code>$(CC) -E</code></td>\n</tr>\n<tr>\n<td><code>CXX</code></td>\n<td><code>C++</code>  语言编译器的名称</td>\n<td><code>g++</code></td>\n</tr>\n<tr>\n<td><code>FC </code></td>\n<td><code>FORTRAN</code>  语言编译器的名称</td>\n<td><code>f77</code></td>\n</tr>\n<tr>\n<td><code>RM</code></td>\n<td>删除文件程序的名称</td>\n<td><code>rm -f</code></td>\n</tr>\n<tr>\n<td><code>ARFLAGS </code></td>\n<td>生成静态库库文件程序的选项</td>\n<td>无默认值</td>\n</tr>\n<tr>\n<td><code>ASFLAGS</code></td>\n<td>汇编语言编译器的编译选项</td>\n<td></td>\n</tr>\n<tr>\n<td><code>CFLAGS</code></td>\n<td>C 语言编译器的编译选项</td>\n<td></td>\n</tr>\n<tr>\n<td><code>CPPFLAGS</code></td>\n<td>C++ 语言编译器的编译选项</td>\n<td></td>\n</tr>\n<tr>\n<td><code>FFLAGS </code></td>\n<td>FORTRAN 语言编译器的编译选项</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"自动变量\"><a class=\"anchor\" href=\"#自动变量\">#</a> 自动变量</h3>\n<blockquote>\n<p>自动变量用来代表这些规则中的目标文件和依赖文件，并且他们只能在规则的命令中使用</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">变量</th>\n<th>含 义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>$*</code></td>\n<td>表示目标文件的名称，不包含目标文件的扩展名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>$+ </code></td>\n<td>表示所有的依赖文件，这些依赖文件之间以空格分开，按照出现的先后为顺序，其中可能 包含重复的依赖文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>$&lt;</code></td>\n<td>表示依赖项中第一个依赖文件的名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>$? </code></td>\n<td>依赖项中，所有比目标文件时间戳晚的依赖文件，依赖文件之间以空格分开</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>$@ </code></td>\n<td>表示 <code>目标文件</code> 的 <code>名称</code> ，包含 <code>文件扩展名 </code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>$^  </code></td>\n<td>依赖项中，所有 <code>不重复</code> 的 <code>依赖文件</code> ，这些文件之间以 <code>空格</code> 分开</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>calc2 <span class=\"token builtin class-name\">:</span> add.o sub.o mult.o div.o main.o</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token variable\"><span class=\"token variable\">$(</span>CC<span class=\"token variable\">)</span></span> $^ <span class=\"token parameter variable\">-o</span> <span class=\"token variable\">$@</span></pre></td></tr></table></figure><h2 id=\"模式匹配\"><a class=\"anchor\" href=\"#模式匹配\">#</a> 模式匹配</h2>\n<blockquote>\n<p>模式匹配相当于一个模版，第一个规则中依赖的生成，都需要基于此规则来完成，得到所有的依赖，模式规则被执行了 5 次，模式规则中 <code>%</code>  对应的文件名是 <code>时时变化</code> 的，因此命令的依赖的名字，必须要使用 <code>自动变量</code> 。</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 模式匹配 -> 通过一个公式，代表若干个满足条件的规则</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 依赖有一个，后缀为.c 生成的目标是一个.o 的文件，% 是一个通配符，匹配的是文件名</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>%.o <span class=\"token builtin class-name\">:</span> %.c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tgcc $<span class=\"token operator\">&lt;</span> <span class=\"token parameter variable\">-c</span></pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>calc2 <span class=\"token builtin class-name\">:</span> add.o sub.o mult.o div.o main.o</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token variable\"><span class=\"token variable\">$(</span>CC<span class=\"token variable\">)</span></span> $^ <span class=\"token parameter variable\">-o</span> <span class=\"token variable\">$@</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>%.o:%.c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        gcc <span class=\"token operator\">&amp;</span><span class=\"token operator\">&lt;</span> <span class=\"token parameter variable\">-c</span></pre></td></tr></table></figure><h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<blockquote>\n<p>函数格式为: <code>$(函数名 参数1,参数2,...)</code>  目的为快速方便的得到 <code>函数返回值</code></p>\n</blockquote>\n<h3 id=\"withcard获取文件名\"><a class=\"anchor\" href=\"#withcard获取文件名\">#</a> withcard 获取文件名</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 参数只有一个，但此参数可以分为若干个部分，通过空格间隔</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 参数为某个目录，搜索这个路径下指定类型的文件: *.c</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">$(</span>withcard PATTERN<span class=\"token punctuation\">..</span>.<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><h4 id=\"应用案例\"><a class=\"anchor\" href=\"#应用案例\">#</a> 应用案例</h4>\n<blockquote>\n<p>搜索三个不同目录下 <code>.c</code>  格式的源文件</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>src <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>withcard /home/robin/a/*.c /home/robin/b/*.c *.c<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 返回值得到一个大的字符串，里面有若干个满足条件的文件名，文件名之间使用空格间隔</span></pre></td></tr></table></figure><h3 id=\"patsubst-替代指定文件后缀\"><a class=\"anchor\" href=\"#patsubst-替代指定文件后缀\">#</a> patsubst 替代指定文件后缀</h3>\n<blockquote>\n<p>按照 <code>指定的模式</code> 替换指定的文件名的后缀，函数原型为</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">$(</span>patsubst <span class=\"token operator\">&lt;</span>pattern<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>replacement<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>text<span class=\"token operator\">></span><span class=\"token variable\">)</span></span></pre></td></tr></table></figure><ul>\n<li>参数</li>\n<li><code>pattern </code> ：需要指定要替换的文件名的 <code>后缀</code> 是什么，使用 <code>%.c</code></li>\n<li><code>replacement</code> ：模式投资富川，指定参数 <code>pattern</code>  中的后缀， <code>最终要替换</code> 为什么。</li>\n<li><code>text</code> : 该参数中存储这要被替换的原始数据</li>\n<li><code>返回值</code> ：该参数中存储这要被替换的原始数据</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>src <span class=\"token operator\">=</span> a.cpp b.cpp c.cpp e.cpp</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 把变量 src 中的所有文件名的后缀从.cpp 替换为.o</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>obj <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>patsubst %.cpp,%.o,<span class=\"token punctuation\">$(</span>src<span class=\"token punctuation\">)</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># obj 的值为 a.o b.o c.o e.o</span></pre></td></tr></table></figure><h2 id=\"makefile完整案例\"><a class=\"anchor\" href=\"#makefile完整案例\">#</a> Makefile 完整案例</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用函数搜索当前目录下的源文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>src <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>wildcard *.c<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 将源文件的后缀替换为.o</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>obj <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>patsubst %.c,%.o,<span class=\"token punctuation\">$(</span>src<span class=\"token punctuation\">)</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>target <span class=\"token operator\">=</span> calc</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">$(</span>target<span class=\"token variable\">)</span></span><span class=\"token builtin class-name\">:</span><span class=\"token variable\"><span class=\"token variable\">$(</span>obj<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        gcc <span class=\"token variable\"><span class=\"token variable\">$(</span>obj<span class=\"token variable\">)</span></span> <span class=\"token parameter variable\">-o</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>target<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>%.o <span class=\"token builtin class-name\">:</span> %.c</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        gcc $<span class=\"token operator\">&lt;</span> <span class=\"token parameter variable\">-c</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 添加规则，删除生成文件，*.o 可执行程序</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 声明 clean 为伪文件</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.PHONY:clean</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>clean:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\"># shell 命令前的 - 表示强制执行这条指令，如果执行失败也不会终止</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        - <span class=\"token function\">rm</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>obj<span class=\"token variable\">)</span></span> <span class=\"token variable\"><span class=\"token variable\">$(</span>target<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello\"</span></pre></td></tr></table></figure><blockquote>\n<p>参考资料:</p>\n<p>​\t爱编程的大丙</p>\n</blockquote>\n",
            "tags": [
                "计算机科学",
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Linux/Linux%E6%96%87%E4%BB%B6/",
            "url": "https://www.blog.foryouos.cn/computer-science/Linux/Linux%E6%96%87%E4%BB%B6/",
            "title": "linux文件",
            "date_published": "2023-04-24T01:26:43.000Z",
            "content_html": "<h1 id=\"linux文件操作\"><a class=\"anchor\" href=\"#linux文件操作\">#</a> Linux 文件操作</h1>\n<h2 id=\"open\"><a class=\"anchor\" href=\"#open\">#</a> Open</h2>\n<blockquote>\n<p>通过 Open 函数打开一个磁盘文件，如果不存在还可以打开新的文件</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/type.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//open 函数只能在 Linux 系统中使用 g</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pathname<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pathname<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span>mode_t mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h3>\n<blockquote>\n<p>pathname ：被打开的文件名<br />\n flags: 指定使用什么方式打开指定的文件，根据需求指定</p>\n</blockquote>\n<ul>\n<li><code>O_RDONLY</code> : 以只 <code>读</code> 方式打开文件</li>\n<li><code>O_WRONLY</code> : 以只 <code>写</code> 方式打开文件</li>\n<li><code>O_RDWR</code> : 以 <code>读写</code> 方式打开文件</li>\n<li><code>可选属性</code> ，和上边的属性一起使用</li>\n<li><code>O_APPEND</code> : 新数据 <code>追加到文件尾部</code> ，不会覆盖文件的原来内容</li>\n<li><code>O_CREAT</code> : 如果文件 <code>不</code> 存在， <code>创建该文件</code> ，如果文件存在什么也不做</li>\n<li><code>O_EXCL</code> :  <code>检测</code> 文件 <code>是否</code> 存在， <code>必须</code> 要和  <code>O_CREAT</code>  一起使用，不能单独使用: O_CREAT | O_EXCL\n<ul>\n<li>检测到文件 <code>不</code> 存在，创建新文件</li>\n<li>检测到文件已经存在，创建失败，函数直接返回 - 1（如果不添加这个属性，不会返回 - 1）</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><code>mode</code> ：在创建新文件需要 <code>指定新文件</code> 的权限</p>\n</blockquote>\n<pre><code>* 参数最大值`0777`\n\n* 返回值\n* 成功:返回内核分配的文件描述符，大于0的整数\n* 失败:-1\n</code></pre>\n<h2 id=\"close函数原型\"><a class=\"anchor\" href=\"#close函数原型\">#</a> Close 函数原型</h2>\n<blockquote>\n<p><code>释放</code>  Open 函数打开的文件描述符</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>函数参数 <code>:fd文件描述符</code> ，是 open () 函数的返回值</li>\n<li>释放成功返回 <code>0</code> ，调用 <code>失败</code> 返回 <code>-1</code></li>\n</ul>\n<h2 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h2>\n<h3 id=\"打开文件\"><a class=\"anchor\" href=\"#打开文件\">#</a> 打开文件</h3>\n<blockquote>\n<p><code>授予</code> 文件权限</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 打开文件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">,</span> O_RDWR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 以读写的方式</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 创建新文件</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//int fd = open(\"./new.txt\", O_CREAT|O_RDWR, 0664);</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file open fail\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create file successful fd:%d\\n\"</span><span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭文件</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"判断文件状态\"><a class=\"anchor\" href=\"#判断文件状态\">#</a> 判断文件状态</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 检查文件状态，创建失败返回 - 1，文件不存在，返回分配的问价描述符</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./new.txt\"</span><span class=\"token punctuation\">,</span> O_CREAT <span class=\"token operator\">|</span> O_EXCL <span class=\"token operator\">|</span> O_RDWR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file open fail\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create file successful fd:%d\\n\"</span><span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭文件</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"read\"><a class=\"anchor\" href=\"#read\">#</a> read</h2>\n<blockquote>\n<p>用于读取文件 <code>内部</code> 数据，在 Open 打开文件的时候 <code>指定读权限</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ssize_t <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span>size_t count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"参数-2\"><a class=\"anchor\" href=\"#参数-2\">#</a> 参数</h3>\n<ul>\n<li>fd：文件描述符，open () 函数的返回值，通过这个参数定位打开的 <code>磁盘文件</code></li>\n<li>buf: 是一个 <code>传出参数</code> ，指向 <code>一块有效的内存</code> ，用于 <code>存储</code> 从文件中 <code>读出</code> 的数据\n<ul>\n<li>传出参数：类似于返回值，将变量地址传递给函数，函数调用完毕，地址中就有数据</li>\n</ul>\n</li>\n<li>count ：buf 指针指向的 <code>内存的大小</code> ，指定可以存储的最大字节数</li>\n</ul>\n<h3 id=\"返回值\"><a class=\"anchor\" href=\"#返回值\">#</a> 返回值</h3>\n<ul>\n<li><code>大于0</code> ：从文件中读出的字节数， <code>读文件成功</code></li>\n<li><code>等于0</code> ：代表文件读完， <code>读文件成功</code></li>\n<li><code>-1</code>  : 读 <code>文件失败</code></li>\n</ul>\n<h2 id=\"write\"><a class=\"anchor\" href=\"#write\">#</a> write</h2>\n<blockquote>\n<p>将数据 <code>写入</code> 到文件 <code>内部</code> ，通过 Open 打开文件的时候需要指定写权限</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ssize_t <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span>size_t count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"文件拷贝\"><a class=\"anchor\" href=\"#文件拷贝\">#</a> 文件拷贝</h2>\n<blockquote>\n<p>首先在目录中创建 <code>english.txt文件</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 1. 打开存在的文件 english.txt, 读这个文件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> fd1 <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./english.txt\"</span><span class=\"token punctuation\">,</span> O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd1 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open-readfile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 2. 打开不存在的文件，将其创建出来，将从 english.txt 读出的内容写入这个文件中</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> fd2 <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"copy.txt\"</span><span class=\"token punctuation\">,</span> O_WRONLY <span class=\"token operator\">|</span> O_CREAT<span class=\"token punctuation\">,</span> <span class=\"token number\">0664</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd2 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open-writefile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 3. 循环读文件，循环写文件</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">4096</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd1<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 将读到的数据写入到另一个文件中</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd2<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 4. 关闭文件</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"lseek移动文件指针\"><a class=\"anchor\" href=\"#lseek移动文件指针\">#</a> lseek 移动文件指针</h2>\n<blockquote>\n<p><code>lseek</code>  可以通过此 <code>函数移动</code> 文件 <code>指针</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>off_t <span class=\"token function\">lseek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span>off_t offset<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> whence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"参数-3\"><a class=\"anchor\" href=\"#参数-3\">#</a> 参数</h3>\n<ul>\n<li>fd：文件描述符，open 函数的返回值</li>\n<li><code>offset</code> : <code>偏移量</code></li>\n<li><code>whence</code> : 通过这个参数指定函数实现功能\n<ul>\n<li><code>SEEK_SET</code>  ：从文件 <code>头部开始</code> 偏移 offset 个字节</li>\n<li><code>SEEK_CUR</code> : 从当前文件 <code>指针的位置向后</code> 偏移 offset 个字节</li>\n<li><code>SEEK_END</code> : 从文件尾部 <code>向后</code> 偏移 offset 个字节</li>\n</ul>\n</li>\n<li>返回值\n<ul>\n<li>成功：文件指针 <code>从头部</code> 开始计算总的偏移量</li>\n<li>失败:-1</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">lseek</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 文件指针移动到文件头部</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">lseek</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token constant\">SEEK_CUR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到当前文件指针的位置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">lseek</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到文件总大小</span></pre></td></tr></table></figure><h3 id=\"扩展实现\"><a class=\"anchor\" href=\"#扩展实现\">#</a> 扩展实现</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 拓展文件大小</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">,</span>O_RDWR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 文件扩展字节</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">lseek</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token constant\">SEEK_END</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"trucateftruncate\"><a class=\"anchor\" href=\"#trucateftruncate\">#</a> trucate/ftruncate</h2>\n<blockquote>\n<p>截断或扩展文件</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">truncate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>path<span class=\"token punctuation\">,</span>off_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">ftruncate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span>off_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"参数-4\"><a class=\"anchor\" href=\"#参数-4\">#</a> 参数:</h3>\n<ul>\n<li>path：要 <code>扩展/截断</code> 的文件的文件名</li>\n<li>fd: 文件描述符，open () 得到</li>\n<li>length: 文件的 <code>最终</code> 大小\n<ul>\n<li><code>size &gt; length</code>  ，文件被 <code>截断</code> ，尾部多余部分被删除</li>\n<li><code>size &lt; length</code>  文件被 <code>拓展</code> ，文件最终长度为 length</li>\n</ul>\n</li>\n<li>返回值：成功返回 0 ，失败返回值 -1</li>\n</ul>\n<h2 id=\"perror\"><a class=\"anchor\" href=\"#perror\">#</a> perror</h2>\n<blockquote>\n<p>返回值来描述系统 <code>函数的状态</code>  (调用是否成功) 成功返回 0，失败返回 - 1.</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 指定字符串值，会输出并且输出对应的错误描述信息</span></pre></td></tr></table></figure><h2 id=\"查看文件属性信息\"><a class=\"anchor\" href=\"#查看文件属性信息\">#</a> 查看文件属性信息</h2>\n<blockquote>\n<p><code>file</code>   <code>文件名</code>    <code>[参数]</code></p>\n</blockquote>\n<h3 id=\"参数-5\"><a class=\"anchor\" href=\"#参数-5\">#</a> 参数</h3>\n<ul>\n<li><code>-b</code>  只显示文件类型和文件编码，不显示文件名</li>\n<li><code>-i</code>  显示文件的 MIME 类型  <code>MIME</code> (Multipurpose Internet Mail Extensions) <code>多用途互联网邮件扩展类型</code></li>\n<li><code>-F</code>  设置输出字符串的 <code>分隔符</code></li>\n<li><code>-L</code>  查看 <code>软链接</code> 文件自身文件属性</li>\n</ul>\n<h2 id=\"stat-命令\"><a class=\"anchor\" href=\"#stat-命令\">#</a> stat 命令</h2>\n<blockquote>\n<p>显示文件或目录的 <code>详细属性</code> 信息和文件系统状态，输出的更加详细</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>stat <span class=\"token punctuation\">[</span>参数<span class=\"token punctuation\">]</span> 文件或者目录名</pre></td></tr></table></figure><h3 id=\"参数-6\"><a class=\"anchor\" href=\"#参数-6\">#</a> 参数</h3>\n<ul>\n<li><code>-f</code>  仅显示文件 <code>所在文件系</code> 统的信息</li>\n<li><code>-L</code>  查看 <code>软链接</code> 文件</li>\n<li><code>-c</code>  查看文件 <code>某个属性</code> 信息</li>\n<li><code>-t</code>  简洁模式，只 <code>显示摘要</code> 信息，不显示属性描述</li>\n</ul>\n<h3 id=\"输出的信息属性\"><a class=\"anchor\" href=\"#输出的信息属性\">#</a> 输出的信息属性</h3>\n<p>* <code>File</code>  ：文件名</p>\n<ul>\n<li><code>Size</code> : 文件大小，单位字节</li>\n<li><code>Blocks</code> : 文件使用的数据库总数</li>\n<li><code>IO Block</code>  ：IO 块大小</li>\n<li><code>regular file </code> : 文件的实际类型，文件类型不同，该关键字也会变化</li>\n<li><code>Device</code>  : 设备编号</li>\n<li><code> Inode</code>  : Inode 号，操作系统用 inode 编号来识别不同的文件，找到文件数据所在的 block 读出数据</li>\n<li><code>Links</code> : 硬链接计数<br />\n * <code> Access</code>  : 文件所有者 + 所属组用户 + 其他人对文件的访问权限</li>\n<li><code>Uid</code> : 文件所有者名字和所有者 ID</li>\n<li><code>Gid</code>  ： 文件所有数组名字已经组 ID</li>\n<li><code>Access Time</code>  : 表示文件的最后访问时间，</li>\n<li><code>Modify Time</code> : 表示文件内容的最后修改时间</li>\n<li><code>Change Time</code>  : 文件的状态休息，被修改则更新，例如文件的硬链接链接数，大小，权限等</li>\n<li><code>Birth</code> ：文件生成日期</li>\n</ul>\n<h3 id=\"statlstat函数\"><a class=\"anchor\" href=\"#statlstat函数\">#</a> stat/lstat 函数</h3>\n<blockquote>\n<p><code>lstat() </code> ：得到的是 <code>软链接</code> 文件本身的 <code>属性信息</code> <br />\n <code>stat()</code>  : 得到的是 <code>软链接</code> 文件 <code>关联</code> 的文件的属性信息</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unisd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">stat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pathname <span class=\"token punctuation\">,</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">lstat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pathname<span class=\"token punctuation\">,</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"参数-7\"><a class=\"anchor\" href=\"#参数-7\">#</a> 参数</h4>\n<ul>\n<li><code>pathname</code>  ： 文件名，要获取这个文件的 <code>属性信息</code></li>\n<li><code>buf</code>  ： <code> 传出参数</code> ，文件的信息被 <code>写入</code> 到这块内存中</li>\n<li><code>返回值</code> ：成功返回 <code>0</code> ，失败返回 <code>-1</code> .</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    dev_t          st_dev<span class=\"token punctuation\">;</span>        \t<span class=\"token comment\">// 文件的设备编号</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ino_t           st_ino<span class=\"token punctuation\">;</span>        \t<span class=\"token comment\">//inode 节点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    mode_t      st_mode<span class=\"token punctuation\">;</span>      \t\t<span class=\"token comment\">// 文件的类型和存取的权限，16 位整形数  -> 常用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    nlink_t        st_nlink<span class=\"token punctuation\">;</span>     \t<span class=\"token comment\">// 连到该文件的硬连接数目，刚建立的文件值为 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    uid_t           st_uid<span class=\"token punctuation\">;</span>       \t<span class=\"token comment\">// 用户 ID</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    gid_t           st_gid<span class=\"token punctuation\">;</span>       \t<span class=\"token comment\">// 组 ID</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    dev_t          st_rdev<span class=\"token punctuation\">;</span>      \t<span class=\"token comment\">// (设备类型) 若此文件为设备文件，则为其设备编号</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    off_t            st_size<span class=\"token punctuation\">;</span>      \t<span class=\"token comment\">// 文件字节数 (文件大小)   --> 常用</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    blksize_t     st_blksize<span class=\"token punctuation\">;</span>   \t<span class=\"token comment\">// 块大小 (文件系统的 I/O 缓冲区大小)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    blkcnt_t      st_blocks<span class=\"token punctuation\">;</span>    \t<span class=\"token comment\">//block 的块数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    time_t         st_atime<span class=\"token punctuation\">;</span>     \t<span class=\"token comment\">// 最后一次访问时间</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    time_t         st_mtime<span class=\"token punctuation\">;</span>     \t<span class=\"token comment\">// 最后一次修改时间 (文件内容)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    time_t         st_ctime<span class=\"token punctuation\">;</span>     \t<span class=\"token comment\">// 最后一次改变时间 (指属性)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"读取文件大小\"><a class=\"anchor\" href=\"#读取文件大小\">#</a> 读取文件大小</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 定义结构体存储文件休息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> myst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">stat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./english.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>myst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stat error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 失败</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件大小为:%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>myst<span class=\"token punctuation\">.</span>st_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"目录遍历\"><a class=\"anchor\" href=\"#目录遍历\">#</a> 目录遍历</h2>\n<h3 id=\"opendir-函数打开目录\"><a class=\"anchor\" href=\"#opendir-函数打开目录\">#</a>  <code>Opendir</code>  函数打开目录</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;dirent.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 打开目录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DIR <span class=\"token operator\">*</span><span class=\"token function\">opendir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数：  <code>name</code>   要打开的目录名字</li>\n<li>返回值 <code>DIR*</code> , 结构体类型指针，打开失败返回 NULL</li>\n</ul>\n<h3 id=\"readdir\"><a class=\"anchor\" href=\"#readdir\">#</a> readdir</h3>\n<blockquote>\n<p>目录打开后，通过 readdir () 函数 <code>遍历目录中的</code> 文件信息。<br />\n <code>每调用一次</code> 这个函数就可以得到目录中的一个 <code>文件信息</code> ，当目录中的文件信息被 <code>全部遍历</code> 完毕会得到一个 <code>空对象</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;dirent.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">dirent</span> <span class=\"token operator\">*</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span>DIR <span class=\"token operator\">*</span>dirp<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"参数-8\"><a class=\"anchor\" href=\"#参数-8\">#</a> 参数</h3>\n<ul>\n<li><code>dirp-&gt;opendir()</code>  函数的返回值</li>\n<li>函数调用 <code>成功</code> ，返回读到的文件的信息，目录文件被读完或者函数 <code>调用失败</code> 返回 <code>NULL</code></li>\n</ul>\n<h3 id=\"struct-dirent结构体原型\"><a class=\"anchor\" href=\"#struct-dirent结构体原型\">#</a> struct dirent 结构体原型</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">dirent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ino_t          d_ino<span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* 文件对应的 inode 编号，定位文件存储在磁盘的那个数据块上 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    off_t          d_off<span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* 文件在当前目录中的偏移量 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> d_reclen<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 文件名字的实际长度 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>  d_type<span class=\"token punctuation\">;</span>      <span class=\"token comment\">/* 文件的类型，linux 中有 7 中文件类型 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span>           d_name<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 文件的名字 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>结构体中文件类型 <code>d_type</code>  的宏值<br />\n <code>DT_BLK</code> ：块设备文件<br />\n <code>DT_CHR</code> ：字符设备文件<br />\n <code>DT_DIR</code> ：目录文件<br />\n <code>DT_FIFO</code>  ：管道文件<br />\n <code>DT_LNK</code> ：软连接文件<br />\n <code>DT_REG</code>  ：普通文件<br />\n <code>DT_SOCK</code> ：本地套接字文件<br />\n <code>DT_UNKNOWN</code> ：无法识别的文件类型</li>\n<li>通过 readdir () 函数 <code>遍历</code> 某个目录中的文件</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 打开目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>DIR<span class=\"token operator\">*</span> dir <span class=\"token operator\">=</span> <span class=\"token function\">opendir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home/foryouos\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">dirent</span><span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 遍历目录</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">=</span> <span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"closedir\"><a class=\"anchor\" href=\"#closedir\">#</a> closedir</h3>\n<blockquote>\n<p>目录操作完毕之后，需要通过 <code>closedir()关闭</code> 通过 opendir () 得到的示例，释放资源</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 参数是 opendir () 的返回值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">closedir</span><span class=\"token punctuation\">(</span>DIR <span class=\"token operator\">*</span>dirp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 目录关闭成功返回 0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 失败返回 -1</span></pre></td></tr></table></figure><h3 id=\"遍历单层目录\"><a class=\"anchor\" href=\"#遍历单层目录\">#</a> 遍历单层目录</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;dirent.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 传入目录参数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在./a.out 传入参数目录，绝对路径</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tDIR<span class=\"token operator\">*</span> dir <span class=\"token operator\">=</span> <span class=\"token function\">opendir</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 打开文件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dir <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果目录 为空</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"opendir NULL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 遍历当前目录中的文件</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 循环遍历</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">dirent</span><span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读目录的结构体，每次读一层</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 如果为空</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目录读完了...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 读到一个文件，判断文件类型</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">-></span>d_type <span class=\"token operator\">==</span> DT_REG<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">-></span>d_name<span class=\"token punctuation\">,</span> <span class=\"token string\">\".txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出名字</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 若明细不空</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file %d: %s\\n\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> ptr<span class=\"token operator\">-></span>d_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s目录中txt文件的格式：%d\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">closedir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭目录</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"遍历多层目录\"><a class=\"anchor\" href=\"#遍历多层目录\">#</a> 遍历多层目录</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;dirent.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">GetFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tDIR<span class=\"token operator\">*</span> dir <span class=\"token operator\">=</span> <span class=\"token function\">opendir</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dir <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果目录 为空</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"opendir NULL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 遍历当前目录</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">dirent</span><span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读目录的结构体，每次读一层</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">=</span> <span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 只要目录不为空，就一直遍历先去</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 当文件名为。或者为.. 时，表示当前目录或者父级目录，则通过 continue 语句跳过，不做处理</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">-></span>d_name<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">-></span>d_name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"..\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">-></span>d_type <span class=\"token operator\">==</span> DT_DIR<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 当读取的为目录类型</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token comment\">// 目录</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token keyword\">char</span> newPath<span class=\"token punctuation\">[</span><span class=\"token number\">4096</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>newPath<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s/%s\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> ptr<span class=\"token operator\">-></span>d_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出未见类型，并递归遍历</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tcount <span class=\"token operator\">+=</span> <span class=\"token function\">GetFile</span><span class=\"token punctuation\">(</span>newPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token comment\">// 若为普通文件</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">-></span>d_name<span class=\"token punctuation\">,</span> <span class=\"token string\">\".txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s/%s\\n\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> ptr<span class=\"token operator\">-></span>d_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token function\">closedir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 传入目录参数</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在./a.out 传入参数目录，绝对路径</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./a.out path\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">GetFile</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s .c :%d\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-5/Qt%E5%A4%9A%E7%BA%BF%E7%A8%8B/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-5/Qt%E5%A4%9A%E7%BA%BF%E7%A8%8B/",
            "title": "Qt多线程",
            "date_published": "2023-04-21T04:20:43.000Z",
            "content_html": "<h1 id=\"qt多线程\"><a class=\"anchor\" href=\"#qt多线程\">#</a> Qt 多线程</h1>\n<h2 id=\"1构造函数\"><a class=\"anchor\" href=\"#1构造函数\">#</a> 1, 构造函数</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">QThread</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> Q_NULLPTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 判断线程中的任务是不是处理完毕了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">isFinished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 判断子线程是不是在执行任务</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// Qt 中的线程可以设置优先级</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 得到当前线程的优先级</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Priority <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setPriority</span><span class=\"token punctuation\">(</span>Priority priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>优先级<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>IdlePriority         <span class=\"token operator\">--</span><span class=\"token operator\">></span> 最低的优先级</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>LowestPriority</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>LowPriority</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>NormalPriority</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>HighPriority</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>HighestPriority</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>TimeCriticalPriority <span class=\"token operator\">--</span><span class=\"token operator\">></span> 最高的优先级</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    QThread<span class=\"token double-colon punctuation\">::</span>InheritPriority      <span class=\"token operator\">--</span><span class=\"token operator\">></span> 子线程和其父线程的优先级相同<span class=\"token punctuation\">,</span> 默认是这个</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 退出线程，停止底层的事件循环</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 退出线程的工作函数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>oid <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> returnCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 调用线程退出函数之后，线程不会马上退出因为当前任务有可能还没有完成，调回用这个函数是</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 等待任务完成，然后退出线程，一般情况下会在 exit () 后边调用这个函数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> time <span class=\"token operator\">=</span> ULONG_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"信号槽\"><a class=\"anchor\" href=\"#信号槽\">#</a> 信号槽</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 和调用 exit () 效果是一样的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>slot<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 启动子线程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>slot<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>Priority priority <span class=\"token operator\">=</span> InheritPriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 线程中执行的任务完成了，发出该信号</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 任务函数中的处理逻辑执行完毕了</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>signal<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">finished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 开始工作之前发出这个信号，一般不使用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>signal<span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">started</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"静态函数\"><a class=\"anchor\" href=\"#静态函数\">#</a> 静态函数</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回一个指向管理当前执行线程的 QThread 的指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> QThread <span class=\"token operator\">*</span><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 返回可以在系统上运行的理想线程数 == 和当前电脑的 CPU 核心数相同</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">idealThreadCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 线程休眠函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">msleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> msecs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 单位：毫秒</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> secs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 单位：秒</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> usecs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 单位：微秒</span></pre></td></tr></table></figure><h2 id=\"任务处理\"><a class=\"anchor\" href=\"#任务处理\">#</a> 任务处理</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 子线程要处理什么任务，需要写到 run () 中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">protected</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"2任务对象移动到主线程\"><a class=\"anchor\" href=\"#2任务对象移动到主线程\">#</a> 2, 任务对象移动到主线程</h2>\n<h3 id=\"线程头文件\"><a class=\"anchor\" href=\"#线程头文件\">#</a> 线程头文件</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">MYTHREAD_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MYTHREAD_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QObject></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QVector></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 创建的子线程，生成随机数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Generate</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">Generate</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 接受主线程传过来的参数，随机数 num</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 子线程运行函数，第二种方法可以直接将 num 作为参数传入</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">working</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 使用信号槽将数据传递给主线程，界面操作只能由主线程来进行</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">sendArray</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 冒泡排序</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BubbleSort</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">BubbleSort</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 子线程运行函数</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">working</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 使用信号槽将数据传递给主线程，界面操作只能由主线程来进行</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 发送的有序数组</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">public</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 快速排序</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">QuickSort</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 子线程运行函数</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">working</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">// 使用信号槽将数据传递给主线程，界面操作只能由主线程来进行</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">public</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 实现快速排序算法</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 容器，起始位置，结束位置</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>list<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// MYTHREAD_H</span></span></pre></td></tr></table></figure><h3 id=\"线程实现\"><a class=\"anchor\" href=\"#线程实现\">#</a> 线程实现</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mythread.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QElapsedTimer></span>  <span class=\"token comment\">// 记录时间</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QtDebug></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QThread></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Generate</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Generate</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QObject</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Generate</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">working</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"生成随机数的线程地址\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 存放随机数 vector 容器</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 子线程生成数据，要通过传递给主线程</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    QElapsedTimer time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    time<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 开始记录</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 从尾部插入</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">qrand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    qint64 milsec <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">elapsed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 毫秒</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"生成\"</span> <span class=\"token operator\">&lt;&lt;</span>num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"个随机总数用时\"</span><span class=\"token operator\">&lt;&lt;</span>milsec<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"毫秒\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 发送给主线程</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    emit <span class=\"token function\">sendArray</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将数据发给主线程</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 冒泡排序，补齐 parent</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token class-name\">BubbleSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BubbleSort</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QObject</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 实现冒泡排序，实现相邻两个元素的交换</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">BubbleSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">working</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"冒泡排序的线程地址\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 存放随机数 vector 容器</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    QElapsedTimer time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    time<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从后数往前比较</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>list<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                list<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    qint64 milsec <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">elapsed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"冒泡排序用时\"</span> <span class=\"token operator\">&lt;&lt;</span>milsec<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"毫秒\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 发送给主线程</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    emit <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将数据发给主线程</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">// 快速，补齐 parent</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token class-name\">QuickSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QObject</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\">// 实现快速排序</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QuickSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">working</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"快速排序的线程地址\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">// 存放随机数 vector 容器</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    QElapsedTimer time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    time<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">// 快速排序算法</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    qint64 milsec <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">elapsed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"快速排序用时\"</span> <span class=\"token operator\">&lt;&lt;</span>milsec<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"毫秒\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// 发送给主线程</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    emit <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将数据发给主线程</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\">// 快排算法</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QuickSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token comment\">// 拿出第一个元素，保存到 x 中，第一个位置为空</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token comment\">// 从右向左找小于 x 的数</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                <span class=\"token comment\">// 左移，直到遇到小于等于 x 的数</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                <span class=\"token comment\">// 将右侧找到的小于 x 的元素放入左侧坑中，右侧出现一个坑</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                <span class=\"token comment\">// 左侧元素索引后移</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token comment\">// 从左向右找大于等于 x 的数</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token comment\">// 右移，直到遇到大于 x 的数</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                <span class=\"token comment\">// 将左侧找到的元素放入右侧坑中，左侧出现一个坑</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                <span class=\"token comment\">// 右侧元素索引向前移动</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token comment\">// 此时 i=j, 将保存在 x 中的数填入坑中</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 递归调用</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"线程调用\"><a class=\"anchor\" href=\"#线程调用\">#</a> 线程调用</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mainwindow.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ui_mainwindow.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mythread.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QThread></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>MainWindow<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 当运行，用户点击按钮，就要调用子线程生成随机数，传递给主线程</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//1, 创建子线程对象，</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//    QThread* t1 = new QThread (this);  // 添加之后会析构申请的空间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//    QThread* t2 = new QThread(this);</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//    QThread* t3 = new QThread(this);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    QThread<span class=\"token operator\">*</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QThread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    QThread<span class=\"token operator\">*</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QThread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    QThread<span class=\"token operator\">*</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QThread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//2, 创建任务类的对象</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    Generate<span class=\"token operator\">*</span> gen <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Generate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    BubbleSort <span class=\"token operator\">*</span> bubble <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BubbleSort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    QuickSort <span class=\"token operator\">*</span> quick <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QuickSort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//3, 将任务对象移动到某个子线程中</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    gen<span class=\"token operator\">-></span><span class=\"token function\">moveToThread</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成随机数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    bubble<span class=\"token operator\">-></span><span class=\"token function\">moveToThread</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    quick<span class=\"token operator\">-></span><span class=\"token function\">moveToThread</span><span class=\"token punctuation\">(</span>t3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 信号和槽，主函数将 starting 的数，传递给子线程的 recNum 用户接受数量</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>MainWindow<span class=\"token double-colon punctuation\">::</span>starting<span class=\"token punctuation\">,</span>gen<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Generate<span class=\"token double-colon punctuation\">::</span>working<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 启动子线程，使用信号与槽，当用户点击</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>start<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QPushButton<span class=\"token double-colon punctuation\">::</span>clicked<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        emit <span class=\"token function\">starting</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 给子线程发送信号</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        t1<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用子线程运行方法，还没有执行</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 当有了随机数之后，开始起痘冒泡和快速排序线程</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 在排序之前，线程要先拿到所需要的数据</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Generate<span class=\"token double-colon punctuation\">::</span>sendArray<span class=\"token punctuation\">,</span>bubble<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>BubbleSort<span class=\"token double-colon punctuation\">::</span>working<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Generate<span class=\"token double-colon punctuation\">::</span>sendArray<span class=\"token punctuation\">,</span>quick<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QuickSort<span class=\"token double-colon punctuation\">::</span>working<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 添加 connect 用于接受子线程传过来的 list 容器随机数</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">// 连接子线程，但子线程信号 sendArray 运行时，主线程接受</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Generate<span class=\"token double-colon punctuation\">::</span>sendArray<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>QVector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// 主线程开始接受来自子线程发送过来的 list，于此同时子线程开始运行</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        t2<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        t3<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            ui<span class=\"token operator\">-></span>randlist<span class=\"token operator\">-></span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 排序运行之后，将排序好的数据放到主线程</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>bubble<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>BubbleSort<span class=\"token double-colon punctuation\">::</span>finish<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            ui<span class=\"token operator\">-></span>bubblelist<span class=\"token operator\">-></span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>quick<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QuickSort<span class=\"token double-colon punctuation\">::</span>finish<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            ui<span class=\"token operator\">-></span>quicklist<span class=\"token operator\">-></span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token comment\">// 手写销毁资源</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>MainWindow<span class=\"token double-colon punctuation\">::</span>destroy<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        t1<span class=\"token operator\">-></span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        t1<span class=\"token operator\">-></span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        t1<span class=\"token operator\">-></span><span class=\"token function\">deleteLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放空间</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        t2<span class=\"token operator\">-></span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        t2<span class=\"token operator\">-></span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        t2<span class=\"token operator\">-></span><span class=\"token function\">deleteLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放空间</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        t3<span class=\"token operator\">-></span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        t3<span class=\"token operator\">-></span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        t3<span class=\"token operator\">-></span><span class=\"token function\">deleteLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放空间</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        gen<span class=\"token operator\">-></span><span class=\"token function\">deleteLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        bubble<span class=\"token operator\">-></span><span class=\"token function\">deleteLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        quick<span class=\"token operator\">-></span><span class=\"token function\">deleteLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"3线程池\"><a class=\"anchor\" href=\"#3线程池\">#</a> 3, 线程池</h2>\n<blockquote>\n<p>创建子线程</p>\n</blockquote>\n<ul>\n<li>引用头文件</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QRunnable></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QVector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QObject></span></span></pre></td></tr></table></figure><h3 id=\"头文件\"><a class=\"anchor\" href=\"#头文件\">#</a> 头文件</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建的子线程，生成随机数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Generate</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">QRunnable</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">Generate</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 接受主线程传过来的参数，随机数 num</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">recNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 子线程运行函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 使用信号槽将数据传递给主线程，界面操作只能由主线程来进行</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">sendArray</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 设置信号槽接受主线程传过来的数据</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> m_num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 冒泡排序</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BubbleSort</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">QRunnable</span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">BubbleSort</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 接受主线程传过来的参数，数组</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">recArray</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 子线程运行函数</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 使用信号槽将数据传递给主线程，界面操作只能由主线程来进行</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 发送的有序数组</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">public</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 设置信号槽接受主线程传过来的数据</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> m_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">// 快速排序</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">QuickSort</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QObject</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">QRunnable</span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">// 接受主线程传过来的参数，随机数 num</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">recArray</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 子线程运行函数</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\">// 使用信号槽将数据传递给主线程，界面操作只能由主线程来进行</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 设置信号槽接受主线程传过来的数据</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> m_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// 实现快速排序算法</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">// 容器，起始位置，结束位置</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>list<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"函数实现\"><a class=\"anchor\" href=\"#函数实现\">#</a> 函数实现</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mythread.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QElapsedTimer></span>  <span class=\"token comment\">// 记录时间</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QtDebug></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QThread></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Generate</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Generate</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QObject</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">QRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">setAutoDelete</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Generate</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">recNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    m_num <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Generate</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"生成随机数的线程地址\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 存放随机数 vector 容器</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 子线程生成数据，要通过传递给主线程</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    QElapsedTimer time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    time<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 开始记录</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> m_num<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 从尾部插入</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">qrand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    qint64 milsec <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">elapsed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 毫秒</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"生成\"</span> <span class=\"token operator\">&lt;&lt;</span>m_num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"个随机总数用时\"</span><span class=\"token operator\">&lt;&lt;</span>milsec<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"毫秒\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 发送给主线程</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    emit <span class=\"token function\">sendArray</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将数据发给主线程</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 冒泡排序，补齐 parent</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token class-name\">BubbleSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BubbleSort</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QObject</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">QRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">setAutoDelete</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 接受传递的 vector 变量</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">BubbleSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">recArray</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    m_list <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 实现冒泡排序，实现相邻两个元素的交换</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">BubbleSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"冒泡排序的线程地址\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// 存放随机数 vector 容器</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    QElapsedTimer time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    time<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m_list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>m_list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从后数往前比较</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>m_list<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                temp <span class=\"token operator\">=</span> m_list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                m_list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> m_list<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                m_list<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    qint64 milsec <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">elapsed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"冒泡排序用时\"</span> <span class=\"token operator\">&lt;&lt;</span>milsec<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"毫秒\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\">// 发送给主线程</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    emit <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span>m_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将数据发给主线程</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">// 快速，补齐 parent</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token class-name\">QuickSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QObject</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">QRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token function\">setAutoDelete</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自动释放空间</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">// 接受传递的 vector 变量</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QuickSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">recArray</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    m_list <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token comment\">// 实现快速排序</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QuickSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"快速排序的线程地址\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token comment\">// 存放随机数 vector 容器</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    QElapsedTimer time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    time<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token comment\">// 快速排序算法</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>m_list<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>m_list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    qint64 milsec <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">elapsed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"快速排序用时\"</span> <span class=\"token operator\">&lt;&lt;</span>milsec<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"毫秒\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token comment\">// 发送给主线程</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    emit <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span>m_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将数据发给主线程</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token comment\">// 快排算法</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QuickSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token comment\">// 拿出第一个元素，保存到 x 中，第一个位置为空</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token comment\">// 从右向左找小于 x 的数</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token comment\">// 左移，直到遇到小于等于 x 的数</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                <span class=\"token comment\">// 将右侧找到的小于 x 的元素放入左侧坑中，右侧出现一个坑</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                <span class=\"token comment\">// 左侧元素索引后移</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token comment\">// 从左向右找大于等于 x 的数</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                <span class=\"token comment\">// 右移，直到遇到大于 x 的数</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                <span class=\"token comment\">// 将左侧找到的元素放入右侧坑中，左侧出现一个坑</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                <span class=\"token comment\">// 右侧元素索引向前移动</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token comment\">// 此时 i=j, 将保存在 x 中的数填入坑中</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 递归调用</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"主函数调用\"><a class=\"anchor\" href=\"#主函数调用\">#</a> 主函数调用</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mainwindow.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ui_mainwindow.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mythread.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QThreadPool></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>MainWindow<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 当运行，用户点击按钮，就要调用子线程生成随机数，传递给主线程</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 创建任务类对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Generate<span class=\"token operator\">*</span> gen <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Generate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    BubbleSort <span class=\"token operator\">*</span> bubble <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BubbleSort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    QuickSort <span class=\"token operator\">*</span> quick <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QuickSort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 信号和槽，主函数将 starting 的数，传递给子线程的 recNum 用户接受数量</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>MainWindow<span class=\"token double-colon punctuation\">::</span>starting<span class=\"token punctuation\">,</span>gen<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Generate<span class=\"token double-colon punctuation\">::</span>recNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 启动子线程，使用信号与槽，当用户点击</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>start<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QPushButton<span class=\"token double-colon punctuation\">::</span>clicked<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        emit <span class=\"token function\">starting</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 给子线程发送信号</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">QThreadPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">globalInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 线程池中运行</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 当有了随机数之后，开始起痘冒泡和快速排序线程</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 在排序之前，线程要先拿到所需要的数据</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Generate<span class=\"token double-colon punctuation\">::</span>sendArray<span class=\"token punctuation\">,</span>bubble<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>BubbleSort<span class=\"token double-colon punctuation\">::</span>recArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Generate<span class=\"token double-colon punctuation\">::</span>sendArray<span class=\"token punctuation\">,</span>quick<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QuickSort<span class=\"token double-colon punctuation\">::</span>recArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 添加 connect 用于接受子线程传过来的 list 容器随机数</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 连接子线程，但子线程信号 sendArray 运行时，主线程接受</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Generate<span class=\"token double-colon punctuation\">::</span>sendArray<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>QVector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 主线程开始接受来自子线程发送过来的 list，于此同时子线程开始运行</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">QThreadPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">globalInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>bubble<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 线程池中运行</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">QThreadPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">globalInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>quick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 线程池中运行</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            ui<span class=\"token operator\">-></span>randlist<span class=\"token operator\">-></span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 排序运行之后，将排序好的数据放到主线程</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>bubble<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>BubbleSort<span class=\"token double-colon punctuation\">::</span>finish<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            ui<span class=\"token operator\">-></span>bubblelist<span class=\"token operator\">-></span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>quick<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QuickSort<span class=\"token double-colon punctuation\">::</span>finish<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            ui<span class=\"token operator\">-></span>quicklist<span class=\"token operator\">-></span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"4线程\"><a class=\"anchor\" href=\"#4线程\">#</a> 4，线程</h2>\n<h3 id=\"头文件-2\"><a class=\"anchor\" href=\"#头文件-2\">#</a> 头文件</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">MYTHREAD_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MYTHREAD_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QThread></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QVector></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 创建的子线程，生成随机数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Generate</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QThread</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">Generate</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 接受主线程传过来的参数，随机数 num</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">recNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 子线程运行函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 使用信号槽将数据传递给主线程，界面操作只能由主线程来进行</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">sendArray</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 设置信号槽接受主线程传过来的数据</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> m_num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 冒泡排序</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BubbleSort</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QThread</span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">BubbleSort</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 接受主线程传过来的参数，数组</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">recArray</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 子线程运行函数</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 使用信号槽将数据传递给主线程，界面操作只能由主线程来进行</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// 发送的有序数组</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">public</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 设置信号槽接受主线程传过来的数据</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> m_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">// 快速排序</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">QuickSort</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QThread</span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    Q_OBJECT</pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">explicit</span> <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\">// 接受主线程传过来的参数，随机数 num</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">recArray</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 子线程运行函数</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>signals<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\">// 使用信号槽将数据传递给主线程，界面操作只能由主线程来进行</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">public</span> slots<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// 设置信号槽接受主线程传过来的数据</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> m_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token comment\">// 实现快速排序算法</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token comment\">// 容器，起始位置，结束位置</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>list<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// MYTHREAD_H</span></span></pre></td></tr></table></figure><h3 id=\"函数实现-2\"><a class=\"anchor\" href=\"#函数实现-2\">#</a> 函数实现</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mythread.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QElapsedTimer></span>  <span class=\"token comment\">// 记录时间</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QtDebug></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Generate</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Generate</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QThread</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Generate</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">recNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    m_num <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Generate</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"生成随机数的线程地址\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 存放随机数 vector 容器</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 子线程生成数据，要通过传递给主线程</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    QElapsedTimer time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    time<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 开始记录</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> m_num<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 从尾部插入</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">qrand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    qint64 milsec <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">elapsed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 毫秒</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"生成\"</span> <span class=\"token operator\">&lt;&lt;</span>m_num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"个随机总数用时\"</span><span class=\"token operator\">&lt;&lt;</span>milsec<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"毫秒\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 发送给主线程</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    emit <span class=\"token function\">sendArray</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将数据发给主线程</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 冒泡排序，补齐 parent</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token class-name\">BubbleSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BubbleSort</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QThread</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 接受传递的 vector 变量</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">BubbleSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">recArray</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    m_list <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">// 实现冒泡排序，实现相邻两个元素的交换</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">BubbleSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"冒泡排序的线程地址\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 存放随机数 vector 容器</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    QElapsedTimer time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    time<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m_list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>m_list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从后数往前比较</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>m_list<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                temp <span class=\"token operator\">=</span> m_list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                m_list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> m_list<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                m_list<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    qint64 milsec <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">elapsed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"冒泡排序用时\"</span> <span class=\"token operator\">&lt;&lt;</span>milsec<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"毫秒\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 发送给主线程</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    emit <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span>m_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将数据发给主线程</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">// 快速，补齐 parent</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token class-name\">QuickSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>QObject <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">QThread</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">// 接受传递的 vector 变量</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QuickSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">recArray</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    m_list <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">// 实现快速排序</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QuickSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"快速排序的线程地址\"</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token class-name\">QThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token comment\">// 存放随机数 vector 容器</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    QElapsedTimer time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    time<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token comment\">// 快速排序算法</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>m_list<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>m_list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    qint64 milsec <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">elapsed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"快速排序用时\"</span> <span class=\"token operator\">&lt;&lt;</span>milsec<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"毫秒\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token comment\">// 发送给主线程</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    emit <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span>m_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将数据发给主线程</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token comment\">// 快排算法</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">QuickSort</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token comment\">// 拿出第一个元素，保存到 x 中，第一个位置为空</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token comment\">// 从右向左找小于 x 的数</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                <span class=\"token comment\">// 左移，直到遇到小于等于 x 的数</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                <span class=\"token comment\">// 将右侧找到的小于 x 的元素放入左侧坑中，右侧出现一个坑</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                <span class=\"token comment\">// 左侧元素索引后移</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token comment\">// 从左向右找大于等于 x 的数</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                <span class=\"token comment\">// 右移，直到遇到大于 x 的数</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                <span class=\"token comment\">// 将左侧找到的元素放入右侧坑中，左侧出现一个坑</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                <span class=\"token comment\">// 右侧元素索引向前移动</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                s<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token comment\">// 此时 i=j, 将保存在 x 中的数填入坑中</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 递归调用</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"函数调用\"><a class=\"anchor\" href=\"#函数调用\">#</a> 函数调用</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mainwindow.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ui_mainwindow.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mythread.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>MainWindow<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 当运行，用户点击按钮，就要调用子线程生成随机数，传递给主线程</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 创建子线程对象，</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Generate<span class=\"token operator\">*</span> gen <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Generate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    BubbleSort <span class=\"token operator\">*</span> bubble <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BubbleSort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    QuickSort <span class=\"token operator\">*</span> quick <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QuickSort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 信号和槽，主函数将 starting 的数，传递给子线程的 recNum 用户接受数量</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>MainWindow<span class=\"token double-colon punctuation\">::</span>starting<span class=\"token punctuation\">,</span>gen<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Generate<span class=\"token double-colon punctuation\">::</span>recNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 启动子线程，使用信号与槽，当用户点击</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-></span>start<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QPushButton<span class=\"token double-colon punctuation\">::</span>clicked<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        emit <span class=\"token function\">starting</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 给子线程发送信号</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        gen<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用子线程运行方法</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 当有了随机数之后，开始起痘冒泡和快速排序线程</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 在排序之前，线程要先拿到所需要的数据</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Generate<span class=\"token double-colon punctuation\">::</span>sendArray<span class=\"token punctuation\">,</span>bubble<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>BubbleSort<span class=\"token double-colon punctuation\">::</span>recArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Generate<span class=\"token double-colon punctuation\">::</span>sendArray<span class=\"token punctuation\">,</span>quick<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QuickSort<span class=\"token double-colon punctuation\">::</span>recArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 添加 connect 用于接受子线程传过来的 list 容器随机数</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 连接子线程，但子线程信号 sendArray 运行时，主线程接受</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Generate<span class=\"token double-colon punctuation\">::</span>sendArray<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>QVector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 主线程开始接受来自子线程发送过来的 list，于此同时子线程开始运行</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        bubble<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        quick<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            ui<span class=\"token operator\">-></span>randlist<span class=\"token operator\">-></span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">// 排序运行之后，将排序好的数据放到主线程</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>bubble<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>BubbleSort<span class=\"token double-colon punctuation\">::</span>finish<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            ui<span class=\"token operator\">-></span>bubblelist<span class=\"token operator\">-></span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>quick<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>QuickSort<span class=\"token double-colon punctuation\">::</span>finish<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>QVector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            ui<span class=\"token operator\">-></span>quicklist<span class=\"token operator\">-></span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>MainWindow<span class=\"token double-colon punctuation\">::</span>destroyed<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        gen<span class=\"token operator\">-></span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        gen<span class=\"token operator\">-></span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        gen<span class=\"token operator\">-></span><span class=\"token function\">deleteLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放空间</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        bubble<span class=\"token operator\">-></span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        bubble<span class=\"token operator\">-></span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        bubble<span class=\"token operator\">-></span><span class=\"token function\">deleteLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放空间</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        quick<span class=\"token operator\">-></span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        quick<span class=\"token operator\">-></span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        quick<span class=\"token operator\">-></span><span class=\"token function\">deleteLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放空间</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "Qt",
                "C++",
                "计算机科学",
                "Qt"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Linux/linux%E5%85%A5%E9%97%A82/",
            "url": "https://www.blog.foryouos.cn/computer-science/Linux/linux%E5%85%A5%E9%97%A82/",
            "title": "linux入门2",
            "date_published": "2023-04-21T01:39:43.000Z",
            "content_html": "<h1 id=\"linux基础2\"><a class=\"anchor\" href=\"#linux基础2\">#</a> Linux 基础 2</h1>\n<blockquote>\n<p><code>Linux中一切皆文件</code> <br />\n<img data-src=\"https://i.imgtg.com/2023/04/19/uKFaD.jpg\" alt=\"Linux运行全局\" /></p>\n</blockquote>\n<h2 id=\"查看指令所在的位置\"><a class=\"anchor\" href=\"#查看指令所在的位置\">#</a> 查看指令所在的位置</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">which</span> <span class=\"token builtin class-name\">pwd</span></pre></td></tr></table></figure><h2 id=\"查看环境变量\"><a class=\"anchor\" href=\"#查看环境变量\">#</a> 查看环境变量</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@ecs-39448704 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo $PATH</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</pre></td></tr></table></figure><h2 id=\"命令行补充\"><a class=\"anchor\" href=\"#命令行补充\">#</a> 命令行补充</h2>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th style=\"text-align:center\">功能</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+p</td>\n<td style=\"text-align:center\">显示输入的 <code>上一个历史命令</code></td>\n<td style=\"text-align:center\">从输入的最后一个命令往 <code>前倒</code> ，也可以使用 ↑键</td>\n</tr>\n<tr>\n<td>Ctrl+n</td>\n<td style=\"text-align:center\">显示输入的下一个历史命令</td>\n<td style=\"text-align:center\">也可以使用 ↓键</td>\n</tr>\n<tr>\n<td>Ctrl+a</td>\n<td style=\"text-align:center\"><code> 光标</code> 移动命命令行首</td>\n<td style=\"text-align:center\">也可以使用 Home 键</td>\n</tr>\n<tr>\n<td>Ctrl+e</td>\n<td style=\"text-align:center\">光标移动命命令行尾</td>\n<td style=\"text-align:center\">也可以使用 End 键</td>\n</tr>\n<tr>\n<td>Ctrl+u</td>\n<td style=\"text-align:center\">删除 <code>光标前</code> 的部分字符串</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td>Ctrl+k</td>\n<td style=\"text-align:center\">删除光标后的部分字符串</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td>Backspace/Delete</td>\n<td style=\"text-align:center\">删除光标前 / 后的一个字符</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"双目录\"><a class=\"anchor\" href=\"#双目录\">#</a> 双目录</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@ecs-39448704 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd ../../</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@ecs-39448704 /<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>bin  boot  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  patch  proc  root  run  sbin  srv  sys  titan  tmp  usr  var  www</pre></td></tr></table></figure><h2 id=\"输出文件\"><a class=\"anchor\" href=\"#输出文件\">#</a> 输出文件</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//ll输出文件信息， -F是否还有子目录加/，h文件以文件大小形式输出，a总大小</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@ecs-39448704 /<span class=\"token punctuation\">]</span><span class=\"token comment\"># ll -Fha</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>total 84K</pre></td></tr></table></figure><h2 id=\"文件类型\"><a class=\"anchor\" href=\"#文件类型\">#</a> 文件类型</h2>\n<ul>\n<li>-: 普通的文件，在 Linux 终端中 <code>没有</code> 执行权限的为 <code>白色</code> ， <code>压缩包</code> 为 <code>红色</code> ， <code>可执行程序</code> 为 <code>绿色</code> 字体</li>\n<li>d: <code> 目录</code>  (directory), 在 Linux 终端中为 <code>蓝色</code> 字体，如果目录的所有权限都是开放的，有绿色的背景色</li>\n<li>l:  <code>软链接</code> 文件 (link), 相当于 windows 中的 <code>快捷方式</code> ，在 Linux 终端中为 <code>淡蓝色</code>  (青色) 字体</li>\n<li>c: <code> 字符设备</code>  (char), 在 Linux 终端中为 <code>黄色</code> 字体</li>\n<li>b:  <code>块</code> 设备 (block), 在 Linux 终端中为 <code>黄色</code> 体</li>\n<li>p:  <code>管道</code> 文件 (pipe), 在 Linux 终端中为 <code>棕黄色</code> 字体</li>\n<li>s: 本地 <code>套接字文件</code>  (socket), 在 Linux 终端中为 <code>粉色</code> 字体</li>\n</ul>\n<h2 id=\"用户类型\"><a class=\"anchor\" href=\"#用户类型\">#</a> 用户类型</h2>\n<blockquote>\n<p>文件类型包含: <code>文件所有者</code> ， <code>文件所属组用户</code> ， <code>其他人</code> <br />\n <code>r </code> 读  <code>w </code> 写 <code>x</code>  执行 - execute<br />\n 没有权限   <code>-</code></p>\n</blockquote>\n<ul>\n<li>第 <code>一个字母</code> 为 <code>文件</code> 类型</li>\n<li>第 <code>一</code> 个文件所有者，第 <code>二</code> 个为 <code>文件所属组用户</code> ，第三为 <code>其他人</code></li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@ecs-39448704 /<span class=\"token punctuation\">]</span><span class=\"token comment\"># ll</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>total <span class=\"token number\">72</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            别名个数 所有权用户  目录磁盘空间大小<span class=\"token punctuation\">(</span>不代表内部<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>lrwxrwxrwx.   <span class=\"token number\">1</span> root root     <span class=\"token number\">7</span> Dec <span class=\"token number\">18</span>  <span class=\"token number\">2018</span> bin -<span class=\"token operator\">></span> usr/bin</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>dr-xr-xr-x.   <span class=\"token number\">5</span> root root  <span class=\"token number\">4096</span> Jun <span class=\"token number\">28</span>  <span class=\"token number\">2022</span> boot</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>drwxr-xr-x   <span class=\"token number\">20</span> root root  <span class=\"token number\">3140</span> Apr <span class=\"token number\">11</span> 07:45 dev</pre></td></tr></table></figure><h2 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h2>\n<blockquote>\n<p><code>rm</code> ：可以 <code>直接删除</code> 文件<br />\n <code>rm -r </code>   删除目录，参数 - r 是 <code>递归(recursion)</code> <br />\n <code>-i</code>  删除时给提示<br />\n <code>-f </code> 删除时 <code>没有任何</code> 提示</p>\n</blockquote>\n<h2 id=\"拷贝\"><a class=\"anchor\" href=\"#拷贝\">#</a> 拷贝</h2>\n<blockquote>\n<p>cp 对 <code>文件</code> 可以直接拷贝<br />\n <code>目录</code> 拷贝要加参数  <code>-r</code></p>\n</blockquote>\n<h2 id=\"修改文件权限\"><a class=\"anchor\" href=\"#修改文件权限\">#</a> 修改文件权限</h2>\n<h3 id=\"代码法\"><a class=\"anchor\" href=\"#代码法\">#</a> 代码法</h3>\n<blockquote>\n<p><code>chmod</code></p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token function\">who</span> <span class=\"token punctuation\">[</span>+<span class=\"token operator\">|</span>-<span class=\"token operator\">|</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span> mod 文件名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>who: </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t- u :user -<span class=\"token operator\">></span>文件所有者</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t- g ：group -<span class=\"token operator\">></span>文件所属组用户</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t- o: other -<span class=\"token operator\">></span>其他</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t- a: all，以上三类人 u+g+o</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>mod:权限</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tr: 读</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tw: 写</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tx：执行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t- <span class=\"token builtin class-name\">:</span> 没有权限</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>对权限的操作</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t+:添加权限</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t-:去除权限</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token operator\">=</span>:覆盖权限</pre></td></tr></table></figure><h3 id=\"数字法\"><a class=\"anchor\" href=\"#数字法\">#</a> 数字法</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token punctuation\">[</span>+<span class=\"token operator\">|</span>-<span class=\"token operator\">|</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span> mod 文件名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>- mod 权限描述 所有权限都放开时 <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>- <span class=\"token number\">4</span> <span class=\"token builtin class-name\">read</span> ,r</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>- <span class=\"token number\">2</span> write,w</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>- <span class=\"token number\">1</span> execute ,x</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>- <span class=\"token number\">0</span>:没有权限</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#分解:chmod 0567 a.txt</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">0</span>：八进制</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">5</span>：文件所有者 r+x</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">6</span>: 文件所属用户  r + w</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">7</span> 其他人 r+w+x</pre></td></tr></table></figure><h3 id=\"修改文件所有者\"><a class=\"anchor\" href=\"#修改文件所有者\">#</a> 修改文件所有者</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> 新的所有者:新的组名 文件名</pre></td></tr></table></figure><h3 id=\"修改文件所属组\"><a class=\"anchor\" href=\"#修改文件所属组\">#</a> 修改文件所属组</h3>\n<blockquote>\n<p>只修改 <code>文件所属的组</code> ，普通用户没有这个权限，借助 <code>管理与安全线</code></p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">chgrp</span> 新的组 文件名</pre></td></tr></table></figure><h2 id=\"创建文件\"><a class=\"anchor\" href=\"#创建文件\">#</a> 创建文件</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> 创建目录</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">touch</span> 文件 //创建文件，存在更新时间，不存在创建</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">cat</span> 文件   //查看文件内容</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">which</span> \t//查看命令所在位置</pre></td></tr></table></figure><h2 id=\"重定向\"><a class=\"anchor\" href=\"#重定向\">#</a> 重定向</h2>\n<blockquote>\n<p>将内容快速叠加到文件当中，修改输出数据的文字<br />\n <code>&gt;</code>  将文件内容写入到指定文件中，如果文件中 <code>已有数据</code> ，则会使用新数据覆盖原数据<br />\n <code>&gt;&gt;</code>  将输出的内容追加到指定的文件尾部</p>\n</blockquote>\n<h2 id=\"添加新用户\"><a class=\"anchor\" href=\"#添加新用户\">#</a> 添加新用户</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//第一种</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> adduser 用户名</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//第二种</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//cenos</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">useradd</span> 用户名</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//ubuntu  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">useradd</span> <span class=\"token parameter variable\">-m</span> <span class=\"token parameter variable\">-s</span> /bin/bash 用户名</pre></td></tr></table></figure><h2 id=\"删除用户\"><a class=\"anchor\" href=\"#删除用户\">#</a> 删除用户</h2>\n<blockquote>\n<p>使用 <code>userdel</code>  命令删除系统中用户 ID 和所属组 ID 等相关信息，但是在某些 Linux 版本中虽然被删除了，但是 <code>家目录</code> 却没有被删除，需要手动将其删除</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//-r 一并把用户的家目录页删除，不加不删除</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">userdel</span> 用户名 <span class=\"token parameter variable\">-r</span></pre></td></tr></table></figure><h2 id=\"添加删除用户组\"><a class=\"anchor\" href=\"#添加删除用户组\">#</a> 添加删除用户组</h2>\n<blockquote>\n<p>使用 groupadd 添加用户组，使用 groupdel 删除用户组<br />\n验证成功，查看 <code>/etc/group</code>  文件，里面用户相关信息以及用户组 ID</p>\n</blockquote>\n<h2 id=\"修改密码\"><a class=\"anchor\" href=\"#修改密码\">#</a> 修改密码</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">passwd</span> :修改当前用户</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//修改非当前用户密码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">passwd</span> 用户名</pre></td></tr></table></figure><h2 id=\"压缩命令\"><a class=\"anchor\" href=\"#压缩命令\">#</a> 压缩命令</h2>\n<h3 id=\"压缩tar\"><a class=\"anchor\" href=\"#压缩tar\">#</a> 压缩 <code>tar</code></h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x:释放压缩文件内容，解压</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>c:创建压缩文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>z:使用gzip方式进行文件压缩.tar.gz</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>j：使用bzip2的方式进行文件压缩.tar.bz2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>v：压缩过程中显示压缩信息，可以省略不写</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>f:指定压缩包的名字</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 语法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">tar</span> 参数 生成压缩包的名字 要压缩的文件<span class=\"token punctuation\">(</span>文件或目录<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 压缩名字</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t- 压缩使用gzip方式，标准后缀为.tar.gz</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t- 压缩使用bzip2方式，标准后缀为.tar.bz2</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t-</pre></td></tr></table></figure><ul>\n<li>tar 解压</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> 参数 压缩包名 <span class=\"token parameter variable\">-c</span> 解压目录</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> xzv 名称 <span class=\"token parameter variable\">-c</span> 目录</pre></td></tr></table></figure><ul>\n<li>zip 解压</li>\n</ul>\n<blockquote>\n<p>使用 zip 压缩目录，必须添加参数 <code>-r</code> ，这样才能将子目录中的文件一并压缩。zi 压缩会 自动生成文件后缀.zip</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>zip <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>r<span class=\"token punctuation\">]</span> 压缩包名 要压缩的文件</pre></td></tr></table></figure><ul>\n<li>rar</li>\n</ul>\n<blockquote>\n<p>安装</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://www.rarlab.com/rar/rarlinux-x64-6.0.0.tar.gz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> rarlinux-x64-6.0.0.tar.gz </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mv</span> ./rar /opt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /opt/rar/rar /usr/local/bin/rar</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /opt/rar/unrar /usr/local/bin/unrar</pre></td></tr></table></figure><blockquote>\n<p>使用，文件压缩，需要使用参数 a ，压缩包会自动添加后缀.rar<br />\n 如果压缩了目录，需要加参数 - r</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rar</span> a 压缩包名 要压缩的文件 <span class=\"token punctuation\">[</span>-r<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><blockquote>\n<p>解压缩</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#解压参数 x，默认加压到当前目录中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rar/unrar x 压缩包名字</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 解压到指定目录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rar/unrar x 压缩包姓名 解压目录</pre></td></tr></table></figure><h2 id=\"xz文件\"><a class=\"anchor\" href=\"#xz文件\">#</a> xz 文件</h2>\n<ul>\n<li>压缩</li>\n</ul>\n<blockquote>\n<p>创建文件，首先将需要压缩的文件大宝 <code>tar cvf xxx.tar files</code>  然后对大宝文件进行压缩 <code>xz -z xxx.tar</code> 。这样就可以得到一个大包之后的压缩文件<br />\n使用 <code>xz</code>  工具压缩文件需要添加参数 <code>-z</code></p>\n</blockquote>\n<ul>\n<li>解压缩</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 压缩包解压缩，得到 xxx.tar</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>xz <span class=\"token parameter variable\">-d</span> xxx.tar.xz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 第二步，将 xxx.tar 中的文件释放到当前目录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">tar</span> xvf.xxx.tar</pre></td></tr></table></figure><h2 id=\"文件搜索\"><a class=\"anchor\" href=\"#文件搜索\">#</a> 文件搜索</h2>\n<h3 id=\"find\"><a class=\"anchor\" href=\"#find\">#</a> find</h3>\n<blockquote>\n<p>主要功能时根据文件的属性，查找对应的磁盘文件 ( <code>文件名</code> ， <code>文件类型</code> ， <code>文件大小</code> ， <code>文件的目录深度</code> )。模糊查询必须要使用对应的通配符， <code>*</code>  和 <code>？</code> , 其中 <code>*</code>  可以匹配  <code>零</code> 个或者 <code>多</code> 个字符 <code>？</code> 用于匹配 <code>单</code> 个字符。</p>\n</blockquote>\n<ul>\n<li><code>-name</code></li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 语法格式：根据文件名搜搜</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">find</span> 搜索的路径 <span class=\"token parameter variable\">-name</span> 要搜索的文件名</pre></td></tr></table></figure><ul>\n<li><code>-type</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">文件类型</th>\n<th style=\"text-align:center\">类型的字符描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">本地套接字类型</td>\n<td style=\"text-align:center\">s</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">普通文件类型</td>\n<td style=\"text-align:center\">f</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">目录类型</td>\n<td style=\"text-align:center\">d</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">软连接类型</td>\n<td style=\"text-align:center\">l</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">字符设备类型</td>\n<td style=\"text-align:center\">c</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">块设备类型</td>\n<td style=\"text-align:center\">b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">管道类型</td>\n<td style=\"text-align:center\">p</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#语法格式:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">find</span> 搜索的路径 <span class=\"token parameter variable\">-type</span> 文件类型</pre></td></tr></table></figure><ul>\n<li><code>-size</code></li>\n</ul>\n<blockquote>\n<p>根据文件大小进行搜搜，需要使用参数 <code>-size</code>  常见的分别有 K (小写)，M (大写)，G (大写)。</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#找到大约 4M 的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@ecs-39448704 bin<span class=\"token punctuation\">]</span><span class=\"token comment\"># find ./ -size +4M</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./cpack</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./gdb</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>./ld.gold</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>./ctest</pre></td></tr></table></figure><ul>\n<li>基于目录层级</li>\n</ul>\n<blockquote>\n<p><code>-maxdepth</code> ：最多搜索到第多少层目录<br />\n <code>-mindepth</code> ：至少从第几层开始搜索</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">find</span> / <span class=\"token parameter variable\">-maxdepth</span> <span class=\"token number\">5</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.txt\"</span></pre></td></tr></table></figure><ul>\n<li>exec  ( <code>ok</code>  与此相同)</li>\n</ul>\n<blockquote>\n<p>exec 是 find 的参数，可以在 <code>exec参数后添加其他需要执行的shell命令 find添加了exec参数之后，命令的</code> 尾 <code>部需要添加一个后缀</code>  {} ; <code>,注</code>  {} <code>和</code>  ` 中间有 <code>空格</code></p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> 路径 参数 参数值 <span class=\"token parameter variable\">-exec</span> shell 命令2 <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>xargs </code></li>\n</ul>\n<blockquote>\n<p>可以在 find 命令后直接使用 <code>管道</code> 完成前后命令的 <code>数据传递</code></p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> 路径 参数 参数值 <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> shell 命令2</pre></td></tr></table></figure><blockquote>\n<p>区别:<br />\n <code>-exec</code>  : 将 find 查询的结果逐条传递给后边的 shell 命令<br />\n <code>-xargs</code> ：将 find 查询的结果一次性传递给后边的 shell 命令</p>\n</blockquote>\n<ul>\n<li><code>grap</code></li>\n</ul>\n<blockquote>\n<ul>\n<li>-r：如果需要搜索目录中的文件内容，需要进行递归操作，必须指定该参数</li>\n<li>-i：对应要搜索的关键字，忽略字符大小写的差别</li>\n<li>-n：在显示符号样式那一行之前，标示出该行的列数编号</li>\n</ul>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token string\">\"搜索的内容\"</span> 搜索的路径/文件 参数</pre></td></tr></table></figure><h2 id=\"locate\"><a class=\"anchor\" href=\"#locate\">#</a> locate</h2>\n<blockquote>\n<p><code>locate</code>  是一个 <code>简</code> 化版的 <code>find</code> , 可以根据 <code>文件名</code> 搜索本地的 <code>磁盘文</code> 件，本地数据库 Linux 系统 <code>每天自动</code> 更新一次，为避免的不及时性，在运行之前，先使用 <code>updatedb</code>  命令， <code>手动更新数据库</code></p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 更新本地数据库磁盘文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>updatedb</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 搜索所有目录下以 test 开头的文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">locate</span> <span class=\"token builtin class-name\">test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 搜索指定目录下以某个关键字 test 开头的文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">locate</span> /home/foryouos/test</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 搜索文件，忽略文件名的大小写使用参数 - i</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">locate</span> TEST <span class=\"token parameter variable\">-i</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 列出前 N 个匹配的文件名称或路径名称，使用参数 - n</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">locate</span> <span class=\"token builtin class-name\">test</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 基于正则表达式</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">locate</span> <span class=\"token parameter variable\">-r</span> <span class=\"token string\">\"\\.cpp$\"</span></pre></td></tr></table></figure><blockquote>\n<p>正则表达式:<br />\n1, 在正则表达式中 <code>.</code>  可以匹配任何一个非 <code>\\n</code>  的单字符<br />\n 2，上边的命令中使用转译字符 <code>\\</code>  对特殊字符 <code>.</code>  转译，就得到了普通的字符 <code>.</code> <br />\n3, 在正则表达式中 <code>$</code>  放到字符尾部，表示字符串必须以这个字符结尾，上边的命令中修饰的是字符 p<br />\n4, 正则表达式中的字符 c 和后边的字符 <code>p</code>  需要进行字节匹配，没有特殊含义</p>\n</blockquote>\n<h2 id=\"vim\"><a class=\"anchor\" href=\"#vim\">#</a> vim</h2>\n<blockquote>\n<p>vim 帮助文档  <code>vimtutor</code></p>\n<p>安装</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo apt install vim</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sudo yum install vim</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vim <span class=\"token operator\">--</span>version</pre></td></tr></table></figure></blockquote>\n<h3 id=\"vim的模式\"><a class=\"anchor\" href=\"#vim的模式\">#</a>  <code>vim</code>  的模式</h3>\n<ul>\n<li><code>命令</code> 模式:  <code>查看文件内容</code> ， <code>修改文件</code> ， <code>关键的搜索</code></li>\n<li><code>末行</code> 模式：在该模式下主要对文件内容 <code>进行修改和内容添加</code></li>\n<li><code>编辑</code> 模式： <code>执行Linux命令</code> ， <code>保存文件</code> ， <code>跳转</code> ， <code>窗口分屏</code></li>\n</ul>\n<blockquote>\n<p>注：编辑模式和末行模式之间直接切换<br />\n<img data-src=\"https://i.imgtg.com/2023/04/22/u8W7t.png\" alt=\"vim模式切换\" title=\"vim的切换\" /></p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 打开文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">vim</span> 文件名</pre></td></tr></table></figure><h2 id=\"命令模式\"><a class=\"anchor\" href=\"#命令模式\">#</a> 命令模式</h2>\n<h3 id=\"代码格式化\"><a class=\"anchor\" href=\"#代码格式化\">#</a> 代码格式化</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//若没有对齐，通过该命令进行对齐</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">gg</span><span class=\"token operator\">=</span>G</pre></td></tr></table></figure><h3 id=\"光标移动\"><a class=\"anchor\" href=\"#光标移动\">#</a> 光标移动</h3>\n<blockquote>\n<p>在 vim 中移动光标出了使用箭头方向键，通知也可使用 h 左，j 下，k 上，L 右</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">快捷键</th>\n<th style=\"text-align:center\">功能</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">光标移动到行首</td>\n<td style=\"text-align:center\">无</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$</td>\n<td style=\"text-align:center\">光标移动到行尾部</td>\n<td style=\"text-align:center\">选按两个键: shift + 4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gg</td>\n<td style=\"text-align:center\">光标移动到文件头</td>\n<td style=\"text-align:center\">第一行的开始</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">G</td>\n<td style=\"text-align:center\">光标移动到文件尾部</td>\n<td style=\"text-align:center\">最后一行的开始</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nG</td>\n<td style=\"text-align:center\">行跳转</td>\n<td style=\"text-align:center\">n 代表要跳转到哪一行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">n + 回车</td>\n<td style=\"text-align:center\">相对跳转 n 行</td>\n<td style=\"text-align:center\">从光标所在当前行往下跳 n 行，n 对应的是一个整数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"删除命令\"><a class=\"anchor\" href=\"#删除命令\">#</a> 删除命令</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">快捷键</th>\n<th>功能</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">x (小写)</td>\n<td>删除光标后边的字符</td>\n<td>vim 中的光标比较宽会盖住后边的字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">X (大写)</td>\n<td>删除光标前边的字符</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dw</td>\n<td>删除单词</td>\n<td>要先把光标移动到单词的第一个字母上再删除，否则单词只能被删除一部分</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">d0</td>\n<td>删除光标前的字符串</td>\n<td>从字符串开头到光标当前位置的字符串被删除了</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">d$(D)</td>\n<td>删除光标后的字符串</td>\n<td>从光标当前位置到字符串尾部的字符串被删除了，使用 D 也行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dd</td>\n<td>删除光标所在行</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ndd</td>\n<td>删除 n 行</td>\n<td>从光标所在行开始删除 n 行，n 对应的是一个整数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"撤销与反撤销\"><a class=\"anchor\" href=\"#撤销与反撤销\">#</a> 撤销与反撤销</h3>\n<blockquote>\n<p>撤销豫反侧小对应 windows 中的 <code>ctrl+z</code>  和 <code>ctrl + y</code></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>功能</th>\n<th>备注相当于 window</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>u</td>\n<td>撤销</td>\n<td>ctrl+z</td>\n</tr>\n<tr>\n<td>ctrl+r</td>\n<td>反撤销</td>\n<td>ctrl+y</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"复制与粘贴\"><a class=\"anchor\" href=\"#复制与粘贴\">#</a> 复制与粘贴</h3>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>功能</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>p</td>\n<td>粘贴到光标所在行的下边</td>\n<td>小写 p</td>\n</tr>\n<tr>\n<td>P</td>\n<td>粘贴到光标所在行的上边</td>\n<td>大写 P</td>\n</tr>\n<tr>\n<td>yy</td>\n<td>复制光标所在行</td>\n<td></td>\n</tr>\n<tr>\n<td>nyy</td>\n<td>从光标所在行向下复制 n 行</td>\n<td>n 是要复制的行数，代表 一个整数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"可视模式\"><a class=\"anchor\" href=\"#可视模式\">#</a> 可视模式</h3>\n<blockquote>\n<p>在编辑文件中需要删除或者辅助数据不是一整行，而是一行某一部分，可以使用可视模式，使用快捷键对所选中的数据进行复制或者删除操作</p>\n</blockquote>\n<ul>\n<li><code>v</code> : 文本选择以字符为单位</li>\n<li><code>V </code> ：文本选择以行为单位</li>\n<li><code>ctrl-v</code>  : 选择一个矩形内的文本</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">快捷键</th>\n<th style=\"text-align:center\">功能</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">h</td>\n<td style=\"text-align:center\">光标向左移动</td>\n<td style=\"text-align:center\">移动光标用于可视模式下的数据块选择</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">j</td>\n<td style=\"text-align:center\">光标向下移动</td>\n<td style=\"text-align:center\">移动光标用于可视模式下的数据块选择</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">k</td>\n<td style=\"text-align:center\">光标向上移动</td>\n<td style=\"text-align:center\">移动光标用于可视模式下的数据块选择</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">l</td>\n<td style=\"text-align:center\">光标向右移动</td>\n<td style=\"text-align:center\">移动光标用于可视模式下的数据块选择</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">d</td>\n<td style=\"text-align:center\">删除 (剪切)</td>\n<td style=\"text-align:center\">删除可视模式下选中的数据块</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">复制</td>\n<td style=\"text-align:center\">复制可视模式下选中的数据块</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p (小写)</td>\n<td style=\"text-align:center\">数据粘贴到光标的后边</td>\n<td style=\"text-align:center\">粘贴在可视模式下复制或者剪切的数据块</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">P (大写)</td>\n<td style=\"text-align:center\">数据粘贴到光标的前边</td>\n<td style=\"text-align:center\">粘贴在可视模式下复制或者剪切的数据块</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码注释\"><a class=\"anchor\" href=\"#代码注释\">#</a> 代码注释</h3>\n<ul>\n<li><code>ctrl+v</code>  进入可视模式</li>\n<li>通过光标 <code>上移k</code>  或者 <code>下移j</code>  选中多个代码行的开头</li>\n<li>按 <code>大</code> 写的 <code> I 键</code> 输入要插入的注释符</li>\n<li>按 ESC 保存进入命令模式</li>\n</ul>\n<h3 id=\"查找\"><a class=\"anchor\" href=\"#查找\">#</a> 查找</h3>\n<p><img data-src=\"E:%5C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5CC-notebook%5CLinux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%5Cassets%5Cimage-20230421151523902.png\" alt=\"image-20230421151523902\" /></p>\n<h3 id=\"查看man文档\"><a class=\"anchor\" href=\"#查看man文档\">#</a> 查看 man 文档</h3>\n<ul>\n<li>找到要查看的函数，然后将 <code>光标</code> 放到该函数上</li>\n<li>在键盘上依次输入: <code>章节号(</code> 可选)+ <code>K``(shift+k)</code> ( <code>大</code> 写的 K)，就会 <code>自动</code> 调整到 man 文档中</li>\n</ul>\n<h2 id=\"编辑模式\"><a class=\"anchor\" href=\"#编辑模式\">#</a> 编辑模式</h2>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>i</td>\n<td>从标签前边开始输入</td>\n</tr>\n<tr>\n<td>a</td>\n<td>从光标的后边开始输入</td>\n</tr>\n<tr>\n<td>o</td>\n<td>在光标下边创建新行，在新行中输入</td>\n</tr>\n<tr>\n<td>s</td>\n<td>删除光标后边的字符 (盖住的字符)，从删除的字符位置开始输入</td>\n</tr>\n<tr>\n<td>I (大写的 i)</td>\n<td>从当前行行首开始输入</td>\n</tr>\n<tr>\n<td>A</td>\n<td>从当前行行尾开始输入</td>\n</tr>\n<tr>\n<td>O</td>\n<td>在光标上创建新行，在新行中输入</td>\n</tr>\n<tr>\n<td>S</td>\n<td>删除当前行，在当前行开始输入</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"末行模式\"><a class=\"anchor\" href=\"#末行模式\">#</a> 末行模式</h2>\n<blockquote>\n<p>从命令模式切换到末行模式只需要在键盘上输入一个 <code>:</code> , 同时这个符号也会出现在窗口的最下端，这时候我们就可以在最后一行输入我们执行的命令</p>\n</blockquote>\n<h3 id=\"保存退出\"><a class=\"anchor\" href=\"#保存退出\">#</a> 保存退出</h3>\n<table>\n<thead>\n<tr>\n<th>末行模式输入命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>q</td>\n<td>退出，如果退出的时候没有保存，vim 会提示是否要保存</td>\n</tr>\n<tr>\n<td>q!</td>\n<td>直接退出不保存</td>\n</tr>\n<tr>\n<td>w</td>\n<td>保存不退出</td>\n</tr>\n<tr>\n<td>wq</td>\n<td>保存退出</td>\n</tr>\n<tr>\n<td>x</td>\n<td>保存退出</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"替换\"><a class=\"anchor\" href=\"#替换\">#</a> 替换</h3>\n<blockquote>\n<p>末行模式的替换强大，指定将什么样的内容替换为什么样的内容，可以 <code>指定替换</code> 某一行或者某几行或者全文替换。替换对应的命令是 <code>s</code>  并且可以给定 <code>指定参数</code> ，默认情况下只替换相关行的 <code>第一个</code> 满足条件的 <code>关键字</code> ，如果需要整行替换需要加参数 <code>/g</code> .</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>末行模式下的替换命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>s / 被替换的关键字 / 新的关键字 /g</td>\n<td><code>只对光标</code> 所在 <code>行</code> 进行替换</td>\n</tr>\n<tr>\n<td>行号 1，行号 2s / 被替换的关键字 / 新的关键字 /g</td>\n<td><code>[行号1，行号2]</code>  是一个从小到大的范围，对 <code>这个范围</code> 替换</td>\n</tr>\n<tr>\n<td>% s / 被替换的关键字 / 新的关键字 /g</td>\n<td>% 代表对 <code>所有行</code> 进行替换</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"分屏\"><a class=\"anchor\" href=\"#分屏\">#</a> 分屏</h3>\n<blockquote>\n<p>分屏可将当前屏幕中的窗口以水平或垂直方式拆成几个</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>末行模式快捷键</th>\n<th>说明</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sp</td>\n<td>水平分屏，多个窗口垂直排列</td>\n<td>多个窗口中显示同一个文件里的内容</td>\n</tr>\n<tr>\n<td>vsp</td>\n<td>垂直分屏，多个窗口水平排列</td>\n<td>多个窗口中显示同一个文件里的内容</td>\n</tr>\n<tr>\n<td>ctrl+w+w</td>\n<td>光标在打开的屏幕之间切换</td>\n<td>快捷键操作 (按住 ctrl 然后按两次 w)</td>\n</tr>\n<tr>\n<td>qall</td>\n<td>同时退出多个屏幕</td>\n<td></td>\n</tr>\n<tr>\n<td>wqall</td>\n<td>同时保存退出多个屏幕</td>\n<td></td>\n</tr>\n<tr>\n<td>sp 文件名</td>\n<td>分屏的同时指定打开的文件的名字</td>\n<td>在新窗口中指定的文件的内容</td>\n</tr>\n<tr>\n<td>vsp 文件名</td>\n<td>分屏的同时指定打开的文件的名字</td>\n<td>在新窗口中显示指定的文件内容</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"行跳转\"><a class=\"anchor\" href=\"#行跳转\">#</a> 行跳转</h3>\n<blockquote>\n<p>不仅可以在命令模式下进行跳转，也可以在末行模式下进行跳转</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:行号    <span class=\"token comment\"># 输入完行号之后回车</span></pre></td></tr></table></figure><h3 id=\"执行shell命令\"><a class=\"anchor\" href=\"#执行shell命令\">#</a> 执行 shell 命令</h3>\n<blockquote>\n<p>在使用 <code>vim</code>  中可以在末行模式下执行 <code>需要的shell</code>  命令，在执行 shell 命令之前需要加一个叹号 <code>!</code></p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:<span class=\"token operator\">!</span>shell命令</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 举例</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>:<span class=\"token operator\">!</span>ls</pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-4/Qt%E5%81%9C%E8%BD%A6%E5%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-4/Qt%E5%81%9C%E8%BD%A6%E5%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "title": "Qt停车场管理系统+OpenCV+EasyPR+MySQL",
            "date_published": "2023-04-17T13:20:43.000Z",
            "content_html": "<h1 id=\"停车场管理系统\"><a class=\"anchor\" href=\"#停车场管理系统\">#</a> 停车场管理系统</h1>\n<h2 id=\"实现功能\"><a class=\"anchor\" href=\"#实现功能\">#</a> 实现功能</h2>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_0\">  <code>登陆</code> 功能</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\">  <code>注册</code> 功能</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_2\"> 账户 <code>信息管理</code> 增删改查</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_3\"> 停车 <code>信息查询</code> </label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_4\"> 车辆 <code>入库</code> 和车辆 <code>出库</code> </label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_5\"> 出库入库判断车牌信息判断</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_6\"> 微信小程序调用 <code>PHP</code>  数据库后端查询车场车位</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_7\"> 微信小程序预定系统</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_8\"> 调用 <code>摄像头</code> 和 <code>视频</code> </label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_9\">  <code>车牌识别</code> </label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_10\"> 剩余车位预定可视化展示 (实时同步小程序)</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" disabled=\"true\" /><label for=\"cbx_11\"> 前端多线程连接池</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_12\" disabled=\"true\" /><label for=\"cbx_12\"> 优化数据库和 QT 多次调用的 TCP 开销</label></li>\n</ul>\n<h2 id=\"ui展示\"><a class=\"anchor\" href=\"#ui展示\">#</a> UI 展示</h2>\n<p><img data-src=\"https://i.imgtg.com/2023/04/14/86qAB.png\" alt=\"整体页面\" title=\"整体页面\" /><br />\n<img data-src=\"https://i.imgtg.com/2023/04/13/8RJGj.jpg\" alt=\"前端页面\" title=\"QT前端页面\" /><br />\n<img data-src=\"https://i.imgtg.com/2023/04/13/8RysX.jpg\" alt=\"微信小程序UI\" title=\"微信小程序UI\" /></p>\n<h2 id=\"环境\"><a class=\"anchor\" href=\"#环境\">#</a> 环境</h2>\n<blockquote>\n<p>尽量选择已下文件版本<br />\n安装 Qt ，EasyPR，OpenCV 路径中不要出现任何中文路径</p>\n</blockquote>\n<ul>\n<li>Qt5.12.1~3  //3 版本以上需要自己编译 MySQL</li>\n<li>Qt Creator 4.8.1</li>\n<li>C++11</li>\n<li>MySql 8.0.27</li>\n<li>OpenCV3.4.5 （难点)</li>\n<li>EasyPR 1.6  // 也会有警告，忽略 (大难点)</li>\n<li>win10</li>\n</ul>\n<h3 id=\"qt安装\"><a class=\"anchor\" href=\"#qt安装\">#</a> Qt 安装</h3>\n<blockquote>\n<p>由于直接将在 QT 中引用 MySQL <code>并不能</code> 直接使用，所以需要将 MySQL 的动态链接库存放到 QT 的 bin 目录下，才可以调用 MySQL。QT 默认使用 <code>C++11</code>  编译</p>\n</blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb3dubG9hZC5xdC5pby9hcmNoaXZlL3F0LzUuMTIvNS4xMi4xLw==\">Qt 下载链接</span></li>\n</ul>\n<blockquote>\n<p>编译选择要选 mingw73_64，调试 OpenCV 需要</p>\n</blockquote>\n<h3 id=\"mysql配置\"><a class=\"anchor\" href=\"#mysql配置\">#</a> MySql 配置</h3>\n<ul>\n<li>下载没有要求，能在 CMD 运行，Navicat 调用基本没有问题</li>\n<li>Qt+MySql</li>\n</ul>\n<blockquote>\n<p>1, 在 QT 所创建项目中的 pro 文件中添加 sql</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>QT       <span class=\"token operator\">+</span><span class=\"token operator\">=</span> core gui <span class=\"token keyword\">sql</span></pre></td></tr></table></figure><blockquote>\n<p>2, 将 <code>MySQL</code>  中 <code>lib</code>  库里面的 <code>libmysql.dll</code>  文件和 <code>libmysql.lib</code>  文件赋值粘贴到 <code>QT5.12.1</code>  的 <code>msvc2017_64</code>  文件夹 bin 文件内即可成功调用</p>\n</blockquote>\n<p><img data-src=\"https://i.imgtg.com/2023/04/04/22u3S.png\" alt=\"mysql环境\" title=\"mysql环境\" /></p>\n<h3 id=\"opencv345\"><a class=\"anchor\" href=\"#opencv345\">#</a> OpenCV3.4.5</h3>\n<blockquote>\n<p>仔细阅读参考 OpenCV 的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yX3JvYm90X3N0cmFuZ2UvYXJ0aWNsZS9kZXRhaWxzLzExMDY3NzMyMw==\">安装</span></p>\n</blockquote>\n<h4 id=\"参考上面连接注意\"><a class=\"anchor\" href=\"#参考上面连接注意\">#</a> 参考上面连接注意</h4>\n<ul>\n<li>使用 <code>Qt</code>  自带的 <code>C和C++编译器</code></li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C: <span class=\"token string\">\"D:\\Qt\\Qt5.13.2\\Tools\\mingw730_64<span class=\"token entity\" title=\"\\b\">\\b</span>in\\gcc.exe\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>C++: <span class=\"token string\">\"D:\\Qt\\Qt5.13.2\\Tools\\mingw730_64<span class=\"token entity\" title=\"\\b\">\\b</span>in\\g++.exe\"</span></pre></td></tr></table></figure><ul>\n<li>不用编译生成 OpenCV_world 也可</li>\n</ul>\n<blockquote>\n<p>不想编译 / 编译失败，偷懒版，百度网盘<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMVVYalg4RHJLZ0JhVzVuV0YtWHBwelE/cHdkPTEzdjI=\">下载</span></p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:https://pan.baidu.com/s/1UXjX8DrKgBaW5nWF-XppzQ?pwd<span class=\"token operator\">=</span>13v2</pre></td></tr></table></figure><ul>\n<li>将下面对应的链接加入换将变量 (解压，修改为自己位置)</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>Qt<span class=\"token punctuation\">\\</span>openCV3.4.12<span class=\"token punctuation\">\\</span>openCV3.4.12-build<span class=\"token punctuation\">\\</span>install<span class=\"token punctuation\">\\</span>x64<span class=\"token punctuation\">\\</span>mingw<span class=\"token punctuation\">\\</span>bin</pre></td></tr></table></figure><ul>\n<li>添加环境变量后，配置换将即可运行，关键是 <code>Qt对应的环境</code> 一定要对，博主使用的 Qt5.13，我使用的 5.12.1 理论上中间版本都可以</li>\n<li>修建 Qt 项目，配置.pro 文件， <code>链接修改对</code> ，很 <code>关键</code></li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>INCLUDEPATH <span class=\"token operator\">+=</span> D:<span class=\"token punctuation\">\\</span>Qt<span class=\"token punctuation\">\\</span>openCV3.4.12<span class=\"token punctuation\">\\</span>openCV3.4.12-build<span class=\"token punctuation\">\\</span>install<span class=\"token punctuation\">\\</span>include<span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>               D:<span class=\"token punctuation\">\\</span>Qt<span class=\"token punctuation\">\\</span>openCV3.4.12<span class=\"token punctuation\">\\</span>openCV3.4.12-build<span class=\"token punctuation\">\\</span>install<span class=\"token punctuation\">\\</span>include<span class=\"token punctuation\">\\</span>opencv2<span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>               D:<span class=\"token punctuation\">\\</span>Qt<span class=\"token punctuation\">\\</span>openCV3.4.12<span class=\"token punctuation\">\\</span>openCV3.4.12-build<span class=\"token punctuation\">\\</span>install<span class=\"token punctuation\">\\</span>include<span class=\"token punctuation\">\\</span>opencv</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>LIBS <span class=\"token operator\">+=</span> <span class=\"token parameter variable\">-L</span> D:<span class=\"token punctuation\">\\</span>Qt<span class=\"token punctuation\">\\</span>openCV3.4.12<span class=\"token punctuation\">\\</span>openCV3.4.12-build<span class=\"token punctuation\">\\</span>install<span class=\"token punctuation\">\\</span>x64<span class=\"token punctuation\">\\</span>mingw<span class=\"token punctuation\">\\</span>lib<span class=\"token punctuation\">\\</span>libopencv_*.a</pre></td></tr></table></figure><ul>\n<li>修改 main 函数，测试</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mainwindow.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QApplication></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;opencv2/core/core.hpp></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;opencv2/highgui/highgui.hpp></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;opencv2/imgproc/imgproc.hpp></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> cv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    QApplication <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 修改为自己的图片链接，使用绝对地址，使用 `\\\\` 区分，注意 `多` 一个，或 `少` 一个</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cv<span class=\"token double-colon punctuation\">::</span>Mat image <span class=\"token operator\">=</span> <span class=\"token function\">imread</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Qt\\\\Project\\\\OpenCV_Test\\\\1.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">namedWindow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Display window\"</span><span class=\"token punctuation\">,</span>WINDOW_AUTOSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">imshow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Display window\"</span><span class=\"token punctuation\">,</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">waitKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    MainWindow w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    w<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>测试视频</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mainwindow.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QApplication></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDebug></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QFileDialog></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;opencv2/highgui.hpp></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;opencv2/imgproc/imgproc.hpp></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> cv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    QApplication <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">namedWindow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Display\"</span><span class=\"token punctuation\">,</span> WINDOW_AUTOSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    VideoCapture cap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cap<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/Qt/Project/OpenCV_Test/Resources/test.mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cap<span class=\"token punctuation\">.</span><span class=\"token function\">isOpened</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Sucess!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"False!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    Mat frame<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        cap <span class=\"token operator\">>></span> frame<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">imshow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Display\"</span><span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">waitKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>到此出 <code>OpenCV</code>  环境变量成功，如果失败，注意 <code>qt的版本</code> ，以及使用 qt 编译的版本是不是 qt 编译时用的 <code>mingw73_64</code></p>\n</blockquote>\n<h3 id=\"easypr\"><a class=\"anchor\" href=\"#easypr\">#</a> EasyPR</h3>\n<blockquote>\n<p>其实也简单，关键时导入换将之后会有很多报错，对于初学者，慢慢修改是个挺熬人的过程</p>\n</blockquote>\n<ul>\n<li>下载源文件<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpdXJ1b3plL0Vhc3lQUg==\"> EasyPR</span></li>\n<li>OpenCV 的引用，直接使用上面的就行</li>\n<li>使用 C++11 编译</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CONFIG <span class=\"token operator\">+=</span> c++11</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">QMAKE_CXXFLAGS</span><span class=\"token operator\">+=</span>-std<span class=\"token operator\">=</span>c++11</pre></td></tr></table></figure><ul>\n<li>\n<p>下载 <code>EasyPR1.6</code>  之后的文件目录，我们需要也就是 <code>所选的</code> ， <code>test</code>  也要，要部分代码<br />\n<img data-src=\"https://i.imgtg.com/2023/04/17/XXbBq.png\" alt=\"01\" /></p>\n</li>\n<li>\n<p>将上面 <code>五</code> 个文件夹保存到 Qt <code>创建</code> 的项目地址 <code>对应</code> 的 <code>根目录</code> 下</p>\n</li>\n<li>\n<p>qt 创建一个普通项目之后，添加已经存在的文件<br />\n<img data-src=\"https://i.imgtg.com/2023/04/17/XXTpY.png\" alt=\"image-20230417205708627\" /></p>\n</li>\n<li>\n<p>test 不用添加，将剩余 <code>4</code>  个文件夹全部选进去，选好之后对应的.pro 文件，# 为删掉的，切记可能在加入 test 后，将会对应两个 main.cpp 导致最后无法运行</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SOURCES <span class=\"token operator\">+=</span> \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t    main<span class=\"token punctuation\">.</span>cpp \\</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    mainwindow<span class=\"token punctuation\">.</span>cpp \\</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        src<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>chars_identify<span class=\"token punctuation\">.</span>cpp \\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    src<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>chars_recognise<span class=\"token punctuation\">.</span>cpp \\</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    src<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>chars_segment<span class=\"token punctuation\">.</span>cpp \\</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    src<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>core_func<span class=\"token punctuation\">.</span>cpp \\</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    src<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>feature<span class=\"token punctuation\">.</span>cpp \\</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    src<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>params<span class=\"token punctuation\">.</span>cpp \\</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    src<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>plate_detect<span class=\"token punctuation\">.</span>cpp \\</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    src<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>plate_judge<span class=\"token punctuation\">.</span>cpp \\</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    src<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>plate_locate<span class=\"token punctuation\">.</span>cpp \\</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    src<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>plate_recognize<span class=\"token punctuation\">.</span>cpp \\</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">src</span><span class=\"token expression\"><span class=\"token operator\">/</span>train<span class=\"token operator\">/</span>ann_train<span class=\"token punctuation\">.</span>cpp </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">src</span><span class=\"token expression\"><span class=\"token operator\">/</span>train<span class=\"token operator\">/</span>annCh_train<span class=\"token punctuation\">.</span>cpp </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">src</span><span class=\"token expression\"><span class=\"token operator\">/</span>train<span class=\"token operator\">/</span>create_data<span class=\"token punctuation\">.</span>cpp </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">src</span><span class=\"token expression\"><span class=\"token operator\">/</span>train<span class=\"token operator\">/</span>svm_train<span class=\"token punctuation\">.</span>cpp </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">src</span><span class=\"token expression\"><span class=\"token operator\">/</span>train<span class=\"token operator\">/</span>train<span class=\"token punctuation\">.</span>cpp </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token expression\">src<span class=\"token operator\">/</span>util<span class=\"token operator\">/</span>kv<span class=\"token punctuation\">.</span>cpp </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token expression\">src<span class=\"token operator\">/</span>util<span class=\"token operator\">/</span>program_options<span class=\"token punctuation\">.</span>cpp </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token expression\">src<span class=\"token operator\">/</span>util<span class=\"token operator\">/</span>util<span class=\"token punctuation\">.</span>cpp </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token expression\">thirdparty<span class=\"token operator\">/</span>LBP<span class=\"token operator\">/</span>helper<span class=\"token punctuation\">.</span>cpp </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token expression\">thirdparty<span class=\"token operator\">/</span>LBP<span class=\"token operator\">/</span>lbp<span class=\"token punctuation\">.</span>cpp </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token expression\">thirdparty<span class=\"token operator\">/</span>mser<span class=\"token operator\">/</span>mser2<span class=\"token punctuation\">.</span>cpp </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token expression\">thirdparty<span class=\"token operator\">/</span>svm<span class=\"token operator\">/</span>corrected_svm<span class=\"token punctuation\">.</span>cpp </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token expression\">thirdparty<span class=\"token operator\">/</span>textDetect<span class=\"token operator\">/</span>erfilter<span class=\"token punctuation\">.</span>cpp </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token expression\">thirdparty<span class=\"token operator\">/</span>xmlParser<span class=\"token operator\">/</span>xmlParser<span class=\"token punctuation\">.</span>cpp</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>HEADERS <span class=\"token operator\">+=</span> \\</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    car<span class=\"token punctuation\">.</span>h \\</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    mainwindow<span class=\"token punctuation\">.</span>h \\</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    signup<span class=\"token punctuation\">.</span>h \\</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    mysql<span class=\"token punctuation\">.</span>h \\</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    initfile<span class=\"token punctuation\">.</span>h\\</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>character<span class=\"token punctuation\">.</span>hpp \\</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>chars_identify<span class=\"token punctuation\">.</span>h \\</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>chars_recognise<span class=\"token punctuation\">.</span>h \\</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>chars_segment<span class=\"token punctuation\">.</span>h \\</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>core_func<span class=\"token punctuation\">.</span>h \\</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>feature<span class=\"token punctuation\">.</span>h \\</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>params<span class=\"token punctuation\">.</span>h \\</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>plate<span class=\"token punctuation\">.</span>hpp \\</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>plate_detect<span class=\"token punctuation\">.</span>h \\</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>plate_judge<span class=\"token punctuation\">.</span>h \\</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>plate_locate<span class=\"token punctuation\">.</span>h \\</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>plate_recognize<span class=\"token punctuation\">.</span>h \\</pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">include</span><span class=\"token expression\"><span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>train<span class=\"token operator\">/</span>ann_train<span class=\"token punctuation\">.</span>h </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">include</span><span class=\"token expression\"><span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>train<span class=\"token operator\">/</span>annCh_train<span class=\"token punctuation\">.</span>h </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">include</span><span class=\"token expression\"><span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>train<span class=\"token operator\">/</span>create_data<span class=\"token punctuation\">.</span>h </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">include</span><span class=\"token expression\"><span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>train<span class=\"token operator\">/</span>svm_train<span class=\"token punctuation\">.</span>h </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">include</span><span class=\"token expression\"><span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>train<span class=\"token operator\">/</span>train<span class=\"token punctuation\">.</span>h </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token expression\">include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>util<span class=\"token operator\">/</span>kv<span class=\"token punctuation\">.</span>h </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token expression\">include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>util<span class=\"token operator\">/</span>program_options<span class=\"token punctuation\">.</span>h </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token expression\">include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>util<span class=\"token operator\">/</span><span class=\"token keyword\">switch</span><span class=\"token punctuation\">.</span>hpp </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token expression\">include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>util<span class=\"token operator\">/</span>util<span class=\"token punctuation\">.</span>h </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token expression\">include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>api<span class=\"token punctuation\">.</span>hpp </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token expression\">include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>config<span class=\"token punctuation\">.</span>h </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token expression\">include<span class=\"token operator\">/</span>easypr<span class=\"token operator\">/</span>version<span class=\"token punctuation\">.</span>h </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token expression\">include<span class=\"token operator\">/</span>easypr<span class=\"token punctuation\">.</span>h </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">test</span><span class=\"token expression\"><span class=\"token operator\">/</span>accuracy<span class=\"token punctuation\">.</span>hpp </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">test</span><span class=\"token expression\"><span class=\"token operator\">/</span>chars<span class=\"token punctuation\">.</span>hpp </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">test</span><span class=\"token expression\"><span class=\"token operator\">/</span>config<span class=\"token punctuation\">.</span>hpp </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">test</span><span class=\"token expression\"><span class=\"token operator\">/</span>plate<span class=\"token punctuation\">.</span>hpp </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">test</span><span class=\"token expression\"><span class=\"token operator\">/</span>result<span class=\"token punctuation\">.</span>hpp </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token expression\">thirdparty<span class=\"token operator\">/</span>LBP<span class=\"token operator\">/</span>helper<span class=\"token punctuation\">.</span>hpp </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token expression\">thirdparty<span class=\"token operator\">/</span>LBP<span class=\"token operator\">/</span>lbp<span class=\"token punctuation\">.</span>hpp </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token expression\">thirdparty<span class=\"token operator\">/</span>mser<span class=\"token operator\">/</span>mser2<span class=\"token punctuation\">.</span>hpp </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token expression\">thirdparty<span class=\"token operator\">/</span>svm<span class=\"token operator\">/</span>precomp<span class=\"token punctuation\">.</span>hpp </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token expression\">thirdparty<span class=\"token operator\">/</span>textDetect<span class=\"token operator\">/</span>erfilter<span class=\"token punctuation\">.</span>hpp </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token expression\">thirdparty<span class=\"token operator\">/</span>xmlParser<span class=\"token operator\">/</span>xmlParser<span class=\"token punctuation\">.</span>h</span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre># 引入easyPR所需要的依赖</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>DISTFILES <span class=\"token operator\">+=</span> \\</pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>train<span class=\"token operator\">/</span>ann<span class=\"token punctuation\">.</span><span class=\"token number\">7</span>z </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>train<span class=\"token operator\">/</span>annCh<span class=\"token punctuation\">.</span><span class=\"token number\">7</span>z </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>train<span class=\"token operator\">/</span>annGray<span class=\"token punctuation\">.</span><span class=\"token number\">7</span>z </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>train<span class=\"token operator\">/</span>svm<span class=\"token punctuation\">.</span><span class=\"token number\">7</span>z </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token expression\">model<span class=\"token operator\">/</span>ann<span class=\"token punctuation\">.</span>xml </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token expression\">model<span class=\"token operator\">/</span>ann_chinese<span class=\"token punctuation\">.</span>xml </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token expression\">model<span class=\"token operator\">/</span>annCh<span class=\"token punctuation\">.</span>xml </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token expression\">model<span class=\"token operator\">/</span>svm_hist<span class=\"token punctuation\">.</span>xml </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>image<span class=\"token operator\">/</span>general_test<span class=\"token operator\">/</span>GroundTruth_others<span class=\"token punctuation\">.</span>xml </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>image<span class=\"token operator\">/</span>general_test<span class=\"token operator\">/</span>GroundTruth_windows<span class=\"token punctuation\">.</span>xml </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>image<span class=\"token operator\">/</span>native_test<span class=\"token operator\">/</span>GroundTruth_others<span class=\"token punctuation\">.</span>xml </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>image<span class=\"token operator\">/</span>native_test<span class=\"token operator\">/</span>GroundTruth_windows<span class=\"token punctuation\">.</span>xml </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>result<span class=\"token operator\">/</span>Result<span class=\"token punctuation\">.</span>xml </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>text<span class=\"token operator\">/</span>chinese_mapping </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>text<span class=\"token operator\">/</span>dev_team </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>text<span class=\"token operator\">/</span>province_mapping </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>text<span class=\"token operator\">/</span>thanks </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>text<span class=\"token operator\">/</span>batch_test_menu </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>text<span class=\"token operator\">/</span>main_menu </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>text<span class=\"token operator\">/</span>test_menu </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>    <span class=\"token directive keyword\">resources</span><span class=\"token expression\"><span class=\"token operator\">/</span>text<span class=\"token operator\">/</span>train_menu</span></span></span></span></pre></td></tr></table></figure><ul>\n<li>加入 EasyPR 文件成功，接下来该 Bug</li>\n<li>首先打开 <code>Header/include/config.h</code>  将 <code>#define</code>  的修改为</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CV_VERSION_THREE_TWO</span></span></pre></td></tr></table></figure><ul>\n<li>\n<p>接下来发现所有的文件好像 <code>都无法</code> 加载 <code>EasyPR</code>  对应的 <code>文件</code></p>\n</li>\n<li>\n<p>每个文件都打开，将头 <code>文件无法读取</code> 的， <code>查</code> 看对应的 <code>位置</code> ，都是在 <code>include</code>  文件夹下的文件 <code>无法</code> 读取，所以在 <code>头文件</code> 上面 <code>加</code> 上 <code>include</code> , 例如下面，有耐心查看，基本上每个文件都要修改。 <code>所有文件都打开一遍</code> <br />\n<img data-src=\"https://i.imgtg.com/2023/04/17/XXUfv.png\" alt=\"image-20230417210720275\" /></p>\n</li>\n<li>\n<p>修改 <code>Header/include/config.h</code>  读取的 model 路径全部该为自己的 <code>绝对路径</code> ，记得 <code>//</code>  很容易 <code>不细心</code> ，最后 OpenCV <code>无法读取</code> 而 <code>失败</code> 。例如下面的报错</p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>加载断点</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OpenCV: terminate handler is called<span class=\"token operator\">!</span> The last OpenCV error is:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>OpenCV<span class=\"token punctuation\">(</span><span class=\"token number\">3.4</span>.5<span class=\"token punctuation\">)</span> Error: Parsing error <span class=\"token punctuation\">(</span>Missing or invalid SVM <span class=\"token builtin class-name\">type</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> read_params, <span class=\"token function\">file</span> C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Administrator<span class=\"token punctuation\">\\</span>Desktop<span class=\"token punctuation\">\\</span>opencv-3.4.5<span class=\"token punctuation\">\\</span>opencv-3.4.5<span class=\"token punctuation\">\\</span>modules<span class=\"token punctuation\">\\</span>ml<span class=\"token punctuation\">\\</span>src<span class=\"token punctuation\">\\</span>svm.cpp, line <span class=\"token number\">2203</span></pre></td></tr></table></figure><ul>\n<li>将其修改为如下，改成自己的路径，当然会有文件不存在的，改成统一路径就可</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> kDefaultSvmPath <span class=\"token operator\">=</span> <span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model/svm_hist.xml\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> kLBPSvmPath <span class=\"token operator\">=</span> <span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model/svm_lbp.xml\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> kHistSvmPath <span class=\"token operator\">=</span> <span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model/svm_hist.xml\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> kDefaultAnnPath <span class=\"token operator\">=</span> <span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model/ann.xml\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> kChineseAnnPath <span class=\"token operator\">=</span> <span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model/ann_chinese.xml\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> kGrayAnnPath <span class=\"token operator\">=</span> <span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model/annCh.xml\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//This is important to for key transform to chinese</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> kChineseMappingPath <span class=\"token operator\">=</span> <span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model/province_mapping\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>修改 Qt 项目 创建对应的 main.cpp 文件</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QCoreApplication></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;opencv2/opencv.hpp></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"include/easypr.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDebug></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> easypr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    QCoreApplication <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"加载断点\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 1. 加载车牌识别模型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    CPlateRecognize pr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    pr<span class=\"token punctuation\">.</span><span class=\"token function\">LoadSVM</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model//svm_hist.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"AVM\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    pr<span class=\"token punctuation\">.</span><span class=\"token function\">LoadANN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model//ann.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"ANN\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    pr<span class=\"token punctuation\">.</span><span class=\"token function\">LoadChineseANN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model//ann_chinese.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"ChineseANN\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// new in v1.6</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    pr<span class=\"token punctuation\">.</span><span class=\"token function\">LoadGrayChANN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model//annCh.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    pr<span class=\"token punctuation\">.</span><span class=\"token function\">LoadChineseMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model//province_mapping\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 2. 读入待识别的车牌图片</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cv<span class=\"token double-colon punctuation\">::</span>Mat src <span class=\"token operator\">=</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">imread</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://car.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 3. 车牌识别</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>CPlate<span class=\"token operator\">></span> plates<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    pr<span class=\"token punctuation\">.</span><span class=\"token function\">plateRecognize</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> plates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 4. 输出识别结果</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> plate <span class=\"token operator\">:</span> plates<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"plate: \"</span> <span class=\"token operator\">&lt;&lt;</span> plate<span class=\"token punctuation\">.</span><span class=\"token function\">getPlateStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>修改 <code>main.cpp</code>  后会有大量的警告 <code>unused</code> ，或者使用 <code>老旧</code> 的格式，会警告， <code>不</code> 用管，毕竟八年没有更新</li>\n</ul>\n<p><img data-src=\"https://i.imgtg.com/2023/04/17/XXBxU.png\" alt=\"image-20230417212952648\" /></p>\n<ul>\n<li>当然编译运行后，肯定 <code>不会成功</code> ，会有 <code>各种各样</code> 的找不到，报错 ，肯定会有下面函数找不到，根据对应名字，在 core 文件里，找到头文件，把它 <code>添加到对应的文件当中</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>文件</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>plate_locate</td>\n<td>车牌定位</td>\n</tr>\n<tr>\n<td>plate_judge</td>\n<td>车牌判断</td>\n</tr>\n<tr>\n<td>plate_detect</td>\n<td>车牌检测，是车牌定位与车牌判断功能的组合</td>\n</tr>\n<tr>\n<td>chars_segment</td>\n<td>字符分割</td>\n</tr>\n<tr>\n<td>chars_identify</td>\n<td>字符鉴别</td>\n</tr>\n<tr>\n<td>chars_recognise</td>\n<td>字符识别，是字符分割与字符鉴别功能的组合</td>\n</tr>\n<tr>\n<td>plate_recognize</td>\n<td>车牌识别，是车牌检测与字符识别的共有子类</td>\n</tr>\n<tr>\n<td>feature</td>\n<td>特征提取回调函数</td>\n</tr>\n<tr>\n<td>plate</td>\n<td>车牌抽象</td>\n</tr>\n<tr>\n<td>core_func.h</td>\n<td>共有的一些函数</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>当然不想修改 EasyPR，你可以把我改好的拿过去，直接修改一下 model 对应的绝对路径就可以运行啦。又节约了好长时间<br />\n EasyPR+OpenCV +Qt 代码测试，从停车场管理信息系统中提取吧！！！</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>https://github.com/foryouos/Parking_System</pre></td></tr></table></figure><h2 id=\"easypr在停车管理系统中的使用\"><a class=\"anchor\" href=\"#easypr在停车管理系统中的使用\">#</a> EasyPR 在停车管理系统中的使用</h2>\n<blockquote>\n<p>代码不全，仅为例子</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;opencv2/opencv.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"include/easypr.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;QDebug></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> easypr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 1. 加载车牌识别模型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    CPlateRecognize pr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 加载模型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>pr<span class=\"token punctuation\">.</span><span class=\"token function\">LoadSVM</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model//svm_hist.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"AVM\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    pr<span class=\"token punctuation\">.</span><span class=\"token function\">LoadANN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model//ann.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"ANN\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    pr<span class=\"token punctuation\">.</span><span class=\"token function\">LoadChineseANN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model//ann_chinese.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"ChineseANN\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// new in v1.6</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    pr<span class=\"token punctuation\">.</span><span class=\"token function\">LoadGrayChANN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model//annCh.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    pr<span class=\"token punctuation\">.</span><span class=\"token function\">LoadChineseMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E://Cstudy//QT//QT_exercise//easyPR//easypr2//model//province_mapping\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 如果摄像头播放</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>camera<span class=\"token operator\">-></span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> QCamera<span class=\"token double-colon punctuation\">::</span>ActiveState<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        camera<span class=\"token operator\">-></span><span class=\"token function\">setCaptureMode</span><span class=\"token punctuation\">(</span>QCamera<span class=\"token double-colon punctuation\">::</span>CaptureStillImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 捕获图片</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 弹出标准对话框</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">//QString fileName = QFileDialog::getSaveFileName (nullptr, QString (), QString (), QString (), nullptr, QFileDialog::DontConfirmOverwrite); // 保存的文件名字</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        imageCapture <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QCameraImageCapture</span><span class=\"token punctuation\">(</span>camera<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建一个用于捕获图片的对象</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token comment\">// 当摄像头成功捕获一张图片后进行车牌识别</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>imageCapture<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QCameraImageCapture<span class=\"token double-colon punctuation\">::</span>imageCaptured<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token comment\">/*id*/</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> QImage<span class=\"token operator\">&amp;</span> img<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          Mat src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          Mat rgbImg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          <span class=\"token comment\">//src = Mat(img.height(), img.width(), CV_8UC4, (uchar*)img.bits(), img.bytesPerLine()).clone();</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          src <span class=\"token operator\">=</span> <span class=\"token function\">Mat</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> CV_8UC4<span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">const_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span><span class=\"token function\">bits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>size_t<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span><span class=\"token function\">bytesPerLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          <span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> rgbImg<span class=\"token punctuation\">,</span> CV_BGRA2RGB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将 OpenCV 中颜色通道排列方式与 Qt 中不同的图片格式转换为 Qt 中正常的图片格式</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          <span class=\"token comment\">//QImage qImg(rgbImg.data, rgbImg.cols, rgbImg.rows, rgbImg.step, QImage::Format_RGB888);</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>          QImage <span class=\"token function\">qImg</span><span class=\"token punctuation\">(</span>rgbImg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> rgbImg<span class=\"token punctuation\">.</span>cols<span class=\"token punctuation\">,</span> rgbImg<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>rgbImg<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> QImage<span class=\"token double-colon punctuation\">::</span>Format_RGB888<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          <span class=\"token comment\">// 缩放图片到指定大小</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          QSize <span class=\"token function\">newSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>          QImage scaledImg <span class=\"token operator\">=</span> qImg<span class=\"token punctuation\">.</span><span class=\"token function\">scaled</span><span class=\"token punctuation\">(</span>newSize<span class=\"token punctuation\">,</span>Qt<span class=\"token double-colon punctuation\">::</span>KeepAspectRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          <span class=\"token comment\">// 使用 easyPR 获取车牌信息</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>easypr<span class=\"token double-colon punctuation\">::</span>CPlate<span class=\"token operator\">></span> plates<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>          m_plateRecognize<span class=\"token punctuation\">.</span><span class=\"token function\">plateRecognize</span><span class=\"token punctuation\">(</span>rgbImg<span class=\"token punctuation\">,</span>plates<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> plate <span class=\"token operator\">:</span> plates<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>              std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"plate: \"</span> <span class=\"token operator\">&lt;&lt;</span> plate<span class=\"token punctuation\">.</span><span class=\"token function\">getPlateStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>          <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"内部输出\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>plates<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>              <span class=\"token comment\">// 显示车牌图片和号码</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>              easypr<span class=\"token double-colon punctuation\">::</span>CPlate plate <span class=\"token operator\">=</span> plates<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>              Mat plateImg <span class=\"token operator\">=</span> plate<span class=\"token punctuation\">.</span><span class=\"token function\">getPlateMat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>              QImage <span class=\"token function\">qPlateImg</span><span class=\"token punctuation\">(</span>plateImg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>plateImg<span class=\"token punctuation\">.</span>cols<span class=\"token punctuation\">,</span>plateImg<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">,</span><span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>plateImg<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> QImage<span class=\"token double-colon punctuation\">::</span>Format_RGB888<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>              ui<span class=\"token operator\">-></span>screen_label<span class=\"token operator\">-></span><span class=\"token function\">setPixmap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QPixmap</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromImage</span><span class=\"token punctuation\">(</span>qPlateImg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>              QString plateStr <span class=\"token operator\">=</span> <span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromLocal8Bit</span><span class=\"token punctuation\">(</span>plate<span class=\"token punctuation\">.</span><span class=\"token function\">getPlateStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>              <span class=\"token comment\">// 获取车牌号码的部分字符串</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>              QStringList list <span class=\"token operator\">=</span> plateStr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                  plateStr <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">trimmed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>              ui<span class=\"token operator\">-></span>Car_idinput<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>plateStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>              ui<span class=\"token operator\">-></span>Car_output<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>plateStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>              <span class=\"token function\">qDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>plateStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>              std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"plate: \"</span> <span class=\"token operator\">&lt;&lt;</span> plate<span class=\"token punctuation\">.</span><span class=\"token function\">getPlateStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">// 开始进行捕获</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        imageCapture<span class=\"token operator\">-></span><span class=\"token function\">capture</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 捕获图片，保存到要保存的目录为上面对话框设定的目录</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"小程序模块\"><a class=\"anchor\" href=\"#小程序模块\">#</a> 小程序模块</h2>\n<h2 id=\"停车管理系统模块解析\"><a class=\"anchor\" href=\"#停车管理系统模块解析\">#</a> 停车管理系统模块解析</h2>\n",
            "tags": [
                "计算机科学",
                "C++",
                "C和C++项目",
                "C++",
                "计算机科学",
                "C++项目"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-3/cpp%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%B1%A0/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-3/cpp%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%B1%A0/",
            "title": "C++多线程连接池MySQL",
            "date_published": "2023-03-25T14:20:43.000Z",
            "content_html": "<h1 id=\"c-调用-mysql-api-连接池\"><a class=\"anchor\" href=\"#c-调用-mysql-api-连接池\">#</a> C++ 调用 MYSQL API 连接池</h1>\n<h2 id=\"高并发下频繁处理瓶颈\"><a class=\"anchor\" href=\"#高并发下频繁处理瓶颈\">#</a> 高并发下频繁处理瓶颈</h2>\n<ul>\n<li>建立通信： <code>TCP三次握手</code></li>\n<li>数据库服务器的 <code>连接认证</code></li>\n<li>服务器 <code>关闭连接</code> 的资源回收</li>\n<li><code>断开</code> 通信的 TCP 四次挥手</li>\n</ul>\n<blockquote>\n<p>如果客户端和服务端 <code>频繁</code> 进行类似操纵，影响整个 <code>开发效率</code></p>\n</blockquote>\n<h2 id=\"数据库连接池\"><a class=\"anchor\" href=\"#数据库连接池\">#</a> 数据库连接池</h2>\n<blockquote>\n<p>为了 <code>提高</code> 数据库 (关系型数据库) 的访问 <code>瓶颈</code> ，除在服务器端添加缓存服务器缓存常用的数据，还可添加连接池来提高服务器访问效率</p>\n</blockquote>\n<h2 id=\"创建连接池思路\"><a class=\"anchor\" href=\"#创建连接池思路\">#</a> 创建连接池思路</h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYmP1QVHBJDhYJ9FB3DS6GJVib2ibQKQVIiaiaVfug7kiaOMLRBbE1nNYRzew/0?wx_fmt=png\" alt=\"连接池URML\" title=\"连接池UML\" /></p>\n<blockquote>\n<p>连接池主要用于 <code>网络服务器端</code> ，用于同时接受 <code>多个用户端</code> 请求，数据库与数据库客户端采用 <code>TCP通信</code> .</p>\n</blockquote>\n<ul>\n<li>数据库客户端和服务端先建立起 <code>多个连接</code></li>\n<li>多线程通过 <code>套接字通信</code> 取出连接池中的一个连接，然后和服务器直接进行通信，通信之后再将此连接 <code>还给连接池</code>  (减少数据库连接和断开的次数)</li>\n<li>数据库连接池对应 C++ 中的一个数据库连接对象，即 <code>单例模式</code></li>\n<li>连接池中包括数据库服务器连接对应的 IP，端口，用户，密码等信息</li>\n<li>对数据库对象存入 <code>STL</code>  当中，需要设置最大值，最小值限制队列</li>\n<li>多线程从连接池中取出数据库对象若有取出， <code>没有等待</code> 调用算法</li>\n<li>对 连接池中的数据库连接 (空间时间长的即调度算法) 进行 <code>适当</code> 断开连接</li>\n<li>共享资源的访问，需要 <code>互斥锁</code>  (生产者消费者问题)</li>\n</ul>\n<h2 id=\"单例模式\"><a class=\"anchor\" href=\"#单例模式\">#</a> 单例模式</h2>\n<ul>\n<li><code>懒汉模式</code></li>\n</ul>\n<blockquote>\n<p>当使用这个类的时候才创建它<br />\n创建对象时，加锁保证有且仅有一个<br />\n (有线程安全问题)</p>\n</blockquote>\n<ul>\n<li><code>饿汉模式</code></li>\n</ul>\n<blockquote>\n<p>不管用不用它，只要类被创建，这个实例就有<br />\n没有线程安全问题</p>\n</blockquote>\n<h2 id=\"连接池算法实现c\"><a class=\"anchor\" href=\"#连接池算法实现c\">#</a> 连接池算法实现 C++</h2>\n<blockquote>\n<p>换将配置参考 <code>jsoncpp</code>  和 <code>MySQL API</code>  文章<br />\n<a href=\"https://www.blog.foryouos.cn/computer-science/cpp/course-3/C%E5%92%8CcppMySQL%20API%E8%B0%83%E7%94%A8/\"> Jsoncpp 配置</a><br />\n<a href=\"https://www.blog.foryouos.cn/computer-science/cpp/course-3/jsoncpp%E5%A4%84%E7%90%86Json%E6%95%B0%E6%8D%AE/\"> MySQl 配置</a></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvjQPcRPuH2CcuicpSLUXpTeGKvufeV604g8HohMsTqHcXp0ibY0kHjqCOv0ds0LaskbgiaAMiaelLBAA/0?wx_fmt=jpeg\" alt=\"连接池\" title=\"连接池\" /></p>\n<h3 id=\"mysqlconnecth\"><a class=\"anchor\" href=\"#mysqlconnecth\">#</a> MysqlConnect.h</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"MySQLConnect.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 释放结果集空间</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">freeResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">// 释放数据库连接</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token function\">mysql_free_result</span><span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">// 将数据库指针置空</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tm_result <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 连接 MySQL 数据库</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MySqlConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 初始化 MySQL</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tm_conn <span class=\"token operator\">=</span> <span class=\"token function\">mysql_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 设置 MySQL 的格式字符 utf8</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">mysql_set_character_set</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//MySQL 的析构函数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MySqlConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 如果连接不为空</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_conn <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">// 关闭 MySQL 连接</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token function\">mysql_close</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">freeResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>string user<span class=\"token punctuation\">,</span> string passwd<span class=\"token punctuation\">,</span> string dbName<span class=\"token punctuation\">,</span> string ip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">//ip 传入为 string，使用.str 将 ip 转为 char * 类型</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tMYSQL<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token function\">mysql_real_connect</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> passwd<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dbName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 连接成功返回 true</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 如果连接成功返回 TRUE，失败返回 FALSE</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">return</span> ptr <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>string sql<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">//query 执行成功返回 0</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">invalid_argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行语句插入/更新/删除失败!请检查数据库\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">bool</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>string sql<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">freeResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token comment\">//query 执行成功返回 0</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">invalid_argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查询数据库失败!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\tm_result <span class=\"token operator\">=</span> <span class=\"token function\">mysql_store_result</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token comment\">// 如果结果集为空则没有必要遍历</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_result <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t<span class=\"token comment\">// 保存着当前字段的所有列的数值</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\tm_row <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_row</span><span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token comment\">// 如果字段不为空</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_row <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>string <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token comment\">// 表示列的数量</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token keyword\">int</span> row_num <span class=\"token operator\">=</span> <span class=\"token function\">mysql_num_fields</span><span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数得到结果集中的列数</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token comment\">// 如果查询的的 index 列大于总列，或小于 0，是错误的</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> row_num <span class=\"token operator\">||</span> index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> val <span class=\"token operator\">=</span> m_row<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 若为二进制数据，中间是有 \"\\0\" 的</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> length <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_lengths</span><span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入 length 就不会以 \"\\0\" 为结束符，而是通过长度把对应的字符转换为 string 类型</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">mysql_autocommit</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数返回值本身就是 bool 类型</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">mysql_commit</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 提交</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">mysql_rollback</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//bool 类型，函数成功返回 TRUE，失败返回 FALSE</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token comment\">// 刷新起始空闲时间</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">refreshAliveTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\tm_alivetime <span class=\"token operator\">=</span> steady_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getAliveTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\tnanoseconds res <span class=\"token operator\">=</span> steady_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> m_alivetime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token comment\">// 将纳秒转换为毫秒</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\tmilliseconds millsec <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">duration_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>milliseconds<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token keyword\">return</span> millsec<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"mysqlconnectcpp\"><a class=\"anchor\" href=\"#mysqlconnectcpp\">#</a> MysqlConnect.cpp</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"MySQLConnect.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 释放结果集空间</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">freeResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">// 释放数据库连接</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token function\">mysql_free_result</span><span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">// 将数据库指针置空</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tm_result <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 连接 MySQL 数据库</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MySqlConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 初始化 MySQL</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tm_conn <span class=\"token operator\">=</span> <span class=\"token function\">mysql_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 设置 MySQL 的格式字符 utf8</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">mysql_set_character_set</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//MySQL 的析构函数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MySqlConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 如果连接不为空</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_conn <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">// 关闭 MySQL 连接</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token function\">mysql_close</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">freeResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>string user<span class=\"token punctuation\">,</span> string passwd<span class=\"token punctuation\">,</span> string dbName<span class=\"token punctuation\">,</span> string ip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">//ip 传入为 string，使用.str 将 ip 转为 char * 类型</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tMYSQL<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token function\">mysql_real_connect</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> passwd<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dbName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 连接成功返回 true</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 如果连接成功返回 TRUE，失败返回 FALSE</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">return</span> ptr <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>string sql<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">//query 执行成功返回 0</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">invalid_argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行语句插入/更新/删除失败!请检查数据库\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">bool</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>string sql<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">freeResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token comment\">//query 执行成功返回 0</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">invalid_argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查询数据库失败!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\tm_result <span class=\"token operator\">=</span> <span class=\"token function\">mysql_store_result</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token comment\">// 如果结果集为空则没有必要遍历</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_result <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t<span class=\"token comment\">// 保存着当前字段的所有列的数值</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\tm_row <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_row</span><span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token comment\">// 如果字段不为空</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_row <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>string <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token comment\">// 表示列的数量</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token keyword\">int</span> row_num <span class=\"token operator\">=</span> <span class=\"token function\">mysql_num_fields</span><span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数得到结果集中的列数</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token comment\">// 如果查询的的 index 列大于总列，或小于 0，是错误的</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> row_num <span class=\"token operator\">||</span> index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> val <span class=\"token operator\">=</span> m_row<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 若为二进制数据，中间是有 \"\\0\" 的</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> length <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_lengths</span><span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入 length 就不会以 \"\\0\" 为结束符，而是通过长度把对应的字符转换为 string 类型</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">mysql_autocommit</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数返回值本身就是 bool 类型</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">mysql_commit</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 提交</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">mysql_rollback</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//bool 类型，函数成功返回 TRUE，失败返回 FALSE</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token comment\">// 刷新起始空闲时间</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">refreshAliveTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\tm_alivetime <span class=\"token operator\">=</span> steady_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getAliveTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\tnanoseconds res <span class=\"token operator\">=</span> steady_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> m_alivetime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token comment\">// 将纳秒转换为毫秒</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\tmilliseconds millsec <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">duration_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>milliseconds<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token keyword\">return</span> millsec<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"connectionpoolh\"><a class=\"anchor\" href=\"#connectionpoolh\">#</a> ConnectionPool.h</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 连接池头文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">CONNECTIONPOOL_H</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CONNECTIONPOOL_H</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"MySQLConnect.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mutex></span> <span class=\"token comment\">//C++ 独占的互斥锁</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;condition_variable></span> <span class=\"token comment\">// 引用 C++ 条件变量</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 连接池</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConnectionPool</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 静态实例，通过静态方法获得唯一的单例对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">static</span> ConnectionPool<span class=\"token operator\">*</span> <span class=\"token function\">getConnectPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 删除掉构造函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">ConnectionPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ConnectionPool<span class=\"token operator\">&amp;</span> obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 移动赋值函数重载，删除掉，防止对象的复制</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tConnectionPool<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ConnectionPool<span class=\"token operator\">&amp;</span> obj<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 获取连接时返回一个可用的连接，返回共享的智能指针</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>MySqlConnect<span class=\"token operator\">></span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">ConnectionPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">ConnectionPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 解析 JSON 文件的函数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">paraseJsonFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 用来生产数据库连接</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">produceConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 用来销毁数据库连接 回收数据库连接</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">recycleConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 添加连接</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">addConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 数据库相关信息</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 通过加载配置文件 Json，访问用户指定的数据库</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 数据库 ip</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tstring m_ip<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 数据库用户</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tstring m_user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 数据库密码</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tstring m_passwd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// 数据库名称</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tstring m_dbName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 数据库访问端口</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> m_port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">// 设置连接上限</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_minSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 设置连接的上限</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_maxSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// 设置线程等待最大时长，单位毫秒</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token comment\">// 超时时长</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_timeout<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// 最大空闲时长单位毫秒</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_maxIdleTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token comment\">// 存储若干数据库连接队列</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tqueue<span class=\"token operator\">&lt;</span>MySqlConnect<span class=\"token operator\">*</span><span class=\"token operator\">></span> m_connectionQ<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token comment\">// 设置互斥锁</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tmutex m_mutexQ<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token comment\">// 设置条件变量</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tcondition_variable m_cond<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !CONNECTIONPOOL_H</span></span></pre></td></tr></table></figure><h3 id=\"connectionpoolcpp\"><a class=\"anchor\" href=\"#connectionpoolcpp\">#</a> ConnectionPool.cpp</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ConnectionPool.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;json/json.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mysql.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span> <span class=\"token comment\">// 加载多线程</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> Json<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 静态函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ConnectionPool<span class=\"token operator\">*</span> <span class=\"token class-name\">ConnectionPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getConnectPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">static</span> ConnectionPool pool<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 静态局部对象，不管后面调用多少次，得到的都是同一块内存地址</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>pool<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 打开数据库信息文件，并判断是否读取到相关信息</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">ConnectionPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">paraseJsonFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ifstream <span class=\"token function\">ifs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dbconf.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Reader rd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        Value root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        rd<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>ifs<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            m_ip <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"ip\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            m_port <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"port\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">asInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            m_user <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"userName\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            m_passwd <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            m_dbName <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"dbName\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            m_minSize <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"minSize\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">asInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            m_maxSize <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"maxSize\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">asInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            m_maxIdleTime <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"maxIdlTime\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">asInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            m_timeout <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"timeout\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">asInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取连接数据库json失败！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 子线程对应的任务函数，生成新的可用连接</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">ConnectionPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">produceConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// 判断当前连接池是否够用</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">//uniuqe 模版类，mutex 互斥锁类型 locker 对象管理</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        unique_lock<span class=\"token operator\">&lt;</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span>m_mutexQ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>m_connectionQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> m_minSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">// 阻塞条件变量</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            m_cond<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>locker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// 生产一个数据库连接</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token function\">addConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">// 调用对应的唤醒函数，唤醒的所有消费者</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        m_cond<span class=\"token punctuation\">.</span><span class=\"token function\">notify_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">// 当空闲的链接数量过多</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">ConnectionPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">recycleConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// 休息一段时间，每隔一秒种，进行一次检测</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep_for</span><span class=\"token punctuation\">(</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">milliseconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 进行加锁</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        lock_guard<span class=\"token operator\">&lt;</span>mutex<span class=\"token operator\">></span><span class=\"token function\">locker</span><span class=\"token punctuation\">(</span>m_mutexQ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">// 当大于最小连接数</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>m_connectionQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> m_minSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token comment\">// 先进后出</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            MySqlConnect<span class=\"token operator\">*</span> conn <span class=\"token operator\">=</span> m_connectionQ<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取出队头元素</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token comment\">// 判断队头元素存活时长是不是大于指定的最长存活时长</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>conn<span class=\"token operator\">-></span><span class=\"token function\">getAliveTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> m_maxIdleTime<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                m_connectionQ<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将队头的链接销毁</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token keyword\">delete</span> conn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">ConnectionPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">addConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    MySqlConnect<span class=\"token operator\">*</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> MySqlConnect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    conn<span class=\"token operator\">-></span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_user<span class=\"token punctuation\">,</span> m_passwd<span class=\"token punctuation\">,</span> m_dbName<span class=\"token punctuation\">,</span> m_ip<span class=\"token punctuation\">,</span> m_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token comment\">// 数据库连接之后就开始记录时间错</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    conn<span class=\"token operator\">-></span><span class=\"token function\">refreshAliveTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    m_connectionQ<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>shared_ptr<span class=\"token operator\">&lt;</span>MySqlConnect<span class=\"token operator\">></span> <span class=\"token class-name\">ConnectionPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token comment\">// 封装互斥锁，保证线程安全</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    unique_lock<span class=\"token operator\">&lt;</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span>m_mutexQ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token comment\">// 检查是否有可用的连接，如果没有阻塞一会</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>m_connectionQ<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cv_status<span class=\"token double-colon punctuation\">::</span>timeout <span class=\"token operator\">==</span> m_cond<span class=\"token punctuation\">.</span><span class=\"token function\">wait_for</span><span class=\"token punctuation\">(</span>locker<span class=\"token punctuation\">,</span> chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">milliseconds</span><span class=\"token punctuation\">(</span>m_timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre> </pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_connectionQ<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    shared_ptr<span class=\"token operator\">&lt;</span>MySqlConnect<span class=\"token operator\">></span> <span class=\"token function\">connptr</span><span class=\"token punctuation\">(</span>m_connectionQ<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>MySqlConnect<span class=\"token operator\">*</span> conn<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token comment\">// 加锁</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            lock_guard<span class=\"token operator\">&lt;</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span>m_mutexQ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>           <span class=\"token comment\">// 刷新起始空闲时间</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            conn<span class=\"token operator\">-></span><span class=\"token function\">refreshAliveTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            m_connectionQ<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    m_connectionQ<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    m_cond<span class=\"token punctuation\">.</span><span class=\"token function\">notify_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 唤醒生产者</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token keyword\">return</span> connptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token comment\">// 线程池析构函数</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token class-name\">ConnectionPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ConnectionPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>m_connectionQ<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        MySqlConnect<span class=\"token operator\">*</span> conn <span class=\"token operator\">=</span> m_connectionQ<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        m_connectionQ<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">delete</span> conn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token comment\">// 构造函数的实现</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token class-name\">ConnectionPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ConnectionPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token comment\">// 加载配置文件</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">paraseJsonFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"数据库连接失败\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token comment\">// 初始化配置连接数</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_minSize<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 连接数</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token comment\">// 如果队列总数小于最大数量</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_connectionQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> m_maxSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            <span class=\"token comment\">// 实例化对象</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            MySqlConnect<span class=\"token operator\">*</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> MySqlConnect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            <span class=\"token comment\">// 链接数据库</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>            conn<span class=\"token operator\">-></span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_user<span class=\"token punctuation\">,</span> m_passwd<span class=\"token punctuation\">,</span> m_dbName<span class=\"token punctuation\">,</span> m_ip<span class=\"token punctuation\">,</span> m_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>            m_connectionQ<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token comment\">// 当连接总数大于允许连接的最大数量</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"当前连接数量以超过允许连接的总数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token comment\">// 当前实例对象 this 指针，单例模式，</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    thread <span class=\"token function\">producer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ConnectionPool<span class=\"token double-colon punctuation\">::</span>produceConnection<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成线程池的连接</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    thread <span class=\"token function\">recycler</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ConnectionPool<span class=\"token double-colon punctuation\">::</span>recycleConnection<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有没有需要销毁的连接</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    将 producer 线程与当前线程分离，使得它们可以独立执行，</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token comment\">// 主线程和子线程分离</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    producer<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    recycler<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"maincpp\"><a class=\"anchor\" href=\"#maincpp\">#</a> main.cpp</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;json/json.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mysql.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"MySQLConnect.h\"</span> <span class=\"token comment\">//MySQL</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ConnectionPool.h\"</span> <span class=\"token comment\">// 连接池</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 单线程：使用 / 不使用连接池</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 多线程：使用 / 不使用连接池</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 循环插入操作，从 begin 到 end</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">op1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">// 建立 MySQL 连接类</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tMySqlConnect conn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 调用 connect 方法连接</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5211314\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cpp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token comment\">// 建立 sql 数组</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">char</span> sql<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token comment\">//sprintf 用于将格式化的字符串写入到一个字符数组中</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token comment\">// 第一个参数 str 用于存储格式化后的字符串</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token comment\">// 第二个 format 是一个格式化字符串，用于指定输出的格式，</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token comment\">// 第三个为参数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token comment\">// 执行插入语句</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"insert into person values(%d,25,'man','tom')\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token comment\">// 执行插入操作</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请检查数据库连接，数据库连接失败\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 使用数据库连接池</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">op2</span><span class=\"token punctuation\">(</span>ConnectionPool<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">// 返回共享的智能指针</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tshared_ptr<span class=\"token operator\">&lt;</span>MySqlConnect<span class=\"token operator\">></span> conn <span class=\"token operator\">=</span> pool<span class=\"token operator\">-></span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">char</span> sql<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token comment\">// 执行插入语句</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"insert into person values(%d,25,'man','tom')\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token comment\">// 执行</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\tconn<span class=\"token operator\">-></span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">// 单线程测试函数</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 非连接池，单线程，用时：59071963900 纳秒，59071 毫秒 ，59 秒</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"非连接池，单线程测试:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 绝对时钟</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token comment\">//now：表示当前时间的时间点</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tsteady_clock<span class=\"token double-colon punctuation\">::</span>time_point begin <span class=\"token operator\">=</span> steady_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">op1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 单线程每次插入数据都要建立数据库连接，而且析构数据库连接 TCP 连接浪费较多时间</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tsteady_clock<span class=\"token double-colon punctuation\">::</span>time_point end <span class=\"token operator\">=</span> steady_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">auto</span> length <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"非连接池,单线程，用时:\"</span> <span class=\"token operator\">&lt;&lt;</span> length<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"纳秒,\"</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> length<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000000</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"毫秒 ，\"</span> </pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> length<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000000000</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"秒\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token comment\">// 连接池，单  线程，用时：10798039100 纳秒，10798 毫秒 ，10 秒</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"连接池，单线程测试:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\tConnectionPool<span class=\"token operator\">*</span> pool <span class=\"token operator\">=</span> <span class=\"token class-name\">ConnectionPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getConnectPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token comment\">// 绝对时钟</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\tsteady_clock<span class=\"token double-colon punctuation\">::</span>time_point begin <span class=\"token operator\">=</span> steady_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token function\">op2</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tsteady_clock<span class=\"token double-colon punctuation\">::</span>time_point end <span class=\"token operator\">=</span> steady_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token keyword\">auto</span> length <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"连接池,单  线程，用时:\"</span> <span class=\"token operator\">&lt;&lt;</span> length<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"纳秒,\"</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> length<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000000</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"毫秒 ，\"</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> length<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000000000</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"秒\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token comment\">// 多线程非连接池，用时：23374580700 纳秒，23374 毫秒 ，23 秒</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"多线程非连接池:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token comment\">// 额外的数据库连接</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\tMySqlConnect conn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5211314\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cpp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\tsteady_clock<span class=\"token double-colon punctuation\">::</span>time_point begin <span class=\"token operator\">=</span> steady_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token comment\">// 创建线程</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\tthread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>op1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\tthread <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span>op1<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\tthread <span class=\"token function\">t3</span><span class=\"token punctuation\">(</span>op1<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\tthread <span class=\"token function\">t4</span><span class=\"token punctuation\">(</span>op1<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\tthread <span class=\"token function\">t5</span><span class=\"token punctuation\">(</span>op1<span class=\"token punctuation\">,</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token comment\">// 使用 join 方法，等待线程执行完毕</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\tt2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\tt3<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\tt4<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\tt5<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\tsteady_clock<span class=\"token double-colon punctuation\">::</span>time_point end <span class=\"token operator\">=</span> steady_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token keyword\">auto</span> length <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"多线程非连接池，用时:\"</span> <span class=\"token operator\">&lt;&lt;</span> length<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"纳秒,\"</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> length<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000000</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"毫秒 ，\"</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> length<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000000000</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"秒\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token comment\">// 连接池，单  线程，用时：5333870000 纳秒，5333 毫秒 ，5 秒</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"多线程连接池:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\tConnectionPool<span class=\"token operator\">*</span> pool <span class=\"token operator\">=</span> <span class=\"token class-name\">ConnectionPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getConnectPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\tsteady_clock<span class=\"token double-colon punctuation\">::</span>time_point begin <span class=\"token operator\">=</span> steady_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\tthread <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>op2<span class=\"token punctuation\">,</span>pool<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\tthread <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span>op2<span class=\"token punctuation\">,</span> pool<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\tthread <span class=\"token function\">t3</span><span class=\"token punctuation\">(</span>op2<span class=\"token punctuation\">,</span> pool<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\tthread <span class=\"token function\">t4</span><span class=\"token punctuation\">(</span>op2<span class=\"token punctuation\">,</span> pool<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\tthread <span class=\"token function\">t5</span><span class=\"token punctuation\">(</span>op2<span class=\"token punctuation\">,</span> pool<span class=\"token punctuation\">,</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\tt1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\tt2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\tt3<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\tt4<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\tt5<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\tsteady_clock<span class=\"token double-colon punctuation\">::</span>time_point end <span class=\"token operator\">=</span> steady_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token keyword\">auto</span> length <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"连接池,单  线程，用时:\"</span> <span class=\"token operator\">&lt;&lt;</span> length<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"纳秒,\"</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> length<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000000</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"毫秒 ，\"</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> length<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000000000</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"秒\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token comment\">// 建立 MySQL 连接</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\tMySqlConnect conn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token comment\">// 调用 connect 方法建立数据库</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5211314\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cpp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t<span class=\"token comment\">// 执行插入语句</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\tstring sql<span class=\"token operator\">=</span><span class=\"token string\">\"insert into person values(5,25,'man','tom')\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token comment\">// 执行插入，更新，删除操作</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t<span class=\"token keyword\">bool</span> flag <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token comment\">//boolalpha 以 true 和 false 形式输出</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> boolalpha<span class=\"token operator\">&lt;&lt;</span>  <span class=\"token string\">\"flag value: \"</span> <span class=\"token operator\">&lt;&lt;</span> flag <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\tsql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from person\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t<span class=\"token comment\">// 查询数据库</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t<span class=\"token comment\">// 返回结果集记录</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t<span class=\"token comment\">// 检测 MySQL 的环境以及 SQL 的环境</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MySQL Environment Successful\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t<span class=\"token comment\">// 直接操控 MySQL 进行管理</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t<span class=\"token comment\">//query();</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t<span class=\"token comment\">//test1();</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\t<span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>参考资料:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUZyNHkxczd3NC8=\">B 站爱编程的大丙</span></li>\n<li>《深入设计模式》- 亚历山大什韦茨</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "C++",
                "C++开源库",
                "C++",
                "计算机科学",
                "数据库",
                "MySQL"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/STL%E5%AE%B9%E5%99%A8%E9%80%82%E9%85%8D%E5%99%A8/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/STL%E5%AE%B9%E5%99%A8%E9%80%82%E9%85%8D%E5%99%A8/",
            "title": "STL容器适配器",
            "date_published": "2023-03-23T12:09:40.336Z",
            "content_html": "<h1 id=\"容器适配器\"><a class=\"anchor\" href=\"#容器适配器\">#</a> 容器适配器</h1>\n<blockquote>\n<p>容器适配器为顺序容器提供了不同的 <code>接口</code></p>\n</blockquote>\n<ul>\n<li><code>stack</code> : 适配一个容器已提供 <code>栈</code>  ( <code>LIFO</code>  数据结构)</li>\n<li><code>queue</code> : 适配一个容器以提供 <code>队列</code>  ( <code>FIFO</code>  数据结构)</li>\n<li><code>priority_queue</code> : 适配一个 <code>容</code> 器以提供 <code>优先级队列</code></li>\n</ul>\n<h2 id=\"stack\"><a class=\"anchor\" href=\"#stack\">#</a> stack</h2>\n<blockquote>\n<p><code>stack</code>  类是容器适配器，它给予程序员栈的功能 -- 特别是 <code>FILO</code>  (先进后出) 数据结构。该类模版表现为底层容器的包装器 -- 只提供特定函数集合。栈从被称作栈顶的容器尾部推弹元素</p>\n</blockquote>\n<h3 id=\"元素访问\"><a class=\"anchor\" href=\"#元素访问\">#</a> 元素访问</h3>\n<ul>\n<li><code>top</code> : 访问 <code>栈顶</code> 元素</li>\n</ul>\n<h3 id=\"容量\"><a class=\"anchor\" href=\"#容量\">#</a> 容量</h3>\n<ul>\n<li><code>empty</code> : 检查栈顶容器是否为 <code>空</code></li>\n<li><code>size</code> : 返回容纳的元素数</li>\n</ul>\n<h3 id=\"修改器\"><a class=\"anchor\" href=\"#修改器\">#</a> 修改器</h3>\n<ul>\n<li><code>push</code> : 向 <code>栈顶插入</code> 元素</li>\n<li><code>emplace</code> : 在栈顶原位构造元素</li>\n<li><code>pop</code> : <code>删除</code> 栈顶元素</li>\n<li><code>swap</code> : <code>交换</code> 内容</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 创建栈</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 向栈顶插入元素</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">51</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 输出栈的数量</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" elements on stack\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 访问栈顶元素</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s Top element:\"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 删除栈顶元素</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 输出栈的数量</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s elements on stack\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 将 s 内容与 a 进行交换</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a elements on stack\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 输出 a 的栈顶元素</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a Top element:\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>3 elements on stack</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>s Top element:51</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>2s elements on stack</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>2a elements on stack</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>a Top element:6</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>*/</span></pre></td></tr></table></figure><hr />\n<h2 id=\"queue\"><a class=\"anchor\" href=\"#queue\">#</a> queue</h2>\n<blockquote>\n<p><code>queue</code>  类是容器适配器，它给予程序员队列的功能 -- 尤其是 <code>FIFO</code>  (先进先出) 数据结构。</p>\n</blockquote>\n<h3 id=\"元素访问-2\"><a class=\"anchor\" href=\"#元素访问-2\">#</a> 元素访问</h3>\n<ul>\n<li><code>front</code> : 访问 <code>第一</code> 个元素</li>\n<li><code>back</code> : 访问 <code>最后一个</code> 元素</li>\n</ul>\n<h3 id=\"容量-2\"><a class=\"anchor\" href=\"#容量-2\">#</a> 容量</h3>\n<ul>\n<li><code>empty</code> : 检查栈顶容器是否为 <code>空</code></li>\n<li><code>size</code> : 返回容纳的元素数</li>\n</ul>\n<h3 id=\"修改器-2\"><a class=\"anchor\" href=\"#修改器-2\">#</a> 修改器</h3>\n<ul>\n<li><code>push</code> : 向 <code>栈顶插入</code> 元素</li>\n<li><code>emplace</code> : 在栈顶原位构造元素</li>\n<li><code>pop</code> : <code>删除</code> 栈顶元素</li>\n<li><code>swap</code> : <code>交换</code> 内容</li>\n</ul>\n<h2 id=\"priority_queue\"><a class=\"anchor\" href=\"#priority_queue\">#</a> priority_queue</h2>\n<blockquote>\n<p><code>priority_queue</code>  是容器适配器 (最大优先队列)，它提供 <code>常数时间</code> 的 (默认) <code>最大元素</code> 最大查找，对数代价的插入与提取。可以通过用户提供的 Compare 更改顺序，例如用 std::greater&lt;T&gt; 将导致最小元素作为 top () 出现，用 piority_queue 工作类似管理某些随机访问容器的堆，优势是堆不可能突然失效。</p>\n</blockquote>\n<h3 id=\"元素访问-3\"><a class=\"anchor\" href=\"#元素访问-3\">#</a> 元素访问</h3>\n<ul>\n<li><code>top</code> : 访问 <code>栈顶</code> 元素</li>\n</ul>\n<h3 id=\"容量-3\"><a class=\"anchor\" href=\"#容量-3\">#</a> 容量</h3>\n<ul>\n<li><code>empty</code> : 检查栈顶容器是否为 <code>空</code></li>\n<li><code>size</code> : 返回容纳的元素数</li>\n</ul>\n<h3 id=\"修改器-3\"><a class=\"anchor\" href=\"#修改器-3\">#</a> 修改器</h3>\n<ul>\n<li><code>push</code> : 向 <code>栈顶插入</code> 元素</li>\n<li><code>emplace</code> : 在栈顶原位构造元素</li>\n<li><code>pop</code> : <code>删除</code> 栈顶元素</li>\n<li><code>swap</code> : <code>交换</code> 内容</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>environment:C++20</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string_view></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string_view name<span class=\"token punctuation\">,</span> T <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> n <span class=\"token operator\">:</span> q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Q</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print_queue</span><span class=\"token punctuation\">(</span>string_view name<span class=\"token punctuation\">,</span> Q q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 注意按照值传递 q，这是因为无法再不清楚队列的情况下遍历 priority_queue 的内容</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>cout <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \\t\"</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 最大优先队列</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tpriority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q1<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token comment\">// 向栈顶插入元素</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tq1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">print_queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"q1\"</span><span class=\"token punctuation\">,</span> q1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// 最小优先队列</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">//std::gerater&lt;int > 使得最大优先队列的行为变成最小优先队列的行为</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tpriority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token function\">minq1</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">print_queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minq1\"</span><span class=\"token punctuation\">,</span> minq1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>data:   1 8 5 6 3 4 0 9 7 2</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>q1:     9 8 7 6 5 4 3 2 1 0</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>minq1:  0 1 2 3 4 5 6 7 8 9</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>*/</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "汇编与STl新特征",
                "C++",
                "计算机科学",
                "STL"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/STL%E6%97%A0%E5%BA%8F%E5%92%8C%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/STL%E6%97%A0%E5%BA%8F%E5%92%8C%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/",
            "title": "STL关联容器",
            "date_published": "2023-03-22T15:00:31.071Z",
            "content_html": "<h1 id=\"关联容器\"><a class=\"anchor\" href=\"#关联容器\">#</a> 关联容器</h1>\n<ul>\n<li><code>set</code> : <code>唯一键</code> 的集合，按照键排序</li>\n<li><code>map</code> : 键值队的集合，按照键排序， <code>键是唯一</code> 的</li>\n<li><code>multiset</code> : 键的集合，按照键排序</li>\n<li><code>multimap</code> : 键值对的集合，按照键排序</li>\n</ul>\n<h2 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a>  <code>set</code></h2>\n<blockquote>\n<p><code>set</code>  是关联容器，含有 <code>key</code>  类型对象的已排序集，用比较函数 ( <code>compare</code> ) 进行排序。搜索，移除和插入拥有对数复杂度，set 通常以红黑树实现</p>\n</blockquote>\n<h3 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code>  : 返回指向起始的迭代器</li>\n<li><code>end/cend </code> : 返回指向末位的迭代器</li>\n<li><code>rbegin/crbegin</code>  ：返回指向起始的逆向迭代器</li>\n<li><code>rend/crend</code>  : 返回指向末尾的逆向迭代器</li>\n</ul>\n<h3 id=\"容器\"><a class=\"anchor\" href=\"#容器\">#</a> 容器</h3>\n<ul>\n<li><code>empty</code> : 检查容器是否为空</li>\n<li><code>size</code> : 返回容纳的元素数</li>\n<li><code>max_size</code> ：返回可容纳的最大元素数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 创建关联容器 set</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 使用 set 的迭代器，循环遍历</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 让 bool 显示未 true 或 false</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> boolalpha<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s是否为空:\"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s的元素个数:\"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s可理论容纳的最大数量:\"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 清除 s 内容</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"清除后s是否为空:\"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 插入元素</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>1 2 3 4 5 6</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>s 是否为空:false</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>s 的元素个数：6</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>s 可理论容纳的最大数量：576460752303423487</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>清除后 s 是否为空:true</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>99</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"修改器\"><a class=\"anchor\" href=\"#修改器\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清除内容</li>\n<li><code>insert</code> ：插入元素或 <code>结点C++17</code></li>\n<li><code>emplace</code> : 原位构造元素</li>\n<li><code>emplace_hint</code> : 使用提示原位构造元素</li>\n<li><code>erase</code> : 擦除元素\n<ul>\n<li>参数:</li>\n<li><code>pos</code> : 指向要移除的元素的迭代器</li>\n<li><code>first,last</code> ：要移除的元素范围</li>\n<li><code>key</code> ：要移除的元素键值</li>\n<li><code>x</code> : 任何能与键通透比较的类型的值，自带要移除的元素</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">auto</span> print <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c=&#123;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"&#125;\"</span><span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"移除所有奇数：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token comment\">// 擦除首元素</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tit <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"移除1，移除个数\"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"移除2，移除个数\"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"移除2，移除个数\"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>c=&#123;1 2 3 4&#125;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>移除所有奇数：</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>c=&#123;2 4 &#125;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>移除 1，移除个数 0</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>移除 2，移除个数 1</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>移除 2，移除个数 0</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>c=&#123;4 &#125;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>*/</span></pre></td></tr></table></figure><ul>\n<li><code>swap</code> : 交换内容</li>\n<li><code>extract</code> : 从另一个容器释出结点 <code>C++17</code></li>\n</ul>\n<blockquote>\n<p>解链含 <code>position</code>  所指向的结点并返回占有它的结点柄<br />\n若容器拥有元素而其关键等于 x，则从容器解链该元素并返回占有它的结点柄，否则返回空结点柄<br />\n参数:<br />\n* position: 指向此容器中的合法迭代器<br />\n * k: 鉴别要被释放出的结点的键<br />\n * x: 任何能与键通透比较的类型的值，鉴别要释放的结点<br />\n <code>extract</code>  是 <code>set</code>  带走仅移动对象的唯一方式</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> cont<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">auto</span> print <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>cont<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cont<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//C++17. 解链含 position 所指向元素的结点柄返回占有它的结点柄</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">auto</span> nh <span class=\"token operator\">=</span> cont<span class=\"token punctuation\">.</span><span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 对结点柄重新赋值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tnh<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>cont<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cont<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 将 nh 结点柄插入尾部</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcont<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>nh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>cont<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cont<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> 1 2 3</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> 2 3</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> 2 3 4</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>*/</span></pre></td></tr></table></figure><ul>\n<li><code>merge</code> : 从另一个容器接合结点 <code>C++17</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Os</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Os<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>Os<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>set<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 求出 set 的大小</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'['</span> <span class=\"token operator\">&lt;&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] &#123;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">bool</span> o<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">// 判断是否为空决定是，还是空</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">?</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> os <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" &#125;\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tp<span class=\"token punctuation\">&#123;</span><span class=\"token char\">'C'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'B'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'B'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'A'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tq<span class=\"token punctuation\">&#123;</span> <span class=\"token char\">'E'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'D'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'E'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'C'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p: \"</span> <span class=\"token operator\">&lt;&lt;</span> p <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"q: \"</span> <span class=\"token operator\">&lt;&lt;</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">// 对 set 进行合并</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tp<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 合并自动去重</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">//q 留下重复的部分</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p.merge(q):\"</span> <span class=\"token operator\">&lt;&lt;</span> p <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"q: \"</span> <span class=\"token operator\">&lt;&lt;</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>p: [3] &#123; A, B, C &#125;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>q: [3] &#123; C, D, E &#125;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>p.merge(q):[5] &#123; A, B, C, D, E &#125;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>q: [1] &#123; C &#125;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"查找\"><a class=\"anchor\" href=\"#查找\">#</a> 查找</h3>\n<ul>\n<li><code>count</code> : 返回匹配特定键的元素数量</li>\n<li><code>find</code> : 遵照带有特定键的元素</li>\n<li><code>contains</code> ：检查容器是否含有带特定键的元素</li>\n<li><code>equal_range</code> : 返回匹配特定键的元素范围</li>\n<li><code>lower_bound</code> : 返回指向首个不小于给定键的元素迭代器</li>\n<li><code>upper_bound</code> : 返回指向首个大于给定键的元素的迭代器</li>\n</ul>\n<h3 id=\"观察器\"><a class=\"anchor\" href=\"#观察器\">#</a> 观察器</h3>\n<ul>\n<li><code>key_comp</code> : 返回用于比较键的函数</li>\n<li><code>value_comp</code> ：返回用于在 <code>value_type</code>  类型的对象中比较键的函数</li>\n</ul>\n<h2 id=\"multiset\"><a class=\"anchor\" href=\"#multiset\">#</a> multiset</h2>\n<blockquote>\n<p>multiset 是含有 key 类型对象有序集的容器，与 set 不同，它允许 <code>多个key</code>  拥有等价的值，用关键比较函数 Compare 进行排序，搜索，插入和移除操作拥有对数复杂度<br />\n <code>其用法与set相同</code></p>\n</blockquote>\n<h2 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> map</h2>\n<blockquote>\n<p>有序键值队容器，它的元素的键是惟一的。</p>\n</blockquote>\n<h3 id=\"元素访问\"><a class=\"anchor\" href=\"#元素访问\">#</a> 元素访问</h3>\n<ul>\n<li>at: 访问指定的元素，同时进行越界检查</li>\n<li>operator []: 访问或插入指定的元素</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 输出键值队 map</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">auto</span> print <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span> comment<span class=\"token punctuation\">,</span> <span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> map<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> comment <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#123;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> pair <span class=\"token operator\">:</span> map<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#123;\"</span> <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> letter_counts <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token char\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token char\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"letter_counts初始状态下包含:\"</span><span class=\"token punctuation\">,</span> letter_counts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tletter_counts<span class=\"token punctuation\">[</span><span class=\"token char\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tletter_counts<span class=\"token punctuation\">[</span><span class=\"token char\">'x'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改后的值\"</span><span class=\"token punctuation\">,</span> letter_counts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 统计每个单词出现的次数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tmap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> word_map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> w <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"this\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sentence\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"not\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sentence\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"this\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sentence\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hoax\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token operator\">++</span>word_map<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tword_map<span class=\"token punctuation\">[</span><span class=\"token string\">\"that\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 插入对 &#123;\"that\",0&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输出map:\"</span><span class=\"token punctuation\">,</span>word_map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"迭代器-2\"><a class=\"anchor\" href=\"#迭代器-2\">#</a> 迭代器</h3>\n<ul>\n<li>begin/cbegin：返回指向起始的迭代器</li>\n<li>end/cend: 返回指向末尾的迭代器</li>\n<li>rbegin/crbegin: 返回指向起始的逆向迭代器</li>\n<li>rend/crend: 返回指向末尾的逆向迭代器</li>\n</ul>\n<h3 id=\"容器-2\"><a class=\"anchor\" href=\"#容器-2\">#</a> 容器</h3>\n<ul>\n<li>empty: 检查容器是否为空</li>\n<li>size: 返回容器的元素数</li>\n<li>max_size: 返回可容纳的最大元素数</li>\n</ul>\n<h3 id=\"修改器-2\"><a class=\"anchor\" href=\"#修改器-2\">#</a> 修改器</h3>\n<ul>\n<li>clear: 清楚内容</li>\n<li>insert: 插入元素或结点</li>\n<li>insert_or_assign: 插入元素，或若键已存在赋值给当前元素</li>\n<li>emplace: 原位构造元素</li>\n<li>emplace_hint：使用提示原位构造元素</li>\n<li>try_emplace: 若键不存在则原位插入，若键存在则不做任何事情</li>\n<li>erase: 擦除元素</li>\n<li>swap: 交换内容</li>\n<li>extract：从另一个容器释出结点</li>\n<li>merge: 从另一容器接合结点</li>\n</ul>\n<h3 id=\"查找-2\"><a class=\"anchor\" href=\"#查找-2\">#</a> 查找</h3>\n<ul>\n<li>count: 返回匹配特定键的元素数量</li>\n<li>find: 寻找带有特定键的元素</li>\n<li>contains: 检查容器是否含有带特定键的元素</li>\n<li>equal_range: 返回匹配特定键的元素范围</li>\n<li>lower_bound: 返回指向首个不小于给定键的元素的迭代器</li>\n<li>upper_bound: 返回指向首个大小给定键的元素的迭代器</li>\n</ul>\n<h3 id=\"观察器-2\"><a class=\"anchor\" href=\"#观察器-2\">#</a> 观察器</h3>\n<ul>\n<li>key_comp: 返回用于比较键的函数</li>\n<li>value_comp: 返回用于在 value_type 类型的对象中比较键的函数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 输出键值队 map</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">auto</span> print_map <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span> comment<span class=\"token punctuation\">,</span> map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>map<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> comment <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//C++11 方案</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> pair <span class=\"token operator\">:</span> map<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#123;\"</span> <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tmap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> m<span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"cpu\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"GPU\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"RAM\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">print_map</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始map:\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 以不存在的键执行插入操作</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tm<span class=\"token punctuation\">[</span><span class=\"token string\">\"SSD\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">print_map</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入不存在的：\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 移除 GPU</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GPU\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">print_map</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"移除后：\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 条件移除</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">erase_if</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> pair<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> pair<span class=\"token punctuation\">.</span>second <span class=\"token operator\">></span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">print_map</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"条件移除后：\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> boolalpha <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"m是否为空:\"</span> <span class=\"token operator\">&lt;&lt;</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>初始 map:&#123;GPU:15&#125;&#123;RAM:20&#125;&#123;cpu:10&#125;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>插入不存在的：&#123;GPU:15&#125;&#123;RAM:20&#125;&#123;SSD:30&#125;&#123;cpu:10&#125;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>移除后：&#123;RAM:20&#125;&#123;SSD:30&#125;&#123;cpu:10&#125;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>条件移除后：&#123;RAM:20&#125;&#123;cpu:10&#125;</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>2</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>m 是否为空:true</pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"multimap\"><a class=\"anchor\" href=\"#multimap\">#</a> multimap</h2>\n<blockquote>\n<p>含有键值队的已排序列表，同时容纳许多个元素拥有同一键。与 map 用法相同</p>\n</blockquote>\n<h1 id=\"无序关联容器\"><a class=\"anchor\" href=\"#无序关联容器\">#</a> 无序关联容器</h1>\n<blockquote>\n<p>在内部，元素不以任何特别顺序排序，而是组织进桶中。元素被放进哪个桶完全依赖其值的哈希，这允许对单独元素的快速访问，因为哈希一旦确定，就准确自带元素被放入的桶。 <code>不可修改容器元素</code>  (即使通过非 cons 迭代器), 因为修改更改元素的哈希，并破坏容器</p>\n</blockquote>\n<ul>\n<li><code>unordered_set</code> : 唯一键的集合，按照键生成散列</li>\n<li><code>unordered_map</code> : 键值对的集合，按照键生成散列， <code>键</code> 是唯一的</li>\n<li><code>unordered_multiset</code> : 键的集合，按照键生成散列</li>\n<li><code>unordered_multimap</code> ：键值队的集合，按照键 <code>生成散列</code></li>\n</ul>\n<h2 id=\"unordered_set\"><a class=\"anchor\" href=\"#unordered_set\">#</a> unordered_set</h2>\n<blockquote>\n<p>含有 key 类型的唯一对象集合关联容器</p>\n</blockquote>\n<h3 id=\"迭代器-3\"><a class=\"anchor\" href=\"#迭代器-3\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code> : 返回指向起始的迭代器</li>\n<li><code>end/cend</code> : 返回指向末尾的迭代器</li>\n</ul>\n<h3 id=\"容器-3\"><a class=\"anchor\" href=\"#容器-3\">#</a> 容器</h3>\n<ul>\n<li><code>empty</code> ：检查容器是否为空</li>\n<li><code>size</code> ：返回容纳的元素数</li>\n<li><code>max_size</code> ：返回可容纳的 <code>最大</code> 元素数</li>\n</ul>\n<h3 id=\"修改器-3\"><a class=\"anchor\" href=\"#修改器-3\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清除内容</li>\n<li><code>insert</code> : 插入元素 <code>或结点C++17</code></li>\n<li><code>emplace</code> : 原位构造元素</li>\n<li><code>emplace_hint</code> : 使用提示原位构造元素</li>\n<li><code>erase</code> : 擦除元素</li>\n<li><code>swap</code> ：交换内容</li>\n<li><code>extract</code> ：从另一容器释出结点</li>\n<li><code>merge</code> : 从另一个容器接合结点</li>\n</ul>\n<h3 id=\"查找-3\"><a class=\"anchor\" href=\"#查找-3\">#</a> 查找</h3>\n<ul>\n<li><code>count</code> ：返回匹配特定键的元素数量</li>\n<li><code>find</code> ：寻找带有特定键的元素</li>\n<li><code>contains</code> : 检查容器是否含有带有特定键的元素</li>\n<li><code>equal_range</code> ：返回匹配 <code>特定键</code> 的元素范围</li>\n</ul>\n<h3 id=\"桶接口\"><a class=\"anchor\" href=\"#桶接口\">#</a>  <code>桶接口</code></h3>\n<ul>\n<li><code>begin(size_type)/cbegin(size_type)</code> ：返回一个迭代器，指向指定的桶的开始：返回指向下标为 n 的桶首元素的迭代器</li>\n<li><code>end(size_type)/cend(size_type)</code> : 返回一个迭代器，。返回后随下标为 n 的桶的最后元素的元素的迭代器，此元素表现为占位符，试图访问它会导致未定义行为</li>\n<li><code>bucket_count</code> : 返回容器中的桶数</li>\n<li><code>max_bucket_count</code> : 返回容器由于系统或库实现限制的能保有最大桶数</li>\n<li><code>bucket_size</code> ：返回在特定的桶中的元素数量</li>\n<li><code>bucket</code> : 返回带有特定键的容，key: 要检验的关键值</li>\n</ul>\n<h3 id=\"哈希策略\"><a class=\"anchor\" href=\"#哈希策略\">#</a>  <code>哈希策略</code></h3>\n<ul>\n<li><code>load_factor</code> ：返回每个容的平均元素数量</li>\n<li><code>max_load_factor</code> ：管理每个容的平均数量的最大值</li>\n<li><code>rehash</code> ：为至少为指定数量的桶预留存储空间并重新生成散列表</li>\n<li><code>reserve</code> : 为至少为指定数量的元素预留存储空间并重新生成哈希表</li>\n</ul>\n<h3 id=\"观察器-3\"><a class=\"anchor\" href=\"#观察器-3\">#</a>  <code>观察器</code></h3>\n<ul>\n<li><code>hash_function</code> : 返回用于对键散列的函数</li>\n<li><code>key_eq</code> : 返回用于比较键的相等性的函数</li>\n</ul>\n<h2 id=\"unordered_multiset\"><a class=\"anchor\" href=\"#unordered_multiset\">#</a> unordered_multiset</h2>\n<blockquote>\n<p>含有可能非唯一 key 类型对象的集合</p>\n</blockquote>\n<h2 id=\"unordered_map\"><a class=\"anchor\" href=\"#unordered_map\">#</a> unordered_map</h2>\n<blockquote>\n<p>含有唯一键 - 值 pair</p>\n</blockquote>\n<h3 id=\"迭代器-4\"><a class=\"anchor\" href=\"#迭代器-4\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code> : 返回指向起始的迭代器</li>\n<li><code>end/cend</code> : 返回指向末尾的迭代器</li>\n</ul>\n<h3 id=\"容器-4\"><a class=\"anchor\" href=\"#容器-4\">#</a> 容器</h3>\n<ul>\n<li><code>empty</code> ：检查容器是否为空</li>\n<li><code>size</code> ：返回容纳的元素数</li>\n<li><code>max_size</code> ：返回可容纳的最大元素数</li>\n</ul>\n<h3 id=\"修改器-4\"><a class=\"anchor\" href=\"#修改器-4\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清除内容</li>\n<li><code>insert</code> : 插入元素 <code>或结点C++17</code></li>\n<li><code>emplace</code> : 原位构造元素</li>\n<li><code>emplace_hint</code> : 使用提示原位构造元素</li>\n<li><code>erase</code> : 擦除元素</li>\n<li><code>swap</code> ：交换内容</li>\n<li><code>extract</code> ：从另一容器释出结点</li>\n<li><code>merge</code> : 从另一个容器接合结点</li>\n</ul>\n<h3 id=\"查找-4\"><a class=\"anchor\" href=\"#查找-4\">#</a> 查找</h3>\n<ul>\n<li><code>at</code> ：访问指定的元素，同时进行 <code>越界</code> 检查</li>\n<li><code>operator[]</code> : 访问或插入指定的元素</li>\n<li><code>count</code> ：返回匹配特定键的元素数量</li>\n<li><code>find</code> ：寻找带有特定键的元素</li>\n<li><code>contains``C++20</code> : 检查容器是否含有带有特定键的元素</li>\n<li><code>equal_range</code> ：返回匹配特定键的元素范围</li>\n</ul>\n<h3 id=\"桶接口-2\"><a class=\"anchor\" href=\"#桶接口-2\">#</a>  <code>桶接口</code></h3>\n<ul>\n<li><code>begin(size_type)/cbegin(size_type)</code> ：返回一个迭代器，指向指定的桶的开始：返回指向下标为 n 的桶首元素的迭代器</li>\n<li><code>end(size_type)/cend(size_type)</code> : 返回一个迭代器，。返回后随下标为 n 的桶的最后元素的元素的迭代器，此元素表现为占位符，试图访问它会导致未定义行为</li>\n<li><code>bucket_count</code> : 返回容器中的桶数</li>\n<li><code>max_bucket_count</code> : 返回容器由于系统或库实现限制的能保有最大桶数</li>\n<li><code>bucket_size</code> ：返回在特定的桶中的元素数量</li>\n<li><code>bucket</code> : 返回带有特定键的容，key: 要检验的关键值</li>\n</ul>\n<h3 id=\"哈希策略-2\"><a class=\"anchor\" href=\"#哈希策略-2\">#</a>  <code>哈希策略</code></h3>\n<ul>\n<li><code>load_factor</code> ：返回每个容的平均元素数量</li>\n<li><code>max_load_factor</code> ：管理每个容的平均数量的最大值</li>\n<li><code>rehash</code> ：为至少为指定数量的桶预留存储空间并重新生成散列表</li>\n<li><code>reserve</code> : 为至少为指定数量的元素预留存储空间并重新生成哈希表</li>\n</ul>\n<h3 id=\"观察器-4\"><a class=\"anchor\" href=\"#观察器-4\">#</a>  <code>观察器</code></h3>\n<ul>\n<li><code>hash_function</code> : 返回用于对 <code>键散列</code> 的函数</li>\n<li><code>key_eq</code> : 返回用于比较键的相等性的函数</li>\n</ul>\n<h3 id=\"unordered_multimap\"><a class=\"anchor\" href=\"#unordered_multimap\">#</a> unordered_multimap</h3>\n<blockquote>\n<p>支持等价的键 (一个 unordered_multimap 可含有每个键值的多个副本) 和将键与另一个类型的值关联</p>\n</blockquote>\n<h3 id=\"迭代器-5\"><a class=\"anchor\" href=\"#迭代器-5\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code> : 返回指向起始的迭代器</li>\n<li><code>end/cend</code> : 返回指向末尾的迭代器</li>\n</ul>\n<h3 id=\"容器-5\"><a class=\"anchor\" href=\"#容器-5\">#</a> 容器</h3>\n<ul>\n<li><code>empty</code> ：检查容器是否为空</li>\n<li><code>size</code> ：返回容纳的元素数</li>\n<li><code>max_size</code> ：返回可容纳的最大元素数</li>\n</ul>\n<h3 id=\"修改器-5\"><a class=\"anchor\" href=\"#修改器-5\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清除内容</li>\n<li><code>insert</code> : 插入元素 <code>或结点C++17</code></li>\n<li><code>emplace</code> : 原位构造元素</li>\n<li><code>emplace_hint</code> : 使用提示原位构造元素</li>\n<li><code>erase</code> : 擦除元素</li>\n<li><code>swap</code> ：交换内容</li>\n<li><code>extract</code> ：从另一容器释出结点</li>\n<li><code>merge</code> : 从另一个容器接合结点</li>\n</ul>\n<h3 id=\"查找-5\"><a class=\"anchor\" href=\"#查找-5\">#</a> 查找</h3>\n<ul>\n<li><code>count</code> ：返回匹配特定键的元素数量</li>\n<li><code>find</code> ：寻找带有特定键的元素</li>\n<li><code>contains``C++20</code> : 检查容器是否含有带有特定键的元素</li>\n<li><code>equal_range</code> ：返回匹配特定键的元素范围</li>\n</ul>\n<h3 id=\"桶接口-3\"><a class=\"anchor\" href=\"#桶接口-3\">#</a>  <code>桶接口</code></h3>\n<ul>\n<li><code>begin(size_type)/cbegin(size_type)</code> ：返回一个迭代器，指向指定的桶的开始：返回指向下标为 n 的桶首元素的迭代器</li>\n<li><code>end(size_type)/cend(size_type)</code> : 返回一个迭代器，。返回后随下标为 n 的桶的最后元素的元素的迭代器，此元素表现为占位符，试图访问它会导致未定义行为</li>\n<li><code>bucket_count</code> : 返回容器中的桶数</li>\n<li><code>max_bucket_count</code> : 返回容器由于系统或库实现限制的能保有 <code>最大桶数</code></li>\n<li><code>bucket_size</code> ：返回在特定的桶中的元素数量</li>\n<li><code>bucket</code> : 返回带有特定键的容， <code>key</code> : 要 <code>检验</code> 的 <code>关</code> 键值</li>\n</ul>\n<h3 id=\"哈希策略-3\"><a class=\"anchor\" href=\"#哈希策略-3\">#</a>  <code>哈希策略</code></h3>\n<ul>\n<li><code>load_factor</code> ：返回每个容的平均元素数量</li>\n<li><code>max_load_factor</code> ：管理每个容的平均数量的最大值</li>\n<li><code>rehash</code> ：为至少为指定数量的桶预留存储空间并重新生成散列表</li>\n<li><code>reserve</code> : 为至少为指定数量的元素预留存储空间并重新生成哈希表</li>\n</ul>\n<h3 id=\"观察器-5\"><a class=\"anchor\" href=\"#观察器-5\">#</a>  <code>观察器</code></h3>\n<ul>\n<li><code>hash_function</code> : 返回用于对键散列的函数</li>\n<li><code>key_eq</code> : 返回用于比较键的相等性的函数</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "C++",
                "汇编与STl新特征",
                "C++",
                "计算机科学",
                "STL"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/web/front/%E9%9A%8F%E6%9C%BA%E5%9B%BE%E7%89%87API/",
            "url": "https://www.blog.foryouos.cn/computer-science/web/front/%E9%9A%8F%E6%9C%BA%E5%9B%BE%E7%89%87API/",
            "title": "Github page随机图片API",
            "date_published": "2023-03-22T14:40:43.000Z",
            "content_html": "<h1 id=\"randomimgs\"><a class=\"anchor\" href=\"#randomimgs\">#</a> randomimgs</h1>\n<blockquote>\n<p>通过 <code>前端js</code>  跳转实现随机图片 API</p>\n</blockquote>\n<h2 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h2>\n<ul>\n<li>Github page 可以上传静态代码</li>\n<li>js 可以随机读取 url 文件，并在 js 数组中用 random 函数实现随机返回 url 部分内容</li>\n<li>使用 js 跳转功能，当用户通过 Github Page 点击到前端页面时，背后的 Js 将根据随机函数，随机跳转到图片的 url</li>\n<li>图片以第三方图床的形式保存</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWd0Zy5jb20v\">TG 图床</span></li>\n<li>Github Page 使用 cloudflare 实现加速同步部署</li>\n</ul>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>2023/03/16/l51Lx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>2023/03/14/fLKzb</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>2023/03/09/Y0iNK</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>2023/03/09/Y0hOs</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>2023/03/09/Y0zdB</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>2023/03/09/Y0kTl</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>2023/03/09/Y0qLD</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>2023/03/09/YSCTr</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>2023/03/09/YS2LU</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>2023/03/09/YSj7p</pre></td></tr></table></figure><hr />\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>瓶子的跋涉<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Random photo API<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 当打开 html 自动调用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 调用随机函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">loadRandomImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">loadRandomImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">var</span> xhttp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    xhttp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 始终进行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhttp<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 将所有图片 url 放入 imageUrls 当中</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">var</span> imageUrls <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// 实现随机访问</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">var</span> randomIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> imageUrls<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 实现额面跳转</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token operator\">=</span><span class=\"token string\">\"https://i.imgtg.com/\"</span> <span class=\"token operator\">+</span> imageUrls<span class=\"token punctuation\">[</span>randomIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".jpg\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"图片文件状态异常，可联系foryouos@qq.com\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 打开文件</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    xhttp<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"photos_urls.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    xhttp<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><div class=\"links\"><div class=\"item\" title=\"瓶子的跋涉\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9hcGktd2ltZy5mb3J5b3Vvcy5jbg==\" data-background-image=\"https://i.imgtg.com/2023/03/23/99DCP.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9hcGktd2ltZy5mb3J5b3Vvcy5jbg==\">随机图片API</span>\n          <p class=\"desc\">琉璃的医学 & 编程笔记</p>\n          </div></div></div></p>\n",
            "tags": [
                "计算机科学",
                "web",
                "前端",
                "前端",
                "web"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/STL%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/STL%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/",
            "title": "STL顺序容器",
            "date_published": "2023-03-21T05:00:32.893Z",
            "content_html": "<h1 id=\"顺序容器\"><a class=\"anchor\" href=\"#顺序容器\">#</a> 顺序容器</h1>\n<blockquote>\n<p>容器库是 <code>类</code> 与 <code>算法</code> 的汇集</p>\n</blockquote>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<ul>\n<li>静态的连续数组 <code>array</code></li>\n<li>动态连续数组 <code>vector</code></li>\n</ul>\n<h2 id=\"array\"><a class=\"anchor\" href=\"#array\">#</a> array</h2>\n<h3 id=\"头文件\"><a class=\"anchor\" href=\"#头文件\">#</a> 头文件</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr></table></figure><h3 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>注意：当期长度为零时，array (N==0) 有特殊情况，此时 array.begin ()==array.end (), 并拥有某个唯一值，在零长亦可将 array 上调用 front 或 back () 是未定义的</p>\n</blockquote>\n<h3 id=\"元素访问\"><a class=\"anchor\" href=\"#元素访问\">#</a> 元素访问</h3>\n<ul>\n<li><code>at</code> : 访问 <code>指定</code> 的元素，同时进行越界检查</li>\n<li><code>operator[]</code> : 访问指定的元素</li>\n<li><code>front</code> : 访问 <code>第一个</code> 元素</li>\n<li><code>back</code> : 访问 <code>最后一个</code> 元素</li>\n<li><code>data</code> : 直接访问底层数组的指针，返回的指针使得返回 [data (),data ()+size ()] 始终是合法范围，即使容器为空 (此时 data () 不可解引用)。对于底层元素存储的指针，对于非空容器，返回的指针与首元素地址比较相等</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//array 数组元素访问</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"at(2)=\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"operator[2]=\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"首front=\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"尾back=\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//a.data 返回 array 首元素地址</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"data =\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 遍历数组</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin </code> : 访问指向起始的 <code>迭代器</code></li>\n<li><code>end / cend </code> ：返回指向末位的迭代器</li>\n<li><code>rbegin / crbegin</code>  ：返回指向起始的 <code>逆向</code> 迭代器</li>\n<li><code>rend / crend</code>  ： 返回指向末位的逆向迭代器<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/ORog4TEnkbuePicu1R2efjibjI98CKvwRyNZKMibnLGzAgA3jeOicpRUBu8ZP7KztbBHCBud16YU608lPDibewnMczg/0?wx_fmt=gif\" alt=\"迭代器区别\" title=\"迭代器区别\" /></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//array 的迭代器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 打印首元素</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; *a.begin() &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 打印所有元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//for_each(a.cbegin(), a.cend(),</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//\t[](int x)&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//\t\tcout &lt;&lt; x &lt;&lt; \" \";</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//\t&#125;);</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; \"\\n\";</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//// 不加 c</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//for_each(a.begin(), a.end(),</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">//\t[](int x)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//\t&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//\t\tcout &lt;&lt; x &lt;&lt; \" \";</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">//\t&#125;);</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; \"\\n\";</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 使用 while 正序</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">auto</span> first <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">auto</span> last <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">!=</span> last<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 逆序 r</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 使用 while</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">auto</span> first_r <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">auto</span> last_r <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first_r <span class=\"token operator\">!=</span>last_r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>first_r <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tfirst_r<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>1 2 3 4 5 6</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>6 5 4 3 2 1</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"容器\"><a class=\"anchor\" href=\"#容器\">#</a> 容器</h3>\n<ul>\n<li><code>empty</code>  : 检查容器是否为空，若为空 0, 否则 1</li>\n<li><code>size </code> : 返回容纳的元素数</li>\n<li><code>max_size </code> ：返回可容纳的最大元素数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tarray <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token operator\">></span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 判断是否为空</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> boolalpha<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把 bool 值显示为 true 或 false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a.empty() ： \"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"no.empty() ： \"</span> <span class=\"token operator\">&lt;&lt;</span> no<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 返回元素个数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a.size() :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 返回元素最大，由于 array 大小固定等于 size</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a.max_size() :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>a.empty() ： false</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>no.empty() ： true</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>a.size() :3</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>a.max_size() :3</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"操作\"><a class=\"anchor\" href=\"#操作\">#</a> 操作</h3>\n<ul>\n<li><code>fill</code> : 以指定值填充容器</li>\n<li><code>swap </code> : 交换内容</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">></span> b <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 判断是否为空</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> boolalpha<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把 bool 值显示为 true 或 false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a.empty() ： \"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 将所有元素用 2 填充</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tb<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 将 a 的元素与 b 元素交换</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 返回 a 元素个数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a.size() :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 返回 a 的所有元素</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"A数组:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">auto</span> first_ra <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">auto</span> last_ra <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first_ra <span class=\"token operator\">!=</span> last_ra<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>first_ra <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tfirst_ra<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 返回 b 元素个数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b.size() :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 返回 b 的所有元素</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">auto</span> first_rb <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">auto</span> last_rb <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"B数组:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first_rb <span class=\"token operator\">!=</span> last_rb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>first_rb <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tfirst_rb<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>a.empty () ： false</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>a.size () :3</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>A 数组：6 6 6</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>b.size () :3</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>B 数组：2 2 2</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"辅助类\"><a class=\"anchor\" href=\"#辅助类\">#</a> 辅助类</h3>\n<ul>\n<li><code>tuple_size(std::array)</code> : 提供用于编译时常量表达式访问 array 中元素数量的方法</li>\n<li><code>tuple_element&lt;std::array&gt;</code> : 获取 array 元素的类型。提供 tuple 接口，提供 array 元素类型编译时代下标访问</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 辅助类 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>T t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>tuple_size<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 能用于编译时</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> tuple_size<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>value <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">></span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span> arr <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>3</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"vector\"><a class=\"anchor\" href=\"#vector\">#</a> vector</h2>\n<h3 id=\"头文件-2\"><a class=\"anchor\" href=\"#头文件-2\">#</a> 头文件</h3>\n<blockquote>\n<p><code>vector</code>  是封装动态数组的顺序容器， <code>vector</code>  的存储是自动管理的，按需扩张收缩， <code>vector</code>  通产占用 <code>多余</code> 静态数组的空间，因此要分配更多内存以管理将来的增长。 <code>vector</code>  所用的方式不在每次插入元素时，而只在额外内存耗尽时重分配。分配的内存总量可用 <code>capacity()</code>  函数查询，可以通过调用 <code>shrink_to_fit()</code>  返回多出的内存给系统。重分配通常是性能上有开销的操作，如果元素数量已知，那么 reserve () 函数可用于消除重分配</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr></table></figure><h3 id=\"元素访问-2\"><a class=\"anchor\" href=\"#元素访问-2\">#</a> 元素访问</h3>\n<ul>\n<li><code>at</code>  ： 访问指定的元素，同时进行越界检查</li>\n<li><code>operator[]</code> ：访问指定的元素</li>\n<li><code>front</code> ：访问第一个元素</li>\n<li><code>back</code> ：访问之后一个元素</li>\n<li><code>data</code> ：直接访问底层数组</li>\n</ul>\n<h3 id=\"迭代器-2\"><a class=\"anchor\" href=\"#迭代器-2\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code> ：返回指向起始的迭代器</li>\n<li><code>end/cend</code> ：返回指向末位的迭代器</li>\n<li><code>rbegin/crbegin</code> : 返回指向起始的逆向迭代器</li>\n<li><code>rend/crend</code> : 返回指向末尾的逆向迭代器</li>\n</ul>\n<h3 id=\"容量\"><a class=\"anchor\" href=\"#容量\">#</a> 容量</h3>\n<ul>\n<li><code>empty</code> : 检查容器是否为空</li>\n<li><code>size</code> : 返回容纳的元素数</li>\n<li><code>max_size</code> : 返回可容纳的最大元素数 (根据系统或库实现限制的容器可保有的元素最大数量)，此值通常反应容器大小的理论极限</li>\n<li><code>reserve</code> : 预留存储空间</li>\n<li><code>capacity</code> : 返回当前存储空间能够容纳的元素数</li>\n<li><code>shrink_to_fit</code> ：通过释放未使用的内存减少内存的使用</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* project： vector 容器语法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 返回当前可容纳元素容量的理论最大值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Maximum size of a vector is :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">//capacity 返回容器当前已为之分配空间的元素数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"capacity size of a vector is :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 增加 vector 的容量到大约或等于 new_cap 的值，参数 vector 的新容量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//capacity 返回容器当前已为之分配空间的元素数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"New capacity size of a vector is :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\ta <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 请求移除未使用的容量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">shrink_to_fit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//capacity 返回容器当前已为之分配空间的元素数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Shrink capacity size of a vector is :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Maximum size of a vector is :4611686018427387903</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>capacity size of a vector is :0</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>New capacity size of a vector is :10</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Shrink capacity size of a vector is :4</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"修改器\"><a class=\"anchor\" href=\"#修改器\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清除内容</li>\n<li><code>insert</code> : 插入元素\n<ul>\n<li>参数；</li>\n<li><code>pos</code> : 将内容那个插入到它前面的迭代器</li>\n<li><code>value</code> : 要插入的元素值</li>\n<li><code>first,last</code> ：要插入的元素范围，不能是指向调用 insert 所用的容器中的迭代器</li>\n<li><code>ilist</code> ：要插入来源的 initializer_list</li>\n<li>注意：如果新的 size () 大于留的 capacity 就会导致 <code>重分配</code> ，如果新的 size () 大于 capacity ()，那么所有迭代器和引用都会失效，否则只有在插入点前的迭代器和引用会保持有效</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//project:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iterator></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 动态数组输出函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\". \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> x <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 创建动态数组</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">c1</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 插入元素</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 在 c1 受元素插入 200</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tit <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 将上面的两个值 it 初始位置插入两个 300</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tc1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">//it 已经是失效，提供新迭代器</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tit <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 创建 c2 数组</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 在 c1 中插入 it 的位置插入 c2 从 begin 到 end</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tc1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>1. 100 100 100</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>2. 200 100 100 100</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>3. 300 300 200 100 100 100</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>4. 300 300 400 400 200 100 100 100</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>*/</span></pre></td></tr></table></figure><hr />\n<ul>\n<li><code>emplace</code>  : 原位构造元素，直接与 <code>pos</code>  前插入元素到容器中</li>\n<li><code>push_back</code> : 将元素添加到容器 <code>末尾</code></li>\n<li><code>emplace_back</code> : 在容器末尾就地构造元素</li>\n</ul>\n<hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyString</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 普通构造函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyString<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    MyString<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyString<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 赋值函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> m_data<span class=\"token punctuation\">;</span><span class=\"token comment\">// 用于保存字符串</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 普通构造函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">MyString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        m_data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token operator\">*</span>m_data <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        m_data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>m_data<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"construct:\"</span> <span class=\"token operator\">&lt;&lt;</span> m_data <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// String 的析构函数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token class-name\">MyString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"deconstruct:\"</span> <span class=\"token operator\">&lt;&lt;</span> m_data <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> m_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token class-name\">MyString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyString<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>m_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    m_data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>m_data<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>m_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copy construct:\"</span> <span class=\"token operator\">&lt;&lt;</span> m_data <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">// 赋值函数</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>MyString<span class=\"token operator\">&amp;</span> MyString<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyString<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copy assignment\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> m_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>m_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    m_data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>m_data<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>m_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"对比push_back和emplace_back的效率\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"push_back\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>MyString<span class=\"token operator\">></span> vStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 预先分配，否则整个 vector 在容量不够的情况下重新分配内存</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        vStr<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">// 将元素增加到末尾</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        vStr<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"can ge ge blog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"emplace_back\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>MyString<span class=\"token operator\">></span> vStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token comment\">// 预先分配，否则整个 vector 在容量不够的情况下重新分配内存</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        vStr<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        vStr<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>对比 push_back 和 emplace_back 的效率</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>push_back</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>construct:can ge ge blog</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>copy construct:can ge ge blog</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>deconstruct:can ge ge blog</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>deconstruct:can ge ge blog</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>emplace_back</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>construct:hello world</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>deconstruct:hello world</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>*/</span></pre></td></tr></table></figure><blockquote>\n<p>从运行结果行， <code>emplace_back</code>  只调用一次构造和析构，其 <code>效率</code> 不言而喻</p>\n</blockquote>\n<hr />\n<ul>\n<li><code>erase</code>  : 擦除元素\n<ul>\n<li>移除位于 <code>pos</code>  的元素</li>\n<li>移除范围 <code>[first,last]</code>  中的元素</li>\n</ul>\n</li>\n<li><code>pop_back</code> : 移除莫末元素</li>\n<li><code>resize</code> : 改变容器中可存储元素的个数\n<ul>\n<li>参数:</li>\n<li><code>count</code> ：容量的大小</li>\n<li><code>value</code> ：用以初始化新元素的值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> el <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> el <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 增加大小，多余的赋值为 0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> el <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> el <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 添加到 7，赋值为 6</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> el <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> el <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>1 2 3</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>1 2 3 0 0</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>1 2 3 0 0 6 6</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>*/</span></pre></td></tr></table></figure><ul>\n<li><code>swap</code> : 交换内容</li>\n</ul>\n<blockquote>\n<p>将内容以及容器与 <code>other</code>  交换， <code>不</code> 在单独的元素上调用任何移动，复制或交换操作</p>\n</blockquote>\n<h2 id=\"deque\"><a class=\"anchor\" href=\"#deque\">#</a> deque</h2>\n<blockquote>\n<p><code>deque</code>  双端队列，允许在它的首尾快速插入语删除，在 <code>deque</code>  任一端插入或删除都不会使指向其余元素的指针或引用失效。 <code>deque</code>  的存储按需自动扩展及收缩</p>\n</blockquote>\n<h3 id=\"元素访问-3\"><a class=\"anchor\" href=\"#元素访问-3\">#</a> 元素访问</h3>\n<ul>\n<li><code>at</code> : 访问 <code>指定</code> 的元素，同时进行越界检查</li>\n<li><code>operator[]</code> : 访问指定的元素</li>\n<li><code>front</code> : 访问 <code>第一个</code> 元素</li>\n<li><code>back</code> : 访问 <code>最后一个</code> 元素</li>\n</ul>\n<h3 id=\"迭代器-3\"><a class=\"anchor\" href=\"#迭代器-3\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code> ：返回指向起始的迭代器</li>\n<li><code>end/cend</code> ：返回指向末位的迭代器</li>\n<li><code>rbegin/crbegin</code> : 返回指向起始的逆向迭代器</li>\n<li><code>rend/crend</code> : 返回指向末尾的逆向迭代器</li>\n</ul>\n<h3 id=\"容量-2\"><a class=\"anchor\" href=\"#容量-2\">#</a> 容量</h3>\n<ul>\n<li><code>empty</code> : 检查容器是否为空</li>\n<li><code>size</code> : 返回容纳的元素数</li>\n<li><code>max_size</code> : 返回可容纳的最大元素数 (根据系统或库实现限制的容器可保有的元素最大数量)，此值通常反应容器大小的理论极限</li>\n<li><code>shrink_to_fit</code> ：通过释放未使用的内存减少内存的使用</li>\n</ul>\n<h3 id=\"修改器-2\"><a class=\"anchor\" href=\"#修改器-2\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code>  : 清楚内容</li>\n<li><code>insert</code> : 插入元素</li>\n<li><code>emplace</code> ：原位构造元素</li>\n<li><code>erase</code> : 擦除元素</li>\n<li><code>push_back</code> ：将元素添加到容器末尾</li>\n<li><code>emplace_back</code> ：将容器末尾就地构造元素</li>\n<li><code>pop_back</code> : 移除末元素</li>\n<li><code>pop_front</code> ：移除首元素</li>\n<li><code>push_front</code> ：插入元素到容器起始</li>\n<li><code>emplace_front</code> ：在容器头部原位构造元素</li>\n<li><code>resize</code> : 改变容器中可存储元素的个数</li>\n<li><code>swap</code> : 交换内容</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tdeque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>5 1 2 3 4 5 6</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>1 2 3 4 5</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"forward_list\"><a class=\"anchor\" href=\"#forward_list\">#</a> forward_list</h2>\n<blockquote>\n<p><code>forward_list</code>  支持从容器中的 <code>任何位置</code> 快速插入和移除元素的容器，不支持快速随机访问。它实现为 <code>单链表</code> ，且实质上与其在 C 中实现相比无任何开销，与 list 相比，此容器不需要双向迭代中提供更有效利用空间的存储</p>\n</blockquote>\n<h3 id=\"元素访问-4\"><a class=\"anchor\" href=\"#元素访问-4\">#</a> 元素访问</h3>\n<ul>\n<li><code>front</code> : 访问第一个元素</li>\n</ul>\n<h3 id=\"迭代器-4\"><a class=\"anchor\" href=\"#迭代器-4\">#</a> 迭代器</h3>\n<ul>\n<li><code>before_begin\\cbefore_begin</code> : 返回指向第一个元素之前的迭代器</li>\n<li><code>begin/cbegin</code> : 返回指向起始的迭代器</li>\n<li><code>end/cend</code> : 返回指向末位的迭代器</li>\n</ul>\n<h3 id=\"容量-3\"><a class=\"anchor\" href=\"#容量-3\">#</a> 容量</h3>\n<ul>\n<li>empty: 检查容器是否为空</li>\n<li>max_size: 返回可容纳的最大元素数</li>\n</ul>\n<h3 id=\"修改器-3\"><a class=\"anchor\" href=\"#修改器-3\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清楚内容</li>\n<li><code>insert_after</code> : 在某个元素后插入新元素\n<ul>\n<li>参数:</li>\n<li><code>pos</code> : 内容将其插入到其后的迭代器</li>\n<li><code>value</code> : 要插入的元素值</li>\n<li><code>count</code> : 要插入的副本数</li>\n<li><code>first,last</code> ：要插入的元素范围</li>\n<li><code>ilist</code> : 插入值来源 initializer_list</li>\n</ul>\n</li>\n<li><code>emplace_after</code> ：在元素后原位构造元素</li>\n<li><code>erase_after</code> ：擦除元素后的元素\n<ul>\n<li>参数；</li>\n<li><code>pos</code> : 指向前驱要移除元素的迭代器</li>\n<li><code>first,last</code>  要移除的元素范围</li>\n</ul>\n</li>\n<li><code>push_front</code> : 插入元素到容器起始</li>\n<li><code>emplace_front</code> ：在容器头部构造元素</li>\n<li><code>pop_front</code> : 移除首元素</li>\n<li><code>resize</code> : 改变容器中可存储元素的个数</li>\n<li><code>swap</code> : 交换内容</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;forward_list></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 重载输出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> forward_list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'['</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">char</span> comma<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">,</span><span class=\"token char\">' ,'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'\\0'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\ts <span class=\"token operator\">&lt;&lt;</span> comma <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcomma<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">', '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> s <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">']'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tforward_list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> words<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"the\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"forgurt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"alse\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cursed\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words:\"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">auto</span> beginIn <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>beginIn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"strawberry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// insert_after (3)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">auto</span> anotherIt <span class=\"token operator\">=</span> beginIn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token operator\">++</span>anotherIt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tanotherIt <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>anotherIt<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"strawberry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// insert_after (4)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> V <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tanotherIt <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>anotherIt<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// insert_after (5)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>anotherIt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"jackfruit\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kiwifruit\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lime\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mango\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 更改元素个数</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 移除首元素</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 从容器中移除指定元素</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">erase_after</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_after</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token comment\">// 清除元素</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>words:[the ,forgurt ,is ,alse ,cursed]</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>words: [the ,strawberry ,strawberry ,strawberry ,forgurt ,is ,alse ,cursed]</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>words: [the ,strawberry ,strawberry ,strawberry ,apple ,banana ,cherry ,forgurt ,is ,alse ,cursed]</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>words: [the ,strawberry ,strawberry ,strawberry ,apple ,banana ,cherry ,jackfruit ,kiwifruit ,lime ,mango ,forgurt ,is ,alse ,cursed]</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>words: [the ,strawberry ,strawberry ,strawberry ,apple ,banana]</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>words: [strawberry ,strawberry ,strawberry ,apple ,banana]</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>words: [strawberry ,strawberry ,apple ,banana]</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>words: [strawberry ,hello ,strawberry ,apple ,banana]</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"操作-2\"><a class=\"anchor\" href=\"#操作-2\">#</a> 操作</h3>\n<ul>\n<li><code>merge</code> : 合并两个已排序列表，链表以升序排序，不复制元素，并且操作后容器 other 会变 <code>为空</code> ，</li>\n<li><code>splice_afte</code> r: 从另一个 forward_list 移动元素\n<ul>\n<li>参数:</li>\n<li><code>pos</code> ：指向将插入内容到其后的元素的迭代器</li>\n<li><code>other</code> : 移动内容来源的另一个容器</li>\n<li><code>it</code>  指向从 other 移动到 * this 的元素的迭代器的前驱迭代器</li>\n<li><code>first,last</code> ，从 other 移动到 * this 的元素范围</li>\n</ul>\n</li>\n<li><code>remove/remove_if</code> : 移除满足特定标准的元素\n<ul>\n<li>参数:</li>\n<li><code>value</code>  - 要移除的元素的值</li>\n<li><code>p</code>  若应移除该元素则返回 true 的一元谓词</li>\n</ul>\n</li>\n<li><code>reverse</code> : 将该链表的所有元素顺序反转</li>\n<li><code>unique</code> : 删除连续的重复元素</li>\n<li><code>sort</code> : 对元素进行排序</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;forward_list></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;list></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> ostr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> forward_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> i <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tostr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> ostr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tforward_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tforward_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tforward_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">66</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 对列表排序</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tlist2<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"list1\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"list2\"</span> <span class=\"token operator\">&lt;&lt;</span> list2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 合并后 list2 为空</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"合并后\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">splice_after</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list3<span class=\"token punctuation\">,</span>list3<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list3<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"插入后\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 移除满足条件的值</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 移除等于 1 的</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"移除1后\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 移除 n 大于 10 的</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">remove_if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> n <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"移除大于10后\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 将所有元素反转</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"列表反转后：\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 删除重复元素</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"去重后：\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>list1 1 3 3 3 5 9 9</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>list2 2 3 4 5 7 8</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>合并后 1 2 3 3 3 3 4 5 5 7 8 9 9</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>插入后 1 99 33 2 3 3 3 3 4 5 5 7 8 9 9</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>移除 1 后 99 33 2 3 3 3 3 4 5 5 7 8 9 9</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>移除大于 10 后 2 3 3 3 3 4 5 5 7 8 9 9</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>列表反转后： 9 9 8 7 5 5 4 3 3 3 3 2</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>去重后： 9 8 7 5 4 3 2</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>*/</span></pre></td></tr></table></figure><hr />\n<h2 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> list</h2>\n<blockquote>\n<p>支持 <code>常量</code> 时间从容器任何位置插入和移除元素的容器。它通常实现为双向链表</p>\n</blockquote>\n<h3 id=\"元素访问-5\"><a class=\"anchor\" href=\"#元素访问-5\">#</a> 元素访问</h3>\n<ul>\n<li><code>front</code> : 访问第一个元素</li>\n<li><code>back</code> : 访问最后一个元素</li>\n</ul>\n<h3 id=\"迭代器-5\"><a class=\"anchor\" href=\"#迭代器-5\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code> : 返回指向起始的迭代器</li>\n<li><code>end/cend</code>  : 返回指向末尾的迭代器</li>\n<li><code>rbegin/crbegin</code> : 返回指向起始的逆向迭代器</li>\n<li><code>rend/crend</code> : 返回指向末尾的逆向迭代器</li>\n</ul>\n<h3 id=\"容量-4\"><a class=\"anchor\" href=\"#容量-4\">#</a> 容量</h3>\n<ul>\n<li><code>empty</code> : 检查容器是否为空</li>\n<li><code>size</code> : 返回容纳的元素数</li>\n<li><code>max_size</code> : 返回可容纳的最大元素数</li>\n</ul>\n<h3 id=\"修改器-4\"><a class=\"anchor\" href=\"#修改器-4\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清楚内容</li>\n<li><code>insert</code> : 插入元素</li>\n<li><code>emplace</code> ：原位构造元素</li>\n<li><code>erase</code> ：擦除元素</li>\n<li><code>push_back</code> : 在元素添加到容器末尾</li>\n<li><code>emplace_back</code> ：在容器末尾就地构造元素</li>\n<li><code>pop_back</code> ；移除末元素</li>\n<li><code>push_front</code> : 插入元素到容器起始</li>\n<li><code>emplace_front</code> ：在容器头部构造元素</li>\n<li><code>pop_front</code> : 移除首元素</li>\n<li><code>resize</code> : 改变容器中可存储元素的个数</li>\n<li><code>swap</code> : 交换内容</li>\n</ul>\n<h3 id=\"操作-3\"><a class=\"anchor\" href=\"#操作-3\">#</a> 操作</h3>\n<ul>\n<li><code>merge</code> : 合并 <code>两个已排序</code> 列表</li>\n<li><code>splice</code> : 从另一个 list 中移动元素</li>\n<li><code>remove/remove_if</code> : 移除满足特定标准的元素</li>\n<li><code>reverse</code> : 将该链表的所有元素顺序 <code>反转</code></li>\n<li><code>unique</code> : 删除连续的 <code>重复</code> 元素</li>\n<li><code>sort</code> : 对元素进行排序</li>\n</ul>\n<p>参考资料:<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2NvbnRhaW5lcg==\">cppreference</span></p>\n",
            "tags": [
                "计算机科学",
                "C++",
                "汇编与STl新特征",
                "C++",
                "计算机科学",
                "STL"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/life/travel/%E4%B8%87%E5%B2%81%E5%B1%B1%E4%B9%8B%E6%97%85/",
            "url": "https://www.blog.foryouos.cn/life/travel/%E4%B8%87%E5%B2%81%E5%B1%B1%E4%B9%8B%E6%97%85/",
            "title": "开封万岁山之旅",
            "date_published": "2023-03-19T23:50:00.000Z",
            "content_html": "<h1 id=\"开封之旅\"><a class=\"anchor\" href=\"#开封之旅\">#</a> 开封之旅</h1>\n<blockquote>\n<p><code>开封</code>  -&gt; <code>八</code> 朝古都，我的家乡，这里不仅有 <code>清明上河园</code> ， <code>包公祠</code> ， <code>开封府</code> ，还有 <code>万岁山武侠城</code> ， <code>中国翰园</code> ， <code>鼓楼夜市</code> ， <code>西司夜市</code> ， <code>龙亭</code> ， <code>大相国寺</code> 等...</p>\n</blockquote>\n<h2 id=\"出发\"><a class=\"anchor\" href=\"#出发\">#</a> 出发</h2>\n<p>作为和欣欣旅行的 <code>第二站</code> ，峰回路转又回到了自己的 <code>家乡</code> ，很多地方算得上是 <code>故地重游</code> ，但和欣欣一起 <code>感觉</code> 还是十分的特别。</p>\n<p>见面的想吓唬，不仅是缓解尴尬，也是内心的 <code>童趣</code> ，反正就是挺有意思的，也或许我们需要在某些场合在亲密关系中表现出隐藏在内心深处真实无忧无虑的自己。</p>\n<p>每次游玩也想去寻求它的 <code>意思</code> ，或是自由，或是放松，或是感受一座城市不一样的 <code>风土人情</code> ，或是体验我们在电视剧里看到但未成感受到的风景和趣事。</p>\n<h2 id=\"旅途\"><a class=\"anchor\" href=\"#旅途\">#</a> 旅途</h2>\n<blockquote>\n<p>用照片和视频去记录生活的碎片点滴<br />\n有途中的三月桃花雪<br />\n有万岁山的演唱会<br />\n有打铁花表演<br />\n有翰园山顶的邂逅<br />\n有船头的日落<br />\n有龙亭的庄严<br />\n有大相国寺的庄重<br />\n也有市井路边的饮食<br />\n更美好的你</p>\n</blockquote>\n<h2 id=\"启程\"><a class=\"anchor\" href=\"#启程\">#</a> 启程</h2>\n<p><div class=\"media-container\"><div class=\"player\" data-type=\"video\" data-src='[{\"name\":\"旅行记录\",\"url\":\"https://s138.ananas.chaoxing.com/video/fb/35/53/ead1480b90f8fb35d8f381d3aeb4944e/sd.mp4?at_=1679393695527\"},{\"name\":\"打铁花精彩版\",\"url\":\"https://s138.ananas.chaoxing.com/video/54/47/ff/2b43035323b9e6b530edd8a1c96762f4/sd.mp4?at_=1679382875178\"},{\"name\":\"《演员》\",\"url\":\"https://s138.ananas.chaoxing.com/video/c5/cf/65/7bf8c563a0ac7e368143a30b2839ed06/sd.mp4?at_=1679382171600\"},{\"name\":\"《丑八怪》\",\"url\":\"https://s138.ananas.chaoxing.com/video/0b/f8/b3/44017eebeb7dc6c52ef10958e1ca89d2/sd.mp4?at_=1679382769501\"}]'></div></div></p>\n<h2 id=\"回忆\"><a class=\"anchor\" href=\"#回忆\">#</a> 回忆</h2>\n<blockquote>\n<p>欣欣的个人感悟，确实也让我十分的感动。<br />\n第二天欣欣发烧，仍然陪着我一起去，确实不易。<br />\n当然身体是最重要的，也是下次出发准备所必须的。<br />\n或许下次在长时间心理准备的基础上，能有更好的 &quot;牡丹&quot; 之行。</p>\n</blockquote>\n<p><img data-src=\"https://i.imgtg.com/2023/03/21/9K3ob.png\" alt=\"分割线\" /></p>\n",
            "tags": [
                "生活记录",
                "旅行",
                "生活记录"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-3/jsoncpp%E5%A4%84%E7%90%86Json%E6%95%B0%E6%8D%AE/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-3/jsoncpp%E5%A4%84%E7%90%86Json%E6%95%B0%E6%8D%AE/",
            "title": "jsoncpp开源库",
            "date_published": "2023-03-16T01:20:43.000Z",
            "content_html": "<h1 id=\"jsoncpp\"><a class=\"anchor\" href=\"#jsoncpp\">#</a> JSONcpp</h1>\n<h2 id=\"开发环境配置\"><a class=\"anchor\" href=\"#开发环境配置\">#</a> 开发环境配置</h2>\n<h3 id=\"现成版百度网盘\"><a class=\"anchor\" href=\"#现成版百度网盘\">#</a> 现成版百度网盘</h3>\n<p><a href=\"%E9%93%BE%E6%8E%A5%EF%BC%9Ahttps://pan.baidu.com/s/1-DjqbRVVSmDizcD8wbEGFg?pwd=5213\" title=\"jsoncpp现成配置环境VS2022开发环境x64\">jsoncpp 现成配置环境 VS2022 开发环境 x64</a></p>\n<blockquote>\n<p>链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMS1EanFiUlZWU21EaXpjRDh3YkVHRmc/cHdkPTUyMTM=\">https://pan.baidu.com/s/1-DjqbRVVSmDizcD8wbEGFg?pwd=5213</span> 提取码：5213</p>\n</blockquote>\n<h3 id=\"环境配置版\"><a class=\"anchor\" href=\"#环境配置版\">#</a> 环境配置版</h3>\n<h4 id=\"下载jsoncpp\"><a class=\"anchor\" href=\"#下载jsoncpp\">#</a> 下载 Jsoncpp</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/open-source-parsers/jsoncpp</pre></td></tr></table></figure><h4 id=\"cmake进行编译\"><a class=\"anchor\" href=\"#cmake进行编译\">#</a> cmake 进行编译</h4>\n<h4 id=\"下载cmake\"><a class=\"anchor\" href=\"#下载cmake\">#</a> 下载 cmake</h4>\n<p>cmake 下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbWFrZS5vcmcvZG93bmxvYWQv\">链接</span><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup><br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYA1hiaSsHibx5wxf3SZa7oFTibVcJEsd8ia6iampzdjrRHvjGRO6duSHN7gg/0?wx_fmt=png\" alt=\"cmake下载文件\" title=\"cmake下载文件\" /></p>\n<h4 id=\"解析出动态\"><a class=\"anchor\" href=\"#解析出动态\">#</a> 解析出动态</h4>\n<ul>\n<li>安装 <code>cmake</code>  默认安装即可</li>\n<li>将 <code>jsoncpp所在文件夹，以及生成</code>  jsoncpp.dll 和 jsoncpp.lib` 等动态文件的文件夹<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYNbweGGibvwcvUknfulqk893zicuQ5tWeCGqF4YC7xWoXiaZyKoP9xw5iag/0?wx_fmt=png\" alt=\"填入jsoncpp文件夹\" title=\"填入jsoncpp所在文件夹\" /></li>\n<li>第一个为 VS 的版本，第二个默认 <code>x64</code>  不用填<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYY8pibHGcUPtWKamg0EEZ8OM02SntdWsiaoIg5BQrsR0asicqrfZjBQZPLQ/0?wx_fmt=png\" alt=\"版本配置\" title=\"版本配置\" /></li>\n</ul>\n<hr />\n<ul>\n<li>配置不动，点击 <code>生成</code> 即可，会发现生成文件逐步完成<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYS1icpcckPtrk3tHj3wfibrcNXOLOz3sRVWxF34TLlYyJxNlwDKoBI4jA/0?wx_fmt=png\" alt=\"生成\" title=\"生成文件\" /></li>\n</ul>\n<hr />\n<ul>\n<li><code>打开</code> 生成文件的项目<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYkpUxzHgBjy7k0DcmVXkEGic5oWhiaBPb1YZXFhOOxcgAIeoJa1CfazRg/0?wx_fmt=png\" alt=\"打开生成文件的项目\" title=\"打开生成文件的项目\" /></li>\n</ul>\n<hr />\n<ul>\n<li>将 <code>jsoncpp_dll</code>  设置为 <code>启动项</code> ，并右键点击第一个 <code>生成</code> 即可完成静态文件的生成<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYG3ogN50qSibbnl2VWwonazExaDkWjJ0SSiceW3PMdibLoYxicAbcmVMm8g/0?wx_fmt=png\" alt=\"静态文件生成\" title=\"静态文件的生成\" /></li>\n</ul>\n<hr />\n<ul>\n<li>可以在 C 盘 <code>新建</code> 一个存放环境的位置 cpp</li>\n<li>将下载 <code>clone</code>  的 jsoncpp 文件下的 include 文件全部放入 C 盘文件夹 cpp 中 (此文件为 jsoncpp 的头文件)</li>\n<li>将生成文件之后项目文件夹中 <code>bin\\Debug</code>  下的 <code>jsoncpp.dll</code>  复制到 C 盘文件夹 cpp 下与 <code>include同级</code> 的 <code>lib</code>  文件夹 (自己创建) 下</li>\n<li>将生成文件之后项目文件加中 lib\\Debug 下的 <code>jsoncpp.lib</code>  复制到 C 盘 cpp 文件夹 <code>lib</code>  文件下下<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYrbJL3c8nVpqefTuicABAR2Fb76kFpySaiax770ic3z70AOhN3N5Wia1b2w/0?wx_fmt=png\" alt=\"文件夹\" title=\"文件夹存放\" /></li>\n</ul>\n<hr />\n<h4 id=\"vs2022环境配置\"><a class=\"anchor\" href=\"#vs2022环境配置\">#</a> VS2022 环境配置</h4>\n<ul>\n<li>右键点击项目进入属性配置<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYcH0ia4wcLI7ozIMmXYqmicIylF3QPrPoylev5IXNial7FjWjX2T0PQLnA/0?wx_fmt=png\" alt=\"VS配置jsoncpp\" title=\"VS配置jsoncpp\" /></li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYpUO34ZBQQ4RMDTcQflVoXgRQp6icfFDZSfPy8b2eMNz7SMyd7W4ibVdA/0?wx_fmt=png\" alt=\"VS配置jsoncpp\" title=\"VS配置jsoncpp\" /></p>\n<hr />\n<h4 id=\"最后配置\"><a class=\"anchor\" href=\"#最后配置\">#</a> 最后配置</h4>\n<blockquote>\n<p>运行下面的实例代码很可能出现 “运行程序无法启动的问题”, 将 (刚才 C 盘中) <code>jsoncpp.dll</code>  文件复制到 <code>main.cpp</code>  对应的资源文件夹下即可<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYRjfdyU261d0YPzGD4Of8RlfQibjrGeLMKPliaicqhnKDv90PZVZuFfhFA/0?wx_fmt=png\" alt=\"VS运行最后配置\" /></p>\n</blockquote>\n<h2 id=\"实例代码\"><a class=\"anchor\" href=\"#实例代码\">#</a> 实例代码</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;json/json.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span> </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> Json<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 对于 Json 数组而言，内部的顺序是有序的，这个顺序就是添加数据的顺序</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">writeJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 定义 Value 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Value root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 使用 append 方法向 Value 包装器 li 填充数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    root<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"luffy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    root<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    root<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token number\">170</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    root<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 又定义一个 subArray 的 Value 对象</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Value subArray<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    subArray<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ace\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    subArray<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sabo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 将 subArray 对象增加到 root 里面</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    root<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>subArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    Value obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 定义键值对</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    obj<span class=\"token punctuation\">[</span><span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"man\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    obj<span class=\"token punctuation\">[</span><span class=\"token string\">\"girlfriend\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hancock\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 将 obj 对象的键值对增加到 root 里面</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    root<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 对上面数据格式序列化使用 toStyledString 方法得到带格式的字符串</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    string json <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 得到不带格式的字符串</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    FastWriter w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 通过 write 方法得到不带换行符的字符串   </span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    string json <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 写文件</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">//write  ->  ostream </span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">//read   ->  ifstream   </span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 将 json 数据写入 test.json</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    ofstream <span class=\"token function\">ofs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 写入格式化后带格式的字符串</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    ofs <span class=\"token operator\">&lt;&lt;</span> json<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 关闭文件</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    ofs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">/* 保存到的 json 数据</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>[</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    \"luffy\",</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    19,</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    170,</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    false,</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    [</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        \"ace\",</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        \"sabo\"</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    ],</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        \"girlfriend\" : \"Hancock\",</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        \"sex\" : \"man\"</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>]</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">readJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 读，打开 test.json</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    ifstream <span class=\"token function\">ifs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    Reader rd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    Value root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">// 将 json 数据解析到 root 里面</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    rd<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>ifs<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">// 判断解析的 root value 类是否是 Array</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">//size 方法判断</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            Value item <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token comment\">// 对类型进行判断，并对对应的类型进行输出</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">isInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">asInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ,\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ,\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">isBool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">asBool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ,\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                    cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                <span class=\"token comment\">//Return a list of the member names.</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                Value<span class=\"token double-colon punctuation\">::</span>Members keys <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getMemberNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    cout <span class=\"token operator\">&lt;&lt;</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token function\">writeJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json写入完毕\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token function\">readJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"具体用法\"><a class=\"anchor\" href=\"#具体用法\">#</a> 具体用法</h2>\n<h3 id=\"声明命名空间\"><a class=\"anchor\" href=\"#声明命名空间\">#</a> 声明命名空间</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> Json<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"jsoncpp的三个类\"><a class=\"anchor\" href=\"#jsoncpp的三个类\">#</a> jsoncpp 的三个类</h3>\n<h4 id=\"value类\"><a class=\"anchor\" href=\"#value类\">#</a>  <code>Value类</code></h4>\n<blockquote>\n<p><code>Value类</code> ：封装 <code>Json</code>  支持的所有类型，方便后序处理数据</p>\n</blockquote>\n<h5 id=\"value检测类型\"><a class=\"anchor\" href=\"#value检测类型\">#</a> Value 检测类型</h5>\n<blockquote>\n<p>使用 <code>Value.isNull()</code>  判断是够为空，输出 <code>bool值</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isBool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isInt64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isUInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isUInt64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isIntegral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isNumeric</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"将value转换为对应类型\"><a class=\"anchor\" href=\"#将value转换为对应类型\">#</a> 将 <code>Value</code>  转换为 <code>对应类型</code></h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Int <span class=\"token function\">asInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  UInt <span class=\"token function\">asUInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>JSON_HAS_INT64<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Int64 <span class=\"token function\">asInt64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  UInt64 <span class=\"token function\">asUInt64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// if defined(JSON_HAS_INT64)</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  LargestInt <span class=\"token function\">asLargestInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  LargestUInt <span class=\"token function\">asLargestUInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token function\">asFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">double</span> <span class=\"token function\">asDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">asBool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"fastwriter类\"><a class=\"anchor\" href=\"#fastwriter类\">#</a> FastWriter 类</h4>\n<blockquote>\n<p>将 <code>Value</code>  对象中的数据序列化为 <code>字符串</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string Json<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">FastWriter</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Value<span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>将数据格式化，不带换行符，编程单行</li>\n</ul>\n<h4 id=\"reader类\"><a class=\"anchor\" href=\"#reader类\">#</a> Reader 类</h4>\n<blockquote>\n<p>反序列化，将 <code>json字符串</code> 解析为 <code>Value类型</code></p>\n</blockquote>\n<h5 id=\"parse方法\"><a class=\"anchor\" href=\"#parse方法\">#</a>  <code>parse</code>  方法</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> Json<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Reader</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> decument<span class=\"token punctuation\">,</span>Value<span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span> collectComments<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数:</p>\n<ul>\n<li><code>document:json</code>  格式字符串， <code>打开</code> 的 json 文件</li>\n<li>root：传出参数， <code>存储</code> 了 json 字符串 <code>解析</code> 出的数据</li>\n<li>collectComments：是否保存 <code>注释信息</code> ，默认 <code>True</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> beginDoc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> endDoc<span class=\"token punctuation\">,</span> Value<span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span> collectComments <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数：</p>\n<ul>\n<li>bneginDoc 和 endDoc <code>指针定位</code>  json 字符串，解析 <code>部分</code>  json 字符串</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//brief Parse from input stream.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">//see Json::operator>>(std::istream&amp;, Json::Value&amp;).</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>IStream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> Value<span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> collectComments <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbWFrZS5vcmcvZG93bmxvYWQv\">https://cmake.org/download/</span> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "计算机科学",
                "C++",
                "C++开源库",
                "C++",
                "计算机科学",
                "数据库",
                "Json"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-3/C%E5%92%8CcppMySQL%20API%E8%B0%83%E7%94%A8/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-3/C%E5%92%8CcppMySQL%20API%E8%B0%83%E7%94%A8/",
            "title": "C和C++调用MySQL API",
            "date_published": "2023-03-14T14:20:43.000Z",
            "content_html": "<h1 id=\"c-mysql-api详解\"><a class=\"anchor\" href=\"#c-mysql-api详解\">#</a> C MySQL API 详解</h1>\n<h2 id=\"普通调用\"><a class=\"anchor\" href=\"#普通调用\">#</a> 普通调用</h2>\n<h3 id=\"开发环境\"><a class=\"anchor\" href=\"#开发环境\">#</a> 开发环境</h3>\n<blockquote>\n<p>需要引用头文件 <code>#include &lt;mysql.h&gt;</code></p>\n</blockquote>\n<ul>\n<li>默认已经安装了 MySQL 环境</li>\n<li>配置 VS2022 项目属性<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv2VGCVVXKvuxwgrnANSZyHqeZDCa87ibzcZwLibvE23rslmo9ORjmBy7vQQDJr6gMp1xthYEFriaA6w/0?wx_fmt=png\" alt=\"MySQL开发环境目录地址\" title=\"MySql系统安装目录以及需要的文件夹\" />\n<ul>\n<li>右键项目，进入属性</li>\n<li>需要在 <code>属性</code> 的 VC++ 目录中包含目录和引用目录中分别添加 MySQL 安装文件夹下的 include 文件夹和 lib 文件夹<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv2VGCVVXKvuxwgrnANSZyHP6Mcv1GtEglB2cIRmn0M0j1ia3WUlQg97oAXkPUC68bWMbftWD3GTBA/0?wx_fmt=png\" alt=\"VS2022属性配置\" title=\"VS2022属性配置\" /></li>\n<li>在属性中输入目录下的附加依赖项添加 MySQL 加密动态库<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv2VGCVVXKvuxwgrnANSZyHdp4bK9MEHAP9aaicllw6iadGuBk8jOFksrlYT5XDgZ4N9Y3jy2B9rZBw/0?wx_fmt=png\" alt=\"加密动态库位置\" title=\"加密动态库系统位置\" /><br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv2VGCVVXKvuxwgrnANSZyHN21ZEJEVWVwwafwPU5iarsm1Kow0ChWQct8dibRp0L2yK5Bsgiax9Uqbg/0?wx_fmt=png\" alt=\"添加MySQL加密动态库\" title=\"加载MySQL加密动态库\" /></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码测试\"><a class=\"anchor\" href=\"#代码测试\">#</a> 代码测试</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mysql.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MySQL Environment Successful\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 引用头文件不报错，即环境匹配成功</span></pre></td></tr></table></figure><h2 id=\"mysqlh用法\"><a class=\"anchor\" href=\"#mysqlh用法\">#</a>  <code>MySql.h</code>  用法</h2>\n<h3 id=\"运行流程图\"><a class=\"anchor\" href=\"#运行流程图\">#</a> 运行流程图</h3>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv2VGCVVXKvuxwgrnANSZyHMUu5icNADLDCWTp2YEB4BiarKBy5G5Jj4hzL6xDGvCv4OqvMxTuG6ZbQ/0?wx_fmt=png\" alt=\"C++调用MySQL流程图\" title=\"C++调用MySQL流程图\" /></p>\n<h3 id=\"c连接mysql语法详解\"><a class=\"anchor\" href=\"#c连接mysql语法详解\">#</a> C 连接 MySQL 语法详解</h3>\n<blockquote>\n<p>一共 <code>两</code> 个部分，一个通过一个小程序实例，通过注释的形式将 MySQL API 吃透，另一种是分解版逐步吃透。其为 <code>MySQL.h内部头文件</code></p>\n</blockquote>\n<h4 id=\"合集版\"><a class=\"anchor\" href=\"#合集版\">#</a> 合集版</h4>\n<h5 id=\"本地数据先进行的操作\"><a class=\"anchor\" href=\"#本地数据先进行的操作\">#</a> 本地数据先进行的操作</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">databases</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> cpp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">use</span> cpp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">TABLES</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 创建 dept 部门表</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> dept <span class=\"token punctuation\">(</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>d_id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>d_name <span class=\"token keyword\">VARCHAR</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>d_des <span class=\"token keyword\">VARCHAR</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">TABLES</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">DESC</span> dept<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">01</span><span class=\"token punctuation\">,</span><span class=\"token string\">'陆军'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'河南'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">02</span><span class=\"token punctuation\">,</span><span class=\"token string\">'第二陆军'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'开封'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">03</span><span class=\"token punctuation\">,</span><span class=\"token string\">'第三陆军'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'西安'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">04</span><span class=\"token punctuation\">,</span><span class=\"token string\">'第四陆军'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'山东'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">05</span><span class=\"token punctuation\">,</span><span class=\"token string\">'第五陆军'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'菏泽'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">06</span><span class=\"token punctuation\">,</span><span class=\"token string\">'第六陆军'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'商丘'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">07</span><span class=\"token punctuation\">,</span><span class=\"token string\">'第七陆军'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'郑州'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">08</span><span class=\"token punctuation\">,</span><span class=\"token string\">'第八陆军'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'洛阳'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> dept<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"c调用合集\"><a class=\"anchor\" href=\"#c调用合集\">#</a> C 调用合集</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mysql.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MySQL Environment Successful\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 初始化运行环境</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 该函数将分配初始化，并返回新对象，并通过返回这个对象去连接 MySQL 服务器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tMYSQL<span class=\"token operator\">*</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">mysql_init</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 判断是否初始化成功</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mysql <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql_init() error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据库初始化成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 连接 MySQL 服务器</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tmysql <span class=\"token operator\">=</span> <span class=\"token function\">mysql_real_connect</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tmysql<span class=\"token punctuation\">,</span> <span class=\"token comment\">//mysql_init () 函数返回值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//mysql 的 IP 地址</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//myslq 的用户名</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token string\">\"5211314\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//mysql 的密码</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token string\">\"cpp\"</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 使用的数据库名称</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token number\">3306</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 监听端口，0 为默认 3306 端口</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 本地套接字，不指定为 NULL</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token number\">0</span>       <span class=\"token comment\">// 默认 0</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 检查数据库连接情况</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mysql <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql_real_connect() error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据库连接成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 输出 MySQL API 使用的编码，参数为数据库对象</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql api使用的默认编码:%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mysql_character_set_name</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// 设置数据库编码为 utf8,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// 参数：数据库对象，编码</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">mysql_set_character_set</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"gbk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将编码改为 gbk 才可以进行数据插入，报错，乱码</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql api修改后的编码为:%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mysql_character_set_name</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">// 执行 sql 语句</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 查询 cpp 数据库下的 dept 部门表</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from dept\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token comment\">// 执行 sql 语句</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">// 参数：数据库对象，const char * 的数据库执行语句</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// 执行成功返回 0</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token comment\">//mysql_error 返回 mysql 数据库对象错误描述</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql_query()失败了，原因：%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 取出结果，参数 mysql 数据对象</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token comment\">//MYSQL_RES 对应一块内存八寸执行之后的结果集</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 若错误，返回 NULL</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tMYSQL_RES<span class=\"token operator\">*</span> res <span class=\"token operator\">=</span> <span class=\"token function\">mysql_store_result</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql_store_result()失败了，原因是:%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token comment\">// 得到结果集中的列数</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token comment\">// 参数：传入 mysql_store_result () 得到的返回值</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">mysql_num_fields</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token comment\">// 得到所有列的名字，并且输出</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token comment\">// 参数传入 mysql_store_result () 得到的返回值</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token comment\">//MYSQL_FIELD 对应的是一个结构体</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tMYSQL_FIELD<span class=\"token operator\">*</span> fields <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_fields</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token comment\">// 遍历输出 mysql 的 name</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t\\t\"</span><span class=\"token punctuation\">,</span> fields<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token comment\">// 遍历结果集中的所有行</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token comment\">// 参数：mysql_store_result () 得到的返回值</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token comment\">// 成功得到当前记录中每一个字段的值</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token comment\">// 失败 / 数据读完 返回 NULL</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\tMYSQL_ROW row<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_row</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token comment\">// 将当前列中的每一列信息读出</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t\\t\"</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token comment\">// 释放资源 - 结果集</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token function\">mysql_free_result</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token comment\">// 写入数据</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token comment\">//MySQL 默认自动提交数据库</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token comment\">// 设置事务为手动提交</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token function\">mysql_autocommit</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token comment\">// 执行成功返回 0</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret1 <span class=\"token operator\">=</span> <span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"insert into dept values(10,'第一海军','海南')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret2 <span class=\"token operator\">=</span> <span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"insert into dept values(11,'第二海军','福建')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret3 <span class=\"token operator\">=</span> <span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"insert into dept values(12,'第三海军','辽宁')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ret1=%d  ret2 = %d  ret3 = %d\\n\"</span><span class=\"token punctuation\">,</span> ret1<span class=\"token punctuation\">,</span> ret2<span class=\"token punctuation\">,</span> ret3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret1 <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> ret2 <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> ret3 <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行成功，正在提交事务\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token comment\">// 提交事务</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token function\">mysql_commit</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行失败，正在回滚....\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行失败原因: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token function\">mysql_rollback</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t<span class=\"token comment\">// 释放数据库资源</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token function\">mysql_close</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"分解头文件\"><a class=\"anchor\" href=\"#分解头文件\">#</a> 分解头文件</h4>\n<h5 id=\"初始化运行环境\"><a class=\"anchor\" href=\"#初始化运行环境\">#</a> 初始化运行环境</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 该函数将分配初始化，并返回新对象，并通过返回这个对象去连接 MySQL 服务器，得到一块内存并保存</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MYSQL<span class=\"token operator\">*</span> <span class=\"token function\">mysql_init</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span> mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 参数 NULL</span></pre></td></tr></table></figure><h5 id=\"连接数据库\"><a class=\"anchor\" href=\"#连接数据库\">#</a> 连接数据库</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MYSQL <span class=\"token operator\">*</span> <span class=\"token function\">mysql_real_connect</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">,</span>   <span class=\"token comment\">//mysql_init () 函数的返回值即指向的指针</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>host<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 主机地址 ip 地址，localhost,NULL 代表本地连接</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>user<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 服务器用户名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>passwd<span class=\"token punctuation\">,</span><span class=\"token comment\">// 连接服务器密码</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>db<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 要使用数据库名称</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 监听的端口号，若为 0，则默认 mysql 的 3306 端口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>unix_socket<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 本地套接字，不指定为 NULL</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> clientflag <span class=\"token comment\">// 通常指定为 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"执行sql语句\"><a class=\"anchor\" href=\"#执行sql语句\">#</a> 执行 SQL 语句</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数:</p>\n<ul>\n<li>mysql:mysql_real_connect () 的返回值</li>\n<li>query : 可以执行的 sql 语句，不要 <code>;</code> <br />\n 返回值:</li>\n<li>成功返回 <code>0</code>  就，结果集在 MySQL 对象中</li>\n<li>错误返回 <code>非0</code></li>\n</ul>\n<h5 id=\"获取结果集\"><a class=\"anchor\" href=\"#获取结果集\">#</a> 获取结果集</h5>\n<ul>\n<li>将结果集从 MySQL (参数) 对象中取出</li>\n<li>MYSQL_RES 对应一块内存，保存着查询之后的结果集</li>\n<li>返回具有多个结果的 MYSQL_RES 结果集合</li>\n<li>若错误，返回 NULL</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MYSQL_RES <span class=\"token operator\">*</span><span class=\"token function\">mysql_store_result</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"获取结果集的列数\"><a class=\"anchor\" href=\"#获取结果集的列数\">#</a> 获取结果集的列数</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mysql_num_fields</span><span class=\"token punctuation\">(</span>MYSQL_RES <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数</p>\n<ul>\n<li>调用 mysql_store_result () 得到的返回值<br />\n返回值</li>\n<li>结果集中的列数</li>\n</ul>\n<h5 id=\"获取结果集中所有列的名字\"><a class=\"anchor\" href=\"#获取结果集中所有列的名字\">#</a> 获取结果集中所有列的名字</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MYSQL_FIELD <span class=\"token operator\">*</span><span class=\"token function\">mysql_fetch_fields</span><span class=\"token punctuation\">(</span>MYSQL_RES <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数</p>\n<ul>\n<li>mysql_store_result () 得到的结果集<br />\n返回值</li>\n<li><code>MYSQL_FIELD*</code>  指向的一个结构体</li>\n</ul>\n<h6 id=\"结构体定义\"><a class=\"anchor\" href=\"#结构体定义\">#</a> 结构体定义</h6>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MYSQL_FIELD</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>               <span class=\"token comment\">/* Name of column  */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>org_name<span class=\"token punctuation\">;</span>           <span class=\"token comment\">/* Original column name, if an alias */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>table<span class=\"token punctuation\">;</span>              <span class=\"token comment\">/* Table of column if column was a field */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>org_table<span class=\"token punctuation\">;</span>          <span class=\"token comment\">/* Org table name, if table was an alias */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>db<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">/* Database for table */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>catalog<span class=\"token punctuation\">;</span>            <span class=\"token comment\">/* Catalog for table */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>def<span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* Default value (set by mysql_list_fields) */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> length<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* Width of column (create length) */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> max_length<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Max width for selected set */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> name_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> org_name_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> table_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> org_table_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> db_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> catalog_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> def_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* Div flags */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> decimals<span class=\"token punctuation\">;</span>      <span class=\"token comment\">/* Number of decimals in field*/</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> charsetnr<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* Character set */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">enum</span> <span class=\"token class-name\">enum_field_types</span> type<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Type of field. See mysql_com.h for types */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>extension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MYSQL_FIELD<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"获得结果集中字段的长度\"><a class=\"anchor\" href=\"#获得结果集中字段的长度\">#</a> 获得结果集中字段的长度</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token function\">mysql_fetch_lengths</span><span class=\"token punctuation\">(</span>MYSQL_RES <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数:</p>\n<ul>\n<li>result: 通过查询得到的结果集</li>\n</ul>\n<p>返回值</p>\n<ul>\n<li>无符号长整数的数组表示各列的大小，若错误返回 NULL</li>\n</ul>\n<h5 id=\"遍历结果集\"><a class=\"anchor\" href=\"#遍历结果集\">#</a> 遍历结果集</h5>\n<pre><code class=\"language-C\">MYSQL_ROW mysql_fetch_row(MYSQL_RES *result);\n</code></pre>\n<p>参数:</p>\n<ul>\n<li>\n<p>result：通过查询得到的结果集<br />\n返回值:</p>\n</li>\n<li>\n<p>成功：得到了当前记录中每个字段的值</p>\n</li>\n<li>\n<p>失败 / 数据已经读完：NULL，</p>\n</li>\n</ul>\n<h6 id=\"mysql_row\"><a class=\"anchor\" href=\"#mysql_row\">#</a> MYSQL_ROW</h6>\n<pre><code class=\"language-C\">typedef char** MYSQL_ROW;\n</code></pre>\n<ul>\n<li>返回值二级指针， <code>char**</code>  指向一个指针数组，类型是数组，里面的元素仍未指针， <code>char*</code>  类型，</li>\n<li><code>char* []</code> ：数组中的字符串对应的一列数据</li>\n<li>如果想要遍历整个结果集，需要对函数 MYSQL_ROW 进行循环调用</li>\n</ul>\n<h5 id=\"资源回收\"><a class=\"anchor\" href=\"#资源回收\">#</a> 资源回收</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 释放结果集</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mysql_free_result</span><span class=\"token punctuation\">(</span>MYSQL_RES <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 关闭 MySQL 实例</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mysql_close</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"字符编码\"><a class=\"anchor\" href=\"#字符编码\">#</a> 字符编码</h5>\n<h6 id=\"返回当前编码\"><a class=\"anchor\" href=\"#返回当前编码\">#</a> 返回当前编码</h6>\n<pre><code class=\"language-C\">// 获取API默认使用的字符编码(当前连接返回默认的字符集)\nconst char * mysql_character_set_name(MYSQL *mysql);\n</code></pre>\n<h6 id=\"设置编码\"><a class=\"anchor\" href=\"#设置编码\">#</a> 设置编码</h6>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设置 API 使用的字符集</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">mysql_set_character_set</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>csname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数:</p>\n<ul>\n<li>csname 为要设置的字符集：常用 <code>utf8</code></li>\n</ul>\n<h5 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h5>\n<blockquote>\n<p>MySql 会默认进行事务提交，需要设置逻辑处理时，多吃写操作，开始时创建事务，结束时判断是否全部成功，再提交或处理错误</p>\n</blockquote>\n<pre><code class=\"language-C\">my_bool mysql_autocommit(MYSQL *mysql,my_bool mode);\n</code></pre>\n<p>参数:</p>\n<ul>\n<li><code>mode</code>  如果模式为 <code>1</code> ， <code>启用</code>  autocommit 模式</li>\n<li>如果模式为 <code>0</code> ， <code>禁止</code>  autocommit 模式</li>\n</ul>\n<h6 id=\"事务提交\"><a class=\"anchor\" href=\"#事务提交\">#</a> 事务提交</h6>\n<pre><code class=\"language-C\">my_bool mysql_commit(MYSQL *mysql);\n</code></pre>\n<p>返回值:</p>\n<ul>\n<li>成功：0</li>\n<li>失败：非 0</li>\n</ul>\n<h6 id=\"数据回滚\"><a class=\"anchor\" href=\"#数据回滚\">#</a> 数据回滚</h6>\n<blockquote>\n<p>回滚到事务处理前的状态</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>my_bool <span class=\"token function\">mysql_rollback</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>返回值:</p>\n<ul>\n<li>成功： 0</li>\n<li>失败： 非 0</li>\n</ul>\n<h5 id=\"打印错误信息\"><a class=\"anchor\" href=\"#打印错误信息\">#</a> 打印错误信息</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回错误的描述</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 返回错误的编码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"参数传递依赖关系\"><a class=\"anchor\" href=\"#参数传递依赖关系\">#</a> 参数传递依赖关系</h5>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv2VGCVVXKvuxwgrnANSZyHjoT3kqibCiaBUFvgYlafwib3rwehfMfxERhaoiactnRV00HsaBlX1czaOw/0?wx_fmt=png\" alt=\"参数传递依赖关系\" title=\"参数传递依赖关系\" /></p>\n<h2 id=\"c封装mysql-api\"><a class=\"anchor\" href=\"#c封装mysql-api\">#</a> C++ 封装 MySQL API</h2>\n<h3 id=\"什么时候调用释放结果集\"><a class=\"anchor\" href=\"#什么时候调用释放结果集\">#</a> 什么时候调用释放结果集</h3>\n<ul>\n<li>析构函数</li>\n<li>可能会对数据库进行多次查询，每次查询一次都会得到结果集，查询是清空掉上次的结果集</li>\n</ul>\n<h3 id=\"源代码\"><a class=\"anchor\" href=\"#源代码\">#</a> 源代码</h3>\n<h4 id=\"mysqlconnecth\"><a class=\"anchor\" href=\"#mysqlconnecth\">#</a>  <code>MySQLConnect.h</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">MYSQLCONNECT_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MYSQLCONNECT_H</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mysql.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MySqlConnect</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 什么时候调用释放结果集</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//1, 析构函数 2，可能会对数据库进行多次查询，每次查询一次都会得到结果集，查询是清空掉上次的结果集</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">freeResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放结果集</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tMYSQL<span class=\"token operator\">*</span> m_conn <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存 MySQL 初始化的私有成员</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tMYSQL_RES<span class=\"token operator\">*</span> m_result <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错结果集</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tMYSQL_ROW m_row <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存着当前字段的所有列的数值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 初始化数据库连接</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">MySqlConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 释放数据库连接</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">MySqlConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 连接数据库，使用默认端口可省略端口书写</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>string user<span class=\"token punctuation\">,</span> string passwd<span class=\"token punctuation\">,</span>string dbName<span class=\"token punctuation\">,</span>string ip<span class=\"token punctuation\">,</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3306</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 更新数据库 (插入，更新，删除)，传递字符串</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>string sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 查询数据库，单词 query: 查询</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>string sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 遍历查询得到的结果集，每调一次，从结果集中取出一条数据</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 得到结果集中的字段值，取记录里面字段方法</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tstring <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 事务操作，关闭自动提交</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 提交事务</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 事务回滚；</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !MYSQLCONNECT_H</span></span></pre></td></tr></table></figure><h4 id=\"mysqlconnectcpp\"><a class=\"anchor\" href=\"#mysqlconnectcpp\">#</a>  <code>MySQLConnect.cpp</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"MySQLConnect.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">freeResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token function\">mysql_free_result</span><span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tm_result <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MySqlConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tm_conn <span class=\"token operator\">=</span> <span class=\"token function\">mysql_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">mysql_set_character_set</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MySqlConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_conn <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">mysql_close</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">freeResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>string user<span class=\"token punctuation\">,</span> string passwd<span class=\"token punctuation\">,</span> string dbName<span class=\"token punctuation\">,</span> string ip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">//ip 传入为 string，使用.str 将 ip 转为 char * 类型</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tMYSQL<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token function\">mysql_real_connect</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> passwd<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dbName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 连接成功返回 true</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 如果连接成功返回 TRUE，失败返回 FALSE</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">return</span> ptr<span class=\"token operator\">!=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>string sql<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">//query 执行成功返回 0</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">bool</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>string sql<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">freeResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token comment\">//query 执行成功返回 0</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tm_result <span class=\"token operator\">=</span> <span class=\"token function\">mysql_store_result</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 如果结果集为空则没有必要遍历</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_result <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token comment\">// 保存着当前字段的所有列的数值</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\tm_row <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_row</span><span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>string <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token comment\">// 表示列的数量</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token keyword\">int</span> row_num <span class=\"token operator\">=</span> <span class=\"token function\">mysql_num_fields</span><span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数得到结果集中的列数</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token comment\">// 如果查询的的 index 列大于总列，或小于 0，是错误的</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> row_num <span class=\"token operator\">||</span> index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> val <span class=\"token operator\">=</span> m_row<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 若为二进制数据，中间是有 \"\\0\" 的</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> length <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_lengths</span><span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入 length 就不会以 \"\\0\" 为结束符，而是通过长度把对应的字符转换为 string 类型</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">mysql_autocommit</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数返回值本身就是 bool 类型</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">mysql_commit</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 提交</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">mysql_rollback</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//bool 类型，函数成功返回 TRUE，失败返回 FALSE</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "C++开源库",
                "C++",
                "计算机科学",
                "C",
                "数据库",
                "MySQL"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-4/cpp%E5%AE%9E%E7%8E%B0%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-4/cpp%E5%AE%9E%E7%8E%B0%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "title": "C++实现银行管理系统",
            "date_published": "2023-03-14T00:20:43.000Z",
            "content_html": "<h1 id=\"银行管理系统\"><a class=\"anchor\" href=\"#银行管理系统\">#</a> 银行管理系统</h1>\n<p>开源注释详解:<a href=\"git@github.com:foryouos/bank-system.git\">Github</a></p>\n<h2 id=\"功能\"><a class=\"anchor\" href=\"#功能\">#</a> 功能</h2>\n<ul>\n<li>添加账户\n<ul>\n<li>储蓄账户</li>\n<li>信用卡账户</li>\n</ul>\n</li>\n<li>存款</li>\n<li>取款</li>\n<li>当前账户余额</li>\n<li>指定时间内的账目信息\n<ul>\n<li>利息</li>\n</ul>\n</li>\n<li>本地化存储，二次启动同步</li>\n<li>所有账户总金额</li>\n<li>退出</li>\n</ul>\n<h2 id=\"数据存储思路\"><a class=\"anchor\" href=\"#数据存储思路\">#</a> 数据存储思路</h2>\n<blockquote>\n<p>将每次运行的代码存储到本地 txt 文件当中，每次启动可以首先初始化文件内容，已达到文件储存的目的</p>\n</blockquote>\n<h3 id=\"缺点\"><a class=\"anchor\" href=\"#缺点\">#</a> 缺点</h3>\n<ul>\n<li>数据量过大数据初始化难</li>\n<li>业务逻辑越复杂也越难以保存</li>\n<li>用户交互需要按照文件保存书写指令，十分不便</li>\n</ul>\n<blockquote>\n<p>或许可以使用 MySQL 数据库存储数据，用 C++ 与 MySQL 进行交互，达到相关查询，存储的功能。</p>\n</blockquote>\n<h2 id=\"类图呈现\"><a class=\"anchor\" href=\"#类图呈现\">#</a> 类图呈现</h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv2VGCVVXKvuxwgrnANSZyHv56iaEoYzayJ71eKgIRjGcmPRuLnawrpCgdicuLDWJItHIl7nPKGqTzA/0?wx_fmt=png\" alt=\"银行管理系统类关系图\" /></p>\n<h2 id=\"各文件功能\"><a class=\"anchor\" href=\"#各文件功能\">#</a> 各文件功能</h2>\n<ul>\n<li>date.h  日期类头文件</li>\n<li>date.cpp 日期类实现文件</li>\n<li>account.h  账户类定义头文件</li>\n<li>account.cpp 账户类实现文件以及记录</li>\n<li>accumulator.h  对数据进行累加的相关计算</li>\n<li>main.cpp   主函数文件</li>\n<li>Array.h 数组模版的头文件</li>\n<li>Controller 类保存账户列表，当前日期和处理指定命令</li>\n</ul>\n<h2 id=\"详解源代码\"><a class=\"anchor\" href=\"#详解源代码\">#</a> 详解源代码</h2>\n<h3 id=\"dateh\"><a class=\"anchor\" href=\"#dateh\">#</a>  <code>date.h</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 日期类头文件，对日期类文件进行处理 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_DATE_H_</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_DATE_H_</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span>   <span class=\"token comment\">// 日期类</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 年</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 月</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> day<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 日</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> totalDays<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 该日期是从公元元年 1 月 1 日开始的第几天</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> month<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> day<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用年，月，日构造日期</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 专门从 cin 读入一个日期，赋值查询历史账目功能</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//static Date read();</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 获取 Date 日期年份</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> year<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">// 获取 Date 日期月份</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 获取 Date 日期天</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 获取 Date 当月的天数</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getMaxDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 判断 Date 日期是否是闰年</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>  <span class=\"token comment\">// 判断是否为闰年</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> year <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> year <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> year <span class=\"token operator\">%</span> <span class=\"token number\">400</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">// 输出 Date 日期</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// 输出 Data 从公元元年 1 月 1 日到目前 date 的天数</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> totalDays <span class=\"token operator\">-</span> date<span class=\"token punctuation\">.</span>totalDays<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">// 重载 Date 之前的 “-” 号，用公元元年到目前的日期相减</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> totalDays <span class=\"token operator\">-</span> date<span class=\"token punctuation\">.</span>totalDays<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// 重载 Date 之间的 “&lt;\" 号，用永远元年到目前 date 的日期计算</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> totalDays <span class=\"token operator\">&lt;</span> date<span class=\"token punctuation\">.</span>totalDays<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">// 重载 Date 类输入，格式化日期格式：year-month-day</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">// 重载 Date 类输出，格式化日期格式：year-month-day</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !_DATE_H_</span></span></pre></td></tr></table></figure><h3 id=\"datecpp\"><a class=\"anchor\" href=\"#datecpp\">#</a>  <code>date.cpp</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 日期类实现函数 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"date.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdexcept></span>  <span class=\"token comment\">// 标准库表头，此头文件是错误处理库的一部分</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">namespace</span>  <span class=\"token comment\">// 使用 namespace 使下面的定义只能在当前文件中有效</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 存储平年中每个月 1 日之前有多少天，为便于 getMaxDay 函数的实现，</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> DAYS_BEFORE_MONTH<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">59</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">151</span><span class=\"token punctuation\">,</span><span class=\"token number\">181</span><span class=\"token punctuation\">,</span><span class=\"token number\">212</span><span class=\"token punctuation\">,</span><span class=\"token number\">143</span><span class=\"token punctuation\">,</span><span class=\"token number\">273</span><span class=\"token punctuation\">,</span><span class=\"token number\">304</span><span class=\"token punctuation\">,</span><span class=\"token number\">334</span><span class=\"token punctuation\">,</span><span class=\"token number\">365</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">Date</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> day<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">year</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">month</span><span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">day</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>day <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> day <span class=\"token operator\">></span> <span class=\"token function\">getMaxDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">runtime_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Date 发生异常，直接使用标准程序库构造异常抛出</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 减一是为了计算总天数，会加上月份和天数，年份日要减一</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">int</span> years <span class=\"token operator\">=</span> year <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 计算总天数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\ttotalDays <span class=\"token operator\">=</span> years <span class=\"token operator\">*</span> <span class=\"token number\">365</span> <span class=\"token operator\">+</span> years <span class=\"token operator\">/</span> <span class=\"token number\">4</span> <span class=\"token operator\">-</span> years <span class=\"token operator\">/</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> years <span class=\"token operator\">/</span> <span class=\"token number\">400</span> <span class=\"token operator\">+</span> DAYS_BEFORE_MONTH<span class=\"token punctuation\">[</span>month <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 如果是瑞年并且月份大约 2，总天数 + 1</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> month <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\ttotalDays<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 返回这月最大天数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">Date</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getMaxDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> month <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">29</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> DAYS_BEFORE_MONTH<span class=\"token punctuation\">[</span>month<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> DAYS_BEFORE_MONTH<span class=\"token punctuation\">[</span>month <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 输出 Date 的年 - 月 - 日</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Date</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span> <span class=\"token comment\">//istream 通用输入流</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span> month<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">char</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"类似输入格式为:2019-01-01\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tin <span class=\"token operator\">>></span> year <span class=\"token operator\">>></span> c1 <span class=\"token operator\">>></span> month <span class=\"token operator\">>></span> c2 <span class=\"token operator\">>></span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 对输入进行判断，若没有按照格式，返回错误</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">!=</span> <span class=\"token char\">'-'</span> <span class=\"token operator\">||</span> c2 <span class=\"token operator\">!=</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token comment\">// 可用于运行时检测的异常类</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">runtime_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad time format\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token comment\">// 将所得的正确日期返回给 date，指针</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tdate <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">,</span> month<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 返回用户的输入 此处</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">// 虫重载输出流，使 date 按照标准格式输出</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span> <span class=\"token comment\">//ostream 通用输出流</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tout <span class=\"token operator\">&lt;&lt;</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">&lt;&lt;</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">&lt;&lt;</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"accounth\"><a class=\"anchor\" href=\"#accounth\">#</a>  <code>account.h</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 银行账户类头文件 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_ACCOUNT_H_</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_ACCOUNT_H_</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"date.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"accumulator.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span>  <span class=\"token comment\">// 字符串头文件</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;istream></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span>  <span class=\"token comment\">// 引出关联容器</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdexcept></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 前置声明</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 账目记录类</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountRecord</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 日期</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tDate date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 账户</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">const</span> Account<span class=\"token operator\">*</span> account<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 账户金额</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 余额</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 描述</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string desc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">AccountRecord</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Account<span class=\"token operator\">*</span> account<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 输出当前记录</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 创建关联容器，建立日期和账户记录类的已排序列表</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">typedef</span> std<span class=\"token double-colon punctuation\">::</span>multimap<span class=\"token operator\">&lt;</span>Date<span class=\"token punctuation\">,</span> AccountRecord<span class=\"token operator\">></span>RecordMap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 账户父类</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string id<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 账户 Id 字符串</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 账户余额</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> total<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 所有账户的总金额静态变量</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">static</span> RecordMap recordMap<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 账目记录</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 提供派生类调用的构造函数：日期，id 为账户</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">Account</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">// 记录一笔账，date 为日期，amount 为金额，desc 为说明</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">record</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 报告错误信息</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">// 获取账户 id</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 获取账户余额</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> balance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 获取账户总金额</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token comment\">// 纯虚函数，没有具体的操作内容，要求各派生类根据需要定义自己的版本</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token comment\">// 存入现金，date 为日期，amount 为金额，desc 为款项说明</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\">// 纯虚函数，没有具体的操作内容，要求各派生类根据需要定义自己的版本</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token comment\">// 取出现金，date 为日期，amount 为金额，desc 为款项说明</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token comment\">// 结算（计算利息、年费等），每月结算一次，date 为结算日期</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">settle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token comment\">// 显示账户信息</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token comment\">// 查询指定时间内的账目记录，开始 Date，结束 Date</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">// 内联重载：将 Account 输出调用 Account.show ()</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">inline</span> std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Account<span class=\"token operator\">&amp;</span> account<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\taccount<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SavingsAccount</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span>  <span class=\"token comment\">// 存储账户类</span></span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\tAccumulator acc<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 辅助计算利息的累加器</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token keyword\">double</span> rate<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 存款的年利率</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token comment\">// 储蓄账户，日期 Date, 账户 Account 的 id，存款利率</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token function\">SavingsAccount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token comment\">// 获取储蓄账户的存款利率</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">getRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> rate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token comment\">// 存钱：参数：日期 Date, 金额，描述信息</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 存入现金</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token comment\">// 取款：参数：日期 Date, 金额，描述信息</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 取出现金</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token comment\">// 结算利息：参数：Date 日期</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">settle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CreditAccount</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span>  <span class=\"token comment\">// 信用账户类</span></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\tAccumulator acc<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 辅助计算利息的累加器</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token comment\">// 信用额度</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">double</span> credit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token keyword\">double</span> rate<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 欠款的日利率</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t<span class=\"token keyword\">double</span> fee<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 信用卡年费</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token comment\">// 获取欠款额</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">getDebt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token comment\">// 获取账户 Account 的余额，</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> balance <span class=\"token operator\">=</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t<span class=\"token comment\">// 如果余额大于 0 不欠钱，返回 0，否则返回 balance</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>balance <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> balance <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token comment\">// 信用卡类：参数：日期 Date, 账户 Account：id，信用额度，欠款日利率，信用卡年费</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t<span class=\"token function\">CreditAccount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> credit<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> rate<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> fee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token comment\">// 获取信用卡额度</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">getCredit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> credit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token comment\">// 获取信用卡日利率</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">getRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> rate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token comment\">// 获取信用卡年费</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">getFee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> fee<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token comment\">// 返回信用卡还可用额度，若账户余额为负，用信用卡补上</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">getAvailableCredit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> credit <span class=\"token operator\">+</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> credit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token comment\">// 存入现金：参数：日期 Date, 账户 Account 金额，存款描述</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token comment\">// 取出现金，参数：取款日期 Date, 取款金额，取款描述</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t<span class=\"token comment\">// 结算利息和年费，参数 Date 日期</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">settle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 结算利息和年费，每月 1 号调用一次该函数</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t<span class=\"token comment\">// 输出账户 id，账户金额，账户余额</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t<span class=\"token comment\">// 虚函数输出</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre><span class=\"token comment\">// 账户异常处理类</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountException</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">runtime_error</span></span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t<span class=\"token comment\">// 账户</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t<span class=\"token keyword\">const</span> Account<span class=\"token operator\">*</span> account<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token comment\">// 传递运行中的异常信息，以及账户 Account 类</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token function\">AccountException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Account<span class=\"token operator\">*</span> account<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t\t<span class=\"token operator\">:</span><span class=\"token function\">runtime_error</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">account</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t<span class=\"token comment\">// 获得异常账户类</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t<span class=\"token keyword\">const</span> Account<span class=\"token operator\">*</span> <span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> account<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//_ACCOUNT_H_</span></span></pre></td></tr></table></figure><h3 id=\"accountcpp\"><a class=\"anchor\" href=\"#accountcpp\">#</a>  <code>account.cpp</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project :Account 账户类实现文件 cpp</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"account.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;utility></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token double-colon punctuation\">::</span>rel_ops<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//AccountRecord 类的实现：参数日期 Date, 账户 Account 类，金额，余额，描述信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">AccountRecord</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AccountRecord</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Account<span class=\"token operator\">*</span> account<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token operator\">:</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">account</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">amount</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">balance</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">desc</span><span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 展现出账户记录类的账户时间，Id，存款金额，余额（算上信用卡)，描述信息</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">AccountRecord</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//date.show();</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span>date<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t#\"</span> <span class=\"token operator\">&lt;&lt;</span> account<span class=\"token operator\">-></span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> amount <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> balance <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> desc <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 存款总金额全局变量 (所有账户）</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">double</span> Account<span class=\"token double-colon punctuation\">::</span>total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// Account 类中的账户记录</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>RecordMap Account<span class=\"token double-colon punctuation\">::</span>recordMap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//Account 账户类构造函数</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token class-name\">Account</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Account</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token operator\">:</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">balance</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">//date.show();</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> date<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t#\"</span> <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" created\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 记账：参数：Date 时间，amount 金额，记账描述</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Account</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">record</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tamount <span class=\"token operator\">=</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 保留小数点后两位，</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tbalance <span class=\"token operator\">+=</span> amount<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 余额增加</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\ttotal <span class=\"token operator\">+=</span> amount<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 账户总额增加</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">//date.show ();  // 输出时间</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 将添加的数据存入账目记录类</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tAccountRecord <span class=\"token function\">record</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> balance<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">// 将数据插入到关联容器内部，，date 为主键</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\trecordMap<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\trecord<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; \"\\t#\" &lt;&lt; id &lt;&lt; \"\\t\" &lt;&lt; amount &lt;&lt; \"\\t\" &lt;&lt; balance &lt;&lt; \"\\t\" &lt;&lt; desc &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">// 显示账户信息</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Account</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"#\"</span> <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\tBalance:\"</span> <span class=\"token operator\">&lt;&lt;</span> balance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">//SavingsAccount 类的实现，参数：Date 时间，Account 的 ID，利率</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token class-name\">SavingsAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">SavingsAccount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> rate<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 时间，账户，利率</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token operator\">:</span><span class=\"token function\">Account</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rate</span><span class=\"token punctuation\">(</span>rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">acc</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">// 存钱：参数：时间，金额，描述信息</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SavingsAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>desc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token function\">record</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span>desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录一笔账</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token comment\">// 调佣 accumulator 函数，更新值，变更当前的时间，还有值</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\tacc<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">// 取钱</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SavingsAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">></span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error: not enough money\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t<span class=\"token function\">record</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>amount<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\tacc<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\">// 计算利息：传递时间 Date</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SavingsAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">settle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token keyword\">double</span> interest <span class=\"token operator\">=</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> rate <span class=\"token operator\">/</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算年息</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interest <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token comment\">// 将利息记账</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token function\">record</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> interest<span class=\"token punctuation\">,</span><span class=\"token string\">\"interest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token comment\">// 初始化，日期，数值，累加器清零</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\tacc<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token comment\">//CreditAccount 类默认构造函数的实现</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token class-name\">CreditAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreditAccount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> credit<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> rate<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> fee<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token operator\">:</span><span class=\"token function\">Account</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">credit</span><span class=\"token punctuation\">(</span>credit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">rate</span><span class=\"token punctuation\">(</span>rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">fee</span><span class=\"token punctuation\">(</span>fee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">acc</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token comment\">// 存入信用卡</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CreditAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token function\">record</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\tacc<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token function\">getDebt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token comment\">// 取出信用卡金额</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CreditAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">-</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> credit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nt enough credit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t<span class=\"token comment\">// 使用负数 ，减</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t<span class=\"token function\">record</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>amount<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\tacc<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token function\">getDebt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token comment\">// 结算信用卡的利息</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CreditAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">settle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token keyword\">double</span> interest <span class=\"token operator\">=</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> rate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interest <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t<span class=\"token function\">record</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> interest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"interest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t<span class=\"token function\">record</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>fee<span class=\"token punctuation\">,</span> <span class=\"token string\">\"annual fee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\tacc<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token function\">getDebt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token comment\">// 输出，包括信用卡额度</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CreditAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token class-name\">Account</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\tAvailable credit:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getAvailableCredit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token comment\">// 异常</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Account</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t<span class=\"token keyword\">throw</span> <span class=\"token function\">AccountException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre><span class=\"token comment\">// 账户记录查询实现，参数：开始 Date, 结束 Date</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Account</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t<span class=\"token comment\">// 从开始到结尾遍历输出</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t\t<span class=\"token comment\">//lower_bound 返回指向首个不小于给定键的元素的迭代器</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t\tRecordMap<span class=\"token double-colon punctuation\">::</span>iterator iter1 <span class=\"token operator\">=</span> recordMap<span class=\"token punctuation\">.</span><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t<span class=\"token comment\">//upper_bound 返回指向首个大于给定键的元素的迭代器</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\tRecordMap<span class=\"token double-colon punctuation\">::</span>iterator iter2 <span class=\"token operator\">=</span> recordMap<span class=\"token punctuation\">.</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>RecordMap<span class=\"token double-colon punctuation\">::</span>iterator iter <span class=\"token operator\">=</span> iter1<span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> iter2<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>iter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t\t\titer<span class=\"token operator\">-></span>second<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"accumulatorh\"><a class=\"anchor\" href=\"#accumulatorh\">#</a>  <code>accumulator.h</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 将 accumulation.h 按日将数字累加的 Accumulatior 类的头文件 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_ACCUMULATOR_H_</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_ACCUMULATOR_H_</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"date.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Accumulator</span> <span class=\"token comment\">// 将某个数值按日累加</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tDate lastDate<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 上次变更数值的日期</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">double</span> value<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 数值的当前值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">double</span> sum<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 数值按日累加之和</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 构造函数，date 为 开始累加的日期，value 为初始值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">Accumulator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token operator\">:</span><span class=\"token function\">lastDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 获取日期 date 的累加结果</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> sum <span class=\"token operator\">+</span> value <span class=\"token operator\">*</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>lastDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 在 date 将数值表更为 value</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tsum <span class=\"token operator\">=</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tlastDate <span class=\"token operator\">=</span> date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 初始化，将日期变为 date，数值变为 value，累加器清零</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tlastDate <span class=\"token operator\">=</span> date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tsum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !_ACCUMULATOR_H_</span></span></pre></td></tr></table></figure><h3 id=\"maincpp\"><a class=\"anchor\" href=\"#maincpp\">#</a>  <code>main.cpp</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Project: 存款类主函数文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>environment：Visual studio 2022</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"account.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Array.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 释放空间结构体，用于析构函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">deleter</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 建立类，用来存储账户列表和处理命令</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tDate date<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 当前日期</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span>Account<span class=\"token operator\">*</span><span class=\"token operator\">></span>accounts<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 账户列表</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">bool</span> end<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 用户是够输入了退出命令</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 存储用户数据，参数：Date 时间</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 返回当前的时间</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> <span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">//bool 值，返回是否结束</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 执行一条命令，返回该命令是否改变了当前状态 (即是否需要保存该命令)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">runCommand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> cmdLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// 释放从账户开始到结束的所有内存</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token class-name\">Controller</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token comment\">//for_each 遍历：开始，结束，执行</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// 按照顺序应用给定的函数对象 f 到接引到范围 [first,last] 中每个迭代器的结果</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>accounts<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> accounts<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">deleter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">Controller</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">runCommand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> cmdLine<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t* 指令内容</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t* a s S3755217 0.015</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t* a s 02342342 0.015</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t* a c C5392394 10000 0.0005 50</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t* c 5</pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token comment\">// 读取是有顺序要求的，根据指针向后，异常赋值</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\">// 第一个赋值给 cmd 判断进入那个 case 开面</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token comment\">// 后面根据不同 case 依次赋值</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\tistringstream <span class=\"token function\">str</span><span class=\"token punctuation\">(</span>cmdLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token keyword\">char</span> cmd<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> credit<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">,</span> fee<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\tstring id<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tAccount<span class=\"token operator\">*</span> account<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\tDate date1<span class=\"token punctuation\">,</span> date2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tstr <span class=\"token operator\">>></span> cmd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token char\">'a'</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 增加账户</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\tstr <span class=\"token operator\">>></span> type <span class=\"token operator\">>></span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token char\">'s'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\tstr <span class=\"token operator\">>></span> rate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\taccount <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">SavingsAccount</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\tstr <span class=\"token operator\">>></span> credit <span class=\"token operator\">>></span> rate <span class=\"token operator\">>></span> fee<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\taccount <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">CreditAccount</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> credit<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">,</span> fee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\taccounts<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token char\">'d'</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 存入现金</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\tstr <span class=\"token operator\">>></span> index <span class=\"token operator\">>></span> amount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\taccounts<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span><span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token char\">'w'</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 取出现金</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\tstr <span class=\"token operator\">>></span> index <span class=\"token operator\">>></span> amount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\taccounts<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token char\">'s'</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 查询各账户信息</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> accounts<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>accounts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token char\">'c'</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 改变日期</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\tstr <span class=\"token operator\">>></span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>day <span class=\"token operator\">&lt;</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"You cannot specify a previous day\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>day <span class=\"token operator\">></span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Invalid day\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\tdate <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token char\">'n'</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 进入下个月</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\tdate <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\tdate <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Account<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter <span class=\"token operator\">=</span> accounts<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> accounts<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>iter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">settle</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token char\">'q'</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 查询一段时间内的账目</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\tstr <span class=\"token operator\">>></span> date1 <span class=\"token operator\">>></span> date2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t<span class=\"token class-name\">Account</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">,</span> date2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token char\">'e'</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 退出</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\tend <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Inavlid command: \"</span> <span class=\"token operator\">&lt;&lt;</span> cmdLine <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\tDate <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 起始日期</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"输出化本地化数据库数据\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token comment\">//\t初始化命令</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\tController <span class=\"token function\">controller</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\tstring cmdLine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token comment\">// 打开文件名称</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> FILE_NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"commands.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\tifstream <span class=\"token function\">fileIn</span><span class=\"token punctuation\">(</span>FILE_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 以读模式打开文件</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileIn<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 直到执行到没有指令</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 如果正常打开，就执行文件中的每一条命令</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>fileIn<span class=\"token punctuation\">,</span> cmdLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\t\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t\t\t\tcontroller<span class=\"token punctuation\">.</span><span class=\"token function\">runCommand</span><span class=\"token punctuation\">(</span>cmdLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Bad line in\"</span> <span class=\"token operator\">&lt;&lt;</span> FILE_NAME <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> cmdLine <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error:\"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t\tfileIn<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 关闭文件</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token comment\">// 初始化指令结束</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t<span class=\"token comment\">// 追加模式写入</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\tofstream <span class=\"token function\">fileOut</span><span class=\"token punctuation\">(</span>FILE_NAME<span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 以追加模式</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t<span class=\"token comment\">// 选择框</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\\n\\t\\t***由于银行信息系统使用命令行存储数据形式，请严格按照输入格式进行输入:***\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\\t\\t\\t******命令选项*******\"</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\\t\\t\\t\\t\\t(a)add account: a s S3755217 0.015      //a代表添加用户，s代表储蓄卡，c代表信用卡，S3755217为账户id，0.015为利率 \"</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\\t\\t\\t\\t\\t(d)deposit    ：d 0 5000 salary          //d代表存钱，0代表第0个账户，5000代表金额，salary为存储说明\"</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\\t\\t\\t\\t\\t(w)withdraw ： w 2 2000 buy a cell     //w为取钱，2代表第二个账户，2000金额，buy a cell说明\"</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\\t\\t\\t\\t\\t(s)show      ： s                        //查看账户\"</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\\t\\t\\t\\t\\t(c)change day ：c 15                   //c为改变日期，15为日 \"</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\\t\\t\\t\\t\\t(n)next month ：n                       //进入下一个月\"</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\\t\\t\\t\\t\\t(q)query      ：q 2022-11-01 2022-12-01   //遍历从11月1号到12月1号的账目数据\"</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\\t\\t\\t\\t\\t(e)exit        ：e                       //退出\"</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">isEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 从标准输入读入命令并执行，直到退出</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\tTotal: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token class-name\">Account</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\\t\\t\\t\\ncommand> \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"命令输入规范：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>\t\tstring cmdLine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\t\t<span class=\"token comment\">// 读入命令，和文件存储格式相同</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\t\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> cmdLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\t\t\t<span class=\"token comment\">// 执行命令</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">runCommand</span><span class=\"token punctuation\">(</span>cmdLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 并记录文件内容</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\t\t\t\tfileOut <span class=\"token operator\">&lt;&lt;</span> cmdLine <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将命令写入文件</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>AccountException<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Erroe(#\"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"):\"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error: \"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "C和C++项目",
                "C++",
                "计算机科学",
                "C++项目"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/web/front/Myweb/",
            "url": "https://www.blog.foryouos.cn/computer-science/web/front/Myweb/",
            "title": "我的网站",
            "date_published": "2023-03-09T10:20:43.000Z",
            "content_html": "<h3 id=\"个人网站\"><a class=\"anchor\" href=\"#个人网站\">#</a> 个人网站</h3>\n<h4 id=\"网站框架\"><a class=\"anchor\" href=\"#网站框架\">#</a> 网站框架</h4>\n<blockquote>\n<p>使用 Github 开源框架 <code>Hexo</code> ，拥有蛮多的优秀好看的 <code>主题</code> ，使用起来也十分的方便，主题选好就定下来，因为很多主题涉及的相关配置不同，仍需花费一些时间。</p>\n</blockquote>\n<ul>\n<li><a href=\"https://hexo.io/zh-cn/\"> <code>hexo官网</code> </a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/\"> <code>hexo开发文档</code> </a></li>\n<li><a href=\"https://hexo.io/themes/\"> <code>hexo主题</code> </a></li>\n</ul>\n<h4 id=\"网站服务器\"><a class=\"anchor\" href=\"#网站服务器\">#</a> 网站服务器</h4>\n<blockquote>\n<p>初步方案使用 <code>Github仓库Page功能存储</code> 页面内容，但由于国内网速过慢，最终被弃用，也不算是完全弃用，使用了 <code>Cloudflare</code>  的 Page，后者拥有 <code>全球CDN</code> ，在速度方便高于 <code>Github</code> 。</p>\n</blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS1jbi5jb20v\">Cloudflare</span></li>\n</ul>\n<blockquote>\n<p>通过 <code>Cloudflare</code>  的 Page 功能可以直接绑定 <code>Github仓库</code> ，实现一建上传， <code>自动同步</code> 部署 Github 功能，确实挺方便的。 <code>晚上不要部署，会很慢，直到失败</code></p>\n</blockquote>\n<h4 id=\"资源后台备份\"><a class=\"anchor\" href=\"#资源后台备份\">#</a> 资源后台备份</h4>\n<blockquote>\n<p>使用 <code>Github的私有仓库</code> ，同步所有 <code>Blog笔记</code></p>\n</blockquote>\n<h4 id=\"域名解析\"><a class=\"anchor\" href=\"#域名解析\">#</a> 域名解析</h4>\n<blockquote>\n<p>根据自身购买的域名，使用 Cloudflare Page 推荐的解析方式，同步解析就可以，能够实现 HTTPS</p>\n</blockquote>\n<h4 id=\"图片存储\"><a class=\"anchor\" href=\"#图片存储\">#</a> 图片存储</h4>\n<blockquote>\n<p>单纯使用 Github+CloudFlare 方案，页面速度也可以，但是大量的图片使得进入页面的速度，以及即使加载到页面，图片未必能加载出来，速度差强人意<br />\n使用图床将网站所有需要的背景图，logo 图片存入图床当中，只要图床的速度够快，那速度就完全没有问题</p>\n</blockquote>\n<h4 id=\"图床推荐\"><a class=\"anchor\" href=\"#图床推荐\">#</a> 图床推荐</h4>\n<blockquote>\n<p>根据国内访问 <code>速度排序</code> 由快倒慢，当然网上还有很多</p>\n</blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWd0Zy5jb20v\">img.tg</span> 其国内访问速度，基本在 1 秒以内，国内 <code>CDN</code>  加速</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWdzZS5jb20v\">路过图床</span> 全球 CDN，国内访问速度一般般</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zbW1zLmFwcC8=\">SM.SM</span> 国际可以，国内一般</li>\n</ul>\n<h4 id=\"首页轮换图\"><a class=\"anchor\" href=\"#首页轮换图\">#</a> 首页轮换图</h4>\n<ul>\n<li>网上寻找壁纸 <code>API</code> , 调用 <code>API</code> ，每次返回不同的 <code>img地址</code> ，自己做，时间问题，还没有实现</li>\n</ul>\n<h4 id=\"天气功能\"><a class=\"anchor\" href=\"#天气功能\">#</a> 天气功能</h4>\n<blockquote>\n<p>使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWRnZXQucXdlYXRoZXIuY29tLw==\">和风天气</span>插件嵌入 web 端</p>\n</blockquote>\n<p><img data-src=\"https://i.imgtg.com/2023/03/09/YfrjU.png\" alt=\"image-20230309180534309\" /></p>\n<h4 id=\"网站\"><a class=\"anchor\" href=\"#网站\">#</a> 网站</h4>\n<ul>\n<li><code>foryouos</code> <a href=\"https://www.blog.foryouos.cn\"> 博客</a></li>\n</ul>\n<blockquote>\n<p>个人博客</p>\n</blockquote>\n<p><img data-src=\"https://i.imgtg.com/2023/03/09/YfZyv.png\" alt=\"image-20230309180243668\" /></p>\n<ul>\n<li><code>foryouos</code> <a href=\"www.foryouos.cn\"> 主页</a></li>\n</ul>\n<blockquote>\n<p>整合网站信息</p>\n</blockquote>\n<p><img data-src=\"https://i.imgtg.com/2023/03/09/Yfvsq.png\" alt=\"image-20230309180201706\" /></p>\n<ul>\n<li><code>foryouos</code> <a href=\"www.so.foryouos.cn\"> 导航栏</a></li>\n</ul>\n<blockquote>\n<p>作为和室友们的自定义导航栏 (其实是被迫的，还好确实有好功能)</p>\n</blockquote>\n<p><img data-src=\"https://i.imgtg.com/2023/03/09/YfKUY.png\" alt=\"image-20230309175951339\" /></p>\n<ul>\n<li>详见具体网站<a href=\"https://www.github.com/foryouos\"> <code>Github</code> </a></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "web",
                "前端",
                "前端",
                "web"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/cpp%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E5%BE%81%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/cpp%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E5%BE%81%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/",
            "title": "C++部分新特征",
            "date_published": "2023-03-05T06:39:45.666Z",
            "content_html": "<h3 id=\"c11新特征与mfc\"><a class=\"anchor\" href=\"#c11新特征与mfc\">#</a> C++11 新特征与 MFC</h3>\n<h4 id=\"auto\"><a class=\"anchor\" href=\"#auto\">#</a>  <code>auto</code></h4>\n<ul>\n<li>可以从初始化表达式中判断出变量的类型</li>\n<li>属于编译器特性，不影响最终机器码质量，不影响运行效率</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//int </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//const char*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Person *</span></pre></td></tr></table></figure><h4 id=\"decltype\"><a class=\"anchor\" href=\"#decltype\">#</a>  <code>decltype</code></h4>\n<blockquote>\n<p>可以获取 <code>变量的类型</code></p>\n</blockquote>\n<h4 id=\"nullptr\"><a class=\"anchor\" href=\"#nullptr\">#</a>  <code>nullptr</code></h4>\n<ul>\n<li>可以解决 <code>NULL</code>  的二义性问题</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func(int) - \"</span> <span class=\"token operator\">&lt;&lt;</span> v <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func(int *) - \"</span> <span class=\"token operator\">&lt;&lt;</span> v <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">auto</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NULL 为宏定义 0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空指针使用 nullptr</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"快速遍历\"><a class=\"anchor\" href=\"#快速遍历\">#</a> 快速遍历</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 快速遍历</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> item <span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> item <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"更加简介的初始化方式\"><a class=\"anchor\" href=\"#更加简介的初始化方式\">#</a> 更加简介的初始化方式</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"lambada表达式\"><a class=\"anchor\" href=\"#lambada表达式\">#</a>  <code>lambada</code>  表达式</h4>\n<blockquote>\n<p>类似于 <code>JavaScript的闭包</code> ， <code>IOS</code>  中的 <code>Block</code>  本质上就是函数</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 完整结果</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>params list<span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> exception <span class=\"token operator\">-></span><span class=\"token keyword\">return</span> type<span class=\"token punctuation\">&#123;</span> function body<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>capture list</code> : 捕获外部变量列表</li>\n<li><code>params list</code> : 形参列表，不能使用默认参数，不能省略参数名</li>\n<li><code>mutable</code> : 用来说用是否可以修改捕获的变量</li>\n<li><code>exception</code> : 异常设定</li>\n<li><code>return type</code> : 返回值类型</li>\n<li><code>function body</code> : 函数体<br />\n<strong>有时可以省略部分结果</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>params list<span class=\"token punctuation\">)</span>  <span class=\"token operator\">-></span><span class=\"token keyword\">return</span> type<span class=\"token punctuation\">&#123;</span> function body<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>params list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> function body<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> function body<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 最简单的调用此表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"funvc()----\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"funvc()----\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用 lambda 表达式</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 计算两个整数和</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">auto</span> q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">q</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">*</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"变量捕获\"><a class=\"anchor\" href=\"#变量捕获\">#</a> 变量捕获</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">//int b = 10;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//auto func = [a, b]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//\tcout &lt;&lt; a &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//\tcout &lt;&lt; b &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//&#125;;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//a = 20;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//func (); // 值捕获，并没有获取最新的 a 值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//auto func = [&amp;a] // 使用地址捕获，可以保证获取最新的 a 值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">//\tcout &lt;&lt; a &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">//&#125;;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">//a = 70; </span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">//func (); // 地址捕获获取最新值</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 值捕获不能加加</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">//auto func = [a]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">//\ta++; // 值捕获不能 ++</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">//&#125;;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">//func();</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 地址捕获可以</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">//auto func = [&amp;a]</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">//\ta++;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">//&#125;;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">//func();</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; a &lt;&lt; endl; // 值 a+1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">//mutable </span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">auto</span> func <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> <span class=\"token comment\">// 内部 a 可以相加</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tb<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"lambda = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"智能指针smart-pointer\"><a class=\"anchor\" href=\"#智能指针smart-pointer\">#</a> 智能指针 ( <code>Smart Pointer</code> )</h4>\n<h5 id=\"传统指针的问题\"><a class=\"anchor\" href=\"#传统指针的问题\">#</a> 传统指针的问题</h5>\n<ul>\n<li>需要手动管理内存</li>\n<li>容易发生内存泄露 (忘记释放，出现异常等)</li>\n<li>释放之后残生野指针</li>\n<li>智能指针就是为了解决传统指针存在的问题</li>\n</ul>\n<h5 id=\"智能指针\"><a class=\"anchor\" href=\"#智能指针\">#</a> 智能指针</h5>\n<ul>\n<li><code>auto_ptr</code> : 属于 C<ins>98 标准，在 C</ins>11 中已经 <code>不推荐</code> 使用</li>\n<li><code>shared_ptr</code> :C++11 标准</li>\n<li><code>unique_ptr</code> :C++11 标准</li>\n</ul>\n<h5 id=\"使用auto_ptr自适应指针\"><a class=\"anchor\" href=\"#使用auto_ptr自适应指针\">#</a> 使用 <code>auto_ptr</code>  自适应指针</h5>\n<ul>\n<li><code>不</code> 能用于数组</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_age</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person(int)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"run() - \"</span> <span class=\"token operator\">&lt;&lt;</span> m_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 创建简单的智能指针</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SmartPointer</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tT <span class=\"token operator\">*</span>m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">SmartPointer</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">m_obj</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">SmartPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_obj <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span> m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tT<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">/*Person *p = new Person(20);</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tp->run();*/</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 可以理解为：智能指针 p 指向了堆空间的 Person 对象</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tauto_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tp<span class=\"token operator\">-></span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">/*Person p(20);</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tp.run();*/</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"share_ptr\"><a class=\"anchor\" href=\"#share_ptr\">#</a>  <code>share_ptr</code></h5>\n<blockquote>\n<p>设计理念：多个 <code>share_ptr</code>  可以指向同一个对象，当 <code>最后</code> 一个 <code>shared_ptr</code>  在作用域范围内结束时，对象才会被自动释放</p>\n</blockquote>\n<ul>\n<li>一个 <code>shared_ptr</code>  会对一个对象产生强引用 ( <code>strong reference</code> )</li>\n<li>每个对象都有个与之对应的强引用计数，记录着当前对象被多少个 <code>share_ptr</code>  强引用着</li>\n<li>可以通过 <code>shared_ptr</code>  的 <code>use_count</code>  函数获得强引用计数</li>\n<li>当有一个新的 <code>shared_ptr</code>  指向对象时，对象的强引用计数就会 + 1</li>\n<li>当有一个 <code>shared_ptr</code>  销毁时 (比如作用域结束) 对象的强引用就会 - 1</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_age</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person(int)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"run() - \"</span> <span class=\"token operator\">&lt;&lt;</span> m_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 创建简单的智能指针</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SmartPointer</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tT <span class=\"token operator\">*</span>m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">SmartPointer</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">m_obj</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">SmartPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_obj <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span> m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tT<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">// 可以</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token comment\">//shared_ptr&lt;Person> p(new Person(20));</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token comment\">// 若为数组</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">//shared_ptr&lt;Person[]> p(new Person[5]);</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">// 当多个智能指针指向一个对象</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tshared_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> p4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当最后一个对象销毁后对象才会销毁</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\tshared_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回使用强引用的数量</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\tshared_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> p2 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> p2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\tshared_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> p3 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> p3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\tp4 <span class=\"token operator\">=</span> p3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> p4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> p4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Person(int)</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>2</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>3</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>4</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>2</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>~Person()</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>3</pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"循环引用\"><a class=\"anchor\" href=\"#循环引用\">#</a> 循环引用</h5>\n<ul>\n<li><code>weak_ptr</code>  可以解决 <code>share_ptr</code>  循环引用导致强引用</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tweak_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> m_person<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 弱引用解决循环引用问题</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Car()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~ Car()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>Car<span class=\"token operator\">></span> m_car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token operator\">~</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~ Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>Car<span class=\"token operator\">></span> <span class=\"token function\">car</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 两个强引用循环引用，导致对象无法销毁</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tperson<span class=\"token operator\">-></span>m_car <span class=\"token operator\">=</span> car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcar<span class=\"token operator\">-></span>m_person <span class=\"token operator\">=</span> person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>Person()</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>Car()</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>~ Person()</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>~ Car()</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"unique_ptr\"><a class=\"anchor\" href=\"#unique_ptr\">#</a>  <code>unique_ptr</code></h4>\n<blockquote>\n<p><code>unique_ptr</code>  也会对一个对象产生强引用，它可以确保同一时间只有一个指针指向对象</p>\n</blockquote>\n<ul>\n<li>当 <code>unique_ptr</code>  销毁时 (作用域结束时)，其指向的对象也就自动销毁了</li>\n<li>可以使用 <code>std::move</code>  函数转移 <code>unique_ptr</code>  的所有权</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//ptr1 强引用着 Person 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 转移之后，ptr2 强引用着 Person 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "汇编与STl新特征",
                "C++",
                "计算机科学"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E7%90%86%E8%A7%A3cpp/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E7%90%86%E8%A7%A3cpp/",
            "title": "汇编基础理解C++",
            "date_published": "2023-03-04T13:51:24.536Z",
            "content_html": "<h4 id=\"汇编的用途\"><a class=\"anchor\" href=\"#汇编的用途\">#</a> 汇编的用途</h4>\n<ul>\n<li>掌握编程语言，代码的本质</li>\n<li>破解</li>\n<li>...</li>\n</ul>\n<h4 id=\"汇编\"><a class=\"anchor\" href=\"#汇编\">#</a> 汇编</h4>\n<blockquote>\n<p>汇编语言与机器语言 <code>一一对应</code> ，每一条机器语言指令都有与之 <code>对应</code> 的汇编指令<br />\n高级语言可以通过编译得到汇编语言 / 机器语言，但 <code>汇编语言/机器语言</code> 几乎 <code>不</code> 可能还原成高级语言<br />\n Visual studio 在调试下右键 <code>转汇编</code></p>\n</blockquote>\n<figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">9</span>: \tint arrray<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> &#123; <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> &#125;<span class=\"token comment\">; //C++ 语言</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>汇编<span class=\"token operator\">-</span>   地址  机器指令 汇编代码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>00007FF7BA87191C C7 <span class=\"token number\">45</span> <span class=\"token number\">08</span> <span class=\"token number\">01</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>arrray<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>00007FF7BA871923 C7 <span class=\"token number\">45</span> 0C <span class=\"token number\">02</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>0Ch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>00007FF7BA87192A C7 <span class=\"token number\">45</span> <span class=\"token number\">10</span> <span class=\"token number\">03</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>10h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbu3LChB3TaEOicoSlNDYt5l3KibPGojpqMrcYctmJst3VrnXcgSJsvIqoicGFU9xSD1OYCXvico3nUibrw/0?wx_fmt=png\" alt=\"高级语言转换过程\" title=\"高级语言转换过程\" /></p>\n<ul>\n<li>编译型语言 (不依赖虚拟机)</li>\n</ul>\n<blockquote>\n<p><code>C\\C++\\OC\\Swift</code></p>\n</blockquote>\n<ul>\n<li>脚本语言</li>\n</ul>\n<blockquote>\n<p><code>Python\\JS\\PHP</code></p>\n</blockquote>\n<ul>\n<li>编译型语言 (依赖虚拟机)</li>\n</ul>\n<blockquote>\n<p>Java\\Ruby</p>\n</blockquote>\n<h4 id=\"visual-studio-2022常用快捷键\"><a class=\"anchor\" href=\"#visual-studio-2022常用快捷键\">#</a> Visual studio 2022 常用快捷键</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbu3LChB3TaEOicoSlNDYt5l3XkichAkR5mjxBliczsz07tNu0uLdsibK6KM5yhhiaNCK6CXLNMaZlSXMJw/0?wx_fmt=png\" alt=\"常用快捷键\" title=\"常用快捷键\" /></p>\n<h4 id=\"为什么c支持函数重载\"><a class=\"anchor\" href=\"#为什么c支持函数重载\">#</a> 为什么 C++ 支持函数重载</h4>\n<blockquote>\n<p>采用 <code>name mangling</code>  或者 <code>name decoration</code>  技术</p>\n</blockquote>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_0\"> C++ 编译器默认会对 <code>符号名</code>  (比如函数名) 进行改变，修饰</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> 重载时会生成多个不用的函数名，不同编译器 ( <code>MSVC,g++</code> ) 有不同的生成规则</label></li>\n</ul>\n<h4 id=\"默认参数\"><a class=\"anchor\" href=\"#默认参数\">#</a> 默认参数</h4>\n<ul>\n<li>默认参数必须从右边开始</li>\n<li>如果同时有声明，实现，默认参数只能放在函数声明中</li>\n</ul>\n<h4 id=\"指针存储函数名\"><a class=\"anchor\" href=\"#指针存储函数名\">#</a> 指针存储函数名</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 函数指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">p</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test(int) - \"</span><span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> test<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指针存储函数名</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"extern-c\"><a class=\"anchor\" href=\"#extern-c\">#</a> extern &quot;C&quot;</h4>\n<blockquote>\n<p>被 extern &quot;C&quot; 修饰的代码会按照 <code>C</code>  语言的方式去编译，用在 C 和 C++ 混合开发</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用 C 编译函数重载</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span>  <span class=\"token comment\">// 使用大括号 C 编译内部</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">//“func”: 无法重载具有外部 \"C\" 链接的</span></pre></td></tr></table></figure><blockquote>\n<p>如果函数同时有声明和实现，要让函数声明被 <code>extern &quot;C&quot;</code>  修饰，函数实现可以不修饰 (声明和实现都放，或者放声明处)</p>\n</blockquote>\n<h4 id=\"cpp使用c语言开源库\"><a class=\"anchor\" href=\"#cpp使用c语言开源库\">#</a>  <code>cpp</code>  使用 C 语言开源库</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//math.c 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span>  <span class=\"token comment\">// 使用 c 来编译 c 函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>输出</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>30</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>10</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"c文件写入头文件\"><a class=\"anchor\" href=\"#c文件写入头文件\">#</a>  <code>C</code>  文件写入头文件</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//math.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span>  <span class=\"token comment\">// 使用 c 来编译头文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"math.h\"</span> </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>输出</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>30</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>10</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"宏定义\"><a class=\"anchor\" href=\"#宏定义\">#</a> 宏定义</h4>\n<ul>\n<li>C<ins> 默认会定义宏 <code>#define _cplusplus</code> , 将此应用到都文件中判断是否为 C</ins> 环境来决定是否用 C 编译</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_cplusplus</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//_cplusplus</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_cplusplus</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//_cplusplus</span></span></pre></td></tr></table></figure><h4 id=\"pragma-once\"><a class=\"anchor\" href=\"#pragma-once\">#</a>  <code>#pragma once</code></h4>\n<ul>\n<li>我们经常使用 <code>#ifndef,#define,#endif</code>  来防止头文件的内容被重复包含</li>\n<li><code>#pragma once</code>  可以防止整个文件的内容被重复包含</li>\n</ul>\n<h4 id=\"内联函数与宏\"><a class=\"anchor\" href=\"#内联函数与宏\">#</a> 内联函数与宏</h4>\n<ul>\n<li>内联函数和宏，都可以减少函数调用的开销</li>\n<li>对比宏，内联函数多了语法检测和函数特性</li>\n</ul>\n<h4 id=\"c有些表达式可以被赋值\"><a class=\"anchor\" href=\"#c有些表达式可以被赋值\">#</a> C++ 有些表达式可以被赋值</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 赋值给了 a</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 赋值给了 b</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"const\"><a class=\"anchor\" href=\"#const\">#</a>  <code>const</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//const 的含义，const 修饰的是右边的内容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 修饰 * p1 是常量，而 p1 地址可以改</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同 p1,const 可以和类型互换位置</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p3 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//const 修饰右边的内容 p3 是地址常量，不变，而 * p3 可以修改</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p4 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p5 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//p4 和 p5 等价，地址和 * p4,*p5 都是常量不能变</span></pre></td></tr></table></figure><h4 id=\"引用\"><a class=\"anchor\" href=\"#引用\">#</a> 引用</h4>\n<ul>\n<li>引用的本质就是弱化了的指针</li>\n<li>一个引用占用一个指针的大小</li>\n<li>在 C 语言中，使用指针 (Pointer) 可以间接获取，修改某个变量的值</li>\n<li>在 C++ 中，使用引用 (Reference) 可以起到指针类似的功能<br />\n<strong>注意</strong>:</li>\n<li>引用相当于变量的别名 (基本数据类型，枚举，结构体，类，数组等，都可以有引用)</li>\n<li>对引用做计算，就是对引用所指向的变量做计算</li>\n<li>在定义的事后就必须初始化，一旦指向了某个变量，就不可以再改变，&quot;从一而终&quot;</li>\n<li>可以利用引用初始化另一个引用，相当于某个变量的多个别名</li>\n<li>不存在 (引用的引用，指向引用的指针，引用数组)</li>\n<li>引用存在的价值：比指针更安全，函数返回值可以被赋值</li>\n<li>const 必须卸载 &amp; 符号的左边，才能算常引用</li>\n</ul>\n<h5 id=\"const引用的特点\"><a class=\"anchor\" href=\"#const引用的特点\">#</a>  <code>const</code>  引用的特点</h5>\n<ul>\n<li>可以指向临时数据 (常量，表达式，函数返回值等)</li>\n<li>可以指向不同类型的数据</li>\n<li>作为函数参数时 (此规则也适用于 <code>const指针</code> )</li>\n</ul>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_2\"> 可以接受 <code>const</code>  和非 <code>cons</code>  实参 ( <code>非const</code>  引用，只能接受 <code>非const</code>  实参)</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_3\">  可以跟非 const 引用构成重载</label></li>\n</ul>\n<ul>\n<li>当常引用指向了 <code>不同类型</code> 的数据时，会产生 <code>临时变量</code> ，即引用指向的并不是初始化时的那个变量</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span><span class=\"token operator\">&amp;</span> aAge <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tage <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF71556184D C7 <span class=\"token number\">45</span> <span class=\"token number\">04</span> 0A <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>0Ah  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t00007FF715561854 8B <span class=\"token number\">45</span> <span class=\"token number\">04</span>             mov         eax<span class=\"token punctuation\">,</span>dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t00007FF715561857 <span class=\"token number\">89</span> <span class=\"token number\">45</span> <span class=\"token number\">44</span>             mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>44h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t00007FF71556185A <span class=\"token number\">48</span> 8D <span class=\"token number\">45</span> <span class=\"token number\">44</span>          lea         rax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>44h<span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t00007FF71556185E <span class=\"token number\">48</span> <span class=\"token number\">89</span> <span class=\"token number\">45</span> <span class=\"token number\">28</span>          mov         qword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>28h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>rax  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t00007FF715561862 C7 <span class=\"token number\">45</span> <span class=\"token number\">04</span> 1E <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>1Eh</pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"math.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>两者引用：机器码相同，汇编相同</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ref <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tref <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">9</span>: \tint<span class=\"token operator\">&amp;</span> ref <span class=\"token operator\">=</span> age<span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF759091914 <span class=\"token number\">48</span> 8D <span class=\"token number\">45</span> <span class=\"token number\">04</span>          lea         rax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>00007FF759091918 <span class=\"token number\">48</span> <span class=\"token number\">89</span> <span class=\"token number\">45</span> <span class=\"token number\">28</span>          mov         qword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>28h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>rax</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token number\">10</span>: \tref <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>00007FF75909191C <span class=\"token number\">48</span> 8B <span class=\"token number\">45</span> <span class=\"token number\">28</span>          mov         rax<span class=\"token punctuation\">,</span>qword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>28h<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>00007FF759091920 C7 <span class=\"token number\">00</span> 1E <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span>    mov         dword ptr <span class=\"token punctuation\">[</span>rax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>1Eh</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token number\">11</span>: \tint<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>00007FF6CD505214 <span class=\"token number\">48</span> 8D <span class=\"token number\">45</span> <span class=\"token number\">04</span>          lea         rax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>00007FF6CD505218 <span class=\"token number\">48</span> <span class=\"token number\">89</span> <span class=\"token number\">45</span> <span class=\"token number\">28</span>          mov         qword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>28h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>rax  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token number\">12</span>: \t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>00007FF6CD50521C <span class=\"token number\">48</span> 8B <span class=\"token number\">45</span> <span class=\"token number\">28</span>          mov         rax<span class=\"token punctuation\">,</span>qword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>28h<span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>00007FF6CD505220 C7 <span class=\"token number\">00</span> <span class=\"token number\">19</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span>    mov         dword ptr <span class=\"token punctuation\">[</span>rax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>19h</pre></td></tr></table></figure><h5 id=\"常引用数组\"><a class=\"anchor\" href=\"#常引用数组\">#</a> 常引用数组</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数组名 arr 起始就是数组的地址，也是数组首元素的地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 数组名 arr 可以看做是指向数组首元素的指针 (int *)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// int (&amp;ref)[3] = arr;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span>ref <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 常量要用常引用</span></pre></td></tr></table></figure><h4 id=\"汇编语言\"><a class=\"anchor\" href=\"#汇编语言\">#</a> 汇编语言</h4>\n<h5 id=\"汇编语言的种类\"><a class=\"anchor\" href=\"#汇编语言的种类\">#</a> 汇编语言的种类</h5>\n<ul>\n<li><code>8086</code>  汇编 ( <code>16bit</code> )</li>\n<li><code>x86</code>  汇编（ <code>32bit</code> )</li>\n<li><code>x64汇编(64bit)</code></li>\n<li>ARM 回避那 (嵌入式，移动设备)</li>\n<li>...</li>\n<li><code>x64</code>  汇编根据编译器不同，两种书写格式</li>\n</ul>\n<blockquote>\n<p><code>Intel</code> :<br />\nAT&amp;T</p>\n</blockquote>\n<h5 id=\"att汇编-vs-intel汇编\"><a class=\"anchor\" href=\"#att汇编-vs-intel汇编\">#</a> AT&amp;T 汇编 VS Intel 汇编</h5>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbu3LChB3TaEOicoSlNDYt5l3UxPJ64IgaEHgmkXITT6JSUialo3ibdNSMyia83jTyVdSpNp8N9S1N5Kibg/0?wx_fmt=png\" alt=\"image-20230302073341484\" /></p>\n<h4 id=\"寄存器与内存\"><a class=\"anchor\" href=\"#寄存器与内存\">#</a> 寄存器与内存</h4>\n<p>假设内存中有块红色内存空间的值是 3，现在想把它的值加 1，并将结果存储到蓝色内存空间</p>\n<ul>\n<li><code>cpu</code>  首先会将红色内存空间的值放到 <code>EAX</code>  寄存器中 <code>:mov eax</code> , 红色内存空间</li>\n<li>然后让 <code>eax</code>  寄存器与 <code>1</code>  相加:  <code>add eax,1</code></li>\n<li>最后将值赋值给内存空间: <code>mov</code>  蓝色内存空间， <code>eax</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ta <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">10</span>: \tint a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF6E7DA520D C7 <span class=\"token number\">45</span> <span class=\"token number\">04</span> <span class=\"token number\">05</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">11</span>: \ta <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>00007FF6E7DA5214 8B <span class=\"token number\">45</span> <span class=\"token number\">04</span>             mov         eax<span class=\"token punctuation\">,</span>dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>00007FF6E7DA5217 FF C0                inc         eax  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>00007FF6E7DA5219 <span class=\"token number\">89</span> <span class=\"token number\">45</span> <span class=\"token number\">04</span>             mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr></table></figure><h4 id=\"x64寄存器register\"><a class=\"anchor\" href=\"#x64寄存器register\">#</a> x64 寄存器 Register</h4>\n<ul>\n<li><code>RAX(包含EAX)\\REX\\RCX\\RDX</code> ：通用寄存器</li>\n<li><code>32bit:EAX\\EBX\\ECX\\EDX</code> ：通用寄存器</li>\n<li><code>16bit:AX\\BX\\CX\\DX</code> : 通用寄存器</li>\n<li><code>x64</code>  一个寄存器 <code>8</code>  个字节</li>\n<li><code>R</code>  开头的寄存器是 <code>64bit</code>  的，占 <code>8</code>  字节</li>\n<li><code>E</code>  开头的寄存器是 <code>32bit</code>  的，占 <code>4</code>  个字节</li>\n</ul>\n<h4 id=\"c内联汇编\"><a class=\"anchor\" href=\"#c内联汇编\">#</a> C++ 内联汇编</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 双下划，C++ 嵌入汇编执行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"x86汇编重要指令\"><a class=\"anchor\" href=\"#x86汇编重要指令\">#</a>  <code>x86</code>  汇编重要指令</h4>\n<ul>\n<li><code>mov</code>   <code>dest,src</code></li>\n</ul>\n<blockquote>\n<p>将 src 的内容赋值给 dest，类似于 dest = src</p>\n</blockquote>\n<ul>\n<li><code>[地址值]</code></li>\n</ul>\n<blockquote>\n<ul>\n<li>中括号 [] 里面放的都是内存地址</li>\n</ul>\n</blockquote>\n<pre><code>* `word`是2字节，`dword`是4字节(double word),`qword`是八字节(quad word)\n</code></pre>\n<ul>\n<li><code>call</code>  函数地址</li>\n</ul>\n<blockquote>\n<ul>\n<li>\n<p>调用函数，并不是真实地址</p>\n</li>\n<li>\n<p>CPU 大小端模式，大部分都是小端模式<br />\n小端模式：高高低低，高字节放高地址，低字节放低地址<br />\n一个变量的地址值，是它所在字节地址中的最小值</p>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li><code>lea</code>   <code>dest</code> ,  <code>[地址值]</code></li>\n</ul>\n<blockquote>\n<p>将地址赋值给 <code>dest</code> ，类似 <code>dest = 地址值</code></p>\n</blockquote>\n<ul>\n<li><code>ret </code></li>\n</ul>\n<blockquote>\n<p>函数返回</p>\n</blockquote>\n<ul>\n<li><code>xor</code>   <code>op1</code>  ,  <code>op2</code></li>\n</ul>\n<blockquote>\n<p>将 <code>op1</code>  和 <code>op2``异或</code> 的结果赋值给 <code>op1</code> , 类似于 <code>op1</code>  =  <code>op1</code>  ^  <code>op2</code></p>\n</blockquote>\n<ul>\n<li><code>add</code>    <code>op1</code> , <code>op2</code></li>\n</ul>\n<blockquote>\n<p>类似于 <code>op1 = op1 + op2</code></p>\n</blockquote>\n<ul>\n<li><code>sub</code>   <code>op1</code> , <code>op2</code></li>\n</ul>\n<blockquote>\n<p>类似于 <code>op1</code>  =  <code>op1</code>  -  <code>op2</code></p>\n</blockquote>\n<ul>\n<li><code>inc </code> op</li>\n</ul>\n<blockquote>\n<p>自增，类似于 op = op + 1</p>\n</blockquote>\n<ul>\n<li><code>dec</code>  op</li>\n</ul>\n<blockquote>\n<p>自减，类似于 op = op - 1</p>\n</blockquote>\n<ul>\n<li>\n<p><code>jmp</code>  内存地址</p>\n<ul>\n<li>跳转到某个内存地址去执行代码</li>\n<li>j 开头的一般都是跳转，大多是带条件的跳转，一般跟 <code>test</code> ， <code>cmp</code>  等指令配合使用<br />\n参考权威:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW50ZWwuY29tL2NvbnRlbnQvd3d3L3VzL2VuL2RldmVsb3Blci9hcnRpY2xlcy90ZWNobmljYWwvaW50ZWwtc2RtLmh0bWw=\">Intel 白皮书</span><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></li>\n</ul>\n</li>\n<li>\n<p><code>cmp</code>   <code>eax</code>  , b</p>\n</li>\n</ul>\n<blockquote>\n<p><code>cmp</code>  是 ``compare <code>的简称，比较</code>  eax <code>和</code>  b` 的值是否相等</p>\n</blockquote>\n<h4 id=\"跳转指令表格\"><a class=\"anchor\" href=\"#跳转指令表格\">#</a> 跳转指令表格</h4>\n<table>\n<thead>\n<tr>\n<th>JE, JZ</th>\n<th></th>\n<th>结果为零则跳转 (相等时跳转)</th>\n<th></th>\n<th>ZF=1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>equal</td>\n<td>zero</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JNE, JNZ</td>\n<td></td>\n<td>结果不为零则跳转 (不相等时跳转)</td>\n<td></td>\n<td>ZF=0</td>\n</tr>\n<tr>\n<td>not equal</td>\n<td>not  zero</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JS</td>\n<td></td>\n<td>结果为负则跳转</td>\n<td></td>\n<td>SF=1</td>\n</tr>\n<tr>\n<td>sign (有符号 \\ 有负号)</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JNS</td>\n<td></td>\n<td>结果为非负则跳转</td>\n<td></td>\n<td>SF=0</td>\n</tr>\n<tr>\n<td>not sign (无符号 \\ 无负号)</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JP, JPE</td>\n<td></td>\n<td>结果中 1 的个数为偶数则跳转</td>\n<td></td>\n<td>PF=1</td>\n</tr>\n<tr>\n<td>parity even</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JNP, JPO</td>\n<td></td>\n<td>结果中 1 的个数为偶数则跳转</td>\n<td></td>\n<td>PF=0</td>\n</tr>\n<tr>\n<td>parity odd</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JO</td>\n<td></td>\n<td>结果溢出了则跳转</td>\n<td></td>\n<td>OF=1</td>\n</tr>\n<tr>\n<td>overflow</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JNO</td>\n<td></td>\n<td>结果没有溢出则跳转</td>\n<td></td>\n<td>OF=0</td>\n</tr>\n<tr>\n<td>not overflow</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JB, JNAE</td>\n<td></td>\n<td>小于则跳转 (无符号数)</td>\n<td></td>\n<td>CF=1</td>\n</tr>\n<tr>\n<td>below</td>\n<td>not above equal</td>\n<td></td>\n<td>&lt;</td>\n<td></td>\n</tr>\n<tr>\n<td>JNB, JAE</td>\n<td></td>\n<td>大于等于则跳转 (无符号数)</td>\n<td></td>\n<td>CF=0</td>\n</tr>\n<tr>\n<td>not below</td>\n<td>above  equal</td>\n<td></td>\n<td>&gt;=</td>\n<td></td>\n</tr>\n<tr>\n<td>JBE, JNA</td>\n<td></td>\n<td>小于等于则跳转 (无符号数)</td>\n<td></td>\n<td>CF=1 or ZF=1</td>\n</tr>\n<tr>\n<td>below equal</td>\n<td>not above</td>\n<td></td>\n<td>&lt;=</td>\n<td></td>\n</tr>\n<tr>\n<td>JNBE, JA</td>\n<td></td>\n<td>大于则跳转 (无符号数)</td>\n<td></td>\n<td>CF=0 and ZF=0</td>\n</tr>\n<tr>\n<td>not below equal</td>\n<td>above</td>\n<td></td>\n<td>&gt;</td>\n<td></td>\n</tr>\n<tr>\n<td>JL, JNGE</td>\n<td></td>\n<td>小于则跳转 (有符号数)</td>\n<td></td>\n<td>SF≠ OF</td>\n</tr>\n<tr>\n<td>little</td>\n<td>not great equal</td>\n<td></td>\n<td>&lt;</td>\n<td></td>\n</tr>\n<tr>\n<td>JNL, JGE</td>\n<td></td>\n<td>大于等于则跳转 (有符号数)</td>\n<td></td>\n<td>SF=OF</td>\n</tr>\n<tr>\n<td>not little</td>\n<td>great  equal</td>\n<td></td>\n<td>&gt;=</td>\n<td></td>\n</tr>\n<tr>\n<td>JLE, JNG</td>\n<td></td>\n<td>小于等于则跳转 (有符号数)</td>\n<td></td>\n<td>ZF=1 or SF≠ OF</td>\n</tr>\n<tr>\n<td>little equal</td>\n<td>not great</td>\n<td></td>\n<td>&lt;=</td>\n<td></td>\n</tr>\n<tr>\n<td>JNLE, JG</td>\n<td></td>\n<td>大于则跳转 (有符号数)</td>\n<td></td>\n<td>ZF=0 and SF=OF</td>\n</tr>\n<tr>\n<td>not little equal</td>\n<td>great</td>\n<td></td>\n<td>&gt;</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"汇编符号说明\"><a class=\"anchor\" href=\"#汇编符号说明\">#</a> 汇编符号说明</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbu3LChB3TaEOicoSlNDYt5l3UsvIvXAQyQ9eSXkLbt1AEiavYQqklEPavj3jWYzSsl4QDGSammyfyJQ/0?wx_fmt=png%22%E6%B1%87%E7%BC%96%E7%AC%A6%E5%8F%B7%E8%AF%B4%E6%98%8E%22\" alt=\"汇编符号说明\" /></p>\n<h4 id=\"参考的c变量名规范\"><a class=\"anchor\" href=\"#参考的c变量名规范\">#</a> 参考的 C++ 变量名规范</h4>\n<ul>\n<li>全局变量: <code>g_</code></li>\n<li>成员变量： <code>m_</code></li>\n<li>静态变量:  <code>s_</code></li>\n<li>常量:  <code>c_</code></li>\n</ul>\n<h4 id=\"类补充\"><a class=\"anchor\" href=\"#类补充\">#</a> 类补充</h4>\n<ul>\n<li><code>struct</code>  默认 <code>public</code></li>\n<li><code>class</code>  默认 <code>private</code></li>\n</ul>\n<h5 id=\"如何利用指针间接访问所指向量的成员变量\"><a class=\"anchor\" href=\"#如何利用指针间接访问所指向量的成员变量\">#</a> 如何利用指针间接访问所指向量的成员变量</h5>\n<ul>\n<li>从指针中取出对象的地址</li>\n<li>利用对象的地址  <code>+</code>  成员变量的偏移量计算出成员变量的地址</li>\n<li>根据成员变量的地址访问成员变量的存储空间</li>\n<li>类函数默认会被赋值为 <code>ccccccc</code> ，</li>\n<li><code>cc -&gt; int3</code>  : 起到断点的作用</li>\n<li>中断:interrupt</li>\n</ul>\n<h4 id=\"内存空间的布局\"><a class=\"anchor\" href=\"#内存空间的布局\">#</a> 内存空间的布局</h4>\n<blockquote>\n<p>每个应用都有自己独立的内存空间</p>\n</blockquote>\n<ul>\n<li>栈空间</li>\n</ul>\n<blockquote>\n<p>每调用一个函数就会给它分配一段连续的栈空间，等函数调用完毕后会自动回收这段栈空间<br />\n自动分配和回收</p>\n</blockquote>\n<ul>\n<li>堆空间</li>\n</ul>\n<blockquote>\n<p>需要主动去申请和释放，在程序运行过程，为了能够自由控制内存的声明周期，大小，会经常使用堆空间的内存</p>\n</blockquote>\n<ul>\n<li>代码区 (段)</li>\n</ul>\n<blockquote>\n<p>用于存放代码</p>\n</blockquote>\n<ul>\n<li>全局区 (数据段)</li>\n</ul>\n<blockquote>\n<p>用于存放全局变量等</p>\n</blockquote>\n<h4 id=\"对初始内存初始化\"><a class=\"anchor\" href=\"#对初始内存初始化\">#</a> 对初始内存初始化</h4>\n<blockquote>\n<p><code>memset</code>  函数是将较大的数据结构 (比如对象，数组等) 内存清零的比较快的方法</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//*p=0;// 并不能全部清零，仅前四个字节</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从 p 地址开始，连续个字节，都设置为 0</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Person person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person<span class=\"token punctuation\">.</span>m_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>person<span class=\"token punctuation\">.</span>m_age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>person<span class=\"token punctuation\">.</span>m_height <span class=\"token operator\">=</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 赋值 person 为零</span></pre></td></tr></table></figure><h5 id=\"new的初始化\"><a class=\"anchor\" href=\"#new的初始化\">#</a>  <code>new</code>  的初始化</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 未被初始化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 被初始化为 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 被初始化为 5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 数组元素未被初始化</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//3 个数组元素都被初始化为 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p6 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//3 个数组元素都被初始化为 0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p7 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 数组首元素被初始化为 5，其它元素被初始化为零</span></pre></td></tr></table></figure><h4 id=\"malloc不会调用类的构造析构函数\"><a class=\"anchor\" href=\"#malloc不会调用类的构造析构函数\">#</a>  <code>malloc</code>  不会调用类的构造 &amp; 析构函数</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"释放Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tPerson person<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 会调用默认构造函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Person<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 申请空间也会调用默认构造函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">//malloc 并不调用默认构造函数，</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> q <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 也不会调用析构函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Person ()</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Person ()</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>释放 Person ()</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>释放 Person ()</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"成员变量的初始化\"><a class=\"anchor\" href=\"#成员变量的初始化\">#</a> 成员变量的初始化</h4>\n<ul>\n<li><strong>全局区默认初始化为 0</strong></li>\n<li>如果自定义了构造函数，除了全局区，其他内存空间的成员变量默认都不会被初始化，需要开发人员手动初始化。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Person g_person<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 全局变量初始化为 0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> g_age<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 全局变量默认初始化为 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//Person person; // 堆空间：没有初始化成员变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 堆空间：没有初始化成员变量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p0 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 堆空间：成员变量初始化为 0，// 如果有构造函数则不进行初始化</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> g_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> g_person<span class=\"token punctuation\">.</span>m_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; person.m_age &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> p0<span class=\"token operator\">-></span>m_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token operator\">-></span>m_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/* 输出:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>0</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>0</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>-842150451</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>0</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"构造函数的相互调用\"><a class=\"anchor\" href=\"#构造函数的相互调用\">#</a> 构造函数的相互调用</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">//Person (0,0)// 不可，此命令汇编申请临时对象，而非调用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">m_age</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_height</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"call汇编机械码\"><a class=\"anchor\" href=\"#call汇编机械码\">#</a> call 汇编机械码</h4>\n<ul>\n<li>call 汇编机械码 <code>E8</code>  直接调用，写死</li>\n<li>call 汇编机械码 <code>FF</code>  间接调用，可变</li>\n</ul>\n<h4 id=\"调用多态性虚表的汇编过程\"><a class=\"anchor\" href=\"#调用多态性虚表的汇编过程\">#</a> 调用多态性虚表的汇编过程</h4>\n<figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>调用run</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Animal <span class=\"token operator\">*</span>cat <span class=\"token operator\">=</span> new Cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cat<span class=\"token operator\">-</span><span class=\"token operator\">></span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>ebp<span class=\"token operator\">-</span><span class=\"token number\">8</span>是指针变量cat的地址</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>eax存储的是cat对象的地址</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>move eax<span class=\"token punctuation\">,</span>dword ptr <span class=\"token punctuation\">[</span>ebp<span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>取出cat对象的最前面<span class=\"token number\">4</span>个字节<span class=\"token punctuation\">(</span>虚表地址<span class=\"token punctuation\">)</span>给edx</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mov edx<span class=\"token punctuation\">,</span> dword ptr <span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>跳出虚表的最前面<span class=\"token number\">4</span>个字节，取出<span class=\"token number\">4</span>个字节赋值给eax</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>取出cat::run的函数调用地址给eax</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>mov eax <span class=\"token punctuation\">,</span>dword ptr <span class=\"token punctuation\">[</span>edx<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>call cat::run</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>call eax</pre></td></tr></table></figure><h4 id=\"单例模式简\"><a class=\"anchor\" href=\"#单例模式简\">#</a> 单例模式 (简)</h4>\n<blockquote>\n<p>设计模式的一种，保证某个类永远只创建一个对象</p>\n</blockquote>\n<ul>\n<li>构造函数私有化</li>\n<li>定义一个私有的 static 成员变量指向唯一的那个单例对象</li>\n<li>提供一个公共的访问单例对象的接口</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 安全位置小火箭 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rocket</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">Rocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Rocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">static</span> Rocket <span class=\"token operator\">*</span>ms_rocket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">static</span> Rocket <span class=\"token operator\">*</span><span class=\"token function\">sharedRocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 这里要考虑多线程的安全</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ms_recket <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                ms_rocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Rocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> ms_rocket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteRocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ms_rocket <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">delete</span> ms_rocket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            ms_rocket <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"const成员\"><a class=\"anchor\" href=\"#const成员\">#</a> const 成员</h4>\n<ul>\n<li>const 成员：被 const 修饰的成员变量，非静态成员函数</li>\n<li>const 成员变量\n<ul>\n<li>必须初始化 (类内部初始化) 可以在声明的时候直接初始化赋值</li>\n<li>非 static 的 const 成员变量还可以再初始化列表中初始化</li>\n</ul>\n</li>\n<li>const 成员函数 (非静态)</li>\n<li>const 关键字写在参数列表后面，函数的声明和实现必须带 const</li>\n<li>内部不能修改非 static 成员函数</li>\n<li>内部只能调用 const 成员函数，static 成员函数</li>\n<li>非 const 成员函数可以调用 const 成员函数</li>\n<li>const 成员函数和非 const 成员函数构成重载</li>\n<li>非 const 对象 (指针) 优先调用非 const 成员函数</li>\n<li>const 对象 (指针) 只能调用 const 成员函数，static 成员函数</li>\n</ul>\n<h4 id=\"拷贝函数\"><a class=\"anchor\" href=\"#拷贝函数\">#</a> 拷贝函数</h4>\n<ul>\n<li>利用已经存在的 car3 对象创建一个 car3 新对象</li>\n<li>car4 初始化会调用拷贝构造函数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">car</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> price <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">m_price</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_length</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Car(int price = 0,int length = 0)\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 拷贝构造函数 (会默认生成浅拷贝构造函数)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Car <span class=\"token operator\">&amp;</span>car<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">m_price</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>m_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_length</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>m_length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Car(const Car &amp;car)\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">// m_price = car.m_price;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// m_length = car.m_length;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tcout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"price = \"</span> <span class=\"token operator\">&lt;&lt;</span> m_price <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" , length=\"</span><span class=\"token operator\">&lt;&lt;</span>m_length <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Car <span class=\"token function\">car3</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Car <span class=\"token function\">car4</span><span class=\"token punctuation\">(</span>car3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>car4<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>浅拷贝 (shallow copy): 指针类型的变量只会拷贝地址值<br />\n深拷贝 (deep copy): 将指针指向的内容拷贝到新的存储空间</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>m_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>name <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 申请新的存储空间</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tm_name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>m_name<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"浅深拷贝\"><a class=\"anchor\" href=\"#浅深拷贝\">#</a> 浅，深拷贝</h4>\n<ul>\n<li>编译器默认的提供的拷贝是 <code>浅拷贝</code>  (shallow copy)</li>\n<li>将一个对象中所有成员变量的值拷贝到另一个对象</li>\n<li>如果某个成员变量是个指针，只会拷贝指针中存储的地址值，并不会拷贝指针指向的内存空间</li>\n<li>可能会导致堆空间多次 free 的问题</li>\n<li>如果需要实现 <code>深拷贝</code>  (deep copy)，就需要自定义拷贝构造函数</li>\n<li>将指针类型的成员变量所指向的内存空间，拷贝到新的内存空间</li>\n</ul>\n<h4 id=\"对象类型的参数和返回值\"><a class=\"anchor\" href=\"#对象类型的参数和返回值\">#</a> 对象类型的参数和返回值</h4>\n<blockquote>\n<p>使用对象类型作为函数的参数或者返回值，可能会产生一些不必要的中间对象，返回引用可避免中间值</p>\n</blockquote>\n<h4 id=\"匿名对象\"><a class=\"anchor\" href=\"#匿名对象\">#</a> 匿名对象</h4>\n<blockquote>\n<p>匿名对象：没有变量名，没有被指针指向的对象，用完后马上调用析构</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 一次性对象，调用完之后立即释放空间</span></pre></td></tr></table></figure><h4 id=\"隐式构造转换构造\"><a class=\"anchor\" href=\"#隐式构造转换构造\">#</a> 隐式构造 / 转换构造</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Person p1 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Person <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 都会调用单构造函数</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 隐式构造</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Person <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 隐式构造，会将 40 传递给 Person 单函数对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>可以通过关键字 explicit 在定义构造函数时禁止掉隐式构造</p>\n</blockquote>\n<h4 id=\"编译器何时自动生成构造函数\"><a class=\"anchor\" href=\"#编译器何时自动生成构造函数\">#</a> 编译器何时自动生成构造函数</h4>\n<blockquote>\n<p>virtual function table 在汇编显示:vftable</p>\n</blockquote>\n<ul>\n<li>成员变量在声明的同时进行了初始化</li>\n<li>有定义虚函数</li>\n<li>虚继承其他类</li>\n<li>包含了对象类型的成员，且这个成员有构造函数 (编译器生成或自定义)</li>\n<li>父类有构造函数 (编译器生成或自定义)</li>\n<li>对象创建后，需要做一些额外操作时 (比如内存操作，函数调用)，编译器一般都会为期生成构造函数</li>\n</ul>\n<h4 id=\"内部类\"><a class=\"anchor\" href=\"#内部类\">#</a> 内部类</h4>\n<blockquote>\n<p>如果将类 A 定义在类 C 的内部，那么类 A 就是一个内部类 (嵌套类)</p>\n</blockquote>\n<ul>\n<li>内部类的特点\n<ul>\n<li>支持 public,protected,private 权限</li>\n<li>成员函数可以直接访问其外部类对象的所有成员 (反过来不行)</li>\n<li>成员函数可以直接不带类名，对象名访问其外部类的 static 成员</li>\n<li>不会影响外部类的内存布局</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"局部类\"><a class=\"anchor\" href=\"#局部类\">#</a> 局部类</h4>\n<blockquote>\n<p>在一个 <code>函数内部</code> 定义的类，称为局部类</p>\n</blockquote>\n<ul>\n<li>局部域仅限于所在的函数内部</li>\n<li>其所有的成员必须定义在类内部，不允许定义 static 成员变量</li>\n<li>成员函数不能直接访问函数的局部变量 (static 变量除外)</li>\n<li>在函数内部定义的类如果未调用类和函数，并不会每次调用函数都调用类</li>\n</ul>\n<h4 id=\"类型转换\"><a class=\"anchor\" href=\"#类型转换\">#</a> 类型转换</h4>\n<ul>\n<li>C 语言风格类型转换符\n<ul>\n<li>(type)expression</li>\n<li>type(expression)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span> d2 <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>C++ 中有 <code>4</code>  个类型转换符\n<ul>\n<li>static_cast</li>\n<li>dynamic_cast</li>\n<li>reinterpret_cast</li>\n<li>const_cast</li>\n<li>使用格式:xx_cast&lt;type&gt;(expression)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"const_cast\"><a class=\"anchor\" href=\"#const_cast\">#</a> const_cast</h5>\n<blockquote>\n<p>一般用于 <code>去</code> 除 <code>const</code>  属性，将 <code>const</code>  转换为 <code>非const</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">const</span> Person<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 实现去除 const 属性的强制类型转换</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">const_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 汇编语言相同</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t12: \tPerson* p2 = const_cast&lt;Person*>(p1);</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>00007FF773E2197C 48 8B 45 08          mov         rax,qword ptr [rbp+8]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>00007FF773E21980 48 89 45 28          mov         qword ptr [rbp+28h],rax</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t13: \tPerson* p3 = (Person*)p1;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>00007FF773E21984 48 8B 45 08          mov         rax,qword ptr [rbp+8]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>00007FF773E21988 48 89 45 48          mov         qword ptr [rbp+48h],rax</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"dynamic_cast\"><a class=\"anchor\" href=\"#dynamic_cast\">#</a> dynamic_cast</h5>\n<blockquote>\n<p>一般用于 <code>多态</code> 类型的转换，有 <code>运行</code> 时 <code>安全检测</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"P1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> p1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"P2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> p2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 用于多态类型转换 student 和 Person 没有多态没有虚函数会报错</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 不太安全，Person 赋值给 student，子类赋值给父类，不安全</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tStudent<span class=\"token operator\">*</span> stu1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Student <span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不安全</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tStudent<span class=\"token operator\">*</span> stu2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Student <span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 安全</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 其它方式会把地址完全转过来</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"stu1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> stu1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不安全会清空，安全检测</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"stu2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> stu2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>P1 = 0000019F7CD6C8B0</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>P2 = 0000019F7CD6C2C0 </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>stu1 = 0000000000000000 //p1 赋值失败</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>stu2 = 0000019F7CD6C2C0 //p2 成功</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"static_cast\"><a class=\"anchor\" href=\"#static_cast\">#</a> static_cast</h5>\n<ul>\n<li>对比 dynamic_cast，缺乏运行时安全检测</li>\n<li><code>不能交叉转换</code>  (不是同一继承体系的，无法转换)</li>\n<li>常用语 <code>基本数据类型</code> 的转换， <code>非const转成const</code></li>\n<li>适用较广</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Person<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tCar<span class=\"token operator\">*</span> c1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Car<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 报错，交叉转换不允许 car 和 Person 没有任何关系</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">//Car* c2 = static_cast&lt;Car*>(p1);</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 基本类型转换</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"reinterpret_cast\"><a class=\"anchor\" href=\"#reinterpret_cast\">#</a> reinterpret_cast</h5>\n<ul>\n<li>属于比较 <code>底层的强制转换</code> ，没有任何类型检查和格式转换， <code>仅仅是简单的二进制数据拷贝</code></li>\n<li><code>可以交叉转换</code></li>\n<li><code>可以将指针和整数相互转换</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 小端模式从后面开始读</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 二进制 0000 1010 0000 0000 0000 0000</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 十六进制: 0A 00 00 00</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//int a = 10;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//double 八个字节，double 和 int 并不能简单的二进制 copy</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 00 00 00 00 00 00 24 40</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 二进制纯 copy</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a= \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"d= \"</span> <span class=\"token operator\">&lt;&lt;</span> d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>a= 10</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>d= 8.33713e+80</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>参考资料:《30 小时快速精通 C++ 和外挂》</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW50ZWwuY29tL2NvbnRlbnQvd3d3L3VzL2VuL2RldmVsb3Blci9hcnRpY2xlcy90ZWNobmljYWwvaW50ZWwtc2RtLmh0bWw=\">https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html</span> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "计算机科学",
                "C++",
                "汇编与STl新特征",
                "C++",
                "计算机科学",
                "汇编"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "title": "C++异常处理",
            "date_published": "2023-03-01T04:52:35.000Z",
            "content_html": "<h4 id=\"异常\"><a class=\"anchor\" href=\"#异常\">#</a> 异常</h4>\n<ul>\n<li>异常是程序运行过程中出现问题</li>\n<li>&quot;异常&quot; 并不经常出现</li>\n<li>处理异常使程序像没有发生过问题一样继续执行</li>\n</ul>\n<h4 id=\"何时使用异常处理\"><a class=\"anchor\" href=\"#何时使用异常处理\">#</a> 何时使用异常处理</h4>\n<ul>\n<li>异常处理 用于处理同步错误 (语句执行时发生的错误)</li>\n<li>常见的异常处理错误:</li>\n</ul>\n<blockquote>\n<p>数组下标越界，算法溢出，被零除，函数参数不合法，内存不够引起的内存分配不成功</p>\n</blockquote>\n<ul>\n<li>异常处理不是用于处理异步事件相关的错误的</li>\n</ul>\n<blockquote>\n<p>磁盘读写结束，网络信息到达，点击鼠标或键盘，这些与程序的控制流程并行，独立</p>\n</blockquote>\n<h4 id=\"异常处理的基本思想\"><a class=\"anchor\" href=\"#异常处理的基本思想\">#</a> 异常处理的基本思想</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtdBEE0yRM2cl2h5S9z9t0B9HbyfO9KGNscBicHTwbSn5lK5u8K1mqqK4mb7F4m4rQicLVPoNNCWiaOA/0?wx_fmt=png\" alt=\"异常处理额基本思想\" title=\"异常处理额基思想\" /></p>\n<h4 id=\"异常处理的语法\"><a class=\"anchor\" href=\"#异常处理的语法\">#</a> 异常处理的语法</h4>\n<ul>\n<li>抛掷异常的程序段</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">throw</span> 表达式<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表达式子可以是变量也可以是语句或小段代码</span></pre></td></tr></table></figure><ul>\n<li>捕获并处理异常的程序段</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t复合语句<span class=\"token punctuation\">(</span>保护段<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>异常声明<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t复合语句<span class=\"token punctuation\">(</span>异常处理程序<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>异常声明<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t复合语句</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><ul>\n<li>若有异常则通过 <code>throw</code>  创建一个异常对象并抛掷</li>\n<li>将可能抛出异常的程序段嵌在 <code>try</code>  块之中。通过正常的顺序执行到达 <code>try</code>  语句，然后执行 try 块内的保护段</li>\n<li>如果在保护段执行期间没有引起异常，那么跟在 try 块后的 catch 子句就不执行。程序从 try 块后的最后一个 catch 子句后面的语句继续执行</li>\n<li>catch 子句按其在 try 块后出现的顺序被检查。匹配的 catch 子句将被捕获并处理异常 (或继续抛掷异常)</li>\n<li>如果匹配的处理器未找到，则库函数 <code>terminate</code>  将被自动调用，其默认是调用 <code>abort终止程序</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>处理除零异常</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过 throw 创建 x 的异常对象抛掷给 x</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"5 / 2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"8 / 0 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"7 / 1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is divided by zero !\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"That is ok.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>5 / 2 = 2</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>8 is divided by zero !</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>That is ok.</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>*/</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>带析构语句的类的 C++ 异常处理</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyException</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token operator\">~</span> <span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tstring message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructor of Demo\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor of Demo\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span>MyException<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tDemo d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Throw MyException in func() \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">throw</span> <span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exception thrown by func()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"In main function\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>MyException<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Caught an exception: \"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Resume the exception of main()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>In main function</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>Constructor of Demo</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>Throw MyException in func()</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>Destructor of Demo</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>Caught an exception: exception thrown by func()</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>Resume the exception of main()</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"异常接口声明\"><a class=\"anchor\" href=\"#异常接口声明\">#</a> 异常接口声明</h4>\n<blockquote>\n<p>异常声明 (异常规范， <code>Exception specifications</code> ) 一个函数显式声明可能抛出的异常，有利于函数的调用者为异常处理做好准备</p>\n</blockquote>\n<ul>\n<li>可以在函数的声明中列出这个哈数可能抛掷的所有异常类型</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>若无异常接口声明，则此函数可以抛掷 <code>任何类型</code> 的异常</li>\n<li>不抛掷任何异常的函数声明如下</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"noexcept异常说明\"><a class=\"anchor\" href=\"#noexcept异常说明\">#</a>  <code>noexcept</code>  异常说明</h4>\n<ul>\n<li>对明确 <code>不会</code> 抛出异常的函数使用 <code>noexcept</code>  说明修饰</li>\n<li>声明方式:</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>返回值类型 <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>异常处理使编译和运行时有 <code>额外开销</code> ，省去异常处理可优化 <code>加速调用</code></li>\n<li>需保持该函数内部调用函数和定义语句均不会抛出异常的一致性</li>\n<li>noexcept 运算符，可判断函数是否使用了 noexcept 说明</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回 true，因为 f 有 noexcept 说明</span></pre></td></tr></table></figure><h4 id=\"慎用异常声明的情况\"><a class=\"anchor\" href=\"#慎用异常声明的情况\">#</a> 慎用异常声明的情况</h4>\n<ul>\n<li>对于带类型参数的函数模版，要尽量避免使用 exception specifications, 因为不同类型对于相同行为的定义不同，抛出的异常也就不同，因而函数模版很难或不可能确定它具现代的函数实体所可能抛出的异常</li>\n<li>使用回调 (callback) 函数时</li>\n<li>系统可能抛出的异常</li>\n</ul>\n<h4 id=\"异常处理中的构造与析构\"><a class=\"anchor\" href=\"#异常处理中的构造与析构\">#</a> 异常处理中的构造与析构</h4>\n<h5 id=\"自动的析构\"><a class=\"anchor\" href=\"#自动的析构\">#</a> 自动的析构</h5>\n<ul>\n<li>找到一个匹配的 catch 异常处理后\n<ul>\n<li>初始化异常参数</li>\n<li>将从对应的 try 块开始到异常被抛掷之间构造 (且尚未析构) 的所有自动对象进行析构</li>\n<li>从最后一个 catch 处理之后开始恢复执行</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"标准程序库继承关系\"><a class=\"anchor\" href=\"#标准程序库继承关系\">#</a> 标准程序库继承关系</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtdBEE0yRM2cl2h5S9z9t0BrgiamoaUWaML3MGFNqzEWQ6V3mq3smy3HsubAcYvRn6EnAsCqAb31Ng/0?wx_fmt=png\" alt=\"标准程序库继承关系\" /></p>\n<h4 id=\"c标准库各种异常类所代表的异常\"><a class=\"anchor\" href=\"#c标准库各种异常类所代表的异常\">#</a> C++ 标准库各种异常类所代表的异常</h4>\n<table>\n<thead>\n<tr>\n<th><strong>异常类</strong></th>\n<th><strong>头文件</strong></th>\n<th><strong>异常的含义</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>bad_alloc</strong></td>\n<td>exception</td>\n<td>用 new 动态分配空间失败</td>\n</tr>\n<tr>\n<td><strong>bad_cast</strong></td>\n<td>new</td>\n<td>执行 dynamic_cast 失败（dynamic_cast 参见 8.7.2 节）</td>\n</tr>\n<tr>\n<td><strong>bad_typeid</strong></td>\n<td>typeinfo</td>\n<td>对某个空指针 p 执行 typeid (*p)（typeid 参见 8.7.2 节）</td>\n</tr>\n<tr>\n<td><strong>bad_exception</strong></td>\n<td>typeinfo</td>\n<td>当某个函数 fun () 因在执行过程中抛出了异常声明所不允许的异常而调用 unexpected () 函数时，若 unexpected () 函数又一次抛出了 fun () 的异常声明所不允许的异常，且 fun () 的异常声明列表中有 bad_exception，则会有一个 bad_exception 异常在 fun () 的调用点被抛出</td>\n</tr>\n<tr>\n<td><strong>ios_base::failure</strong></td>\n<td>ios</td>\n<td>用来表示 C++ 的输入输出流执行过程中发生的错误</td>\n</tr>\n<tr>\n<td><strong>underflow_error</strong></td>\n<td>stdexcept</td>\n<td>算术运算时向下溢出</td>\n</tr>\n<tr>\n<td><strong>overflow_error</strong></td>\n<td>stdexcept</td>\n<td>算术运算时向上溢出</td>\n</tr>\n<tr>\n<td><strong>range_error</strong></td>\n<td>stdexcept</td>\n<td>内部计算时发生作用域的错误</td>\n</tr>\n<tr>\n<td><strong>out_of_range</strong></td>\n<td>stdexcept</td>\n<td>表示一个参数值不在允许的范围之内</td>\n</tr>\n<tr>\n<td><strong>length_error</strong></td>\n<td>stdexcept</td>\n<td>尝试创建一个长度超过最大允许值的对象</td>\n</tr>\n<tr>\n<td><strong>invalid_argument</strong></td>\n<td>stdexcept</td>\n<td>表示向函数传入无效参数</td>\n</tr>\n<tr>\n<td><strong>domain_error</strong></td>\n<td>stdexcept</td>\n<td>执行一段程序所需要的先决条件不满足</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"标准异常类的基础\"><a class=\"anchor\" href=\"#标准异常类的基础\">#</a> 标准异常类的基础</h4>\n<ul>\n<li><code>exception</code> ：标准程序库异常类的 <code>公共基类</code></li>\n<li><code>logic_error</code> ：表示可以在程序中被预先检测到的异常\n<ul>\n<li>如果小心地编写程序，这类异常能够避免</li>\n</ul>\n</li>\n<li><code>runtime_error</code> : 表示 <code>难以</code> 被预先检测的异常</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>计算三角形的面积</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdexcept></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 给出三角形三边长，计算三角形面积</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 判断三角形表长是否为正</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> b <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">invalid_argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the side length should be positive\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 判断三边长是否满足三角不等式</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">&lt;=</span> c <span class=\"token operator\">||</span> b <span class=\"token operator\">+</span> c <span class=\"token operator\">&lt;=</span> a <span class=\"token operator\">||</span> c <span class=\"token operator\">+</span> a <span class=\"token operator\">&lt;=</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">invalid_argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the side length should fit the triangle inequation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 由 heron 公式计算三角形面积</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">double</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 三角形三边长</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input the side lengths of a triangle:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tcin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b <span class=\"token operator\">>></span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> s <span class=\"token operator\">=</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 尝试计算三角形面积</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Area:\"</span> <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error:\"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "编程语言",
                "C++",
                "计算机科学"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%B5%81%E7%A8%8B%E5%BA%93%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%B5%81%E7%A8%8B%E5%BA%93%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/",
            "title": "C++流程库输入与输出",
            "date_published": "2023-02-28T06:40:35.000Z",
            "content_html": "<h4 id=\"流对象与文件操作\"><a class=\"anchor\" href=\"#流对象与文件操作\">#</a> 流对象与文件操作</h4>\n<ul>\n<li>程序建立一个流对象\n<ul>\n<li>当程序与 <code>外界环节</code> 进行信息交流时，存在着两个对象，一个是程序中的对象，另一个是文件对象</li>\n<li>流是一种抽象，它负责在数据的生产者和数据的消费者之间建立联系，并管理 <code>数据的流动</code></li>\n</ul>\n</li>\n<li>指定这个流对象与某个文件对象建立连接</li>\n<li>程序操作流对象</li>\n<li>流对象通过文件系统对所连接的文件产生作用</li>\n</ul>\n<h4 id=\"提取与插入\"><a class=\"anchor\" href=\"#提取与插入\">#</a> 提取与插入</h4>\n<ul>\n<li>读操作在流数据抽象中被称为 (从流中) 提取</li>\n<li>写操作被称为 (向流中) 插入</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>说明</th>\n<th>包含文件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>抽象流基类</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>ios </code></td>\n<td>流基类</td>\n<td><code>ios </code></td>\n</tr>\n<tr>\n<td>输入流类</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>istream  </code></td>\n<td>通用输入流类和其它输入流的基类</td>\n<td><code>istream  </code></td>\n</tr>\n<tr>\n<td><code> ifstream </code></td>\n<td>文件输入流类</td>\n<td><code>fstream</code></td>\n</tr>\n<tr>\n<td><code>istringstream</code></td>\n<td>字符串输入流类</td>\n<td><code>sstream</code></td>\n</tr>\n<tr>\n<td>输出流类</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>ostream</code></td>\n<td>通用输出流类和其它输出流的基类</td>\n<td><code>ostream</code></td>\n</tr>\n<tr>\n<td><code>ofstream</code></td>\n<td>文件输出流类</td>\n<td><code>fstream</code></td>\n</tr>\n<tr>\n<td><code>ostringstream</code></td>\n<td>字符串输出流类</td>\n<td><code>sstream</code></td>\n</tr>\n<tr>\n<td>输入 / 输出流类</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>iostream</code></td>\n<td>通用输入 / 输出流类和其它输入 / 输出流的基类</td>\n<td><code>istream</code></td>\n</tr>\n<tr>\n<td><code>fstream</code></td>\n<td>文件输入 / 输出流类</td>\n<td><code>fstream</code></td>\n</tr>\n<tr>\n<td><code>stringstream</code></td>\n<td>字符串输入 / 输出流类</td>\n<td><code>sstream</code></td>\n</tr>\n<tr>\n<td>流缓冲区类</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>streambuf</code></td>\n<td>抽象流缓冲区基类</td>\n<td><code>streambuf</code></td>\n</tr>\n<tr>\n<td><code>filebuf</code></td>\n<td>磁盘文件的流缓冲区类</td>\n<td><code>fstream</code></td>\n</tr>\n<tr>\n<td><code>stringbuf</code></td>\n<td>字符串的流缓冲区类</td>\n<td><code>sstream</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"预先定义的输出流对象\"><a class=\"anchor\" href=\"#预先定义的输出流对象\">#</a> 预先定义的输出流对象</h4>\n<ul>\n<li><code>cout</code>  标准输出</li>\n<li><code>cerr</code>  标准错误输出， <code>没有缓冲</code> ，发送给他的内容立即被输出</li>\n<li><code>clog </code> 类似 <code>cerr</code> , 但 <code>有缓冲</code> ，缓冲区满时被输出</li>\n</ul>\n<h4 id=\"构造输出流对象\"><a class=\"anchor\" href=\"#构造输出流对象\">#</a> 构造输出流对象</h4>\n<ul>\n<li>\n<p><code>ofstream</code>  类支持 <code>磁盘文件</code> 输出</p>\n</li>\n<li>\n<p>如果在构造函数中制定一个文件名，当构造这个对象时该文件是自动打开的</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ofstream <span class=\"token function\">myFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>可以在调用默认构造函数之后使用 <code>open</code>  成员函数打开文件</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ofstream myFile<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明一个静态文件输出流对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myFile<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 打开文件，使流对象与文件建立联系，关联</span></pre></td></tr></table></figure><ul>\n<li>在构造对象或用 open 打开文件时可以指定模式，默认存文本文件</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ofstream <span class=\"token function\">myFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">,</span>iso_base<span class=\"token double-colon punctuation\">::</span>out <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"文件输出流成员函数\"><a class=\"anchor\" href=\"#文件输出流成员函数\">#</a> 文件输出流成员函数</h4>\n<ul>\n<li>与操作符等价的成员函数</li>\n<li>执行 <code>非格式化</code> 写操作的成员函数</li>\n<li>其它修改流状态且不同于操作符或插入运算符的成员函数</li>\n</ul>\n<h4 id=\"文件输出流成员函数-2\"><a class=\"anchor\" href=\"#文件输出流成员函数-2\">#</a> 文件输出流成员函数</h4>\n<ul>\n<li><code>open</code>  函数\n<ul>\n<li>把流与一个特定的磁盘文件关联起来</li>\n<li>需要指定打开模式</li>\n</ul>\n</li>\n<li><code>put</code>  函数\n<ul>\n<li>把一个字符写到输出流中</li>\n</ul>\n</li>\n<li><code>write</code>  函数\n<ul>\n<li>把内存中的一块内容写到一个文件输出流中 (写 <code>二进制</code> 文件用)</li>\n</ul>\n</li>\n<li><code>seekp</code>  和 <code>tellp</code>  函数\n<ul>\n<li>操作文件流的 <code>内部指针</code> ，</li>\n<li><code>seekp</code>  写到什么位置标志</li>\n<li><code>tellp</code>  告诉文件位置，开始的字节数</li>\n</ul>\n</li>\n<li><code>close</code>  函数\n<ul>\n<li>关闭与一个文件输出流关联的磁盘文件</li>\n</ul>\n</li>\n<li>错误处理函数\n<ul>\n<li>在写到一个流时进行错误处理</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"向文本文件输出\"><a class=\"anchor\" href=\"#向文本文件输出\">#</a> 向文本文件输出</h4>\n<h5 id=\"插入运算符\"><a class=\"anchor\" href=\"#插入运算符\">#</a> 插入运算符</h5>\n<ul>\n<li>插入 ( <code>&lt;&lt;</code> ) 运算符\n<ul>\n<li>传送字节到输出流对象，为所有标准 C++ 数据类型预先设计</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"操作符manipulator\"><a class=\"anchor\" href=\"#操作符manipulator\">#</a> 操作符 ( <code>manipulator</code> )</h5>\n<ul>\n<li>插入运算符 与操作符一起工作\n<ul>\n<li>控制输出格式</li>\n</ul>\n</li>\n<li>很多操作符都定义在</li>\n</ul>\n<blockquote>\n<p><code>ios_base</code>  类中 (如 <code>hex(),&lt;iomanio&gt;头文件(如setprecision())</code> )</p>\n</blockquote>\n<ul>\n<li>控制输出宽度\n<ul>\n<li>在流中放入 <code>setw</code>  操作符或调用 <code>width</code>  成员函数为每个项指定输出宽度</li>\n</ul>\n</li>\n<li><code>setw</code>  和 <code>width</code>  仅影响紧随其后的输出项，但其它流格式操纵符保存有效指导发生改变</li>\n<li><code>dec</code> ， <code>oct</code>  和 <code>hex</code>  操作符设置输入和输出的默认进制</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">double</span> values<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">35.36</span><span class=\"token punctuation\">,</span><span class=\"token number\">653.7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4358.24</span> <span class=\"token punctuation\">,</span><span class=\"token number\">124567899</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">// 使用 width 控制输出宽度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// 每个字符 10 个字节</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 影响其后的输出项，只影响一个</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t  1.23</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t 35.36</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t 653.7</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   4358.24</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>1.24568e+08</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"输出到文本\"><a class=\"anchor\" href=\"#输出到文本\">#</a> 输出到文本</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tofstream <span class=\"token function\">txtout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">double</span> values<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">35.36</span><span class=\"token punctuation\">,</span><span class=\"token number\">653.7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4358.24</span> <span class=\"token punctuation\">,</span><span class=\"token number\">124567899</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\ttxtout<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\ttxtout <span class=\"token operator\">&lt;&lt;</span>  values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\ttxtout<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记得关闭</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"http://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtdBEE0yRM2cl2h5S9z9t0B545Libn5ovg0KCLo1DPz8nGeRVgNCkQnw7dNjv2S0LS0AWBKFYLOP8w/0?wx_fmt=png\" alt=\"文本输出\" title=\"文本输出\" /></p>\n<h5 id=\"一行多输出宽度对齐精度\"><a class=\"anchor\" href=\"#一行多输出宽度对齐精度\">#</a> 一行多输出，宽度，对齐，精度</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iomanip></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">double</span> values<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">35.36</span><span class=\"token punctuation\">,</span><span class=\"token number\">653.7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4358.24</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstring names<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Zoot\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Jimmy\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"AI\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Stan\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 设置对齐方式</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"设置对齐方式\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setiosflags</span><span class=\"token punctuation\">(</span>ios_base<span class=\"token double-colon punctuation\">::</span>left<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 左对齐</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 输出精度</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"控制输出精度\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setiosflags</span><span class=\"token punctuation\">(</span>ios_base<span class=\"token double-colon punctuation\">::</span>fixed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setiosflags</span><span class=\"token punctuation\">(</span>ios_base<span class=\"token double-colon punctuation\">::</span>left<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 左对齐</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">resetiosflags</span><span class=\"token punctuation\">(</span>ios_base<span class=\"token double-colon punctuation\">::</span>left<span class=\"token punctuation\">)</span><span class=\"token comment\">// 清除左对齐设置</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 输出精度 scientific</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"控制输出精度scientific\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setiosflags</span><span class=\"token punctuation\">(</span>ios_base<span class=\"token double-colon punctuation\">::</span>scientific<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setiosflags</span><span class=\"token punctuation\">(</span>ios_base<span class=\"token double-colon punctuation\">::</span>left<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 左对齐</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">resetiosflags</span><span class=\"token punctuation\">(</span>ios_base<span class=\"token double-colon punctuation\">::</span>left<span class=\"token punctuation\">)</span><span class=\"token comment\">// 清楚左对齐设置</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  Zoot      1.23</pre></td></tr><tr><td data-num=\"51\"></td><td><pre> Jimmy     35.36</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tAI     653.7</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  Stan   4358.24</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>设置对齐方式</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>Zoot  1.23</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>Jimmy 35.36</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>AI    653.7</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>Stan  4358.24</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>控制输出精度</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>Zoot  1.230000         1.2</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>Jimmy 35.4            35.4</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>AI    653.7          653.7</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>Stan  4358.2        4358.2</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>控制输出精度 scientific</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>Zoot  0x1.3ae147ae147aep+0</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Jimmy 0x1.1ae147ae147aep+5</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>AI    0x1.46d999999999ap+9</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Stan  0x1.1063d70a3d70ap+12</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"setiosflags操作符\"><a class=\"anchor\" href=\"#setiosflags操作符\">#</a>  <code>setiosflags</code>  操作符</h4>\n<ul>\n<li>头文件 <code>iomanip</code></li>\n<li><code>ios_base::前缀</code></li>\n<li><code>setiosflags</code>  不同于 <code>width</code>  和 <code>setw</code> ，它的影响是持久的，直到 <code>resetiosflags</code>  重新恢复默认值时为止</li>\n<li><code>setiosflags</code>  的参数是该流的格式标志值，可用按位或 (|) 运算符就行组合</li>\n</ul>\n<h5 id=\"setiosflags参数\"><a class=\"anchor\" href=\"#setiosflags参数\">#</a>  <code>setiosflags</code>  参数</h5>\n<blockquote>\n<p>流的格式标识</p>\n</blockquote>\n<ul>\n<li><code>ios_base::skipws </code> 在输入中跳过空白 。</li>\n<li><code>ios_base::left</code>  左对齐值，用填充字符填充右边。</li>\n<li><code>ios_base::right </code> 右对齐值，用填充字符填充左边（默认对齐方式）。</li>\n<li><code>ios_base::internal</code>  在规定的宽度内，指定前缀符号之后，数值之前，插入指定的填充字符。</li>\n<li><code>ios_base::dec </code> 以十进制形式格式化数值（默认进制）。</li>\n<li><code>ios_base::oct</code>  以八进制形式格式化数值 。</li>\n<li><code>ios_base::hex</code>  以十六进制形式格式化数值。</li>\n<li><code>ios_base::showbase</code>  插入前缀符号以表明整数的数制。</li>\n<li><code>ios_base::showpoint</code>  对浮点数值显示小数点和尾部的 0 。</li>\n<li><code>ios_base::uppercase </code> 对于十六进制数值显示大写字母 A 到 F，对于科学格式显示大写字母 E 。</li>\n<li><code>ios_base::showpos</code>  对于非负数显示正号（“+”）。</li>\n<li><code>ios_base::scientific </code> 以科学格式显示浮点数值。</li>\n<li><code>ios_base::fixed</code>  以定点格式显示浮点数值（没有指数部分） 。</li>\n<li><code>ios_base::unitbuf </code> 在每次插入之后转储并清除缓冲区内容。</li>\n</ul>\n<h4 id=\"精度\"><a class=\"anchor\" href=\"#精度\">#</a> 精度</h4>\n<ul>\n<li>浮点数输出精度的默认值是 <code>6</code> , 例如：3466.98</li>\n<li>改变精度: <code>setprecision</code>  操作符 (头文件 <code>iomanip</code>  中)</li>\n<li>如果不指定 fixed 或 scientific, 精度值表示有效数字位数</li>\n<li>如果设置了 <code>ios_base::fixed</code>  或 <code>ios_base::scientific</code>  精度值表示 <code>小数点之后的位数</code></li>\n</ul>\n<h4 id=\"二进制文件流\"><a class=\"anchor\" href=\"#二进制文件流\">#</a> 二进制文件流</h4>\n<ul>\n<li>使用 <code>ofstream</code>  构造函数中的模式参数指定 <code>二进制输出模式</code></li>\n<li>以通常方式构造一个流，然后使用 <code>setmode</code>  成员函数，在文件打开后改变模式；</li>\n<li>通过二进制文件输出流对象完成输出</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> mon<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tDate dt <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">92</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tofstream <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"date.dat\"</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 二进制</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"向字符串输出\"><a class=\"anchor\" href=\"#向字符串输出\">#</a> 向字符串输出</h4>\n<blockquote>\n<p>将字符串作为输出流的目标，可以实现将其他数据类型转换为字符换的功能</p>\n</blockquote>\n<h4 id=\"字符串输出流\"><a class=\"anchor\" href=\"#字符串输出流\">#</a> 字符串输出流</h4>\n<ul>\n<li>用于构造字符串</li>\n<li>功能\n<ul>\n<li>支持 <code>ofstream</code>  类除 <code>open</code> ， <code>close</code>  外的所有操作</li>\n<li><code>str函数</code> 可以返回当前已构造的字符串</li>\n</ul>\n</li>\n<li>典型应用\n<ul>\n<li>将数值转换为字符串</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>函数模版 toString 可以将・各种支持・\"&lt;&lt;\" 插入符类型的额对象转换为字符串</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">inline</span> string <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tostringstream os<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建字符串输出流</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tos <span class=\"token operator\">&lt;&lt;</span> v<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将变量 v 的值写入字符串流</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回输出流生成的字符串</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tstring str1 <span class=\"token operator\">=</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> str1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tstring str2 <span class=\"token operator\">=</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> str2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>5</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>1.2</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"输入流\"><a class=\"anchor\" href=\"#输入流\">#</a> 输入流</h4>\n<ul>\n<li><code>tream</code>  类最适合用于顺序文本模式输入， <code>cin</code>  是实例</li>\n<li><code>ifstream</code>  类支持磁盘文件输入</li>\n<li><code>istringstram</code></li>\n</ul>\n<h4 id=\"构造输入流对象\"><a class=\"anchor\" href=\"#构造输入流对象\">#</a> 构造输入流对象</h4>\n<ul>\n<li>如果在构造函数中指定一个文件名，在构造该对象时该文件便自动打开。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ifstream <span class=\"token function\">myFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>在调用默认构造函数之后使用 open 函数来打开文件。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ifstream myFile<span class=\"token punctuation\">;</span><span class=\"token comment\">// 建立一个文件流对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myFile<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 打开文件 \"filename”</span></pre></td></tr></table></figure><ul>\n<li>打开文件时可以指定模式</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ifstream <span class=\"token function\">myFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>in <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"使用提取运算符从文本文件输入\"><a class=\"anchor\" href=\"#使用提取运算符从文本文件输入\">#</a> 使用 <code>提取运算符</code> 从文本文件输入</h4>\n<ul>\n<li>提取运算符 (&gt;&gt;) 对于所有标准 c++ 数据类型预先设计</li>\n<li>是从一个输入流对象获取直接最容易的方法</li>\n<li><code>ios</code>  类中很多操纵符都可以应用于输入流，但是只有少数几个对输入流对象具有实际影响，最重要 的是进制操作符 <code>dec十进制</code> ， <code>oct八进制</code> 和 <code>hex十六进制</code></li>\n</ul>\n<h4 id=\"输入流相关函数\"><a class=\"anchor\" href=\"#输入流相关函数\">#</a> 输入流相关函数</h4>\n<ul>\n<li><code>open函数</code> 把该流与一个特定磁盘文件相关联。</li>\n<li><code>get函数</code> 的功能与提取运算符 (&gt;&gt;) 很相像，主要的不同点是 get 函数在读入数据时包括 <code>空白字符</code> 。</li>\n<li><code>getline</code>  的功能是从输入流中读取多个字符，并且允许指定输入终止字符，读取完成后，从读取的内容中删除终止字符。</li>\n<li><code>read成员函数</code> 从一个文件读字节到一个指定的内存区域，由长度参数确定要读的字节数。当遇到文件结束或者在文本模式文件中遇到文件结束标记字符时结束读取。</li>\n<li><code>seekg函数</code> 用来设置文件输入流中读取数据位置的指针。</li>\n<li><code>tellg函数</code> 返回当前文件读指针的位置。</li>\n<li><code>close函数</code> 关闭与一个文件输入流关联的磁盘文件。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>get 函数应用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 从键盘中输入，然后输出</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//ctrl+z 结束</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>为输入流指定一个终止字符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tstring line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Type a line terminated by '\\t'\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">,</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> line <span class=\"token operator\">&lt;&lt;</span>  endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>从文件中读一个二进制记录到一个结构体</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">SalaryInfo</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">double</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tSalaryInfo employee1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">600001</span><span class=\"token punctuation\">,</span><span class=\"token number\">8000</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明结构体</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tofstream <span class=\"token function\">os</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"payroll\"</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>out <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 文件输出流，二进制类型</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 字符转换，大小</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>employee1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>employee1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将结构体写入文件输出流</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tifstream <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"payroll\"</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>in <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读二进制文件。输入方式，二进制文件</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tSalaryInfo employee2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>employee2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>employee2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> employee2<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> employee2<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ERROR:Cannot open file 'payroll'\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>用 seekg 函数设置位置指针</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> values<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tofstream <span class=\"token function\">os</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"integers\"</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>out <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tifstream <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"integers\"</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>in <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">seekg</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 跳跃三个整数位置</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The 4th integer in the file 'integers' is \"</span> <span class=\"token operator\">&lt;&lt;</span> v <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ERROR :Cannot open file 'integers'\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>读入一个文件并显示出其中 0 元素的位置</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tifstream <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"integers\"</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>in <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 读到文件尾 file 为 0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token comment\">//tellg 函数返回当前文件读指针的位置</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tstreampos here <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">tellg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file <span class=\"token operator\">&amp;&amp;</span> v <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Position:\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> here <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\tis 0\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ERROR:Cannot open file \\\"integers\\\".\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"从字符串输入\"><a class=\"anchor\" href=\"#从字符串输入\">#</a> 从字符串输入</h4>\n<blockquote>\n<p>将字符串作为文本输入流的源，可以经字符串转换为其他数据类型</p>\n</blockquote>\n<h5 id=\"字符串输入流istringstream\"><a class=\"anchor\" href=\"#字符串输入流istringstream\">#</a> 字符串输入流 ( <code>istringstream</code> )</h5>\n<ul>\n<li>用于从 <code>字符串读取数据</code></li>\n<li>在构造函数中设置要读取的字符串</li>\n<li>功能\n<ul>\n<li>支持 <code>ifstream</code>  类的除 <code>open，close</code>  外的所有操作</li>\n</ul>\n</li>\n<li>典型应用\n<ul>\n<li>将字符串转换为数值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用 istringstream 将字符串转换为数值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">inline</span> T <span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tistringstream <span class=\"token function\">is</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 创建输入字符串流</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tT v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tis <span class=\"token operator\">>></span> v<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 从输入字符串流中读取变量 v</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 返回变量 v</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">int</span> v1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">fromString</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> v1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">double</span> v2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">fromString</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> v2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"重要输入输出流\"><a class=\"anchor\" href=\"#重要输入输出流\">#</a> 重要输入 / 输出流</h5>\n<ul>\n<li>iostream 对象可以是数据的源或目的</li>\n<li>两个重要的 I/O 流类都是从 iostream 派生，他们是 fstream 和 stringstream\n<ul>\n<li>这些类继承了前面描述的 istream 和 ostream 类功能</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"fstream类\"><a class=\"anchor\" href=\"#fstream类\">#</a> fstream 类</h6>\n<ul>\n<li>fstream 类支持磁盘文件输入和输出</li>\n<li>可构造 fstream 实现从一个特定磁盘文件读并谢大鹏磁盘 文件</li>\n<li>一个 fstream 对象是 有两个逻辑 子流的单个流，两个子流一个用于输入，另一个用于输出</li>\n</ul>\n<h6 id=\"stringstream类\"><a class=\"anchor\" href=\"#stringstream类\">#</a> stringstream 类</h6>\n<ul>\n<li>stringstream 类支持面向字符串的输入和输出</li>\n<li>可以用于对同一个字符串的内容交换读写 ，同样是由两个逻辑子流构成</li>\n</ul>\n<h4 id=\"getline读取文本练习\"><a class=\"anchor\" href=\"#getline读取文本练习\">#</a>  <code>getline</code>  读取文本练习</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span> <span class=\"token comment\">// 文本 输出</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span> <span class=\"token comment\">// 引用字符串</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iomanip></span>  <span class=\"token comment\">// 对齐操作符头文件</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;istream></span>  <span class=\"token comment\">// 输入流函数</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 打开文件，默认文本形式</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tofstream <span class=\"token function\">textout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span>ios_base<span class=\"token double-colon punctuation\">::</span>out <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tstring hello <span class=\"token operator\">=</span> <span class=\"token string\">\"hello test\\nhello second!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">//textout.width (20);  // 文字占 20 个字节</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ttextout </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">//&lt;&lt; setiosflags (ios_base::right)  // 右对齐</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span>hello<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\ttextout<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 读取文章内容</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tifstream <span class=\"token function\">myFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>in <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tstring out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用 while 读取一行一行的读入</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">// 使用 getline 读取文件中字符，</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">//getline 函数原型 getline (std::cin,string s，char ch),</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 表示以字符 ch 来结束字符串的读入。</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> out <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">/*else</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t&#123;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tcout &lt;&lt; \"ERROR:Cannot open file 'text.txt'\" &lt;&lt; endl;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t&#125;*/</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tmyFile<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jcGx1c3BsdXMuY29tL3JlZmVyZW5jZS8=\">C++ 参考文档</span><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jcGx1c3BsdXMuY29tL3JlZmVyZW5jZS8=\">http://www.cplusplus.com/reference/</span> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "编程语言",
                "C++",
                "计算机科学"
            ]
        }
    ]
}