{
    "version": "https://jsonfeed.org/version/1",
    "title": "瓶子的跋涉",
    "subtitle": "YuHeShui",
    "icon": "https://www.blog.foryouos.cn/images/favicon.ico",
    "description": "破碎的瓶子 & 编程笔记",
    "home_page_url": "https://www.blog.foryouos.cn",
    "items": [
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/C-%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%BF%9D%E6%8A%A4/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/C-%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%BF%9D%E6%8A%A4/",
            "title": "C++数据共享与保护",
            "date_published": "2023-02-23T05:53:36.000Z",
            "content_html": "<h3 id=\"数据的共享与保护\"><a class=\"anchor\" href=\"#数据的共享与保护\">#</a> 数据的共享与保护</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include &lt;iostream></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//C++标准程序库的所有标识符都被声明在std命名空间内</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>int main<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hello std!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t//std::cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello std!\"</span> <span class=\"token operator\">&lt;&lt;</span> std::endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h4>\n<p>不同位置定义的变量和对象，其作用域，可见性，生存期都不同。程序模需要协作共同完成整个系统的功能，模块间需要共享数据，就需要直到应该将变量和对象定义在什么位置</p>\n<h4 id=\"函数原形作用域\"><a class=\"anchor\" href=\"#函数原形作用域\">#</a> 函数原形作用域</h4>\n<p>函数原型作用域中的参数，其作用域始于 &quot;(&quot;, 结束于 &quot;)&quot;</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>double area<span class=\"token punctuation\">(</span>double radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"局部作用域\"><a class=\"anchor\" href=\"#局部作用域\">#</a> 局部作用域</h4>\n<p>函数的形参，在块中声明的标识符，其作用域自声明处起，限于块中<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvicMgsRBhgayuYtLPvnzX9lFgmkOGPQnS55qoejMgRic6ydZy4s9TT0cniaLI0DJiadbIVC1lwOqX3dw/0?wx_fmt=jpeg\" alt=\"局部作用域\" title=\"局部作用域\" /></p>\n<h4 id=\"类作用域\"><a class=\"anchor\" href=\"#类作用域\">#</a> 类作用域</h4>\n<p>其范围包括类体和非内联成员函数的函数体</p>\n<h4 id=\"命名空间作用域\"><a class=\"anchor\" href=\"#命名空间作用域\">#</a> 命名空间作用域</h4>\n<p>命名空间可以解决类名，函数名等的命名冲突</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>namespace 命名空间名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t各种声明<span class=\"token punctuation\">(</span>函数声明，类声明<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>例:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> SomeNs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClass</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 引用类名:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>SomeNs<span class=\"token double-colon punctuation\">::</span>Someclass objl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>using</code>  语句的两种形式</p>\n<ul>\n<li>using 命名空间名：：标识符名；</li>\n<li><code>using namespace</code>  命名空间名；</li>\n</ul>\n<h4 id=\"特殊的命名空间\"><a class=\"anchor\" href=\"#特殊的命名空间\">#</a> 特殊的命名空间</h4>\n<ul>\n<li>全局命名空间：默认全局</li>\n<li>匿名命名空间 (给空间没有名字): 对每个源文件是惟一的 (限于当前文件)</li>\n</ul>\n<h4 id=\"限定作用域的枚举类\"><a class=\"anchor\" href=\"#限定作用域的枚举类\">#</a> 限定作用域的枚举类</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color</span><span class=\"token punctuation\">&#123;</span>red<span class=\"token punctuation\">,</span>yellow<span class=\"token punctuation\">,</span>green<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不限定作用域</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color2</span><span class=\"token punctuation\">&#123;</span>red<span class=\"token punctuation\">,</span>yellow<span class=\"token punctuation\">,</span>green<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 错误，重复定义</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">color2</span><span class=\"token punctuation\">&#123;</span>red<span class=\"token punctuation\">,</span>yellow<span class=\"token punctuation\">,</span>green<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 正确，限定作用域</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>color c<span class=\"token operator\">=</span>red<span class=\"token punctuation\">;</span><span class=\"token comment\">// 全局作用域 color 枚举类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>color2 c2 <span class=\"token operator\">=</span> red<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误，color2 元素不在有效作用域内</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>color2 c2 <span class=\"token operator\">=</span> color2<span class=\"token double-colon punctuation\">::</span>red<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，使用 color2 作用域枚举元素</span></pre></td></tr></table></figure><h4 id=\"可见性\"><a class=\"anchor\" href=\"#可见性\">#</a> 可见性</h4>\n<ul>\n<li>可见性表示从内层作用域向外层作用域 &quot;看&quot; 时能看见什么</li>\n<li>如果标识在某处可见，就可以在该处引用此标识符</li>\n<li>如果某个标识符在外层中声明，且在内层中没有同一标识符的声明，则该标识符在内层可见</li>\n<li>对于两个嵌套的作用域，如果在内层作用域内与外层作用域中同名的标识符，则外层作用域的标识符在内层不可见</li>\n</ul>\n<h4 id=\"对象的生存期\"><a class=\"anchor\" href=\"#对象的生存期\">#</a> 对象的生存期</h4>\n<p>对象从产生到结束这段时间，在对象生存周期，最想将保持它的值 ，直到被更新为止</p>\n<ul>\n<li>静态生存期：生存期与程序的运行期相同，在文件作用域中声明的对象具有这种生存期，在函数内部声明静态生存期对象，要冠以关键字 static</li>\n<li>动态生存期：没有用 <code>static</code>  声明，开始于程序执行到声明点时，结束于命名该标识符的作用域结束处。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//C++ 标准程序库的所有标识符都被声明在 std 命名空间内</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//i 为全局变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">other</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//a,b 为静态全局变量，具有全局寿命，局部可见，只第一次进入函数时被初始化</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//c 为局部变量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\ta <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//4</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\ti <span class=\"token operator\">+=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//33</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tc <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//15</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"---- - other----\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" i：\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" a:\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" b:\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" c\"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">//a 为静态局部变量，具有全局 寿命，局部可见</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//b,c 为局部变量，具有动态生存期</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"——----main----\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">//i=1,a 默认为 0，b=-10,c=0</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" i：\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" a:\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" b:\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" c\"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tc <span class=\"token operator\">+=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//c=8</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">other</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"——----main----\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" i：\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" a:\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" b:\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" c\"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\ti <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">other</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"对象间的共享\"><a class=\"anchor\" href=\"#对象间的共享\">#</a> 对象间的共享</h4>\n<ul>\n<li>同类对象数据共享：静态数据成员</li>\n<li>同类对象功能共享：静态函数成员</li>\n<li>类与外部数据共享：友元</li>\n</ul>\n<h5 id=\"静态数据成员\"><a class=\"anchor\" href=\"#静态数据成员\">#</a> 静态数据成员</h5>\n<pre><code>* 用关键字`static`声明\n* 为该类的所有对象共享，静态数据成员具有静态生存期\n* 一般在类外初始化，用\\(::)来指明所属的类\n* C++11支持静态常量\\(`const`或`constexpr`修饰)类内初始化，此时类外仍可定义该静态成员，但不可再次初始化操作\n</code></pre>\n<p>静态成员举例</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//C++ 标准程序库的所有标识符都被声明在 std 命名空间内</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 外部接口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// 在构造函数中对 cout 累加，所有对象共同共同维护一个 count</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span>Point<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 复制构造函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tx <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\ty <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tcount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">showCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Object count:\"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 静态数据成员声明，用于记录点的个数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token double-colon punctuation\">::</span>Point<span class=\"token double-colon punctuation\">::</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 静态数据成员定义和初始化，使用类名限定</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tPoint <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Point A:\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">showCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出对象个数</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tPoint <span class=\"token function\">b</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Point B:\"</span> <span class=\"token operator\">&lt;&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tb<span class=\"token punctuation\">.</span><span class=\"token function\">showCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出对象个数</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>* 输出：</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>Point A:4,4 Object count:1</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>Point B:4,4 Object count:2</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"类的静态函数成员\"><a class=\"anchor\" href=\"#类的静态函数成员\">#</a> 类的静态函数成员</h5>\n<ul>\n<li>类外代码可以使用类名和作用域操作符来调用静态成员函数</li>\n<li>静态成员函数主要用于处理该类的静态数据成员，可以直接调用静态成员函数</li>\n<li>如果访问非静态成员，要通过对象来访问</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 静态函数成员，主函数可以直接调用查看 count</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Object count:\"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 静态数据成员声明，用于记录点的个数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> Point<span class=\"token double-colon punctuation\">::</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 静态数据成员定义和初始化，使用类名限定</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出对象个数</span></pre></td></tr></table></figure><h4 id=\"友元\"><a class=\"anchor\" href=\"#友元\">#</a> 友元</h4>\n<ul>\n<li>友元是 C++ 提供的一种破坏数据封装和数据隐藏的机制</li>\n<li>通过经一个模块声明为另一个模块的友元，一个模块能够引用到另一个模块中本被隐藏的信息</li>\n<li>可以使用友元函数和友元类</li>\n<li>为了确数据的完整性，及数据封装与隐藏的原则，建议尽量不适用或少使用友元</li>\n</ul>\n<h4 id=\"友元函数\"><a class=\"anchor\" href=\"#友元函数\">#</a> 友元函数</h4>\n<ul>\n<li>友元函数是在类声明中由关键字 friend 修饰说明的非成员函数，在它的函数体中能够通过对象名访问 private 和 protected 成员</li>\n<li>作用：增加灵活性，使程序员可以在封装和快速性方面做出合理选择</li>\n<li>访问对象中的成员必须通过对象名</li>\n</ul>\n<hr />\n<h5 id=\"使用友元函数计算两点间的距离\"><a class=\"anchor\" href=\"#使用友元函数计算两点间的距离\">#</a> 使用友元函数计算两点间的距离</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">float</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>Point<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> Point<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 友元函数，只要在类体中就行</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 私有函数成员</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">float</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>Point<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> Point<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tPoint <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"This distance is:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">/*This distance is:5*/</span></pre></td></tr></table></figure><h4 id=\"友元类\"><a class=\"anchor\" href=\"#友元类\">#</a> 友元类</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvicMgsRBhgayuYtLPvnzX9lIaCOw1eCP1BUAgJkgId0waWCYC4jW1HbjibibxCwibddWB8FXjXX4o9JQ/0?wx_fmt=jpeg\" alt=\"友元类举例\" title=\"友元类举例\" /></p>\n<hr />\n<p><code>类的友元关系是单向的</code> ：如果声明 B 类是 A 类的友元，B 类的成员函数就可以访问 A 类的私有和保护数据，但 A 类的成员函数却不能访问 B 类的私有，保护数据</p>\n<hr />\n<h4 id=\"共享数据的保护\"><a class=\"anchor\" href=\"#共享数据的保护\">#</a> 共享数据的保护</h4>\n<ul>\n<li>对于既需要共享，又需要防止改变的数据应该声明为常类型 (用 const 进行修饰)</li>\n<li>对于不改变对象状态的成员函数应该声明为常函数</li>\n</ul>\n<h4 id=\"常对象\"><a class=\"anchor\" href=\"#常对象\">#</a> 常对象</h4>\n<ul>\n<li>用 const 修饰的对象\n<ul>\n<li>使用 const 关键字说明的函数</li>\n<li>常成员函数不更新对象的数据成员</li>\n<li>常成员函数说明格式:\n<ul>\n<li>类型说明符 函数名 （参数表) const;</li>\n<li>这里，const 是函数类型的一个组成部分，因此在实现部分也要带 const 关键字</li>\n<li>const 关键字可以被用于参与对重载函数的区分</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>通过常对象只能调用它的常成员函数</li>\n<li>常数据成员\n<ul>\n<li>使用 const 说明的数据成员</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">R</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r2<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">r1</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">r2</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 常成员函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> r1<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">R</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> r1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">&lt;&lt;</span> r2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">R</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> r1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">&lt;&lt;</span> r2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tR <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">const</span> R <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tb<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用 void print () const</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"常数据成员\"><a class=\"anchor\" href=\"#常数据成员\">#</a> 常数据成员</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 在任何地方都不能赋值运算</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span><span class=\"token comment\">// 静态常数据成员</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//A::A (int i)&#123;a=1&#125;  // 不能进行赋值，只能写入初始化列表里面</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">A</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 写入初始化列表</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h4 id=\"常引用\"><a class=\"anchor\" href=\"#常引用\">#</a> 常引用</h4>\n<ul>\n<li>如果咋声明引用时用 const 修饰，被声明的引用就是常引用</li>\n<li>常引用所引用的对象不能被更新</li>\n<li>如果用常引用做形参，便不会意外地发生对实参的更改。常引用的声明形式</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> 类型说明符 <span class=\"token operator\">&amp;</span>引用名<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">float</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Point<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> Point<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 友元函数，只要在类体中就行</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 私有函数成员</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">float</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Point<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> Point<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "C++",
                "计算机科学",
                "编程语言"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Git/Git%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95/",
            "url": "https://www.blog.foryouos.cn/computer-science/Git/Git%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95/",
            "title": "Git使用语法",
            "date_published": "2023-02-23T04:28:05.000Z",
            "content_html": "<h3 id=\"git\"><a class=\"anchor\" href=\"#git\">#</a> Git</h3>\n<h4 id=\"删除分支\"><a class=\"anchor\" href=\"#删除分支\">#</a> 删除分支</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>分支名<span class=\"token operator\">></span></pre></td></tr></table></figure><h4 id=\"修改分支名\"><a class=\"anchor\" href=\"#修改分支名\">#</a> 修改分支名</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> <span class=\"token operator\">&lt;</span>原分支名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>新分支名<span class=\"token operator\">></span></pre></td></tr></table></figure><hr />\n<h4 id=\"查看简明状态说明\"><a class=\"anchor\" href=\"#查看简明状态说明\">#</a> 查看简明状态说明</h4>\n<ul>\n<li>git 目录中的文件状态包含：是否跟踪，是否修改，是否已存入暂存区</li>\n<li>参数的一个横杠表示缩写，两个横杠表示全程</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> status <span class=\"token parameter variable\">-s</span> <span class=\"token comment\"># 查看简明状态说明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> M README <span class=\"token comment\"># 已修改，但未暂存 (M 的位置靠右，红色)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> MM Rakefile <span class=\"token comment\"># 已修改，暂存后又作了修改（有暂存和未暂存)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> A lib/git.rb <span class=\"token comment\"># 新添加到暂存区，未提交</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> M lib/simplegit.rb <span class=\"token comment\">#已修改，已暂存</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ？？ LICENSE.txt <span class=\"token comment\">#新添加，未跟踪</span></pre></td></tr></table></figure><h4 id=\"忽略文件\"><a class=\"anchor\" href=\"#忽略文件\">#</a> 忽略文件</h4>\n<p>添加一个名为 <code>.gitignore</code>  的文件，列出要忽略的文件的模式</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>*.<span class=\"token punctuation\">[</span>oa<span class=\"token punctuation\">]</span> <span class=\"token comment\">#忽略以.o 或.a 结尾的文件 (一般这类文件在编译过程出现)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>*~     <span class=\"token comment\">#忽略以～结尾的文件 (一般是文本编辑软件保存的副本)</span></pre></td></tr></table></figure><h5 id=\"gitignore文件格式规范\"><a class=\"anchor\" href=\"#gitignore文件格式规范\">#</a>  <code>.gitignore</code>  文件格式规范</h5>\n<ul>\n<li>所有空行或者以 <strong>#</strong> 开头都会被 Git 忽略 (注释符号)</li>\n<li>可以使用标准的 glob 模式（shell 所使用的简化正则）匹配，它会递归整个工作区</li>\n<li>匹配模式可以以 (<strong>/</strong>) 开头防止递归</li>\n<li>以  (<strong>/</strong>)  结尾指定目录</li>\n<li>要忽略指定模式以外的文件或目录，可以在模式前加上叹号 (<strong>!</strong>) 取反</li>\n<li>星号 (*) 匹配零个或多个任意字符</li>\n<li>[ <code>abc</code> ] 匹配任何一个列在括号中的字符</li>\n<li>文件 (<strong>？</strong>) 只匹配一个任意一个字符</li>\n<li>[0-9] 表示匹配所有 0 到 9 的数字，在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配</li>\n<li>使用两个 (****<strong>) 表示匹配任意中间目录，比如 a/</strong>/z 可以匹配 a/z,a/b/z,a/b/c/z 等</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9naXRpZ25vcmU=\">详情</span><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>*.a   <span class=\"token comment\"># 忽略所有的.a 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">!</span>lib.a   <span class=\"token comment\"># 跟踪所有的 lib.a，基表你在前面忽略了.a 文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/TODO   <span class=\"token comment\"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>build/  <span class=\"token comment\"># 忽略任何目录下名为 build 的文件夹</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>doc/*.txt  <span class=\"token comment\"># 忽略 doc/notes.txt 但不忽略深层次的</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>doc/**/*.pdf  <span class=\"token comment\"># 忽略 doc/ 目录及其所有子目录下的.pdf 文件</span></pre></td></tr></table></figure><hr />\n<h4 id=\"查看修改的具体内容\"><a class=\"anchor\" href=\"#查看修改的具体内容\">#</a> 查看修改的具体内容</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token comment\"># 比较修改之前还没有暂存起来的变化内容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token parameter variable\">--staged</span> <span class=\"token comment\"># 查看已暂存的将要添加到下次提交里的内容</span></pre></td></tr></table></figure><p><code>注意</code> : <code>git status</code>  只能查看文件变化的状态，并不能查看具体修改了哪些内容。使用 <code>git diff</code>  可以查看具体变化的内容<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsY0YabUMSXt2xbpITduhdCdE1VrpZsiabp9K5nViaB8ugo6JqPXqL0VxXFzc2Z7kBBpa8yNQUicP0lg/0?wx_fmt=png\" alt=\"git diff\" title=\"git diff运行图\" /></p>\n<hr />\n<h4 id=\"查看提交历史\"><a class=\"anchor\" href=\"#查看提交历史\">#</a> 查看提交历史</h4>\n<p>不传入任何参数的默认情况先， <code>git log</code>  会按时间先后顺序列出所有的提交，最新的更新排在最上面</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> log</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> log <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-2</span> <span class=\"token comment\"># -p 显示差异，-2 显示最近的提交次数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> log <span class=\"token parameter variable\">--stat</span> <span class=\"token comment\"># 显示每次提交的差异统计</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#使用不同的默认格式展示提交历史</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#oneline 把每个提交放在一行显示，还有 short，full，fuller</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> log <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>oneline  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># --pretty=format:\"% h - % an,% ar:% s\" 定制记录的显示格式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> log <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>format:<span class=\"token string\">\"%h - %an,%ar:%s\"</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsY0YabUMSXt2xbpITduhdCK3V2TY33PTgJhlsYSgYfHGV4FcqynIOWknRnXUVxD9MM0RcxicRvxUA/0?wx_fmt=png\" alt=\"git log\" title=\"git log运行\" /><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyL0dpdC0lRTUlOUYlQkElRTclQTElODAtJUU2JTlGJUE1JUU3JTlDJThCJUU2JThGJTkwJUU0JUJBJUE0JUU1JThFJTg2JUU1JThGJUIyI3ByZXR0eV9mb3JtYXQ=\"> 常见的 format 选项</span><sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup></p>\n<hr />\n<h4 id=\"撤销操作\"><a class=\"anchor\" href=\"#撤销操作\">#</a> 撤销操作</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--amend</span>  <span class=\"token comment\">#重新提交，且只有一次提交记录</span></pre></td></tr></table></figure><h4 id=\"远程仓库中抓取与拉取\"><a class=\"anchor\" href=\"#远程仓库中抓取与拉取\">#</a> 远程仓库中抓取与拉取</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>get fetch <span class=\"token operator\">&lt;</span>remote<span class=\"token operator\">></span></pre></td></tr></table></figure><p>此命令只会将数据下载到本地仓库 -- 它并不会自动合并或者修改你当前的工作，必须手动将其合并</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> pull</pre></td></tr></table></figure><p>此命令会自动抓取后合并该远程分支到当前分支<br />\n默认情况下， <code>git clone</code>  会自动设置本地 master 分支跟踪克隆的远程仓库的 <code>master</code>  分支 (或其它名字的默认分支)。运行 <code>git pull</code>  通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支</p>\n<hr />\n<h4 id=\"打标签\"><a class=\"anchor\" href=\"#打标签\">#</a> 打标签</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> tag  <span class=\"token comment\">#完整标签列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-l</span> <span class=\"token string\">\"v2.0\"</span>  <span class=\"token comment\"># 只显示包含 v2.0 的标签。注意加星号 (*)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-list</span> <span class=\"token string\">\"v2.0\"</span></pre></td></tr></table></figure><ul>\n<li>轻量标签：本质上是将提交和存储到一个文件中 --- 没有保存任何其它信息</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> tag v1.4-lw  <span class=\"token comment\"># 不需要添加选项</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> show v1.4-lw  <span class=\"token comment\">#查看标签信息，没有任何额外信息</span></pre></td></tr></table></figure><ul>\n<li>附注标签：是存储在 Git 数据库中的一个完整对象，它们是可以被校验的，其中包含打标签者的名字，电子邮箱地址，日期时间，此外还有一个标签信息，并且可以使用 GNU Privacy Guard 签名并验证。通常会建议创建附注标签。</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-a</span> v1.4 <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"my version 1.4\"</span> <span class=\"token comment\"># -a 表示 add，-m 表示附件信息</span></pre></td></tr></table></figure><h4 id=\"共享标签\"><a class=\"anchor\" href=\"#共享标签\">#</a> 共享标签</h4>\n<p>git push 命令并不会传送标签到远程仓库服务器上，在创建完标签后必须显式地推送标签到贡献服务器上，这个过程就像共享远程分支一样</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> push origin v1.5 <span class=\"token comment\"># 显式地推送标签到远程仓库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--tags</span> <span class=\"token comment\">#一次性推送所有不在远程仓库上的标签</span></pre></td></tr></table></figure><h4 id=\"删除标签\"><a class=\"anchor\" href=\"#删除标签\">#</a> 删除标签</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-d</span> v1.4-lw  <span class=\"token comment\"># 删除一个轻量标签，但并不会从远程仓库移除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token operator\">&lt;</span>remote<span class=\"token operator\">></span> :refs/tags/v1.4-lw  <span class=\"token comment\">#更新远程仓库</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 第二行或者</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token operator\">&lt;</span>remote<span class=\"token operator\">></span> <span class=\"token parameter variable\">--delete</span> <span class=\"token operator\">&lt;</span>tagname<span class=\"token operator\">></span></pre></td></tr></table></figure><h4 id=\"命令别名\"><a class=\"anchor\" href=\"#命令别名\">#</a> 命令别名</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.co checkout</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.br branch</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.ci commit</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.st status</pre></td></tr></table></figure><hr />\n<h4 id=\"修改分支名-2\"><a class=\"anchor\" href=\"#修改分支名-2\">#</a> 修改分支名</h4>\n<p>首先保证本地代码是最新的</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> oldbranchName newbranchname <span class=\"token comment\">#修改本地分支名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push origin :oldbranchName  <span class=\"token comment\">#删除远程分支</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--delete</span> oldbranchName  <span class=\"token comment\">#或者删除远程分支</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#改名后的本地分支推送到远程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> push --set-uostream origin newbranchname</pre></td></tr></table></figure><hr />\n<ul>\n<li>Workspace ：工作区</li>\n<li>Index/Stage：暂存区</li>\n<li>Repository: 仓库区 (或本地仓库)</li>\n<li>Remote：远程仓库<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsY0YabUMSXt2xbpITduhdCmRbmErzicx7hkKfAXmOeNB9dOthFSKeicnDwLhzY23DpDaQkZIZbjvNQ/0?wx_fmt=png\" alt=\"Git命令\" title=\"git命令流程\" /></li>\n</ul>\n<hr />\n<h3 id=\"改名文件并将这个改名放入暂存区\"><a class=\"anchor\" href=\"#改名文件并将这个改名放入暂存区\">#</a> 改名文件并将这个改名放入暂存区</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">mv</span> <span class=\"token punctuation\">[</span>file-original<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>file-renamed<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><hr />\n<h3 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h3>\n<ul>\n<li><a href=\"https://git-scm.com/book/zh/v2\"><strong>GiT-book 中文</strong></a><sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NoYXJ0LnpoZW5nbGluZ2x1LmNuL3BhZ2VzLzYzNTA4OC8=\">Git 笔记</span><sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup></li>\n</ul>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9naXRpZ25vcmU=\">https://github.com/github/gitignore</span> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyL0dpdC0lRTUlOUYlQkElRTclQTElODAtJUU2JTlGJUE1JUU3JTlDJThCJUU2JThGJTkwJUU0JUJBJUE0JUU1JThFJTg2JUU1JThGJUIyI3ByZXR0eV9mb3JtYXQ=\">https://git-scm.com/book/zh/v2/Git - 基础 - 查看提交历史 #pretty_format</span> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3Yy\">https://git-scm.com/book/zh/v2</span> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cDovL2NoYXJ0LnpoZW5nbGluZ2x1LmNuL3BhZ2VzLzYzNTA4OC8=\">http://chart.zhenglinglu.cn/pages/635088/</span> <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "计算机科学",
                "Git分布式版本控制",
                "编程序言",
                "Git"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/C-%E6%B3%9B%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/C-%E6%B3%9B%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/",
            "title": "C++泛化程序设计",
            "date_published": "2023-02-23T04:01:09.000Z",
            "content_html": "<h4 id=\"泛型程序设计\"><a class=\"anchor\" href=\"#泛型程序设计\">#</a> 泛型程序设计</h4>\n<ul>\n<li>编程不依赖于具体数据类型的程序</li>\n<li>将算法从特定的数据结构中抽象出来，成为通用的 C++ 的模块为泛型程序设计奠定关键基础</li>\n</ul>\n<h4 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h4>\n<ul>\n<li>在 <code>C++ STL</code>  库中用 &quot;概念&quot; 来界定具备一定功能的数据类型\n<ul>\n<li>将 “可以比大小的所有数据类型 (有比较运算符)“这一概念记为 Comparable</li>\n<li>将” 具有共有的复制构造函数并可以用‘=’赋值的数据类型 “这一概念记为 Assignable</li>\n<li>将 “可以比大小，具有公有的复制构造函数并可以用’=‘赋值的所有数据类型” 这个概念记作 Sortable</li>\n</ul>\n</li>\n<li>对于两个不同的概念 A 和 B，如果概念 A 所需求的所有功能也是概念 B 所需求的功能，那么就说概念 B 是概念 A 的子概念\n<ul>\n<li>sortable 激是 Comparable 的子概念，也是 Assignable 的子概念</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"模型\"><a class=\"anchor\" href=\"#模型\">#</a> 模型</h4>\n<ul>\n<li>(model): 符合一个概念的数据类型称为该概念的模型\n<ul>\n<li>int 是 Comparable 概念的模型</li>\n<li>静态数组类型不是 Assignable 概念的模型 (无法用 &quot;=&quot; 给整个静态数组赋值 &quot;)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"用概念做模型参数名\"><a class=\"anchor\" href=\"#用概念做模型参数名\">#</a> 用概念做模型参数名</h4>\n<ul>\n<li>为概念赋予一个名称，并使用该名称作为模版参数名</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 表示 insertionSort 这样一个函数模版的原型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sortable</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">insertSort</span><span class=\"token punctuation\">(</span>Sortable a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbu9gl5iaXpZfp2frL7XicianeJicK9Nz6uMGxGSxUcoLpRlEfENRibf3S2jFia1qA04ORlHquAl1z3JEXCQ/0?wx_fmt=png\" alt=\"STL组件之间的关系\" title=\"STL组件之间的关系\" /></p>\n<h4 id=\"stl\"><a class=\"anchor\" href=\"#stl\">#</a>  <code>STL</code></h4>\n<ul>\n<li><code>STL</code> : 标准模板库 (Standard Template Library 简称 <code>STL</code> ) 提供了一些非常常用的数据结构和算法， <code>STL</code>  定义了一套概念体系，为泛化程序设计提供了逻辑基础</li>\n<li><code>STL</code>  中的各个类模版，函数模版的参数都是用这个体系概念来规定的</li>\n<li>使用 <code>STL</code>  模版，类型参数既可以是 <code>C++标准库</code> 中已有的类型，也可以是自己定义的类型 - 只要这些类型是所要求概念的模型</li>\n</ul>\n<h4 id=\"stl的基本组件\"><a class=\"anchor\" href=\"#stl的基本组件\">#</a>  <code>STL</code>  的基本组件</h4>\n<ul>\n<li>\n<p>容器 (container)</p>\n</li>\n<li>\n<p>迭代器 (iterator)</p>\n</li>\n<li>\n<p>函数对象 (function object)</p>\n</li>\n<li>\n<p>算法 (algorithms)</p>\n</li>\n</ul>\n<h4 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h4>\n<ul>\n<li>Iterators (迭代器) 是算法和容器的桥梁\n<ul>\n<li>将迭代器作为算法的参数，通过迭代器来访问容器而不是把容器直接作为算法的参数</li>\n</ul>\n</li>\n<li>将函数对象作为算法的参数而不是将函数所执行的运算作为算法的一部分</li>\n<li>使用 STL 中提供的或自定义的迭代器和函数对象，配合 STL 算法，可以组合出各种各样的功能</li>\n<li>迭代器泛化的指针</li>\n<li>提供了顺序访问容器中每个元素的方法</li>\n<li>可以使用 &quot;++&quot; 运算符来获得指向下一个元素的迭代器</li>\n<li>可以使用 &quot;*&quot; 运算符访问一个迭代器所指向的元素，如果元素类型是类或结构体，还可以使用 &quot;-&gt;&quot; 运算符来直接访问该元素的一个成员</li>\n<li>有些迭代器还支持通过 &quot;--&quot; 运算符获得指向上一个元素的迭代器</li>\n<li>有些迭代器是泛化的指针：指针也具有同样的特性，因此指针本身就是一种迭代器</li>\n<li>使用独立于 STL 容器的迭代器，需要包含头文件 &lt;iterator&gt;</li>\n</ul>\n<h4 id=\"容器\"><a class=\"anchor\" href=\"#容器\">#</a> 容器</h4>\n<ul>\n<li>容纳，包含一组元素的对象</li>\n<li>基本容器类模版\n<ul>\n<li>顺序容器</li>\n</ul>\n<blockquote>\n<p>array (数组),vector (向量),deque (双端队列),forward_list (单链表),list (列表)</p>\n</blockquote>\n<ul>\n<li>(有序) 关联容器</li>\n</ul>\n<blockquote>\n<p>set (集合),multiset (多重集合),map (映射),multimap (多重映射)</p>\n</blockquote>\n<ul>\n<li>无序关联容器</li>\n</ul>\n<blockquote>\n<p>unordered_set (无序集合),unordered_multiset (无序多重集合)<br />\n unordered_map (无序映射),unorder_multimap (无序多重映射)</p>\n</blockquote>\n</li>\n<li>容器适配器</li>\n</ul>\n<blockquote>\n<p>stack (栈),queue (队列),priority_queue (优先队列)</p>\n</blockquote>\n<ul>\n<li>使用容器，需要包含对应的头文件</li>\n</ul>\n<h4 id=\"函数对象\"><a class=\"anchor\" href=\"#函数对象\">#</a> 函数对象</h4>\n<ul>\n<li>一个行为类似函数的对象，对它可以像调用函数一样调用</li>\n<li>函数对象时泛化的函数：任何普通的函数和任何重载了 “()” 运算符的类的对象都可以作为函数对象使用</li>\n<li>使用 <code>STL</code>  的函数对象，需要包含头文件 <code>&lt;functional&gt;</code></li>\n</ul>\n<h4 id=\"算法举例transform-算法\"><a class=\"anchor\" href=\"#算法举例transform-算法\">#</a> 算法举例:transform 算法</h4>\n<ul>\n<li>transform 算法遍历 first 和 last 两个迭代器所指向的元素，</li>\n<li>将每个元素的值作为函数对象 op 的参数</li>\n<li>将 op 的返回值通过迭代器 result 顺序输出</li>\n<li>遍历完成后 result 迭代器指向的是输出的最后一个元素的下一个位置，transform 会将迭代器返回</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Inputlterator</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Outputlterator</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnaryFunction</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Outputlterator <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>InputLterator first<span class=\"token punctuation\">,</span>Inputlterator<span class=\"token punctuation\">,</span>Outputlterator result<span class=\"token punctuation\">,</span>UnaryFunction op<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>first<span class=\"token operator\">!=</span>last<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>first<span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token operator\">*</span>result <span class=\"token operator\">=</span> <span class=\"token function\">op</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"算法algorithms\"><a class=\"anchor\" href=\"#算法algorithms\">#</a> 算法 (algorithms)</h4>\n<ul>\n<li>STL 包含 70 多种算法\n<ul>\n<li>例如：排序算法，消除算法，计数算法，变换算法，置换算法和容器管理等</li>\n</ul>\n</li>\n<li>可以广泛用于不同的对象和内置的数据类型</li>\n<li>使用 STL 算法，需要包含头文件 &lt;algorithm&gt;</li>\n</ul>\n<h4 id=\"例从标准输入读入几个整数存入向量容器输出相反数\"><a class=\"anchor\" href=\"#例从标准输入读入几个整数存入向量容器输出相反数\">#</a> 例：从标准输入读入几个整数，存入向量容器，输出相反数</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span>\t\t<span class=\"token comment\">// 向量</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iterator></span>  <span class=\"token comment\">// 迭代器</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span>  <span class=\"token comment\">// 算法</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span> <span class=\"token comment\">// 函数对象</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 容器</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"## \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">negate</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 算法，negate 取相反数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"迭代器-2\"><a class=\"anchor\" href=\"#迭代器-2\">#</a> 迭代器</h4>\n<ul>\n<li>迭代器是算法和容器的桥梁\n<ul>\n<li>迭代器用作访问容器中的元素</li>\n<li>算法不直接操作容器中的数据，而是通过迭代器间接操作</li>\n</ul>\n</li>\n<li>算法和容器独立\n<ul>\n<li>添加新的算法，无需影响容器的实现</li>\n<li>添加新的容器，原有的算法也能适用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"输入迭代器和输出迭代器\"><a class=\"anchor\" href=\"#输入迭代器和输出迭代器\">#</a> 输入迭代器和输出迭代器</h4>\n<ul>\n<li>输入迭代器\n<ul>\n<li>istream_iterator&lt;T&gt;</li>\n<li>以输入流 (如 cin 为参数构造)</li>\n<li>可用 *(p++) 获取下一个输入的元素</li>\n</ul>\n</li>\n<li>输出流迭代器\n<ul>\n<li>ostream_iterator&lt;T&gt;</li>\n<li>构造时需要提供输出流 (如 cout)</li>\n<li>可用 (*p++)=x 将 x 输出到输出流</li>\n</ul>\n</li>\n<li>二者都属于适配器\n<ul>\n<li>适配器是用来为已有对象提供新的接口的对象</li>\n<li>输入流适配器和输出流适配器为流对象提供了迭代器的接口</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 从标准输入读入几个实数，分别输出它们的平方</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iterator></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 求平方的函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 从标准输入读入若干个实数，分别将它们的平方输出</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">istream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">istream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 头，尾，写入结果，函数处理</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 头：输入流迭代器，double， 关联到 cin</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 尾没有构造函数，不给为空，---- 指向输入流结束</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 写入结果:cout  \"\\t\" 两个输出项之间的分隔符</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 函数处理:square</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"迭代器的区别\"><a class=\"anchor\" href=\"#迭代器的区别\">#</a> 迭代器的区别</h4>\n<ul>\n<li>两个迭代器表示一个区间:[ <code>p1,p2</code> )  包含 p1 不包含 p2</li>\n<li>STL 算法常以迭代器的区间作为输入，传递输入数据</li>\n<li>合法的区间\n<ul>\n<li>p1 经过 n 次 (n&gt;0) 自增 (++) 操作后满足 p1==p2;</li>\n</ul>\n</li>\n<li>区间包含 p1，但不包含 p2</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "C++",
                "编程语言",
                "泛化程序设计",
                "computer-science"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/hello-world/",
            "url": "https://www.blog.foryouos.cn/hello-world/",
            "title": "Hello World",
            "date_published": "2023-02-22T13:19:34.468Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}