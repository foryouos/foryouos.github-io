{
    "version": "https://jsonfeed.org/version/1",
    "title": "瓶子的跋涉",
    "subtitle": "YuHeShui",
    "icon": "https://www.blog.foryouos.cn/images/favicon.ico",
    "description": "瓶子的跋涉 & 编程笔记",
    "home_page_url": "https://www.blog.foryouos.cn",
    "items": [
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/STL%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/STL%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/",
            "title": "STL顺序容器",
            "date_published": "2023-03-21T05:00:32.893Z",
            "content_html": "<h1 id=\"顺序容器\"><a class=\"anchor\" href=\"#顺序容器\">#</a> 顺序容器</h1>\n<blockquote>\n<p>容器库是 <code>类</code> 与 <code>算法</code> 的汇集</p>\n</blockquote>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<ul>\n<li>静态的连续数组 <code>array</code></li>\n<li>动态连续数组 <code>vector</code></li>\n</ul>\n<h2 id=\"array\"><a class=\"anchor\" href=\"#array\">#</a> array</h2>\n<h3 id=\"头文件\"><a class=\"anchor\" href=\"#头文件\">#</a> 头文件</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr></table></figure><h3 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>注意：当期长度为零时，array (N==0) 有特殊情况，此时 array.begin ()==array.end (), 并拥有某个唯一值，在零长亦可将 array 上调用 front 或 back () 是未定义的</p>\n</blockquote>\n<h3 id=\"元素访问\"><a class=\"anchor\" href=\"#元素访问\">#</a> 元素访问</h3>\n<ul>\n<li><code>at</code> : 访问 <code>指定</code> 的元素，同时进行越界检查</li>\n<li><code>operator[]</code> : 访问指定的元素</li>\n<li><code>front</code> : 访问 <code>第一个</code> 元素</li>\n<li><code>back</code> : 访问 <code>最后一个</code> 元素</li>\n<li><code>data</code> : 直接访问底层数组的指针，返回的指针使得返回 [data (),data ()+size ()] 始终是合法范围，即使容器为空 (此时 data () 不可解引用)。对于底层元素存储的指针，对于非空容器，返回的指针与首元素地址比较相等</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//array 数组元素访问</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"at(2)=\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"operator[2]=\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"首front=\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"尾back=\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//a.data 返回 array 首元素地址</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"data =\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 遍历数组</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin </code> : 访问指向起始的 <code>迭代器</code></li>\n<li><code>end / cend </code> ：返回指向末位的迭代器</li>\n<li><code>rbegin / crbegin</code>  ：返回指向起始的 <code>逆向</code> 迭代器</li>\n<li><code>rend / crend</code>  ： 返回指向末位的逆向迭代器<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/ORog4TEnkbuePicu1R2efjibjI98CKvwRyNZKMibnLGzAgA3jeOicpRUBu8ZP7KztbBHCBud16YU608lPDibewnMczg/0?wx_fmt=gif\" alt=\"迭代器区别\" title=\"迭代器区别\" /></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//array 的迭代器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 打印首元素</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; *a.begin() &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 打印所有元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//for_each(a.cbegin(), a.cend(),</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//\t[](int x)&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//\t\tcout &lt;&lt; x &lt;&lt; \" \";</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//\t&#125;);</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; \"\\n\";</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//// 不加 c</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//for_each(a.begin(), a.end(),</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">//\t[](int x)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//\t&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//\t\tcout &lt;&lt; x &lt;&lt; \" \";</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">//\t&#125;);</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; \"\\n\";</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 使用 while 正序</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">auto</span> first <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">auto</span> last <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">!=</span> last<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 逆序 r</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 使用 while</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">auto</span> first_r <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">auto</span> last_r <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first_r <span class=\"token operator\">!=</span>last_r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>first_r <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tfirst_r<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>1 2 3 4 5 6</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>6 5 4 3 2 1</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"容器\"><a class=\"anchor\" href=\"#容器\">#</a> 容器</h3>\n<ul>\n<li><code>empty</code>  : 检查容器是否为空，若为空 0, 否则 1</li>\n<li><code>size </code> : 返回容纳的元素数</li>\n<li><code>max_size </code> ：返回可容纳的最大元素数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tarray <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token operator\">></span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 判断是否为空</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> boolalpha<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把 bool 值显示为 true 或 false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a.empty() ： \"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"no.empty() ： \"</span> <span class=\"token operator\">&lt;&lt;</span> no<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 返回元素个数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a.size() :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 返回元素最大，由于 array 大小固定等于 size</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a.max_size() :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>a.empty() ： false</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>no.empty() ： true</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>a.size() :3</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>a.max_size() :3</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"操作\"><a class=\"anchor\" href=\"#操作\">#</a> 操作</h3>\n<ul>\n<li><code>fill</code> : 以指定值填充容器</li>\n<li><code>swap </code> : 交换内容</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">></span> b <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 判断是否为空</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> boolalpha<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把 bool 值显示为 true 或 false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a.empty() ： \"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 将所有元素用 2 填充</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tb<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 将 a 的元素与 b 元素交换</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 返回 a 元素个数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a.size() :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 返回 a 的所有元素</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"A数组:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">auto</span> first_ra <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">auto</span> last_ra <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first_ra <span class=\"token operator\">!=</span> last_ra<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>first_ra <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tfirst_ra<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 返回 b 元素个数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b.size() :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 返回 b 的所有元素</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">auto</span> first_rb <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">auto</span> last_rb <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"B数组:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first_rb <span class=\"token operator\">!=</span> last_rb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>first_rb <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tfirst_rb<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>a.empty () ： false</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>a.size () :3</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>A 数组：6 6 6</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>b.size () :3</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>B 数组：2 2 2</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"辅助类\"><a class=\"anchor\" href=\"#辅助类\">#</a> 辅助类</h3>\n<ul>\n<li><code>tuple_size(std::array)</code> : 提供用于编译时常量表达式访问 array 中元素数量的方法</li>\n<li><code>tuple_element&lt;std::array&gt;</code> : 获取 array 元素的类型。提供 tuple 接口，提供 array 元素类型编译时代下标访问</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 辅助类 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>T t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>tuple_size<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 能用于编译时</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> tuple_size<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>value <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tarray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">></span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span> arr <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>3</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"vector\"><a class=\"anchor\" href=\"#vector\">#</a> vector</h2>\n<h3 id=\"头文件-2\"><a class=\"anchor\" href=\"#头文件-2\">#</a> 头文件</h3>\n<blockquote>\n<p><code>vector</code>  是封装动态数组的顺序容器， <code>vector</code>  的存储是自动管理的，按需扩张收缩， <code>vector</code>  通产占用 <code>多余</code> 静态数组的空间，因此要分配更多内存以管理将来的增长。 <code>vector</code>  所用的方式不在每次插入元素时，而只在额外内存耗尽时重分配。分配的内存总量可用 <code>capacity()</code>  函数查询，可以通过调用 <code>shrink_to_fit()</code>  返回多出的内存给系统。重分配通常是性能上有开销的操作，如果元素数量已知，那么 reserve () 函数可用于消除重分配</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr></table></figure><h3 id=\"元素访问-2\"><a class=\"anchor\" href=\"#元素访问-2\">#</a> 元素访问</h3>\n<ul>\n<li><code>at</code>  ： 访问指定的元素，同时进行越界检查</li>\n<li><code>operator[]</code> ：访问指定的元素</li>\n<li><code>front</code> ：访问第一个元素</li>\n<li><code>back</code> ：访问之后一个元素</li>\n<li><code>data</code> ：直接访问底层数组</li>\n</ul>\n<h3 id=\"迭代器-2\"><a class=\"anchor\" href=\"#迭代器-2\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code> ：返回指向起始的迭代器</li>\n<li><code>end/cend</code> ：返回指向末位的迭代器</li>\n<li><code>rbegin/crbegin</code> : 返回指向起始的逆向迭代器</li>\n<li><code>rend/crend</code> : 返回指向末尾的逆向迭代器</li>\n</ul>\n<h3 id=\"容量\"><a class=\"anchor\" href=\"#容量\">#</a> 容量</h3>\n<ul>\n<li><code>empty</code> : 检查容器是否为空</li>\n<li><code>size</code> : 返回容纳的元素数</li>\n<li><code>max_size</code> : 返回可容纳的最大元素数 (根据系统或库实现限制的容器可保有的元素最大数量)，此值通常反应容器大小的理论极限</li>\n<li><code>reserve</code> : 预留存储空间</li>\n<li><code>capacity</code> : 返回当前存储空间能够容纳的元素数</li>\n<li><code>shrink_to_fit</code> ：通过释放未使用的内存减少内存的使用</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* project： vector 容器语法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 返回当前可容纳元素容量的理论最大值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Maximum size of a vector is :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">//capacity 返回容器当前已为之分配空间的元素数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"capacity size of a vector is :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 增加 vector 的容量到大约或等于 new_cap 的值，参数 vector 的新容量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//capacity 返回容器当前已为之分配空间的元素数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"New capacity size of a vector is :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\ta <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 请求移除未使用的容量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">shrink_to_fit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//capacity 返回容器当前已为之分配空间的元素数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Shrink capacity size of a vector is :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Maximum size of a vector is :4611686018427387903</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>capacity size of a vector is :0</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>New capacity size of a vector is :10</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Shrink capacity size of a vector is :4</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"修改器\"><a class=\"anchor\" href=\"#修改器\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清除内容</li>\n<li><code>insert</code> : 插入元素\n<ul>\n<li>参数；</li>\n<li><code>pos</code> : 将内容那个插入到它前面的迭代器</li>\n<li><code>value</code> : 要插入的元素值</li>\n<li><code>first,last</code> ：要插入的元素范围，不能是指向调用 insert 所用的容器中的迭代器</li>\n<li><code>ilist</code> ：要插入来源的 initializer_list</li>\n<li>注意：如果新的 size () 大于留的 capacity 就会导致 <code>重分配</code> ，如果新的 size () 大于 capacity ()，那么所有迭代器和引用都会失效，否则只有在插入点前的迭代器和引用会保持有效</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//project:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iterator></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 动态数组输出函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\". \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> x <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 创建动态数组</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">c1</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 插入元素</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 在 c1 受元素插入 200</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tit <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 将上面的两个值 it 初始位置插入两个 300</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tc1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">//it 已经是失效，提供新迭代器</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tit <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 创建 c2 数组</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 在 c1 中插入 it 的位置插入 c2 从 begin 到 end</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tc1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>1. 100 100 100</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>2. 200 100 100 100</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>3. 300 300 200 100 100 100</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>4. 300 300 400 400 200 100 100 100</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>*/</span></pre></td></tr></table></figure><hr />\n<ul>\n<li><code>emplace</code>  : 原位构造元素，直接与 <code>pos</code>  前插入元素到容器中</li>\n<li><code>push_back</code> : 将元素添加到容器 <code>末尾</code></li>\n<li><code>emplace_back</code> : 在容器末尾就地构造元素</li>\n</ul>\n<hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyString</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 普通构造函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyString<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    MyString<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyString<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 赋值函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> m_data<span class=\"token punctuation\">;</span><span class=\"token comment\">// 用于保存字符串</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 普通构造函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">MyString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        m_data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token operator\">*</span>m_data <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        m_data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>m_data<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"construct:\"</span> <span class=\"token operator\">&lt;&lt;</span> m_data <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// String 的析构函数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token class-name\">MyString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"deconstruct:\"</span> <span class=\"token operator\">&lt;&lt;</span> m_data <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> m_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token class-name\">MyString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyString<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>m_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    m_data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>m_data<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>m_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copy construct:\"</span> <span class=\"token operator\">&lt;&lt;</span> m_data <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">// 赋值函数</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>MyString<span class=\"token operator\">&amp;</span> MyString<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyString<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copy assignment\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> m_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>m_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    m_data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>m_data<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>m_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"对比push_back和emplace_back的效率\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"push_back\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>MyString<span class=\"token operator\">></span> vStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 预先分配，否则整个 vector 在容量不够的情况下重新分配内存</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        vStr<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">// 将元素增加到末尾</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        vStr<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"can ge ge blog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"emplace_back\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>MyString<span class=\"token operator\">></span> vStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token comment\">// 预先分配，否则整个 vector 在容量不够的情况下重新分配内存</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        vStr<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        vStr<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>对比 push_back 和 emplace_back 的效率</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>push_back</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>construct:can ge ge blog</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>copy construct:can ge ge blog</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>deconstruct:can ge ge blog</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>deconstruct:can ge ge blog</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>emplace_back</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>construct:hello world</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>deconstruct:hello world</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>*/</span></pre></td></tr></table></figure><blockquote>\n<p>从运行结果行， <code>emplace_back</code>  只调用一次构造和析构，其 <code>效率</code> 不言而喻</p>\n</blockquote>\n<hr />\n<ul>\n<li><code>erase</code>  : 擦除元素\n<ul>\n<li>移除位于 <code>pos</code>  的元素</li>\n<li>移除范围 <code>[first,last]</code>  中的元素</li>\n</ul>\n</li>\n<li><code>pop_back</code> : 移除莫末元素</li>\n<li><code>resize</code> : 改变容器中可存储元素的个数\n<ul>\n<li>参数:</li>\n<li><code>count</code> ：容量的大小</li>\n<li><code>value</code> ：用以初始化新元素的值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> el <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> el <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 增加大小，多余的赋值为 0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> el <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> el <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 添加到 7，赋值为 6</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> el <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> el <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>1 2 3</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>1 2 3 0 0</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>1 2 3 0 0 6 6</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>*/</span></pre></td></tr></table></figure><ul>\n<li><code>swap</code> : 交换内容</li>\n</ul>\n<blockquote>\n<p>将内容以及容器与 <code>other</code>  交换， <code>不</code> 在单独的元素上调用任何移动，复制或交换操作</p>\n</blockquote>\n<h2 id=\"deque\"><a class=\"anchor\" href=\"#deque\">#</a> deque</h2>\n<blockquote>\n<p><code>deque</code>  双端队列，允许在它的首尾快速插入语删除，在 <code>deque</code>  任一端插入或删除都不会使指向其余元素的指针或引用失效。 <code>deque</code>  的存储按需自动扩展及收缩</p>\n</blockquote>\n<h3 id=\"元素访问-3\"><a class=\"anchor\" href=\"#元素访问-3\">#</a> 元素访问</h3>\n<ul>\n<li><code>at</code> : 访问 <code>指定</code> 的元素，同时进行越界检查</li>\n<li><code>operator[]</code> : 访问指定的元素</li>\n<li><code>front</code> : 访问 <code>第一个</code> 元素</li>\n<li><code>back</code> : 访问 <code>最后一个</code> 元素</li>\n</ul>\n<h3 id=\"迭代器-3\"><a class=\"anchor\" href=\"#迭代器-3\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code> ：返回指向起始的迭代器</li>\n<li><code>end/cend</code> ：返回指向末位的迭代器</li>\n<li><code>rbegin/crbegin</code> : 返回指向起始的逆向迭代器</li>\n<li><code>rend/crend</code> : 返回指向末尾的逆向迭代器</li>\n</ul>\n<h3 id=\"容量-2\"><a class=\"anchor\" href=\"#容量-2\">#</a> 容量</h3>\n<ul>\n<li><code>empty</code> : 检查容器是否为空</li>\n<li><code>size</code> : 返回容纳的元素数</li>\n<li><code>max_size</code> : 返回可容纳的最大元素数 (根据系统或库实现限制的容器可保有的元素最大数量)，此值通常反应容器大小的理论极限</li>\n<li><code>shrink_to_fit</code> ：通过释放未使用的内存减少内存的使用</li>\n</ul>\n<h3 id=\"修改器-2\"><a class=\"anchor\" href=\"#修改器-2\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code>  : 清楚内容</li>\n<li><code>insert</code> : 插入元素</li>\n<li><code>emplace</code> ：原位构造元素</li>\n<li><code>erase</code> : 擦除元素</li>\n<li><code>push_back</code> ：将元素添加到容器末尾</li>\n<li><code>emplace_back</code> ：将容器末尾就地构造元素</li>\n<li><code>pop_back</code> : 移除末元素</li>\n<li><code>pop_front</code> ：移除首元素</li>\n<li><code>push_front</code> ：插入元素到容器起始</li>\n<li><code>emplace_front</code> ：在容器头部原位构造元素</li>\n<li><code>resize</code> : 改变容器中可存储元素的个数</li>\n<li><code>swap</code> : 交换内容</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tdeque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>5 1 2 3 4 5 6</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>1 2 3 4 5</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"forward_list\"><a class=\"anchor\" href=\"#forward_list\">#</a> forward_list</h2>\n<blockquote>\n<p><code>forward_list</code>  支持从容器中的 <code>任何位置</code> 快速插入和移除元素的容器，不支持快速随机访问。它实现为 <code>单链表</code> ，且实质上与其在 C 中实现相比无任何开销，与 list 相比，此容器不需要双向迭代中提供更有效利用空间的存储</p>\n</blockquote>\n<h3 id=\"元素访问-4\"><a class=\"anchor\" href=\"#元素访问-4\">#</a> 元素访问</h3>\n<ul>\n<li><code>front</code> : 访问第一个元素</li>\n</ul>\n<h3 id=\"迭代器-4\"><a class=\"anchor\" href=\"#迭代器-4\">#</a> 迭代器</h3>\n<ul>\n<li><code>before_begin\\cbefore_begin</code> : 返回指向第一个元素之前的迭代器</li>\n<li><code>begin/cbegin</code> : 返回指向起始的迭代器</li>\n<li><code>end/cend</code> : 返回指向末位的迭代器</li>\n</ul>\n<h3 id=\"容量-3\"><a class=\"anchor\" href=\"#容量-3\">#</a> 容量</h3>\n<ul>\n<li>empty: 检查容器是否为空</li>\n<li>max_size: 返回可容纳的最大元素数</li>\n</ul>\n<h3 id=\"修改器-3\"><a class=\"anchor\" href=\"#修改器-3\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清楚内容</li>\n<li><code>insert_after</code> : 在某个元素后插入新元素\n<ul>\n<li>参数:</li>\n<li><code>pos</code> : 内容将其插入到其后的迭代器</li>\n<li><code>value</code> : 要插入的元素值</li>\n<li><code>count</code> : 要插入的副本数</li>\n<li><code>first,last</code> ：要插入的元素范围</li>\n<li><code>ilist</code> : 插入值来源 initializer_list</li>\n</ul>\n</li>\n<li><code>emplace_after</code> ：在元素后原位构造元素</li>\n<li><code>erase_after</code> ：擦除元素后的元素\n<ul>\n<li>参数；</li>\n<li><code>pos</code> : 指向前驱要移除元素的迭代器</li>\n<li><code>first,last</code>  要移除的元素范围</li>\n</ul>\n</li>\n<li><code>push_front</code> : 插入元素到容器起始</li>\n<li><code>emplace_front</code> ：在容器头部构造元素</li>\n<li><code>pop_front</code> : 移除首元素</li>\n<li><code>resize</code> : 改变容器中可存储元素的个数</li>\n<li><code>swap</code> : 交换内容</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;forward_list></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 重载输出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> forward_list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'['</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">char</span> comma<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">,</span><span class=\"token char\">' ,'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'\\0'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\ts <span class=\"token operator\">&lt;&lt;</span> comma <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcomma<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">', '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> s <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">']'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tforward_list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> words<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"the\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"forgurt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"alse\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cursed\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words:\"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">auto</span> beginIn <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>beginIn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"strawberry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// insert_after (3)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">auto</span> anotherIt <span class=\"token operator\">=</span> beginIn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token operator\">++</span>anotherIt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tanotherIt <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>anotherIt<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"strawberry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// insert_after (4)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> V <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tanotherIt <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>anotherIt<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// insert_after (5)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>anotherIt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"jackfruit\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kiwifruit\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lime\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mango\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 更改元素个数</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 移除首元素</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 从容器中移除指定元素</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">erase_after</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_after</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"words: \"</span> <span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token comment\">// 清除元素</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\twords<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>words:[the ,forgurt ,is ,alse ,cursed]</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>words: [the ,strawberry ,strawberry ,strawberry ,forgurt ,is ,alse ,cursed]</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>words: [the ,strawberry ,strawberry ,strawberry ,apple ,banana ,cherry ,forgurt ,is ,alse ,cursed]</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>words: [the ,strawberry ,strawberry ,strawberry ,apple ,banana ,cherry ,jackfruit ,kiwifruit ,lime ,mango ,forgurt ,is ,alse ,cursed]</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>words: [the ,strawberry ,strawberry ,strawberry ,apple ,banana]</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>words: [strawberry ,strawberry ,strawberry ,apple ,banana]</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>words: [strawberry ,strawberry ,apple ,banana]</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>words: [strawberry ,hello ,strawberry ,apple ,banana]</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"操作-2\"><a class=\"anchor\" href=\"#操作-2\">#</a> 操作</h3>\n<ul>\n<li><code>merge</code> : 合并两个已排序列表，链表以升序排序，不复制元素，并且操作后容器 other 会变 <code>为空</code> ，</li>\n<li><code>splice_afte</code> r: 从另一个 forward_list 移动元素\n<ul>\n<li>参数:</li>\n<li><code>pos</code> ：指向将插入内容到其后的元素的迭代器</li>\n<li><code>other</code> : 移动内容来源的另一个容器</li>\n<li><code>it</code>  指向从 other 移动到 * this 的元素的迭代器的前驱迭代器</li>\n<li><code>first,last</code> ，从 other 移动到 * this 的元素范围</li>\n</ul>\n</li>\n<li><code>remove/remove_if</code> : 移除满足特定标准的元素\n<ul>\n<li>参数:</li>\n<li><code>value</code>  - 要移除的元素的值</li>\n<li><code>p</code>  若应移除该元素则返回 true 的一元谓词</li>\n</ul>\n</li>\n<li><code>reverse</code> : 将该链表的所有元素顺序反转</li>\n<li><code>unique</code> : 删除连续的重复元素</li>\n<li><code>sort</code> : 对元素进行排序</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;forward_list></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;list></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> ostr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> forward_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> i <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tostr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> ostr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tforward_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tforward_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tforward_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">66</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 对列表排序</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tlist2<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"list1\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"list2\"</span> <span class=\"token operator\">&lt;&lt;</span> list2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 合并后 list2 为空</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"合并后\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">splice_after</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list3<span class=\"token punctuation\">,</span>list3<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list3<span class=\"token punctuation\">.</span><span class=\"token function\">cend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"插入后\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 移除满足条件的值</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 移除等于 1 的</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"移除1后\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 移除 n 大于 10 的</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">remove_if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> n <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"移除大于10后\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 将所有元素反转</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"列表反转后：\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 删除重复元素</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"去重后：\"</span> <span class=\"token operator\">&lt;&lt;</span> list1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>list1 1 3 3 3 5 9 9</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>list2 2 3 4 5 7 8</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>合并后 1 2 3 3 3 3 4 5 5 7 8 9 9</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>插入后 1 99 33 2 3 3 3 3 4 5 5 7 8 9 9</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>移除 1 后 99 33 2 3 3 3 3 4 5 5 7 8 9 9</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>移除大于 10 后 2 3 3 3 3 4 5 5 7 8 9 9</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>列表反转后： 9 9 8 7 5 5 4 3 3 3 3 2</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>去重后： 9 8 7 5 4 3 2</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>*/</span></pre></td></tr></table></figure><hr />\n<h2 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> list</h2>\n<blockquote>\n<p>支持 <code>常量</code> 时间从容器任何位置插入和移除元素的容器。它通常实现为双向链表</p>\n</blockquote>\n<h3 id=\"元素访问-5\"><a class=\"anchor\" href=\"#元素访问-5\">#</a> 元素访问</h3>\n<ul>\n<li><code>front</code> : 访问第一个元素</li>\n<li><code>back</code> : 访问最后一个元素</li>\n</ul>\n<h3 id=\"迭代器-5\"><a class=\"anchor\" href=\"#迭代器-5\">#</a> 迭代器</h3>\n<ul>\n<li><code>begin/cbegin</code> : 返回指向起始的迭代器</li>\n<li><code>end/cend</code>  : 返回指向末尾的迭代器</li>\n<li><code>rbegin/crbegin</code> : 返回指向起始的逆向迭代器</li>\n<li><code>rend/crend</code> : 返回指向末尾的逆向迭代器</li>\n</ul>\n<h3 id=\"容量-4\"><a class=\"anchor\" href=\"#容量-4\">#</a> 容量</h3>\n<ul>\n<li><code>empty</code> : 检查容器是否为空</li>\n<li><code>size</code> : 返回容纳的元素数</li>\n<li><code>max_size</code> : 返回可容纳的最大元素数</li>\n</ul>\n<h3 id=\"修改器-4\"><a class=\"anchor\" href=\"#修改器-4\">#</a> 修改器</h3>\n<ul>\n<li><code>clear</code> : 清楚内容</li>\n<li><code>insert</code> : 插入元素</li>\n<li><code>emplace</code> ：原位构造元素</li>\n<li><code>erase</code> ：擦除元素</li>\n<li><code>push_back</code> : 在元素添加到容器末尾</li>\n<li><code>emplace_back</code> ：在容器末尾就地构造元素</li>\n<li><code>pop_back</code> ；移除末元素</li>\n<li><code>push_front</code> : 插入元素到容器起始</li>\n<li><code>emplace_front</code> ：在容器头部构造元素</li>\n<li><code>pop_front</code> : 移除首元素</li>\n<li><code>resize</code> : 改变容器中可存储元素的个数</li>\n<li><code>swap</code> : 交换内容</li>\n</ul>\n<h3 id=\"操作-3\"><a class=\"anchor\" href=\"#操作-3\">#</a> 操作</h3>\n<ul>\n<li><code>merge</code> : 合并 <code>两个已排序</code> 列表</li>\n<li><code>splice</code> : 从另一个 list 中移动元素</li>\n<li><code>remove/remove_if</code> : 移除满足特定标准的元素</li>\n<li><code>reverse</code> : 将该链表的所有元素顺序 <code>反转</code></li>\n<li><code>unique</code> : 删除连续的 <code>重复</code> 元素</li>\n<li><code>sort</code> : 对元素进行排序</li>\n</ul>\n<p>参考资料:<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2NvbnRhaW5lcg==\">cppreference</span></p>\n",
            "tags": [
                "计算机科学",
                "C++",
                "汇编与STl新特征",
                "C++",
                "计算机科学",
                "STL"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/life/travel/%E4%B8%87%E5%B2%81%E5%B1%B1%E4%B9%8B%E6%97%85/",
            "url": "https://www.blog.foryouos.cn/life/travel/%E4%B8%87%E5%B2%81%E5%B1%B1%E4%B9%8B%E6%97%85/",
            "title": "开封万岁山之旅",
            "date_published": "2023-03-19T23:50:00.000Z",
            "content_html": "<h1 id=\"开封之旅\"><a class=\"anchor\" href=\"#开封之旅\">#</a> 开封之旅</h1>\n<blockquote>\n<p><code>开封</code>  -&gt; <code>八</code> 朝古都，我的家乡，这里不仅有 <code>清明上河园</code> ， <code>包公祠</code> ， <code>开封府</code> ，还有 <code>万岁山武侠城</code> ， <code>中国翰园</code> ， <code>鼓楼夜市</code> ， <code>西司夜市</code> ， <code>龙亭</code> ， <code>大相国寺</code> 等...</p>\n</blockquote>\n<h2 id=\"出发\"><a class=\"anchor\" href=\"#出发\">#</a> 出发</h2>\n<p>作为和欣欣旅行的 <code>第二站</code> ，峰回路转又回到了自己的 <code>家乡</code> ，很多地方算得上是 <code>故地重游</code> ，但和欣欣一起 <code>感觉</code> 还是十分的特别。</p>\n<p>见面的想吓唬，不仅是缓解尴尬，也是内心的 <code>童趣</code> ，反正就是挺有意思的，也或许我们需要在某些场合在亲密关系中表现出隐藏在内心深处真实无忧无虑的自己。</p>\n<p>每次游玩也想去寻求它的 <code>意思</code> ，或是自由，或是放松，或是感受一座城市不一样的 <code>风土人情</code> ，或是体验我们在电视剧里看到但未成感受到的风景和趣事。</p>\n<h2 id=\"旅途\"><a class=\"anchor\" href=\"#旅途\">#</a> 旅途</h2>\n<blockquote>\n<p>用照片和视频去记录生活的碎片点滴<br />\n有途中的三月桃花雪<br />\n有万岁山的演唱会<br />\n有打铁花表演<br />\n有翰园山顶的邂逅<br />\n有船头的日落<br />\n有龙亭的庄严<br />\n有大相国寺的庄重<br />\n也有市井路边的饮食<br />\n更美好的你</p>\n</blockquote>\n<h2 id=\"启程\"><a class=\"anchor\" href=\"#启程\">#</a> 启程</h2>\n<p><div class=\"media-container\"><div class=\"player\" data-type=\"video\" data-src='[{\"name\":\"旅行记录\",\"url\":\"https://s138.ananas.chaoxing.com/video/fb/35/53/ead1480b90f8fb35d8f381d3aeb4944e/sd.mp4?at_=1679393695527\"},{\"name\":\"打铁花精彩版\",\"url\":\"https://s138.ananas.chaoxing.com/video/54/47/ff/2b43035323b9e6b530edd8a1c96762f4/sd.mp4?at_=1679382875178\"},{\"name\":\"《演员》\",\"url\":\"https://s138.ananas.chaoxing.com/video/c5/cf/65/7bf8c563a0ac7e368143a30b2839ed06/sd.mp4?at_=1679382171600\"},{\"name\":\"《丑八怪》\",\"url\":\"https://s138.ananas.chaoxing.com/video/0b/f8/b3/44017eebeb7dc6c52ef10958e1ca89d2/sd.mp4?at_=1679382769501\"}]'></div></div></p>\n<h2 id=\"回忆\"><a class=\"anchor\" href=\"#回忆\">#</a> 回忆</h2>\n<blockquote>\n<p>欣欣的个人感悟，确实也让我十分的感动。<br />\n第二天欣欣发烧，仍然陪着我一起去，确实不易。<br />\n当然身体是最重要的，也是下次出发准备所必须的。<br />\n或许下次在长时间心理准备的基础上，能有更好的 &quot;牡丹&quot; 之行。</p>\n</blockquote>\n<p><img data-src=\"https://i.imgtg.com/2023/03/21/9K3ob.png\" alt=\"分割线\" /></p>\n",
            "tags": [
                "生活记录",
                "旅行",
                "生活记录"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-3/jsoncpp%E5%A4%84%E7%90%86Json%E6%95%B0%E6%8D%AE/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-3/jsoncpp%E5%A4%84%E7%90%86Json%E6%95%B0%E6%8D%AE/",
            "title": "jsoncpp开源库",
            "date_published": "2023-03-16T01:20:43.000Z",
            "content_html": "<h1 id=\"jsoncpp\"><a class=\"anchor\" href=\"#jsoncpp\">#</a> JSONcpp</h1>\n<h2 id=\"开发环境配置\"><a class=\"anchor\" href=\"#开发环境配置\">#</a> 开发环境配置</h2>\n<h3 id=\"现成版百度网盘\"><a class=\"anchor\" href=\"#现成版百度网盘\">#</a> 现成版百度网盘</h3>\n<p><a href=\"%E9%93%BE%E6%8E%A5%EF%BC%9Ahttps://pan.baidu.com/s/1-DjqbRVVSmDizcD8wbEGFg?pwd=5213\" title=\"jsoncpp现成配置环境VS2022开发环境x64\">jsoncpp 现成配置环境 VS2022 开发环境 x64</a></p>\n<blockquote>\n<p>链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMS1EanFiUlZWU21EaXpjRDh3YkVHRmc/cHdkPTUyMTM=\">https://pan.baidu.com/s/1-DjqbRVVSmDizcD8wbEGFg?pwd=5213</span> 提取码：5213</p>\n</blockquote>\n<h3 id=\"环境配置版\"><a class=\"anchor\" href=\"#环境配置版\">#</a> 环境配置版</h3>\n<h4 id=\"下载jsoncpp\"><a class=\"anchor\" href=\"#下载jsoncpp\">#</a> 下载 Jsoncpp</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/open-source-parsers/jsoncpp</pre></td></tr></table></figure><h4 id=\"cmake进行编译\"><a class=\"anchor\" href=\"#cmake进行编译\">#</a> cmake 进行编译</h4>\n<h4 id=\"下载cmake\"><a class=\"anchor\" href=\"#下载cmake\">#</a> 下载 cmake</h4>\n<p>cmake 下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbWFrZS5vcmcvZG93bmxvYWQv\">链接</span><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup><br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYA1hiaSsHibx5wxf3SZa7oFTibVcJEsd8ia6iampzdjrRHvjGRO6duSHN7gg/0?wx_fmt=png\" alt=\"cmake下载文件\" title=\"cmake下载文件\" /></p>\n<h4 id=\"解析出动态\"><a class=\"anchor\" href=\"#解析出动态\">#</a> 解析出动态</h4>\n<ul>\n<li>安装 <code>cmake</code>  默认安装即可</li>\n<li>将 <code>jsoncpp所在文件夹，以及生成</code>  jsoncpp.dll 和 jsoncpp.lib` 等动态文件的文件夹<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYNbweGGibvwcvUknfulqk893zicuQ5tWeCGqF4YC7xWoXiaZyKoP9xw5iag/0?wx_fmt=png\" alt=\"填入jsoncpp文件夹\" title=\"填入jsoncpp所在文件夹\" /></li>\n<li>第一个为 VS 的版本，第二个默认 <code>x64</code>  不用填<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYY8pibHGcUPtWKamg0EEZ8OM02SntdWsiaoIg5BQrsR0asicqrfZjBQZPLQ/0?wx_fmt=png\" alt=\"版本配置\" title=\"版本配置\" /></li>\n</ul>\n<hr />\n<ul>\n<li>配置不动，点击 <code>生成</code> 即可，会发现生成文件逐步完成<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYS1icpcckPtrk3tHj3wfibrcNXOLOz3sRVWxF34TLlYyJxNlwDKoBI4jA/0?wx_fmt=png\" alt=\"生成\" title=\"生成文件\" /></li>\n</ul>\n<hr />\n<ul>\n<li><code>打开</code> 生成文件的项目<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYkpUxzHgBjy7k0DcmVXkEGic5oWhiaBPb1YZXFhOOxcgAIeoJa1CfazRg/0?wx_fmt=png\" alt=\"打开生成文件的项目\" title=\"打开生成文件的项目\" /></li>\n</ul>\n<hr />\n<ul>\n<li>将 <code>jsoncpp_dll</code>  设置为 <code>启动项</code> ，并右键点击第一个 <code>生成</code> 即可完成静态文件的生成<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYG3ogN50qSibbnl2VWwonazExaDkWjJ0SSiceW3PMdibLoYxicAbcmVMm8g/0?wx_fmt=png\" alt=\"静态文件生成\" title=\"静态文件的生成\" /></li>\n</ul>\n<hr />\n<ul>\n<li>可以在 C 盘 <code>新建</code> 一个存放环境的位置 cpp</li>\n<li>将下载 <code>clone</code>  的 jsoncpp 文件下的 include 文件全部放入 C 盘文件夹 cpp 中 (此文件为 jsoncpp 的头文件)</li>\n<li>将生成文件之后项目文件夹中 <code>bin\\Debug</code>  下的 <code>jsoncpp.dll</code>  复制到 C 盘文件夹 cpp 下与 <code>include同级</code> 的 <code>lib</code>  文件夹 (自己创建) 下</li>\n<li>将生成文件之后项目文件加中 lib\\Debug 下的 <code>jsoncpp.lib</code>  复制到 C 盘 cpp 文件夹 <code>lib</code>  文件下下<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYrbJL3c8nVpqefTuicABAR2Fb76kFpySaiax770ic3z70AOhN3N5Wia1b2w/0?wx_fmt=png\" alt=\"文件夹\" title=\"文件夹存放\" /></li>\n</ul>\n<hr />\n<h4 id=\"vs2022环境配置\"><a class=\"anchor\" href=\"#vs2022环境配置\">#</a> VS2022 环境配置</h4>\n<ul>\n<li>右键点击项目进入属性配置<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYcH0ia4wcLI7ozIMmXYqmicIylF3QPrPoylev5IXNial7FjWjX2T0PQLnA/0?wx_fmt=png\" alt=\"VS配置jsoncpp\" title=\"VS配置jsoncpp\" /></li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYpUO34ZBQQ4RMDTcQflVoXgRQp6icfFDZSfPy8b2eMNz7SMyd7W4ibVdA/0?wx_fmt=png\" alt=\"VS配置jsoncpp\" title=\"VS配置jsoncpp\" /></p>\n<hr />\n<h4 id=\"最后配置\"><a class=\"anchor\" href=\"#最后配置\">#</a> 最后配置</h4>\n<blockquote>\n<p>运行下面的实例代码很可能出现 “运行程序无法启动的问题”, 将 (刚才 C 盘中) <code>jsoncpp.dll</code>  文件复制到 <code>main.cpp</code>  对应的资源文件夹下即可<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbt72TibPibqUOnXvuG7dQ3WYYRjfdyU261d0YPzGD4Of8RlfQibjrGeLMKPliaicqhnKDv90PZVZuFfhFA/0?wx_fmt=png\" alt=\"VS运行最后配置\" /></p>\n</blockquote>\n<h2 id=\"实例代码\"><a class=\"anchor\" href=\"#实例代码\">#</a> 实例代码</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;json/json.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span> </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> Json<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 对于 Json 数组而言，内部的顺序是有序的，这个顺序就是添加数据的顺序</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">writeJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 定义 Value 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Value root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 使用 append 方法向 Value 包装器 li 填充数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    root<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"luffy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    root<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    root<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token number\">170</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    root<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 又定义一个 subArray 的 Value 对象</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Value subArray<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    subArray<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ace\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    subArray<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sabo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 将 subArray 对象增加到 root 里面</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    root<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>subArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    Value obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 定义键值对</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    obj<span class=\"token punctuation\">[</span><span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"man\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    obj<span class=\"token punctuation\">[</span><span class=\"token string\">\"girlfriend\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hancock\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 将 obj 对象的键值对增加到 root 里面</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    root<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 对上面数据格式序列化使用 toStyledString 方法得到带格式的字符串</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    string json <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">toStyledString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 得到不带格式的字符串</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    FastWriter w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 通过 write 方法得到不带换行符的字符串   </span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    string json <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 写文件</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">//write  ->  ostream </span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">//read   ->  ifstream   </span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 将 json 数据写入 test.json</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    ofstream <span class=\"token function\">ofs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 写入格式化后带格式的字符串</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    ofs <span class=\"token operator\">&lt;&lt;</span> json<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 关闭文件</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    ofs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">/* 保存到的 json 数据</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>[</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    \"luffy\",</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    19,</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    170,</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    false,</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    [</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        \"ace\",</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        \"sabo\"</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    ],</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        \"girlfriend\" : \"Hancock\",</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        \"sex\" : \"man\"</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>]</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">readJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 读，打开 test.json</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    ifstream <span class=\"token function\">ifs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    Reader rd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    Value root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">// 将 json 数据解析到 root 里面</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    rd<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>ifs<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">// 判断解析的 root value 类是否是 Array</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">//size 方法判断</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            Value item <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token comment\">// 对类型进行判断，并对对应的类型进行输出</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">isInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">asInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ,\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ,\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">isBool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">asBool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ,\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                    cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                <span class=\"token comment\">//Return a list of the member names.</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                Value<span class=\"token double-colon punctuation\">::</span>Members keys <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getMemberNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    cout <span class=\"token operator\">&lt;&lt;</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token function\">writeJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json写入完毕\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token function\">readJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"具体用法\"><a class=\"anchor\" href=\"#具体用法\">#</a> 具体用法</h2>\n<h3 id=\"声明命名空间\"><a class=\"anchor\" href=\"#声明命名空间\">#</a> 声明命名空间</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> Json<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"jsoncpp的三个类\"><a class=\"anchor\" href=\"#jsoncpp的三个类\">#</a> jsoncpp 的三个类</h3>\n<h4 id=\"value类\"><a class=\"anchor\" href=\"#value类\">#</a>  <code>Value类</code></h4>\n<blockquote>\n<p><code>Value类</code> ：封装 <code>Json</code>  支持的所有类型，方便后序处理数据</p>\n</blockquote>\n<h5 id=\"value检测类型\"><a class=\"anchor\" href=\"#value检测类型\">#</a> Value 检测类型</h5>\n<blockquote>\n<p>使用 <code>Value.isNull()</code>  判断是够为空，输出 <code>bool值</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isBool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isInt64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isUInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isUInt64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isIntegral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isNumeric</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"将value转换为对应类型\"><a class=\"anchor\" href=\"#将value转换为对应类型\">#</a> 将 <code>Value</code>  转换为 <code>对应类型</code></h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Int <span class=\"token function\">asInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  UInt <span class=\"token function\">asUInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>JSON_HAS_INT64<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Int64 <span class=\"token function\">asInt64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  UInt64 <span class=\"token function\">asUInt64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// if defined(JSON_HAS_INT64)</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  LargestInt <span class=\"token function\">asLargestInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  LargestUInt <span class=\"token function\">asLargestUInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token function\">asFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">double</span> <span class=\"token function\">asDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">bool</span> <span class=\"token function\">asBool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"fastwriter类\"><a class=\"anchor\" href=\"#fastwriter类\">#</a> FastWriter 类</h4>\n<blockquote>\n<p>将 <code>Value</code>  对象中的数据序列化为 <code>字符串</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string Json<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">FastWriter</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Value<span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>将数据格式化，不带换行符，编程单行</li>\n</ul>\n<h4 id=\"reader类\"><a class=\"anchor\" href=\"#reader类\">#</a> Reader 类</h4>\n<blockquote>\n<p>反序列化，将 <code>json字符串</code> 解析为 <code>Value类型</code></p>\n</blockquote>\n<h5 id=\"parse方法\"><a class=\"anchor\" href=\"#parse方法\">#</a>  <code>parse</code>  方法</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> Json<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Reader</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> decument<span class=\"token punctuation\">,</span>Value<span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span> collectComments<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数:</p>\n<ul>\n<li><code>document:json</code>  格式字符串， <code>打开</code> 的 json 文件</li>\n<li>root：传出参数， <code>存储</code> 了 json 字符串 <code>解析</code> 出的数据</li>\n<li>collectComments：是否保存 <code>注释信息</code> ，默认 <code>True</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> beginDoc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> endDoc<span class=\"token punctuation\">,</span> Value<span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span> collectComments <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数：</p>\n<ul>\n<li>bneginDoc 和 endDoc <code>指针定位</code>  json 字符串，解析 <code>部分</code>  json 字符串</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//brief Parse from input stream.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">//see Json::operator>>(std::istream&amp;, Json::Value&amp;).</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>IStream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> Value<span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> collectComments <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbWFrZS5vcmcvZG93bmxvYWQv\">https://cmake.org/download/</span> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "计算机科学",
                "C++",
                "C++开源库",
                "C++",
                "计算机科学",
                "数据库",
                "Json"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-3/C%E5%92%8CcppMySQL%20API%E8%B0%83%E7%94%A8/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-3/C%E5%92%8CcppMySQL%20API%E8%B0%83%E7%94%A8/",
            "title": "C和C++调用MySQL API",
            "date_published": "2023-03-14T14:20:43.000Z",
            "content_html": "<h1 id=\"c-mysql-api详解\"><a class=\"anchor\" href=\"#c-mysql-api详解\">#</a> C MySQL API 详解</h1>\n<h2 id=\"普通调用\"><a class=\"anchor\" href=\"#普通调用\">#</a> 普通调用</h2>\n<h3 id=\"开发环境\"><a class=\"anchor\" href=\"#开发环境\">#</a> 开发环境</h3>\n<blockquote>\n<p>需要引用头文件 <code>#include &lt;mysql.h&gt;</code></p>\n</blockquote>\n<ul>\n<li>默认已经安装了 MySQL 环境</li>\n<li>配置 VS2022 项目属性<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv2VGCVVXKvuxwgrnANSZyHqeZDCa87ibzcZwLibvE23rslmo9ORjmBy7vQQDJr6gMp1xthYEFriaA6w/0?wx_fmt=png\" alt=\"MySQL开发环境目录地址\" title=\"MySql系统安装目录以及需要的文件夹\" />\n<ul>\n<li>右键项目，进入属性</li>\n<li>需要在 <code>属性</code> 的 VC++ 目录中包含目录和引用目录中分别添加 MySQL 安装文件夹下的 include 文件夹和 lib 文件夹<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv2VGCVVXKvuxwgrnANSZyHP6Mcv1GtEglB2cIRmn0M0j1ia3WUlQg97oAXkPUC68bWMbftWD3GTBA/0?wx_fmt=png\" alt=\"VS2022属性配置\" title=\"VS2022属性配置\" /></li>\n<li>在属性中输入目录下的附加依赖项添加 MySQL 加密动态库<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv2VGCVVXKvuxwgrnANSZyHdp4bK9MEHAP9aaicllw6iadGuBk8jOFksrlYT5XDgZ4N9Y3jy2B9rZBw/0?wx_fmt=png\" alt=\"加密动态库位置\" title=\"加密动态库系统位置\" /><br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv2VGCVVXKvuxwgrnANSZyHN21ZEJEVWVwwafwPU5iarsm1Kow0ChWQct8dibRp0L2yK5Bsgiax9Uqbg/0?wx_fmt=png\" alt=\"添加MySQL加密动态库\" title=\"加载MySQL加密动态库\" /></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码测试\"><a class=\"anchor\" href=\"#代码测试\">#</a> 代码测试</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mysql.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MySQL Environment Successful\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 引用头文件不报错，即环境匹配成功</span></pre></td></tr></table></figure><h2 id=\"mysqlh用法\"><a class=\"anchor\" href=\"#mysqlh用法\">#</a>  <code>MySql.h</code>  用法</h2>\n<h3 id=\"运行流程图\"><a class=\"anchor\" href=\"#运行流程图\">#</a> 运行流程图</h3>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv2VGCVVXKvuxwgrnANSZyHMUu5icNADLDCWTp2YEB4BiarKBy5G5Jj4hzL6xDGvCv4OqvMxTuG6ZbQ/0?wx_fmt=png\" alt=\"C++调用MySQL流程图\" title=\"C++调用MySQL流程图\" /></p>\n<h3 id=\"c连接mysql语法详解\"><a class=\"anchor\" href=\"#c连接mysql语法详解\">#</a> C 连接 MySQL 语法详解</h3>\n<blockquote>\n<p>一共 <code>两</code> 个部分，一个通过一个小程序实例，通过注释的形式将 MySQL API 吃透，另一种是分解版逐步吃透。其为 <code>MySQL.h内部头文件</code></p>\n</blockquote>\n<h4 id=\"合集版\"><a class=\"anchor\" href=\"#合集版\">#</a> 合集版</h4>\n<h5 id=\"本地数据先进行的操作\"><a class=\"anchor\" href=\"#本地数据先进行的操作\">#</a> 本地数据先进行的操作</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">databases</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> cpp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">use</span> cpp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">TABLES</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 创建 dept 部门表</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> dept <span class=\"token punctuation\">(</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>d_id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>d_name <span class=\"token keyword\">VARCHAR</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>d_des <span class=\"token keyword\">VARCHAR</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">TABLES</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">DESC</span> dept<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">01</span><span class=\"token punctuation\">,</span><span class=\"token string\">'陆军'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'河南'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">02</span><span class=\"token punctuation\">,</span><span class=\"token string\">'第二陆军'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'开封'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">03</span><span class=\"token punctuation\">,</span><span class=\"token string\">'第三陆军'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'西安'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">04</span><span class=\"token punctuation\">,</span><span class=\"token string\">'第四陆军'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'山东'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">05</span><span class=\"token punctuation\">,</span><span class=\"token string\">'第五陆军'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'菏泽'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">06</span><span class=\"token punctuation\">,</span><span class=\"token string\">'第六陆军'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'商丘'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">07</span><span class=\"token punctuation\">,</span><span class=\"token string\">'第七陆军'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'郑州'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">08</span><span class=\"token punctuation\">,</span><span class=\"token string\">'第八陆军'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'洛阳'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> dept<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"c调用合集\"><a class=\"anchor\" href=\"#c调用合集\">#</a> C 调用合集</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mysql.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MySQL Environment Successful\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 初始化运行环境</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 该函数将分配初始化，并返回新对象，并通过返回这个对象去连接 MySQL 服务器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tMYSQL<span class=\"token operator\">*</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">mysql_init</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 判断是否初始化成功</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mysql <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql_init() error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据库初始化成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 连接 MySQL 服务器</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tmysql <span class=\"token operator\">=</span> <span class=\"token function\">mysql_real_connect</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tmysql<span class=\"token punctuation\">,</span> <span class=\"token comment\">//mysql_init () 函数返回值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//mysql 的 IP 地址</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//myslq 的用户名</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token string\">\"5211314\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//mysql 的密码</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token string\">\"cpp\"</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 使用的数据库名称</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token number\">3306</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 监听端口，0 为默认 3306 端口</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 本地套接字，不指定为 NULL</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token number\">0</span>       <span class=\"token comment\">// 默认 0</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 检查数据库连接情况</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mysql <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql_real_connect() error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据库连接成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 输出 MySQL API 使用的编码，参数为数据库对象</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql api使用的默认编码:%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mysql_character_set_name</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// 设置数据库编码为 utf8,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// 参数：数据库对象，编码</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">mysql_set_character_set</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"gbk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将编码改为 gbk 才可以进行数据插入，报错，乱码</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql api修改后的编码为:%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mysql_character_set_name</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">// 执行 sql 语句</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 查询 cpp 数据库下的 dept 部门表</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from dept\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token comment\">// 执行 sql 语句</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">// 参数：数据库对象，const char * 的数据库执行语句</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// 执行成功返回 0</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token comment\">//mysql_error 返回 mysql 数据库对象错误描述</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql_query()失败了，原因：%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 取出结果，参数 mysql 数据对象</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token comment\">//MYSQL_RES 对应一块内存八寸执行之后的结果集</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 若错误，返回 NULL</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tMYSQL_RES<span class=\"token operator\">*</span> res <span class=\"token operator\">=</span> <span class=\"token function\">mysql_store_result</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql_store_result()失败了，原因是:%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token comment\">// 得到结果集中的列数</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token comment\">// 参数：传入 mysql_store_result () 得到的返回值</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">mysql_num_fields</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token comment\">// 得到所有列的名字，并且输出</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token comment\">// 参数传入 mysql_store_result () 得到的返回值</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token comment\">//MYSQL_FIELD 对应的是一个结构体</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tMYSQL_FIELD<span class=\"token operator\">*</span> fields <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_fields</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token comment\">// 遍历输出 mysql 的 name</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t\\t\"</span><span class=\"token punctuation\">,</span> fields<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token comment\">// 遍历结果集中的所有行</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token comment\">// 参数：mysql_store_result () 得到的返回值</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token comment\">// 成功得到当前记录中每一个字段的值</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token comment\">// 失败 / 数据读完 返回 NULL</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\tMYSQL_ROW row<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_row</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token comment\">// 将当前列中的每一列信息读出</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t\\t\"</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token comment\">// 释放资源 - 结果集</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token function\">mysql_free_result</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token comment\">// 写入数据</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token comment\">//MySQL 默认自动提交数据库</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token comment\">// 设置事务为手动提交</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token function\">mysql_autocommit</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token comment\">// 执行成功返回 0</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret1 <span class=\"token operator\">=</span> <span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"insert into dept values(10,'第一海军','海南')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret2 <span class=\"token operator\">=</span> <span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"insert into dept values(11,'第二海军','福建')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret3 <span class=\"token operator\">=</span> <span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"insert into dept values(12,'第三海军','辽宁')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ret1=%d  ret2 = %d  ret3 = %d\\n\"</span><span class=\"token punctuation\">,</span> ret1<span class=\"token punctuation\">,</span> ret2<span class=\"token punctuation\">,</span> ret3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret1 <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> ret2 <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> ret3 <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行成功，正在提交事务\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token comment\">// 提交事务</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token function\">mysql_commit</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行失败，正在回滚....\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行失败原因: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token function\">mysql_rollback</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t<span class=\"token comment\">// 释放数据库资源</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token function\">mysql_close</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"分解头文件\"><a class=\"anchor\" href=\"#分解头文件\">#</a> 分解头文件</h4>\n<h5 id=\"初始化运行环境\"><a class=\"anchor\" href=\"#初始化运行环境\">#</a> 初始化运行环境</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 该函数将分配初始化，并返回新对象，并通过返回这个对象去连接 MySQL 服务器，得到一块内存并保存</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MYSQL<span class=\"token operator\">*</span> <span class=\"token function\">mysql_init</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span> mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 参数 NULL</span></pre></td></tr></table></figure><h5 id=\"连接数据库\"><a class=\"anchor\" href=\"#连接数据库\">#</a> 连接数据库</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MYSQL <span class=\"token operator\">*</span> <span class=\"token function\">mysql_real_connect</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">,</span>   <span class=\"token comment\">//mysql_init () 函数的返回值即指向的指针</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>host<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 主机地址 ip 地址，localhost,NULL 代表本地连接</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>user<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 服务器用户名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>passwd<span class=\"token punctuation\">,</span><span class=\"token comment\">// 连接服务器密码</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>db<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 要使用数据库名称</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 监听的端口号，若为 0，则默认 mysql 的 3306 端口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>unix_socket<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 本地套接字，不指定为 NULL</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> clientflag <span class=\"token comment\">// 通常指定为 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"执行sql语句\"><a class=\"anchor\" href=\"#执行sql语句\">#</a> 执行 SQL 语句</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数:</p>\n<ul>\n<li>mysql:mysql_real_connect () 的返回值</li>\n<li>query : 可以执行的 sql 语句，不要 <code>;</code> <br />\n 返回值:</li>\n<li>成功返回 <code>0</code>  就，结果集在 MySQL 对象中</li>\n<li>错误返回 <code>非0</code></li>\n</ul>\n<h5 id=\"获取结果集\"><a class=\"anchor\" href=\"#获取结果集\">#</a> 获取结果集</h5>\n<ul>\n<li>将结果集从 MySQL (参数) 对象中取出</li>\n<li>MYSQL_RES 对应一块内存，保存着查询之后的结果集</li>\n<li>返回具有多个结果的 MYSQL_RES 结果集合</li>\n<li>若错误，返回 NULL</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MYSQL_RES <span class=\"token operator\">*</span><span class=\"token function\">mysql_store_result</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"获取结果集的列数\"><a class=\"anchor\" href=\"#获取结果集的列数\">#</a> 获取结果集的列数</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mysql_num_fields</span><span class=\"token punctuation\">(</span>MYSQL_RES <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数</p>\n<ul>\n<li>调用 mysql_store_result () 得到的返回值<br />\n返回值</li>\n<li>结果集中的列数</li>\n</ul>\n<h5 id=\"获取结果集中所有列的名字\"><a class=\"anchor\" href=\"#获取结果集中所有列的名字\">#</a> 获取结果集中所有列的名字</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MYSQL_FIELD <span class=\"token operator\">*</span><span class=\"token function\">mysql_fetch_fields</span><span class=\"token punctuation\">(</span>MYSQL_RES <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数</p>\n<ul>\n<li>mysql_store_result () 得到的结果集<br />\n返回值</li>\n<li><code>MYSQL_FIELD*</code>  指向的一个结构体</li>\n</ul>\n<h6 id=\"结构体定义\"><a class=\"anchor\" href=\"#结构体定义\">#</a> 结构体定义</h6>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MYSQL_FIELD</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>               <span class=\"token comment\">/* Name of column  */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>org_name<span class=\"token punctuation\">;</span>           <span class=\"token comment\">/* Original column name, if an alias */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>table<span class=\"token punctuation\">;</span>              <span class=\"token comment\">/* Table of column if column was a field */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>org_table<span class=\"token punctuation\">;</span>          <span class=\"token comment\">/* Org table name, if table was an alias */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>db<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">/* Database for table */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>catalog<span class=\"token punctuation\">;</span>            <span class=\"token comment\">/* Catalog for table */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>def<span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* Default value (set by mysql_list_fields) */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> length<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* Width of column (create length) */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> max_length<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Max width for selected set */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> name_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> org_name_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> table_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> org_table_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> db_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> catalog_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> def_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* Div flags */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> decimals<span class=\"token punctuation\">;</span>      <span class=\"token comment\">/* Number of decimals in field*/</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> charsetnr<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* Character set */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">enum</span> <span class=\"token class-name\">enum_field_types</span> type<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Type of field. See mysql_com.h for types */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>extension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MYSQL_FIELD<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"获得结果集中字段的长度\"><a class=\"anchor\" href=\"#获得结果集中字段的长度\">#</a> 获得结果集中字段的长度</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token function\">mysql_fetch_lengths</span><span class=\"token punctuation\">(</span>MYSQL_RES <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数:</p>\n<ul>\n<li>result: 通过查询得到的结果集</li>\n</ul>\n<p>返回值</p>\n<ul>\n<li>无符号长整数的数组表示各列的大小，若错误返回 NULL</li>\n</ul>\n<h5 id=\"遍历结果集\"><a class=\"anchor\" href=\"#遍历结果集\">#</a> 遍历结果集</h5>\n<pre><code class=\"language-C\">MYSQL_ROW mysql_fetch_row(MYSQL_RES *result);\n</code></pre>\n<p>参数:</p>\n<ul>\n<li>\n<p>result：通过查询得到的结果集<br />\n返回值:</p>\n</li>\n<li>\n<p>成功：得到了当前记录中每个字段的值</p>\n</li>\n<li>\n<p>失败 / 数据已经读完：NULL，</p>\n</li>\n</ul>\n<h6 id=\"mysql_row\"><a class=\"anchor\" href=\"#mysql_row\">#</a> MYSQL_ROW</h6>\n<pre><code class=\"language-C\">typedef char** MYSQL_ROW;\n</code></pre>\n<ul>\n<li>返回值二级指针， <code>char**</code>  指向一个指针数组，类型是数组，里面的元素仍未指针， <code>char*</code>  类型，</li>\n<li><code>char* []</code> ：数组中的字符串对应的一列数据</li>\n<li>如果想要遍历整个结果集，需要对函数 MYSQL_ROW 进行循环调用</li>\n</ul>\n<h5 id=\"资源回收\"><a class=\"anchor\" href=\"#资源回收\">#</a> 资源回收</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 释放结果集</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mysql_free_result</span><span class=\"token punctuation\">(</span>MYSQL_RES <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 关闭 MySQL 实例</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mysql_close</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"字符编码\"><a class=\"anchor\" href=\"#字符编码\">#</a> 字符编码</h5>\n<h6 id=\"返回当前编码\"><a class=\"anchor\" href=\"#返回当前编码\">#</a> 返回当前编码</h6>\n<pre><code class=\"language-C\">// 获取API默认使用的字符编码(当前连接返回默认的字符集)\nconst char * mysql_character_set_name(MYSQL *mysql);\n</code></pre>\n<h6 id=\"设置编码\"><a class=\"anchor\" href=\"#设置编码\">#</a> 设置编码</h6>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设置 API 使用的字符集</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">mysql_set_character_set</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>csname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数:</p>\n<ul>\n<li>csname 为要设置的字符集：常用 <code>utf8</code></li>\n</ul>\n<h5 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h5>\n<blockquote>\n<p>MySql 会默认进行事务提交，需要设置逻辑处理时，多吃写操作，开始时创建事务，结束时判断是否全部成功，再提交或处理错误</p>\n</blockquote>\n<pre><code class=\"language-C\">my_bool mysql_autocommit(MYSQL *mysql,my_bool mode);\n</code></pre>\n<p>参数:</p>\n<ul>\n<li><code>mode</code>  如果模式为 <code>1</code> ， <code>启用</code>  autocommit 模式</li>\n<li>如果模式为 <code>0</code> ， <code>禁止</code>  autocommit 模式</li>\n</ul>\n<h6 id=\"事务提交\"><a class=\"anchor\" href=\"#事务提交\">#</a> 事务提交</h6>\n<pre><code class=\"language-C\">my_bool mysql_commit(MYSQL *mysql);\n</code></pre>\n<p>返回值:</p>\n<ul>\n<li>成功：0</li>\n<li>失败：非 0</li>\n</ul>\n<h6 id=\"数据回滚\"><a class=\"anchor\" href=\"#数据回滚\">#</a> 数据回滚</h6>\n<blockquote>\n<p>回滚到事务处理前的状态</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>my_bool <span class=\"token function\">mysql_rollback</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>返回值:</p>\n<ul>\n<li>成功： 0</li>\n<li>失败： 非 0</li>\n</ul>\n<h5 id=\"打印错误信息\"><a class=\"anchor\" href=\"#打印错误信息\">#</a> 打印错误信息</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回错误的描述</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 返回错误的编码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span>MYSQL <span class=\"token operator\">*</span>mysql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"参数传递依赖关系\"><a class=\"anchor\" href=\"#参数传递依赖关系\">#</a> 参数传递依赖关系</h5>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv2VGCVVXKvuxwgrnANSZyHjoT3kqibCiaBUFvgYlafwib3rwehfMfxERhaoiactnRV00HsaBlX1czaOw/0?wx_fmt=png\" alt=\"参数传递依赖关系\" title=\"参数传递依赖关系\" /></p>\n<h2 id=\"c封装mysql-api\"><a class=\"anchor\" href=\"#c封装mysql-api\">#</a> C++ 封装 MySQL API</h2>\n<h3 id=\"什么时候调用释放结果集\"><a class=\"anchor\" href=\"#什么时候调用释放结果集\">#</a> 什么时候调用释放结果集</h3>\n<ul>\n<li>析构函数</li>\n<li>可能会对数据库进行多次查询，每次查询一次都会得到结果集，查询是清空掉上次的结果集</li>\n</ul>\n<h3 id=\"源代码\"><a class=\"anchor\" href=\"#源代码\">#</a> 源代码</h3>\n<h4 id=\"mysqlconnecth\"><a class=\"anchor\" href=\"#mysqlconnecth\">#</a>  <code>MySQLConnect.h</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">MYSQLCONNECT_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MYSQLCONNECT_H</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mysql.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MySqlConnect</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 什么时候调用释放结果集</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//1, 析构函数 2，可能会对数据库进行多次查询，每次查询一次都会得到结果集，查询是清空掉上次的结果集</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">freeResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放结果集</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tMYSQL<span class=\"token operator\">*</span> m_conn <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存 MySQL 初始化的私有成员</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tMYSQL_RES<span class=\"token operator\">*</span> m_result <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错结果集</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tMYSQL_ROW m_row <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存着当前字段的所有列的数值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 初始化数据库连接</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">MySqlConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 释放数据库连接</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">MySqlConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 连接数据库，使用默认端口可省略端口书写</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>string user<span class=\"token punctuation\">,</span> string passwd<span class=\"token punctuation\">,</span>string dbName<span class=\"token punctuation\">,</span>string ip<span class=\"token punctuation\">,</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3306</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 更新数据库 (插入，更新，删除)，传递字符串</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>string sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 查询数据库，单词 query: 查询</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>string sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 遍历查询得到的结果集，每调一次，从结果集中取出一条数据</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 得到结果集中的字段值，取记录里面字段方法</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tstring <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 事务操作，关闭自动提交</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 提交事务</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 事务回滚；</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !MYSQLCONNECT_H</span></span></pre></td></tr></table></figure><h4 id=\"mysqlconnectcpp\"><a class=\"anchor\" href=\"#mysqlconnectcpp\">#</a>  <code>MySQLConnect.cpp</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"MySQLConnect.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">freeResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token function\">mysql_free_result</span><span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tm_result <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MySqlConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tm_conn <span class=\"token operator\">=</span> <span class=\"token function\">mysql_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">mysql_set_character_set</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MySqlConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_conn <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">mysql_close</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">freeResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>string user<span class=\"token punctuation\">,</span> string passwd<span class=\"token punctuation\">,</span> string dbName<span class=\"token punctuation\">,</span> string ip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">//ip 传入为 string，使用.str 将 ip 转为 char * 类型</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tMYSQL<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token function\">mysql_real_connect</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> passwd<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dbName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 连接成功返回 true</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 如果连接成功返回 TRUE，失败返回 FALSE</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">return</span> ptr<span class=\"token operator\">!=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>string sql<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">//query 执行成功返回 0</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">bool</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>string sql<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">freeResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token comment\">//query 执行成功返回 0</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tm_result <span class=\"token operator\">=</span> <span class=\"token function\">mysql_store_result</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 如果结果集为空则没有必要遍历</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_result <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token comment\">// 保存着当前字段的所有列的数值</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\tm_row <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_row</span><span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>string <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token comment\">// 表示列的数量</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token keyword\">int</span> row_num <span class=\"token operator\">=</span> <span class=\"token function\">mysql_num_fields</span><span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数得到结果集中的列数</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token comment\">// 如果查询的的 index 列大于总列，或小于 0，是错误的</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> row_num <span class=\"token operator\">||</span> index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> val <span class=\"token operator\">=</span> m_row<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 若为二进制数据，中间是有 \"\\0\" 的</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> length <span class=\"token operator\">=</span> <span class=\"token function\">mysql_fetch_lengths</span><span class=\"token punctuation\">(</span>m_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入 length 就不会以 \"\\0\" 为结束符，而是通过长度把对应的字符转换为 string 类型</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">mysql_autocommit</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数返回值本身就是 bool 类型</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">mysql_commit</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 提交</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">MySqlConnect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">mysql_rollback</span><span class=\"token punctuation\">(</span>m_conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//bool 类型，函数成功返回 TRUE，失败返回 FALSE</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "C++开源库",
                "C++",
                "计算机科学",
                "C",
                "数据库",
                "MySQL"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-4/cpp%E5%AE%9E%E7%8E%B0%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-4/cpp%E5%AE%9E%E7%8E%B0%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "title": "C++实现银行管理系统",
            "date_published": "2023-03-14T00:20:43.000Z",
            "content_html": "<h1 id=\"银行管理系统\"><a class=\"anchor\" href=\"#银行管理系统\">#</a> 银行管理系统</h1>\n<p>开源注释详解:<a href=\"git@github.com:foryouos/bank-system.git\">Github</a></p>\n<h2 id=\"功能\"><a class=\"anchor\" href=\"#功能\">#</a> 功能</h2>\n<ul>\n<li>添加账户\n<ul>\n<li>储蓄账户</li>\n<li>信用卡账户</li>\n</ul>\n</li>\n<li>存款</li>\n<li>取款</li>\n<li>当前账户余额</li>\n<li>指定时间内的账目信息\n<ul>\n<li>利息</li>\n</ul>\n</li>\n<li>本地化存储，二次启动同步</li>\n<li>所有账户总金额</li>\n<li>退出</li>\n</ul>\n<h2 id=\"数据存储思路\"><a class=\"anchor\" href=\"#数据存储思路\">#</a> 数据存储思路</h2>\n<blockquote>\n<p>将每次运行的代码存储到本地 txt 文件当中，每次启动可以首先初始化文件内容，已达到文件储存的目的</p>\n</blockquote>\n<h3 id=\"缺点\"><a class=\"anchor\" href=\"#缺点\">#</a> 缺点</h3>\n<ul>\n<li>数据量过大数据初始化难</li>\n<li>业务逻辑越复杂也越难以保存</li>\n<li>用户交互需要按照文件保存书写指令，十分不便</li>\n</ul>\n<blockquote>\n<p>或许可以使用 MySQL 数据库存储数据，用 C++ 与 MySQL 进行交互，达到相关查询，存储的功能。</p>\n</blockquote>\n<h2 id=\"类图呈现\"><a class=\"anchor\" href=\"#类图呈现\">#</a> 类图呈现</h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv2VGCVVXKvuxwgrnANSZyHv56iaEoYzayJ71eKgIRjGcmPRuLnawrpCgdicuLDWJItHIl7nPKGqTzA/0?wx_fmt=png\" alt=\"银行管理系统类关系图\" /></p>\n<h2 id=\"各文件功能\"><a class=\"anchor\" href=\"#各文件功能\">#</a> 各文件功能</h2>\n<ul>\n<li>date.h  日期类头文件</li>\n<li>date.cpp 日期类实现文件</li>\n<li>account.h  账户类定义头文件</li>\n<li>account.cpp 账户类实现文件以及记录</li>\n<li>accumulator.h  对数据进行累加的相关计算</li>\n<li>main.cpp   主函数文件</li>\n<li>Array.h 数组模版的头文件</li>\n<li>Controller 类保存账户列表，当前日期和处理指定命令</li>\n</ul>\n<h2 id=\"详解源代码\"><a class=\"anchor\" href=\"#详解源代码\">#</a> 详解源代码</h2>\n<h3 id=\"dateh\"><a class=\"anchor\" href=\"#dateh\">#</a>  <code>date.h</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 日期类头文件，对日期类文件进行处理 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_DATE_H_</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_DATE_H_</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Date</span>   <span class=\"token comment\">// 日期类</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 年</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 月</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> day<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 日</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> totalDays<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 该日期是从公元元年 1 月 1 日开始的第几天</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> month<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> day<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用年，月，日构造日期</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 专门从 cin 读入一个日期，赋值查询历史账目功能</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//static Date read();</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 获取 Date 日期年份</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> year<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">// 获取 Date 日期月份</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 获取 Date 日期天</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 获取 Date 当月的天数</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getMaxDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 判断 Date 日期是否是闰年</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>  <span class=\"token comment\">// 判断是否为闰年</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> year <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> year <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> year <span class=\"token operator\">%</span> <span class=\"token number\">400</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">// 输出 Date 日期</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// 输出 Data 从公元元年 1 月 1 日到目前 date 的天数</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> totalDays <span class=\"token operator\">-</span> date<span class=\"token punctuation\">.</span>totalDays<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">// 重载 Date 之前的 “-” 号，用公元元年到目前的日期相减</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> totalDays <span class=\"token operator\">-</span> date<span class=\"token punctuation\">.</span>totalDays<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// 重载 Date 之间的 “&lt;\" 号，用永远元年到目前 date 的日期计算</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> totalDays <span class=\"token operator\">&lt;</span> date<span class=\"token punctuation\">.</span>totalDays<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">// 重载 Date 类输入，格式化日期格式：year-month-day</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">// 重载 Date 类输出，格式化日期格式：year-month-day</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !_DATE_H_</span></span></pre></td></tr></table></figure><h3 id=\"datecpp\"><a class=\"anchor\" href=\"#datecpp\">#</a>  <code>date.cpp</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 日期类实现函数 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"date.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdexcept></span>  <span class=\"token comment\">// 标准库表头，此头文件是错误处理库的一部分</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">namespace</span>  <span class=\"token comment\">// 使用 namespace 使下面的定义只能在当前文件中有效</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 存储平年中每个月 1 日之前有多少天，为便于 getMaxDay 函数的实现，</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> DAYS_BEFORE_MONTH<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">59</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">151</span><span class=\"token punctuation\">,</span><span class=\"token number\">181</span><span class=\"token punctuation\">,</span><span class=\"token number\">212</span><span class=\"token punctuation\">,</span><span class=\"token number\">143</span><span class=\"token punctuation\">,</span><span class=\"token number\">273</span><span class=\"token punctuation\">,</span><span class=\"token number\">304</span><span class=\"token punctuation\">,</span><span class=\"token number\">334</span><span class=\"token punctuation\">,</span><span class=\"token number\">365</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">Date</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> day<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">year</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">month</span><span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">day</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>day <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> day <span class=\"token operator\">></span> <span class=\"token function\">getMaxDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">runtime_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Date 发生异常，直接使用标准程序库构造异常抛出</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 减一是为了计算总天数，会加上月份和天数，年份日要减一</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">int</span> years <span class=\"token operator\">=</span> year <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 计算总天数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\ttotalDays <span class=\"token operator\">=</span> years <span class=\"token operator\">*</span> <span class=\"token number\">365</span> <span class=\"token operator\">+</span> years <span class=\"token operator\">/</span> <span class=\"token number\">4</span> <span class=\"token operator\">-</span> years <span class=\"token operator\">/</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> years <span class=\"token operator\">/</span> <span class=\"token number\">400</span> <span class=\"token operator\">+</span> DAYS_BEFORE_MONTH<span class=\"token punctuation\">[</span>month <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 如果是瑞年并且月份大约 2，总天数 + 1</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> month <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\ttotalDays<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 返回这月最大天数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">Date</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getMaxDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> month <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">29</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> DAYS_BEFORE_MONTH<span class=\"token punctuation\">[</span>month<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> DAYS_BEFORE_MONTH<span class=\"token punctuation\">[</span>month <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 输出 Date 的年 - 月 - 日</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Date</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span> <span class=\"token comment\">//istream 通用输入流</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span> month<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">char</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"类似输入格式为:2019-01-01\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tin <span class=\"token operator\">>></span> year <span class=\"token operator\">>></span> c1 <span class=\"token operator\">>></span> month <span class=\"token operator\">>></span> c2 <span class=\"token operator\">>></span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 对输入进行判断，若没有按照格式，返回错误</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">!=</span> <span class=\"token char\">'-'</span> <span class=\"token operator\">||</span> c2 <span class=\"token operator\">!=</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token comment\">// 可用于运行时检测的异常类</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">runtime_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad time format\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token comment\">// 将所得的正确日期返回给 date，指针</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tdate <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">,</span> month<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 返回用户的输入 此处</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">// 虫重载输出流，使 date 按照标准格式输出</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span> <span class=\"token comment\">//ostream 通用输出流</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tout <span class=\"token operator\">&lt;&lt;</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">&lt;&lt;</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">&lt;&lt;</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"accounth\"><a class=\"anchor\" href=\"#accounth\">#</a>  <code>account.h</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 银行账户类头文件 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_ACCOUNT_H_</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_ACCOUNT_H_</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"date.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"accumulator.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span>  <span class=\"token comment\">// 字符串头文件</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;istream></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span>  <span class=\"token comment\">// 引出关联容器</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdexcept></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 前置声明</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 账目记录类</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountRecord</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 日期</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tDate date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 账户</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">const</span> Account<span class=\"token operator\">*</span> account<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 账户金额</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 余额</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 描述</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string desc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">AccountRecord</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Account<span class=\"token operator\">*</span> account<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 输出当前记录</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 创建关联容器，建立日期和账户记录类的已排序列表</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">typedef</span> std<span class=\"token double-colon punctuation\">::</span>multimap<span class=\"token operator\">&lt;</span>Date<span class=\"token punctuation\">,</span> AccountRecord<span class=\"token operator\">></span>RecordMap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 账户父类</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>string id<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 账户 Id 字符串</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 账户余额</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> total<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 所有账户的总金额静态变量</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">static</span> RecordMap recordMap<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 账目记录</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 提供派生类调用的构造函数：日期，id 为账户</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">Account</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">// 记录一笔账，date 为日期，amount 为金额，desc 为说明</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">record</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 报告错误信息</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">// 获取账户 id</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 获取账户余额</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> balance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 获取账户总金额</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token comment\">// 纯虚函数，没有具体的操作内容，要求各派生类根据需要定义自己的版本</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token comment\">// 存入现金，date 为日期，amount 为金额，desc 为款项说明</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\">// 纯虚函数，没有具体的操作内容，要求各派生类根据需要定义自己的版本</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token comment\">// 取出现金，date 为日期，amount 为金额，desc 为款项说明</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token comment\">// 结算（计算利息、年费等），每月结算一次，date 为结算日期</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">settle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token comment\">// 显示账户信息</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token comment\">// 查询指定时间内的账目记录，开始 Date，结束 Date</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">// 内联重载：将 Account 输出调用 Account.show ()</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">inline</span> std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Account<span class=\"token operator\">&amp;</span> account<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\taccount<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SavingsAccount</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span>  <span class=\"token comment\">// 存储账户类</span></span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\tAccumulator acc<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 辅助计算利息的累加器</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token keyword\">double</span> rate<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 存款的年利率</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token comment\">// 储蓄账户，日期 Date, 账户 Account 的 id，存款利率</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token function\">SavingsAccount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token comment\">// 获取储蓄账户的存款利率</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">getRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> rate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token comment\">// 存钱：参数：日期 Date, 金额，描述信息</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 存入现金</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token comment\">// 取款：参数：日期 Date, 金额，描述信息</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 取出现金</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token comment\">// 结算利息：参数：Date 日期</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">settle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date <span class=\"token operator\">&amp;</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CreditAccount</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span>  <span class=\"token comment\">// 信用账户类</span></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\tAccumulator acc<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 辅助计算利息的累加器</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token comment\">// 信用额度</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">double</span> credit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token keyword\">double</span> rate<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 欠款的日利率</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t<span class=\"token keyword\">double</span> fee<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 信用卡年费</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token comment\">// 获取欠款额</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">getDebt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token comment\">// 获取账户 Account 的余额，</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> balance <span class=\"token operator\">=</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t<span class=\"token comment\">// 如果余额大于 0 不欠钱，返回 0，否则返回 balance</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>balance <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> balance <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token comment\">// 信用卡类：参数：日期 Date, 账户 Account：id，信用额度，欠款日利率，信用卡年费</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t<span class=\"token function\">CreditAccount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> credit<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> rate<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> fee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token comment\">// 获取信用卡额度</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">getCredit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> credit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token comment\">// 获取信用卡日利率</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">getRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> rate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token comment\">// 获取信用卡年费</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">getFee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> fee<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token comment\">// 返回信用卡还可用额度，若账户余额为负，用信用卡补上</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">getAvailableCredit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> credit <span class=\"token operator\">+</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> credit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token comment\">// 存入现金：参数：日期 Date, 账户 Account 金额，存款描述</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token comment\">// 取出现金，参数：取款日期 Date, 取款金额，取款描述</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t<span class=\"token comment\">// 结算利息和年费，参数 Date 日期</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">settle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 结算利息和年费，每月 1 号调用一次该函数</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t<span class=\"token comment\">// 输出账户 id，账户金额，账户余额</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t<span class=\"token comment\">// 虚函数输出</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre><span class=\"token comment\">// 账户异常处理类</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountException</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">runtime_error</span></span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t<span class=\"token comment\">// 账户</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t<span class=\"token keyword\">const</span> Account<span class=\"token operator\">*</span> account<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token comment\">// 传递运行中的异常信息，以及账户 Account 类</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token function\">AccountException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Account<span class=\"token operator\">*</span> account<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t\t<span class=\"token operator\">:</span><span class=\"token function\">runtime_error</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">account</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t<span class=\"token comment\">// 获得异常账户类</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t<span class=\"token keyword\">const</span> Account<span class=\"token operator\">*</span> <span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> account<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//_ACCOUNT_H_</span></span></pre></td></tr></table></figure><h3 id=\"accountcpp\"><a class=\"anchor\" href=\"#accountcpp\">#</a>  <code>account.cpp</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project :Account 账户类实现文件 cpp</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"account.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;utility></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token double-colon punctuation\">::</span>rel_ops<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//AccountRecord 类的实现：参数日期 Date, 账户 Account 类，金额，余额，描述信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">AccountRecord</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AccountRecord</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Account<span class=\"token operator\">*</span> account<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token operator\">:</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">account</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">amount</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">balance</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">desc</span><span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 展现出账户记录类的账户时间，Id，存款金额，余额（算上信用卡)，描述信息</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">AccountRecord</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//date.show();</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span>date<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t#\"</span> <span class=\"token operator\">&lt;&lt;</span> account<span class=\"token operator\">-></span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> amount <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> balance <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> desc <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 存款总金额全局变量 (所有账户）</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">double</span> Account<span class=\"token double-colon punctuation\">::</span>total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// Account 类中的账户记录</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>RecordMap Account<span class=\"token double-colon punctuation\">::</span>recordMap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//Account 账户类构造函数</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token class-name\">Account</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Account</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token operator\">:</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">balance</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">//date.show();</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> date<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t#\"</span> <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" created\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 记账：参数：Date 时间，amount 金额，记账描述</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Account</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">record</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tamount <span class=\"token operator\">=</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 保留小数点后两位，</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tbalance <span class=\"token operator\">+=</span> amount<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 余额增加</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\ttotal <span class=\"token operator\">+=</span> amount<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 账户总额增加</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">//date.show ();  // 输出时间</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 将添加的数据存入账目记录类</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tAccountRecord <span class=\"token function\">record</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> balance<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">// 将数据插入到关联容器内部，，date 为主键</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\trecordMap<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\trecord<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; \"\\t#\" &lt;&lt; id &lt;&lt; \"\\t\" &lt;&lt; amount &lt;&lt; \"\\t\" &lt;&lt; balance &lt;&lt; \"\\t\" &lt;&lt; desc &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">// 显示账户信息</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Account</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"#\"</span> <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\tBalance:\"</span> <span class=\"token operator\">&lt;&lt;</span> balance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">//SavingsAccount 类的实现，参数：Date 时间，Account 的 ID，利率</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token class-name\">SavingsAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">SavingsAccount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> rate<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 时间，账户，利率</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token operator\">:</span><span class=\"token function\">Account</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rate</span><span class=\"token punctuation\">(</span>rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">acc</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">// 存钱：参数：时间，金额，描述信息</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SavingsAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>desc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token function\">record</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span>desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录一笔账</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token comment\">// 调佣 accumulator 函数，更新值，变更当前的时间，还有值</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\tacc<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">// 取钱</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SavingsAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">></span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error: not enough money\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t<span class=\"token function\">record</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>amount<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\tacc<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\">// 计算利息：传递时间 Date</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">SavingsAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">settle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token keyword\">double</span> interest <span class=\"token operator\">=</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> rate <span class=\"token operator\">/</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算年息</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interest <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token comment\">// 将利息记账</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token function\">record</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> interest<span class=\"token punctuation\">,</span><span class=\"token string\">\"interest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token comment\">// 初始化，日期，数值，累加器清零</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\tacc<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token comment\">//CreditAccount 类默认构造函数的实现</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token class-name\">CreditAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreditAccount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> credit<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> rate<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> fee<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token operator\">:</span><span class=\"token function\">Account</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">credit</span><span class=\"token punctuation\">(</span>credit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">rate</span><span class=\"token punctuation\">(</span>rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">fee</span><span class=\"token punctuation\">(</span>fee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">acc</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token comment\">// 存入信用卡</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CreditAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token function\">record</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\tacc<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token function\">getDebt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token comment\">// 取出信用卡金额</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CreditAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> desc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">-</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> credit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nt enough credit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t<span class=\"token comment\">// 使用负数 ，减</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t<span class=\"token function\">record</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>amount<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\tacc<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token function\">getDebt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token comment\">// 结算信用卡的利息</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CreditAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">settle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token keyword\">double</span> interest <span class=\"token operator\">=</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> rate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interest <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t<span class=\"token function\">record</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> interest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"interest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t<span class=\"token function\">record</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>fee<span class=\"token punctuation\">,</span> <span class=\"token string\">\"annual fee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\tacc<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token function\">getDebt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token comment\">// 输出，包括信用卡额度</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CreditAccount</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token class-name\">Account</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\tAvailable credit:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getAvailableCredit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token comment\">// 异常</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Account</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t<span class=\"token keyword\">throw</span> <span class=\"token function\">AccountException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre><span class=\"token comment\">// 账户记录查询实现，参数：开始 Date, 结束 Date</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Account</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t<span class=\"token comment\">// 从开始到结尾遍历输出</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t\t<span class=\"token comment\">//lower_bound 返回指向首个不小于给定键的元素的迭代器</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t\tRecordMap<span class=\"token double-colon punctuation\">::</span>iterator iter1 <span class=\"token operator\">=</span> recordMap<span class=\"token punctuation\">.</span><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t<span class=\"token comment\">//upper_bound 返回指向首个大于给定键的元素的迭代器</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\tRecordMap<span class=\"token double-colon punctuation\">::</span>iterator iter2 <span class=\"token operator\">=</span> recordMap<span class=\"token punctuation\">.</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>RecordMap<span class=\"token double-colon punctuation\">::</span>iterator iter <span class=\"token operator\">=</span> iter1<span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> iter2<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>iter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t\t\titer<span class=\"token operator\">-></span>second<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"accumulatorh\"><a class=\"anchor\" href=\"#accumulatorh\">#</a>  <code>accumulator.h</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 将 accumulation.h 按日将数字累加的 Accumulatior 类的头文件 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_ACCUMULATOR_H_</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_ACCUMULATOR_H_</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"date.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Accumulator</span> <span class=\"token comment\">// 将某个数值按日累加</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tDate lastDate<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 上次变更数值的日期</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">double</span> value<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 数值的当前值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">double</span> sum<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 数值按日累加之和</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 构造函数，date 为 开始累加的日期，value 为初始值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">Accumulator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token operator\">:</span><span class=\"token function\">lastDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 获取日期 date 的累加结果</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">double</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> sum <span class=\"token operator\">+</span> value <span class=\"token operator\">*</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>lastDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 在 date 将数值表更为 value</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tsum <span class=\"token operator\">=</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tlastDate <span class=\"token operator\">=</span> date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 初始化，将日期变为 date，数值变为 value，累加器清零</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tlastDate <span class=\"token operator\">=</span> date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tsum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !_ACCUMULATOR_H_</span></span></pre></td></tr></table></figure><h3 id=\"maincpp\"><a class=\"anchor\" href=\"#maincpp\">#</a>  <code>main.cpp</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Project: 存款类主函数文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>environment：Visual studio 2022</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"account.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Array.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 释放空间结构体，用于析构函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">deleter</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 建立类，用来存储账户列表和处理命令</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tDate date<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 当前日期</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span>Account<span class=\"token operator\">*</span><span class=\"token operator\">></span>accounts<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 账户列表</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">bool</span> end<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 用户是够输入了退出命令</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 存储用户数据，参数：Date 时间</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> date<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 返回当前的时间</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">const</span> Date<span class=\"token operator\">&amp;</span> <span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">//bool 值，返回是否结束</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 执行一条命令，返回该命令是否改变了当前状态 (即是否需要保存该命令)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">runCommand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> cmdLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// 释放从账户开始到结束的所有内存</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token class-name\">Controller</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token comment\">//for_each 遍历：开始，结束，执行</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// 按照顺序应用给定的函数对象 f 到接引到范围 [first,last] 中每个迭代器的结果</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>accounts<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> accounts<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">deleter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">Controller</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">runCommand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> cmdLine<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t* 指令内容</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t* a s S3755217 0.015</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t* a s 02342342 0.015</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t* a c C5392394 10000 0.0005 50</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t* c 5</pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token comment\">// 读取是有顺序要求的，根据指针向后，异常赋值</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\">// 第一个赋值给 cmd 判断进入那个 case 开面</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token comment\">// 后面根据不同 case 依次赋值</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\tistringstream <span class=\"token function\">str</span><span class=\"token punctuation\">(</span>cmdLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token keyword\">char</span> cmd<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">,</span> credit<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">,</span> fee<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\tstring id<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tAccount<span class=\"token operator\">*</span> account<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\tDate date1<span class=\"token punctuation\">,</span> date2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tstr <span class=\"token operator\">>></span> cmd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token char\">'a'</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 增加账户</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\tstr <span class=\"token operator\">>></span> type <span class=\"token operator\">>></span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token char\">'s'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\tstr <span class=\"token operator\">>></span> rate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\taccount <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">SavingsAccount</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\tstr <span class=\"token operator\">>></span> credit <span class=\"token operator\">>></span> rate <span class=\"token operator\">>></span> fee<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\taccount <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">CreditAccount</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> credit<span class=\"token punctuation\">,</span> rate<span class=\"token punctuation\">,</span> fee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\taccounts<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token char\">'d'</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 存入现金</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\tstr <span class=\"token operator\">>></span> index <span class=\"token operator\">>></span> amount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\taccounts<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span><span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token char\">'w'</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 取出现金</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\tstr <span class=\"token operator\">>></span> index <span class=\"token operator\">>></span> amount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\taccounts<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token char\">'s'</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 查询各账户信息</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> accounts<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>accounts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token char\">'c'</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 改变日期</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\tstr <span class=\"token operator\">>></span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>day <span class=\"token operator\">&lt;</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"You cannot specify a previous day\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>day <span class=\"token operator\">></span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Invalid day\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\tdate <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token char\">'n'</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 进入下个月</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\tdate <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\tdate <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Account<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter <span class=\"token operator\">=</span> accounts<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> accounts<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>iter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">settle</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token char\">'q'</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 查询一段时间内的账目</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\tstr <span class=\"token operator\">>></span> date1 <span class=\"token operator\">>></span> date2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t<span class=\"token class-name\">Account</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">,</span> date2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token char\">'e'</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 退出</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\tend <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Inavlid command: \"</span> <span class=\"token operator\">&lt;&lt;</span> cmdLine <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\tDate <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 起始日期</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"输出化本地化数据库数据\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token comment\">//\t初始化命令</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\tController <span class=\"token function\">controller</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\tstring cmdLine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token comment\">// 打开文件名称</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> FILE_NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"commands.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\tifstream <span class=\"token function\">fileIn</span><span class=\"token punctuation\">(</span>FILE_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 以读模式打开文件</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileIn<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 直到执行到没有指令</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 如果正常打开，就执行文件中的每一条命令</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>fileIn<span class=\"token punctuation\">,</span> cmdLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\t\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t\t\t\tcontroller<span class=\"token punctuation\">.</span><span class=\"token function\">runCommand</span><span class=\"token punctuation\">(</span>cmdLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Bad line in\"</span> <span class=\"token operator\">&lt;&lt;</span> FILE_NAME <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> cmdLine <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error:\"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t\tfileIn<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 关闭文件</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token comment\">// 初始化指令结束</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t<span class=\"token comment\">// 追加模式写入</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\tofstream <span class=\"token function\">fileOut</span><span class=\"token punctuation\">(</span>FILE_NAME<span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 以追加模式</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t<span class=\"token comment\">// 选择框</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\\n\\t\\t***由于银行信息系统使用命令行存储数据形式，请严格按照输入格式进行输入:***\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\\t\\t\\t******命令选项*******\"</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\\t\\t\\t\\t\\t(a)add account: a s S3755217 0.015      //a代表添加用户，s代表储蓄卡，c代表信用卡，S3755217为账户id，0.015为利率 \"</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\\t\\t\\t\\t\\t(d)deposit    ：d 0 5000 salary          //d代表存钱，0代表第0个账户，5000代表金额，salary为存储说明\"</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\\t\\t\\t\\t\\t(w)withdraw ： w 2 2000 buy a cell     //w为取钱，2代表第二个账户，2000金额，buy a cell说明\"</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\\t\\t\\t\\t\\t(s)show      ： s                        //查看账户\"</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\\t\\t\\t\\t\\t(c)change day ：c 15                   //c为改变日期，15为日 \"</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\\t\\t\\t\\t\\t(n)next month ：n                       //进入下一个月\"</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\\t\\t\\t\\t\\t(q)query      ：q 2022-11-01 2022-12-01   //遍历从11月1号到12月1号的账目数据\"</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\\t\\t\\t\\t\\t(e)exit        ：e                       //退出\"</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">isEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 从标准输入读入命令并执行，直到退出</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\tTotal: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token class-name\">Account</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\\t\\t\\t\\ncommand> \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"命令输入规范：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>\t\tstring cmdLine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\t\t<span class=\"token comment\">// 读入命令，和文件存储格式相同</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\t\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> cmdLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\t\t\t<span class=\"token comment\">// 执行命令</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">runCommand</span><span class=\"token punctuation\">(</span>cmdLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 并记录文件内容</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\t\t\t\tfileOut <span class=\"token operator\">&lt;&lt;</span> cmdLine <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将命令写入文件</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>AccountException<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Erroe(#\"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"):\"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error: \"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "C和C++项目",
                "C++",
                "计算机科学",
                "C++项目"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/web/front/Myweb/",
            "url": "https://www.blog.foryouos.cn/computer-science/web/front/Myweb/",
            "title": "我的网站",
            "date_published": "2023-03-09T10:20:43.000Z",
            "content_html": "<h3 id=\"个人网站\"><a class=\"anchor\" href=\"#个人网站\">#</a> 个人网站</h3>\n<h4 id=\"网站框架\"><a class=\"anchor\" href=\"#网站框架\">#</a> 网站框架</h4>\n<blockquote>\n<p>使用 Github 开源框架 <code>Hexo</code> ，拥有蛮多的优秀好看的 <code>主题</code> ，使用起来也十分的方便，主题选好就定下来，因为很多主题涉及的相关配置不同，仍需花费一些时间。</p>\n</blockquote>\n<ul>\n<li><a href=\"https://hexo.io/zh-cn/\"> <code>hexo官网</code> </a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/\"> <code>hexo开发文档</code> </a></li>\n<li><a href=\"https://hexo.io/themes/\"> <code>hexo主题</code> </a></li>\n</ul>\n<h4 id=\"网站服务器\"><a class=\"anchor\" href=\"#网站服务器\">#</a> 网站服务器</h4>\n<blockquote>\n<p>初步方案使用 <code>Github仓库Page功能存储</code> 页面内容，但由于国内网速过慢，最终被弃用，也不算是完全弃用，使用了 <code>Cloudflare</code>  的 Page，后者拥有 <code>全球CDN</code> ，在速度方便高于 <code>Github</code> 。</p>\n</blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS1jbi5jb20v\">Cloudflare</span></li>\n</ul>\n<blockquote>\n<p>通过 <code>Cloudflare</code>  的 Page 功能可以直接绑定 <code>Github仓库</code> ，实现一建上传， <code>自动同步</code> 部署 Github 功能，确实挺方便的。 <code>晚上不要部署，会很慢，直到失败</code></p>\n</blockquote>\n<h4 id=\"资源后台备份\"><a class=\"anchor\" href=\"#资源后台备份\">#</a> 资源后台备份</h4>\n<blockquote>\n<p>使用 <code>Github的私有仓库</code> ，同步所有 <code>Blog笔记</code></p>\n</blockquote>\n<h4 id=\"域名解析\"><a class=\"anchor\" href=\"#域名解析\">#</a> 域名解析</h4>\n<blockquote>\n<p>根据自身购买的域名，使用 Cloudflare Page 推荐的解析方式，同步解析就可以，能够实现 HTTPS</p>\n</blockquote>\n<h4 id=\"图片存储\"><a class=\"anchor\" href=\"#图片存储\">#</a> 图片存储</h4>\n<blockquote>\n<p>单纯使用 Github+CloudFlare 方案，页面速度也可以，但是大量的图片使得进入页面的速度，以及即使加载到页面，图片未必能加载出来，速度差强人意<br />\n使用图床将网站所有需要的背景图，logo 图片存入图床当中，只要图床的速度够快，那速度就完全没有问题</p>\n</blockquote>\n<h4 id=\"图床推荐\"><a class=\"anchor\" href=\"#图床推荐\">#</a> 图床推荐</h4>\n<blockquote>\n<p>根据国内访问 <code>速度排序</code> 由快倒慢，当然网上还有很多</p>\n</blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWd0Zy5jb20v\">img.tg</span> 其国内访问速度，基本在 1 秒以内，国内 <code>CDN</code>  加速</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWdzZS5jb20v\">路过图床</span> 全球 CDN，国内访问速度一般般</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zbW1zLmFwcC8=\">SM.SM</span> 国际可以，国内一般</li>\n</ul>\n<h4 id=\"首页轮换图\"><a class=\"anchor\" href=\"#首页轮换图\">#</a> 首页轮换图</h4>\n<ul>\n<li>网上寻找壁纸 <code>API</code> , 调用 <code>API</code> ，每次返回不同的 <code>img地址</code> ，自己做，时间问题，还没有实现</li>\n</ul>\n<h4 id=\"天气功能\"><a class=\"anchor\" href=\"#天气功能\">#</a> 天气功能</h4>\n<blockquote>\n<p>使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWRnZXQucXdlYXRoZXIuY29tLw==\">和风天气</span>插件嵌入 web 端</p>\n</blockquote>\n<p><img data-src=\"https://i.imgtg.com/2023/03/09/YfrjU.png\" alt=\"image-20230309180534309\" /></p>\n<h4 id=\"网站\"><a class=\"anchor\" href=\"#网站\">#</a> 网站</h4>\n<ul>\n<li><code>foryouos</code> <a href=\"https://www.blog.foryouos.cn\"> 博客</a></li>\n</ul>\n<blockquote>\n<p>个人博客</p>\n</blockquote>\n<p><img data-src=\"https://i.imgtg.com/2023/03/09/YfZyv.png\" alt=\"image-20230309180243668\" /></p>\n<ul>\n<li><code>foryouos</code> <a href=\"www.foryouos.cn\"> 主页</a></li>\n</ul>\n<blockquote>\n<p>整合网站信息</p>\n</blockquote>\n<p><img data-src=\"https://i.imgtg.com/2023/03/09/Yfvsq.png\" alt=\"image-20230309180201706\" /></p>\n<ul>\n<li><code>foryouos</code> <a href=\"www.so.foryouos.cn\"> 导航栏</a></li>\n</ul>\n<blockquote>\n<p>作为和室友们的自定义导航栏 (其实是被迫的，还好确实有好功能)</p>\n</blockquote>\n<p><img data-src=\"https://i.imgtg.com/2023/03/09/YfKUY.png\" alt=\"image-20230309175951339\" /></p>\n<ul>\n<li>详见具体网站<a href=\"https://www.github.com/foryouos\"> <code>Github</code> </a></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "web",
                "前端",
                "前端",
                "web"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/cpp%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E5%BE%81%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/cpp%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E5%BE%81%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/",
            "title": "C++部分新特征",
            "date_published": "2023-03-05T06:39:45.666Z",
            "content_html": "<h3 id=\"c11新特征与mfc\"><a class=\"anchor\" href=\"#c11新特征与mfc\">#</a> C++11 新特征与 MFC</h3>\n<h4 id=\"auto\"><a class=\"anchor\" href=\"#auto\">#</a>  <code>auto</code></h4>\n<ul>\n<li>可以从初始化表达式中判断出变量的类型</li>\n<li>属于编译器特性，不影响最终机器码质量，不影响运行效率</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//int </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//const char*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Person *</span></pre></td></tr></table></figure><h4 id=\"decltype\"><a class=\"anchor\" href=\"#decltype\">#</a>  <code>decltype</code></h4>\n<blockquote>\n<p>可以获取 <code>变量的类型</code></p>\n</blockquote>\n<h4 id=\"nullptr\"><a class=\"anchor\" href=\"#nullptr\">#</a>  <code>nullptr</code></h4>\n<ul>\n<li>可以解决 <code>NULL</code>  的二义性问题</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func(int) - \"</span> <span class=\"token operator\">&lt;&lt;</span> v <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func(int *) - \"</span> <span class=\"token operator\">&lt;&lt;</span> v <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">auto</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NULL 为宏定义 0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空指针使用 nullptr</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"快速遍历\"><a class=\"anchor\" href=\"#快速遍历\">#</a> 快速遍历</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 快速遍历</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> item <span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> item <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"更加简介的初始化方式\"><a class=\"anchor\" href=\"#更加简介的初始化方式\">#</a> 更加简介的初始化方式</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"lambada表达式\"><a class=\"anchor\" href=\"#lambada表达式\">#</a>  <code>lambada</code>  表达式</h4>\n<blockquote>\n<p>类似于 <code>JavaScript的闭包</code> ， <code>IOS</code>  中的 <code>Block</code>  本质上就是函数</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 完整结果</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>params list<span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> exception <span class=\"token operator\">-></span><span class=\"token keyword\">return</span> type<span class=\"token punctuation\">&#123;</span> function body<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>capture list</code> : 捕获外部变量列表</li>\n<li><code>params list</code> : 形参列表，不能使用默认参数，不能省略参数名</li>\n<li><code>mutable</code> : 用来说用是否可以修改捕获的变量</li>\n<li><code>exception</code> : 异常设定</li>\n<li><code>return type</code> : 返回值类型</li>\n<li><code>function body</code> : 函数体<br />\n<strong>有时可以省略部分结果</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>params list<span class=\"token punctuation\">)</span>  <span class=\"token operator\">-></span><span class=\"token keyword\">return</span> type<span class=\"token punctuation\">&#123;</span> function body<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>params list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> function body<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>capture list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> function body<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 最简单的调用此表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"funvc()----\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"funvc()----\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用 lambda 表达式</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 计算两个整数和</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">auto</span> q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">q</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">*</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"变量捕获\"><a class=\"anchor\" href=\"#变量捕获\">#</a> 变量捕获</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">//int b = 10;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//auto func = [a, b]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//\tcout &lt;&lt; a &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//\tcout &lt;&lt; b &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//&#125;;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//a = 20;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//func (); // 值捕获，并没有获取最新的 a 值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//auto func = [&amp;a] // 使用地址捕获，可以保证获取最新的 a 值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">//\tcout &lt;&lt; a &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">//&#125;;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">//a = 70; </span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">//func (); // 地址捕获获取最新值</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 值捕获不能加加</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">//auto func = [a]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">//\ta++; // 值捕获不能 ++</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">//&#125;;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">//func();</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 地址捕获可以</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">//auto func = [&amp;a]</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">//\ta++;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">//&#125;;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">//func();</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; a &lt;&lt; endl; // 值 a+1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">//mutable </span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">auto</span> func <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> <span class=\"token comment\">// 内部 a 可以相加</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tb<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"lambda = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"智能指针smart-pointer\"><a class=\"anchor\" href=\"#智能指针smart-pointer\">#</a> 智能指针 ( <code>Smart Pointer</code> )</h4>\n<h5 id=\"传统指针的问题\"><a class=\"anchor\" href=\"#传统指针的问题\">#</a> 传统指针的问题</h5>\n<ul>\n<li>需要手动管理内存</li>\n<li>容易发生内存泄露 (忘记释放，出现异常等)</li>\n<li>释放之后残生野指针</li>\n<li>智能指针就是为了解决传统指针存在的问题</li>\n</ul>\n<h5 id=\"智能指针\"><a class=\"anchor\" href=\"#智能指针\">#</a> 智能指针</h5>\n<ul>\n<li><code>auto_ptr</code> : 属于 C<ins>98 标准，在 C</ins>11 中已经 <code>不推荐</code> 使用</li>\n<li><code>shared_ptr</code> :C++11 标准</li>\n<li><code>unique_ptr</code> :C++11 标准</li>\n</ul>\n<h5 id=\"使用auto_ptr自适应指针\"><a class=\"anchor\" href=\"#使用auto_ptr自适应指针\">#</a> 使用 <code>auto_ptr</code>  自适应指针</h5>\n<ul>\n<li><code>不</code> 能用于数组</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_age</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person(int)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"run() - \"</span> <span class=\"token operator\">&lt;&lt;</span> m_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 创建简单的智能指针</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SmartPointer</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tT <span class=\"token operator\">*</span>m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">SmartPointer</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">m_obj</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">SmartPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_obj <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span> m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tT<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">/*Person *p = new Person(20);</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tp->run();*/</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 可以理解为：智能指针 p 指向了堆空间的 Person 对象</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tauto_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tp<span class=\"token operator\">-></span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">/*Person p(20);</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tp.run();*/</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"share_ptr\"><a class=\"anchor\" href=\"#share_ptr\">#</a>  <code>share_ptr</code></h5>\n<blockquote>\n<p>设计理念：多个 <code>share_ptr</code>  可以指向同一个对象，当 <code>最后</code> 一个 <code>shared_ptr</code>  在作用域范围内结束时，对象才会被自动释放</p>\n</blockquote>\n<ul>\n<li>一个 <code>shared_ptr</code>  会对一个对象产生强引用 ( <code>strong reference</code> )</li>\n<li>每个对象都有个与之对应的强引用计数，记录着当前对象被多少个 <code>share_ptr</code>  强引用着</li>\n<li>可以通过 <code>shared_ptr</code>  的 <code>use_count</code>  函数获得强引用计数</li>\n<li>当有一个新的 <code>shared_ptr</code>  指向对象时，对象的强引用计数就会 + 1</li>\n<li>当有一个 <code>shared_ptr</code>  销毁时 (比如作用域结束) 对象的强引用就会 - 1</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">m_age</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person(int)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"run() - \"</span> <span class=\"token operator\">&lt;&lt;</span> m_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 创建简单的智能指针</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SmartPointer</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tT <span class=\"token operator\">*</span>m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">SmartPointer</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">m_obj</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">SmartPointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_obj <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span> m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tT<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> m_obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">// 可以</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token comment\">//shared_ptr&lt;Person> p(new Person(20));</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token comment\">// 若为数组</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">//shared_ptr&lt;Person[]> p(new Person[5]);</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">// 当多个智能指针指向一个对象</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tshared_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> p4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当最后一个对象销毁后对象才会销毁</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\tshared_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回使用强引用的数量</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\tshared_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> p2 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> p2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\tshared_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> p3 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> p3<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\tp4 <span class=\"token operator\">=</span> p3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> p4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> p4<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Person(int)</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>2</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>3</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>4</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>2</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>~Person()</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>3</pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"循环引用\"><a class=\"anchor\" href=\"#循环引用\">#</a> 循环引用</h5>\n<ul>\n<li><code>weak_ptr</code>  可以解决 <code>share_ptr</code>  循环引用导致强引用</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tweak_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> m_person<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 弱引用解决循环引用问题</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Car()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~ Car()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>Car<span class=\"token operator\">></span> m_car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token operator\">~</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~ Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tshared_ptr<span class=\"token operator\">&lt;</span>Car<span class=\"token operator\">></span> <span class=\"token function\">car</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 两个强引用循环引用，导致对象无法销毁</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tperson<span class=\"token operator\">-></span>m_car <span class=\"token operator\">=</span> car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcar<span class=\"token operator\">-></span>m_person <span class=\"token operator\">=</span> person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>Person()</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>Car()</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>~ Person()</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>~ Car()</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"unique_ptr\"><a class=\"anchor\" href=\"#unique_ptr\">#</a>  <code>unique_ptr</code></h4>\n<blockquote>\n<p><code>unique_ptr</code>  也会对一个对象产生强引用，它可以确保同一时间只有一个指针指向对象</p>\n</blockquote>\n<ul>\n<li>当 <code>unique_ptr</code>  销毁时 (作用域结束时)，其指向的对象也就自动销毁了</li>\n<li>可以使用 <code>std::move</code>  函数转移 <code>unique_ptr</code>  的所有权</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//ptr1 强引用着 Person 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 转移之后，ptr2 强引用着 Person 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>unique_ptr<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "汇编与STl新特征",
                "C++",
                "计算机科学"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E7%90%86%E8%A7%A3cpp/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E7%90%86%E8%A7%A3cpp/",
            "title": "汇编基础理解C++",
            "date_published": "2023-03-04T13:51:24.536Z",
            "content_html": "<h4 id=\"汇编的用途\"><a class=\"anchor\" href=\"#汇编的用途\">#</a> 汇编的用途</h4>\n<ul>\n<li>掌握编程语言，代码的本质</li>\n<li>破解</li>\n<li>...</li>\n</ul>\n<h4 id=\"汇编\"><a class=\"anchor\" href=\"#汇编\">#</a> 汇编</h4>\n<blockquote>\n<p>汇编语言与机器语言 <code>一一对应</code> ，每一条机器语言指令都有与之 <code>对应</code> 的汇编指令<br />\n高级语言可以通过编译得到汇编语言 / 机器语言，但 <code>汇编语言/机器语言</code> 几乎 <code>不</code> 可能还原成高级语言<br />\n Visual studio 在调试下右键 <code>转汇编</code></p>\n</blockquote>\n<figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">9</span>: \tint arrray<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> &#123; <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> &#125;<span class=\"token comment\">; //C++ 语言</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>汇编<span class=\"token operator\">-</span>   地址  机器指令 汇编代码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>00007FF7BA87191C C7 <span class=\"token number\">45</span> <span class=\"token number\">08</span> <span class=\"token number\">01</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>arrray<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>00007FF7BA871923 C7 <span class=\"token number\">45</span> 0C <span class=\"token number\">02</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>0Ch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>00007FF7BA87192A C7 <span class=\"token number\">45</span> <span class=\"token number\">10</span> <span class=\"token number\">03</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>10h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbu3LChB3TaEOicoSlNDYt5l3KibPGojpqMrcYctmJst3VrnXcgSJsvIqoicGFU9xSD1OYCXvico3nUibrw/0?wx_fmt=png\" alt=\"高级语言转换过程\" title=\"高级语言转换过程\" /></p>\n<ul>\n<li>编译型语言 (不依赖虚拟机)</li>\n</ul>\n<blockquote>\n<p><code>C\\C++\\OC\\Swift</code></p>\n</blockquote>\n<ul>\n<li>脚本语言</li>\n</ul>\n<blockquote>\n<p><code>Python\\JS\\PHP</code></p>\n</blockquote>\n<ul>\n<li>编译型语言 (依赖虚拟机)</li>\n</ul>\n<blockquote>\n<p>Java\\Ruby</p>\n</blockquote>\n<h4 id=\"visual-studio-2022常用快捷键\"><a class=\"anchor\" href=\"#visual-studio-2022常用快捷键\">#</a> Visual studio 2022 常用快捷键</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbu3LChB3TaEOicoSlNDYt5l3XkichAkR5mjxBliczsz07tNu0uLdsibK6KM5yhhiaNCK6CXLNMaZlSXMJw/0?wx_fmt=png\" alt=\"常用快捷键\" title=\"常用快捷键\" /></p>\n<h4 id=\"为什么c支持函数重载\"><a class=\"anchor\" href=\"#为什么c支持函数重载\">#</a> 为什么 C++ 支持函数重载</h4>\n<blockquote>\n<p>采用 <code>name mangling</code>  或者 <code>name decoration</code>  技术</p>\n</blockquote>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_0\"> C++ 编译器默认会对 <code>符号名</code>  (比如函数名) 进行改变，修饰</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> 重载时会生成多个不用的函数名，不同编译器 ( <code>MSVC,g++</code> ) 有不同的生成规则</label></li>\n</ul>\n<h4 id=\"默认参数\"><a class=\"anchor\" href=\"#默认参数\">#</a> 默认参数</h4>\n<ul>\n<li>默认参数必须从右边开始</li>\n<li>如果同时有声明，实现，默认参数只能放在函数声明中</li>\n</ul>\n<h4 id=\"指针存储函数名\"><a class=\"anchor\" href=\"#指针存储函数名\">#</a> 指针存储函数名</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 函数指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">p</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test(int) - \"</span><span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> test<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指针存储函数名</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"extern-c\"><a class=\"anchor\" href=\"#extern-c\">#</a> extern &quot;C&quot;</h4>\n<blockquote>\n<p>被 extern &quot;C&quot; 修饰的代码会按照 <code>C</code>  语言的方式去编译，用在 C 和 C++ 混合开发</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用 C 编译函数重载</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span>  <span class=\"token comment\">// 使用大括号 C 编译内部</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">//“func”: 无法重载具有外部 \"C\" 链接的</span></pre></td></tr></table></figure><blockquote>\n<p>如果函数同时有声明和实现，要让函数声明被 <code>extern &quot;C&quot;</code>  修饰，函数实现可以不修饰 (声明和实现都放，或者放声明处)</p>\n</blockquote>\n<h4 id=\"cpp使用c语言开源库\"><a class=\"anchor\" href=\"#cpp使用c语言开源库\">#</a>  <code>cpp</code>  使用 C 语言开源库</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//math.c 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span>  <span class=\"token comment\">// 使用 c 来编译 c 函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>输出</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>30</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>10</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"c文件写入头文件\"><a class=\"anchor\" href=\"#c文件写入头文件\">#</a>  <code>C</code>  文件写入头文件</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//math.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span>  <span class=\"token comment\">// 使用 c 来编译头文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"math.h\"</span> </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>输出</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>30</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>10</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"宏定义\"><a class=\"anchor\" href=\"#宏定义\">#</a> 宏定义</h4>\n<ul>\n<li>C<ins> 默认会定义宏 <code>#define _cplusplus</code> , 将此应用到都文件中判断是否为 C</ins> 环境来决定是否用 C 编译</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_cplusplus</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//_cplusplus</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">delta</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_cplusplus</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//_cplusplus</span></span></pre></td></tr></table></figure><h4 id=\"pragma-once\"><a class=\"anchor\" href=\"#pragma-once\">#</a>  <code>#pragma once</code></h4>\n<ul>\n<li>我们经常使用 <code>#ifndef,#define,#endif</code>  来防止头文件的内容被重复包含</li>\n<li><code>#pragma once</code>  可以防止整个文件的内容被重复包含</li>\n</ul>\n<h4 id=\"内联函数与宏\"><a class=\"anchor\" href=\"#内联函数与宏\">#</a> 内联函数与宏</h4>\n<ul>\n<li>内联函数和宏，都可以减少函数调用的开销</li>\n<li>对比宏，内联函数多了语法检测和函数特性</li>\n</ul>\n<h4 id=\"c有些表达式可以被赋值\"><a class=\"anchor\" href=\"#c有些表达式可以被赋值\">#</a> C++ 有些表达式可以被赋值</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 赋值给了 a</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 赋值给了 b</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"const\"><a class=\"anchor\" href=\"#const\">#</a>  <code>const</code></h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//const 的含义，const 修饰的是右边的内容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 修饰 * p1 是常量，而 p1 地址可以改</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同 p1,const 可以和类型互换位置</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p3 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//const 修饰右边的内容 p3 是地址常量，不变，而 * p3 可以修改</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p4 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p5 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//p4 和 p5 等价，地址和 * p4,*p5 都是常量不能变</span></pre></td></tr></table></figure><h4 id=\"引用\"><a class=\"anchor\" href=\"#引用\">#</a> 引用</h4>\n<ul>\n<li>引用的本质就是弱化了的指针</li>\n<li>一个引用占用一个指针的大小</li>\n<li>在 C 语言中，使用指针 (Pointer) 可以间接获取，修改某个变量的值</li>\n<li>在 C++ 中，使用引用 (Reference) 可以起到指针类似的功能<br />\n<strong>注意</strong>:</li>\n<li>引用相当于变量的别名 (基本数据类型，枚举，结构体，类，数组等，都可以有引用)</li>\n<li>对引用做计算，就是对引用所指向的变量做计算</li>\n<li>在定义的事后就必须初始化，一旦指向了某个变量，就不可以再改变，&quot;从一而终&quot;</li>\n<li>可以利用引用初始化另一个引用，相当于某个变量的多个别名</li>\n<li>不存在 (引用的引用，指向引用的指针，引用数组)</li>\n<li>引用存在的价值：比指针更安全，函数返回值可以被赋值</li>\n<li>const 必须卸载 &amp; 符号的左边，才能算常引用</li>\n</ul>\n<h5 id=\"const引用的特点\"><a class=\"anchor\" href=\"#const引用的特点\">#</a>  <code>const</code>  引用的特点</h5>\n<ul>\n<li>可以指向临时数据 (常量，表达式，函数返回值等)</li>\n<li>可以指向不同类型的数据</li>\n<li>作为函数参数时 (此规则也适用于 <code>const指针</code> )</li>\n</ul>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_2\"> 可以接受 <code>const</code>  和非 <code>cons</code>  实参 ( <code>非const</code>  引用，只能接受 <code>非const</code>  实参)</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_3\">  可以跟非 const 引用构成重载</label></li>\n</ul>\n<ul>\n<li>当常引用指向了 <code>不同类型</code> 的数据时，会产生 <code>临时变量</code> ，即引用指向的并不是初始化时的那个变量</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span><span class=\"token operator\">&amp;</span> aAge <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tage <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF71556184D C7 <span class=\"token number\">45</span> <span class=\"token number\">04</span> 0A <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>0Ah  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t00007FF715561854 8B <span class=\"token number\">45</span> <span class=\"token number\">04</span>             mov         eax<span class=\"token punctuation\">,</span>dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t00007FF715561857 <span class=\"token number\">89</span> <span class=\"token number\">45</span> <span class=\"token number\">44</span>             mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>44h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t00007FF71556185A <span class=\"token number\">48</span> 8D <span class=\"token number\">45</span> <span class=\"token number\">44</span>          lea         rax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>44h<span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t00007FF71556185E <span class=\"token number\">48</span> <span class=\"token number\">89</span> <span class=\"token number\">45</span> <span class=\"token number\">28</span>          mov         qword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>28h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>rax  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t00007FF715561862 C7 <span class=\"token number\">45</span> <span class=\"token number\">04</span> 1E <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>1Eh</pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"math.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>两者引用：机器码相同，汇编相同</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> ref <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tref <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">9</span>: \tint<span class=\"token operator\">&amp;</span> ref <span class=\"token operator\">=</span> age<span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF759091914 <span class=\"token number\">48</span> 8D <span class=\"token number\">45</span> <span class=\"token number\">04</span>          lea         rax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>00007FF759091918 <span class=\"token number\">48</span> <span class=\"token number\">89</span> <span class=\"token number\">45</span> <span class=\"token number\">28</span>          mov         qword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>28h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>rax</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token number\">10</span>: \tref <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>00007FF75909191C <span class=\"token number\">48</span> 8B <span class=\"token number\">45</span> <span class=\"token number\">28</span>          mov         rax<span class=\"token punctuation\">,</span>qword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>28h<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>00007FF759091920 C7 <span class=\"token number\">00</span> 1E <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span>    mov         dword ptr <span class=\"token punctuation\">[</span>rax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>1Eh</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token number\">11</span>: \tint<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>age<span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>00007FF6CD505214 <span class=\"token number\">48</span> 8D <span class=\"token number\">45</span> <span class=\"token number\">04</span>          lea         rax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>00007FF6CD505218 <span class=\"token number\">48</span> <span class=\"token number\">89</span> <span class=\"token number\">45</span> <span class=\"token number\">28</span>          mov         qword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>28h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>rax  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token number\">12</span>: \t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>00007FF6CD50521C <span class=\"token number\">48</span> 8B <span class=\"token number\">45</span> <span class=\"token number\">28</span>          mov         rax<span class=\"token punctuation\">,</span>qword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span>28h<span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>00007FF6CD505220 C7 <span class=\"token number\">00</span> <span class=\"token number\">19</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span>    mov         dword ptr <span class=\"token punctuation\">[</span>rax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>19h</pre></td></tr></table></figure><h5 id=\"常引用数组\"><a class=\"anchor\" href=\"#常引用数组\">#</a> 常引用数组</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数组名 arr 起始就是数组的地址，也是数组首元素的地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 数组名 arr 可以看做是指向数组首元素的指针 (int *)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// int (&amp;ref)[3] = arr;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span>ref <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 常量要用常引用</span></pre></td></tr></table></figure><h4 id=\"汇编语言\"><a class=\"anchor\" href=\"#汇编语言\">#</a> 汇编语言</h4>\n<h5 id=\"汇编语言的种类\"><a class=\"anchor\" href=\"#汇编语言的种类\">#</a> 汇编语言的种类</h5>\n<ul>\n<li><code>8086</code>  汇编 ( <code>16bit</code> )</li>\n<li><code>x86</code>  汇编（ <code>32bit</code> )</li>\n<li><code>x64汇编(64bit)</code></li>\n<li>ARM 回避那 (嵌入式，移动设备)</li>\n<li>...</li>\n<li><code>x64</code>  汇编根据编译器不同，两种书写格式</li>\n</ul>\n<blockquote>\n<p><code>Intel</code> :<br />\nAT&amp;T</p>\n</blockquote>\n<h5 id=\"att汇编-vs-intel汇编\"><a class=\"anchor\" href=\"#att汇编-vs-intel汇编\">#</a> AT&amp;T 汇编 VS Intel 汇编</h5>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbu3LChB3TaEOicoSlNDYt5l3UxPJ64IgaEHgmkXITT6JSUialo3ibdNSMyia83jTyVdSpNp8N9S1N5Kibg/0?wx_fmt=png\" alt=\"image-20230302073341484\" /></p>\n<h4 id=\"寄存器与内存\"><a class=\"anchor\" href=\"#寄存器与内存\">#</a> 寄存器与内存</h4>\n<p>假设内存中有块红色内存空间的值是 3，现在想把它的值加 1，并将结果存储到蓝色内存空间</p>\n<ul>\n<li><code>cpu</code>  首先会将红色内存空间的值放到 <code>EAX</code>  寄存器中 <code>:mov eax</code> , 红色内存空间</li>\n<li>然后让 <code>eax</code>  寄存器与 <code>1</code>  相加:  <code>add eax,1</code></li>\n<li>最后将值赋值给内存空间: <code>mov</code>  蓝色内存空间， <code>eax</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ta <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">10</span>: \tint a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF6E7DA520D C7 <span class=\"token number\">45</span> <span class=\"token number\">04</span> <span class=\"token number\">05</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">11</span>: \ta <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>00007FF6E7DA5214 8B <span class=\"token number\">45</span> <span class=\"token number\">04</span>             mov         eax<span class=\"token punctuation\">,</span>dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>00007FF6E7DA5217 FF C0                inc         eax  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>00007FF6E7DA5219 <span class=\"token number\">89</span> <span class=\"token number\">45</span> <span class=\"token number\">04</span>             mov         dword ptr <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr></table></figure><h4 id=\"x64寄存器register\"><a class=\"anchor\" href=\"#x64寄存器register\">#</a> x64 寄存器 Register</h4>\n<ul>\n<li><code>RAX(包含EAX)\\REX\\RCX\\RDX</code> ：通用寄存器</li>\n<li><code>32bit:EAX\\EBX\\ECX\\EDX</code> ：通用寄存器</li>\n<li><code>16bit:AX\\BX\\CX\\DX</code> : 通用寄存器</li>\n<li><code>x64</code>  一个寄存器 <code>8</code>  个字节</li>\n<li><code>R</code>  开头的寄存器是 <code>64bit</code>  的，占 <code>8</code>  字节</li>\n<li><code>E</code>  开头的寄存器是 <code>32bit</code>  的，占 <code>4</code>  个字节</li>\n</ul>\n<h4 id=\"c内联汇编\"><a class=\"anchor\" href=\"#c内联汇编\">#</a> C++ 内联汇编</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 双下划，C++ 嵌入汇编执行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"x86汇编重要指令\"><a class=\"anchor\" href=\"#x86汇编重要指令\">#</a>  <code>x86</code>  汇编重要指令</h4>\n<ul>\n<li><code>mov</code>   <code>dest,src</code></li>\n</ul>\n<blockquote>\n<p>将 src 的内容赋值给 dest，类似于 dest = src</p>\n</blockquote>\n<ul>\n<li><code>[地址值]</code></li>\n</ul>\n<blockquote>\n<ul>\n<li>中括号 [] 里面放的都是内存地址</li>\n</ul>\n</blockquote>\n<pre><code>* `word`是2字节，`dword`是4字节(double word),`qword`是八字节(quad word)\n</code></pre>\n<ul>\n<li><code>call</code>  函数地址</li>\n</ul>\n<blockquote>\n<ul>\n<li>\n<p>调用函数，并不是真实地址</p>\n</li>\n<li>\n<p>CPU 大小端模式，大部分都是小端模式<br />\n小端模式：高高低低，高字节放高地址，低字节放低地址<br />\n一个变量的地址值，是它所在字节地址中的最小值</p>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li><code>lea</code>   <code>dest</code> ,  <code>[地址值]</code></li>\n</ul>\n<blockquote>\n<p>将地址赋值给 <code>dest</code> ，类似 <code>dest = 地址值</code></p>\n</blockquote>\n<ul>\n<li><code>ret </code></li>\n</ul>\n<blockquote>\n<p>函数返回</p>\n</blockquote>\n<ul>\n<li><code>xor</code>   <code>op1</code>  ,  <code>op2</code></li>\n</ul>\n<blockquote>\n<p>将 <code>op1</code>  和 <code>op2``异或</code> 的结果赋值给 <code>op1</code> , 类似于 <code>op1</code>  =  <code>op1</code>  ^  <code>op2</code></p>\n</blockquote>\n<ul>\n<li><code>add</code>    <code>op1</code> , <code>op2</code></li>\n</ul>\n<blockquote>\n<p>类似于 <code>op1 = op1 + op2</code></p>\n</blockquote>\n<ul>\n<li><code>sub</code>   <code>op1</code> , <code>op2</code></li>\n</ul>\n<blockquote>\n<p>类似于 <code>op1</code>  =  <code>op1</code>  -  <code>op2</code></p>\n</blockquote>\n<ul>\n<li><code>inc </code> op</li>\n</ul>\n<blockquote>\n<p>自增，类似于 op = op + 1</p>\n</blockquote>\n<ul>\n<li><code>dec</code>  op</li>\n</ul>\n<blockquote>\n<p>自减，类似于 op = op - 1</p>\n</blockquote>\n<ul>\n<li>\n<p><code>jmp</code>  内存地址</p>\n<ul>\n<li>跳转到某个内存地址去执行代码</li>\n<li>j 开头的一般都是跳转，大多是带条件的跳转，一般跟 <code>test</code> ， <code>cmp</code>  等指令配合使用<br />\n参考权威:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW50ZWwuY29tL2NvbnRlbnQvd3d3L3VzL2VuL2RldmVsb3Blci9hcnRpY2xlcy90ZWNobmljYWwvaW50ZWwtc2RtLmh0bWw=\">Intel 白皮书</span><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></li>\n</ul>\n</li>\n<li>\n<p><code>cmp</code>   <code>eax</code>  , b</p>\n</li>\n</ul>\n<blockquote>\n<p><code>cmp</code>  是 ``compare <code>的简称，比较</code>  eax <code>和</code>  b` 的值是否相等</p>\n</blockquote>\n<h4 id=\"跳转指令表格\"><a class=\"anchor\" href=\"#跳转指令表格\">#</a> 跳转指令表格</h4>\n<table>\n<thead>\n<tr>\n<th>JE, JZ</th>\n<th></th>\n<th>结果为零则跳转 (相等时跳转)</th>\n<th></th>\n<th>ZF=1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>equal</td>\n<td>zero</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JNE, JNZ</td>\n<td></td>\n<td>结果不为零则跳转 (不相等时跳转)</td>\n<td></td>\n<td>ZF=0</td>\n</tr>\n<tr>\n<td>not equal</td>\n<td>not  zero</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JS</td>\n<td></td>\n<td>结果为负则跳转</td>\n<td></td>\n<td>SF=1</td>\n</tr>\n<tr>\n<td>sign (有符号 \\ 有负号)</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JNS</td>\n<td></td>\n<td>结果为非负则跳转</td>\n<td></td>\n<td>SF=0</td>\n</tr>\n<tr>\n<td>not sign (无符号 \\ 无负号)</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JP, JPE</td>\n<td></td>\n<td>结果中 1 的个数为偶数则跳转</td>\n<td></td>\n<td>PF=1</td>\n</tr>\n<tr>\n<td>parity even</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JNP, JPO</td>\n<td></td>\n<td>结果中 1 的个数为偶数则跳转</td>\n<td></td>\n<td>PF=0</td>\n</tr>\n<tr>\n<td>parity odd</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JO</td>\n<td></td>\n<td>结果溢出了则跳转</td>\n<td></td>\n<td>OF=1</td>\n</tr>\n<tr>\n<td>overflow</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JNO</td>\n<td></td>\n<td>结果没有溢出则跳转</td>\n<td></td>\n<td>OF=0</td>\n</tr>\n<tr>\n<td>not overflow</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JB, JNAE</td>\n<td></td>\n<td>小于则跳转 (无符号数)</td>\n<td></td>\n<td>CF=1</td>\n</tr>\n<tr>\n<td>below</td>\n<td>not above equal</td>\n<td></td>\n<td>&lt;</td>\n<td></td>\n</tr>\n<tr>\n<td>JNB, JAE</td>\n<td></td>\n<td>大于等于则跳转 (无符号数)</td>\n<td></td>\n<td>CF=0</td>\n</tr>\n<tr>\n<td>not below</td>\n<td>above  equal</td>\n<td></td>\n<td>&gt;=</td>\n<td></td>\n</tr>\n<tr>\n<td>JBE, JNA</td>\n<td></td>\n<td>小于等于则跳转 (无符号数)</td>\n<td></td>\n<td>CF=1 or ZF=1</td>\n</tr>\n<tr>\n<td>below equal</td>\n<td>not above</td>\n<td></td>\n<td>&lt;=</td>\n<td></td>\n</tr>\n<tr>\n<td>JNBE, JA</td>\n<td></td>\n<td>大于则跳转 (无符号数)</td>\n<td></td>\n<td>CF=0 and ZF=0</td>\n</tr>\n<tr>\n<td>not below equal</td>\n<td>above</td>\n<td></td>\n<td>&gt;</td>\n<td></td>\n</tr>\n<tr>\n<td>JL, JNGE</td>\n<td></td>\n<td>小于则跳转 (有符号数)</td>\n<td></td>\n<td>SF≠ OF</td>\n</tr>\n<tr>\n<td>little</td>\n<td>not great equal</td>\n<td></td>\n<td>&lt;</td>\n<td></td>\n</tr>\n<tr>\n<td>JNL, JGE</td>\n<td></td>\n<td>大于等于则跳转 (有符号数)</td>\n<td></td>\n<td>SF=OF</td>\n</tr>\n<tr>\n<td>not little</td>\n<td>great  equal</td>\n<td></td>\n<td>&gt;=</td>\n<td></td>\n</tr>\n<tr>\n<td>JLE, JNG</td>\n<td></td>\n<td>小于等于则跳转 (有符号数)</td>\n<td></td>\n<td>ZF=1 or SF≠ OF</td>\n</tr>\n<tr>\n<td>little equal</td>\n<td>not great</td>\n<td></td>\n<td>&lt;=</td>\n<td></td>\n</tr>\n<tr>\n<td>JNLE, JG</td>\n<td></td>\n<td>大于则跳转 (有符号数)</td>\n<td></td>\n<td>ZF=0 and SF=OF</td>\n</tr>\n<tr>\n<td>not little equal</td>\n<td>great</td>\n<td></td>\n<td>&gt;</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"汇编符号说明\"><a class=\"anchor\" href=\"#汇编符号说明\">#</a> 汇编符号说明</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbu3LChB3TaEOicoSlNDYt5l3UsvIvXAQyQ9eSXkLbt1AEiavYQqklEPavj3jWYzSsl4QDGSammyfyJQ/0?wx_fmt=png%22%E6%B1%87%E7%BC%96%E7%AC%A6%E5%8F%B7%E8%AF%B4%E6%98%8E%22\" alt=\"汇编符号说明\" /></p>\n<h4 id=\"参考的c变量名规范\"><a class=\"anchor\" href=\"#参考的c变量名规范\">#</a> 参考的 C++ 变量名规范</h4>\n<ul>\n<li>全局变量: <code>g_</code></li>\n<li>成员变量： <code>m_</code></li>\n<li>静态变量:  <code>s_</code></li>\n<li>常量:  <code>c_</code></li>\n</ul>\n<h4 id=\"类补充\"><a class=\"anchor\" href=\"#类补充\">#</a> 类补充</h4>\n<ul>\n<li><code>struct</code>  默认 <code>public</code></li>\n<li><code>class</code>  默认 <code>private</code></li>\n</ul>\n<h5 id=\"如何利用指针间接访问所指向量的成员变量\"><a class=\"anchor\" href=\"#如何利用指针间接访问所指向量的成员变量\">#</a> 如何利用指针间接访问所指向量的成员变量</h5>\n<ul>\n<li>从指针中取出对象的地址</li>\n<li>利用对象的地址  <code>+</code>  成员变量的偏移量计算出成员变量的地址</li>\n<li>根据成员变量的地址访问成员变量的存储空间</li>\n<li>类函数默认会被赋值为 <code>ccccccc</code> ，</li>\n<li><code>cc -&gt; int3</code>  : 起到断点的作用</li>\n<li>中断:interrupt</li>\n</ul>\n<h4 id=\"内存空间的布局\"><a class=\"anchor\" href=\"#内存空间的布局\">#</a> 内存空间的布局</h4>\n<blockquote>\n<p>每个应用都有自己独立的内存空间</p>\n</blockquote>\n<ul>\n<li>栈空间</li>\n</ul>\n<blockquote>\n<p>每调用一个函数就会给它分配一段连续的栈空间，等函数调用完毕后会自动回收这段栈空间<br />\n自动分配和回收</p>\n</blockquote>\n<ul>\n<li>堆空间</li>\n</ul>\n<blockquote>\n<p>需要主动去申请和释放，在程序运行过程，为了能够自由控制内存的声明周期，大小，会经常使用堆空间的内存</p>\n</blockquote>\n<ul>\n<li>代码区 (段)</li>\n</ul>\n<blockquote>\n<p>用于存放代码</p>\n</blockquote>\n<ul>\n<li>全局区 (数据段)</li>\n</ul>\n<blockquote>\n<p>用于存放全局变量等</p>\n</blockquote>\n<h4 id=\"对初始内存初始化\"><a class=\"anchor\" href=\"#对初始内存初始化\">#</a> 对初始内存初始化</h4>\n<blockquote>\n<p><code>memset</code>  函数是将较大的数据结构 (比如对象，数组等) 内存清零的比较快的方法</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//*p=0;// 并不能全部清零，仅前四个字节</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从 p 地址开始，连续个字节，都设置为 0</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Person person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person<span class=\"token punctuation\">.</span>m_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>person<span class=\"token punctuation\">.</span>m_age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>person<span class=\"token punctuation\">.</span>m_height <span class=\"token operator\">=</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>person<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 赋值 person 为零</span></pre></td></tr></table></figure><h5 id=\"new的初始化\"><a class=\"anchor\" href=\"#new的初始化\">#</a>  <code>new</code>  的初始化</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 未被初始化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 被初始化为 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 被初始化为 5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 数组元素未被初始化</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//3 个数组元素都被初始化为 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p6 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//3 个数组元素都被初始化为 0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p7 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 数组首元素被初始化为 5，其它元素被初始化为零</span></pre></td></tr></table></figure><h4 id=\"malloc不会调用类的构造析构函数\"><a class=\"anchor\" href=\"#malloc不会调用类的构造析构函数\">#</a>  <code>malloc</code>  不会调用类的构造 &amp; 析构函数</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"释放Person()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tPerson person<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 会调用默认构造函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Person<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 申请空间也会调用默认构造函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">//malloc 并不调用默认构造函数，</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> q <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 也不会调用析构函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Person ()</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Person ()</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>释放 Person ()</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>释放 Person ()</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"成员变量的初始化\"><a class=\"anchor\" href=\"#成员变量的初始化\">#</a> 成员变量的初始化</h4>\n<ul>\n<li><strong>全局区默认初始化为 0</strong></li>\n<li>如果自定义了构造函数，除了全局区，其他内存空间的成员变量默认都不会被初始化，需要开发人员手动初始化。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Person g_person<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 全局变量初始化为 0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> g_age<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 全局变量默认初始化为 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//Person person; // 堆空间：没有初始化成员变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 堆空间：没有初始化成员变量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p0 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 堆空间：成员变量初始化为 0，// 如果有构造函数则不进行初始化</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> g_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> g_person<span class=\"token punctuation\">.</span>m_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//cout &lt;&lt; person.m_age &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> p0<span class=\"token operator\">-></span>m_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token operator\">-></span>m_age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/* 输出:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>0</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>0</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>-842150451</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>0</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"构造函数的相互调用\"><a class=\"anchor\" href=\"#构造函数的相互调用\">#</a> 构造函数的相互调用</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">//Person (0,0)// 不可，此命令汇编申请临时对象，而非调用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">m_age</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_height</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"call汇编机械码\"><a class=\"anchor\" href=\"#call汇编机械码\">#</a> call 汇编机械码</h4>\n<ul>\n<li>call 汇编机械码 <code>E8</code>  直接调用，写死</li>\n<li>call 汇编机械码 <code>FF</code>  间接调用，可变</li>\n</ul>\n<h4 id=\"调用多态性虚表的汇编过程\"><a class=\"anchor\" href=\"#调用多态性虚表的汇编过程\">#</a> 调用多态性虚表的汇编过程</h4>\n<figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>调用run</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Animal <span class=\"token operator\">*</span>cat <span class=\"token operator\">=</span> new Cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cat<span class=\"token operator\">-</span><span class=\"token operator\">></span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>ebp<span class=\"token operator\">-</span><span class=\"token number\">8</span>是指针变量cat的地址</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>eax存储的是cat对象的地址</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>move eax<span class=\"token punctuation\">,</span>dword ptr <span class=\"token punctuation\">[</span>ebp<span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>取出cat对象的最前面<span class=\"token number\">4</span>个字节<span class=\"token punctuation\">(</span>虚表地址<span class=\"token punctuation\">)</span>给edx</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mov edx<span class=\"token punctuation\">,</span> dword ptr <span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>跳出虚表的最前面<span class=\"token number\">4</span>个字节，取出<span class=\"token number\">4</span>个字节赋值给eax</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>取出cat::run的函数调用地址给eax</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>mov eax <span class=\"token punctuation\">,</span>dword ptr <span class=\"token punctuation\">[</span>edx<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>call cat::run</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>call eax</pre></td></tr></table></figure><h4 id=\"单例模式简\"><a class=\"anchor\" href=\"#单例模式简\">#</a> 单例模式 (简)</h4>\n<blockquote>\n<p>设计模式的一种，保证某个类永远只创建一个对象</p>\n</blockquote>\n<ul>\n<li>构造函数私有化</li>\n<li>定义一个私有的 static 成员变量指向唯一的那个单例对象</li>\n<li>提供一个公共的访问单例对象的接口</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 安全位置小火箭 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rocket</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">Rocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Rocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">static</span> Rocket <span class=\"token operator\">*</span>ms_rocket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">static</span> Rocket <span class=\"token operator\">*</span><span class=\"token function\">sharedRocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 这里要考虑多线程的安全</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ms_recket <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                ms_rocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Rocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> ms_rocket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteRocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ms_rocket <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">delete</span> ms_rocket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            ms_rocket <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"const成员\"><a class=\"anchor\" href=\"#const成员\">#</a> const 成员</h4>\n<ul>\n<li>const 成员：被 const 修饰的成员变量，非静态成员函数</li>\n<li>const 成员变量\n<ul>\n<li>必须初始化 (类内部初始化) 可以在声明的时候直接初始化赋值</li>\n<li>非 static 的 const 成员变量还可以再初始化列表中初始化</li>\n</ul>\n</li>\n<li>const 成员函数 (非静态)</li>\n<li>const 关键字写在参数列表后面，函数的声明和实现必须带 const</li>\n<li>内部不能修改非 static 成员函数</li>\n<li>内部只能调用 const 成员函数，static 成员函数</li>\n<li>非 const 成员函数可以调用 const 成员函数</li>\n<li>const 成员函数和非 const 成员函数构成重载</li>\n<li>非 const 对象 (指针) 优先调用非 const 成员函数</li>\n<li>const 对象 (指针) 只能调用 const 成员函数，static 成员函数</li>\n</ul>\n<h4 id=\"拷贝函数\"><a class=\"anchor\" href=\"#拷贝函数\">#</a> 拷贝函数</h4>\n<ul>\n<li>利用已经存在的 car3 对象创建一个 car3 新对象</li>\n<li>car4 初始化会调用拷贝构造函数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">car</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> price <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">m_price</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_length</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Car(int price = 0,int length = 0)\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 拷贝构造函数 (会默认生成浅拷贝构造函数)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Car <span class=\"token operator\">&amp;</span>car<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">m_price</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>m_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_length</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>m_length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Car(const Car &amp;car)\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">// m_price = car.m_price;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// m_length = car.m_length;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tcout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"price = \"</span> <span class=\"token operator\">&lt;&lt;</span> m_price <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" , length=\"</span><span class=\"token operator\">&lt;&lt;</span>m_length <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Car <span class=\"token function\">car3</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Car <span class=\"token function\">car4</span><span class=\"token punctuation\">(</span>car3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>car4<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>浅拷贝 (shallow copy): 指针类型的变量只会拷贝地址值<br />\n深拷贝 (deep copy): 将指针指向的内容拷贝到新的存储空间</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>m_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>name <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 申请新的存储空间</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tm_name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>m_name<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"浅深拷贝\"><a class=\"anchor\" href=\"#浅深拷贝\">#</a> 浅，深拷贝</h4>\n<ul>\n<li>编译器默认的提供的拷贝是 <code>浅拷贝</code>  (shallow copy)</li>\n<li>将一个对象中所有成员变量的值拷贝到另一个对象</li>\n<li>如果某个成员变量是个指针，只会拷贝指针中存储的地址值，并不会拷贝指针指向的内存空间</li>\n<li>可能会导致堆空间多次 free 的问题</li>\n<li>如果需要实现 <code>深拷贝</code>  (deep copy)，就需要自定义拷贝构造函数</li>\n<li>将指针类型的成员变量所指向的内存空间，拷贝到新的内存空间</li>\n</ul>\n<h4 id=\"对象类型的参数和返回值\"><a class=\"anchor\" href=\"#对象类型的参数和返回值\">#</a> 对象类型的参数和返回值</h4>\n<blockquote>\n<p>使用对象类型作为函数的参数或者返回值，可能会产生一些不必要的中间对象，返回引用可避免中间值</p>\n</blockquote>\n<h4 id=\"匿名对象\"><a class=\"anchor\" href=\"#匿名对象\">#</a> 匿名对象</h4>\n<blockquote>\n<p>匿名对象：没有变量名，没有被指针指向的对象，用完后马上调用析构</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 一次性对象，调用完之后立即释放空间</span></pre></td></tr></table></figure><h4 id=\"隐式构造转换构造\"><a class=\"anchor\" href=\"#隐式构造转换构造\">#</a> 隐式构造 / 转换构造</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Person p1 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Person <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 都会调用单构造函数</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 隐式构造</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Person <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 隐式构造，会将 40 传递给 Person 单函数对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>可以通过关键字 explicit 在定义构造函数时禁止掉隐式构造</p>\n</blockquote>\n<h4 id=\"编译器何时自动生成构造函数\"><a class=\"anchor\" href=\"#编译器何时自动生成构造函数\">#</a> 编译器何时自动生成构造函数</h4>\n<blockquote>\n<p>virtual function table 在汇编显示:vftable</p>\n</blockquote>\n<ul>\n<li>成员变量在声明的同时进行了初始化</li>\n<li>有定义虚函数</li>\n<li>虚继承其他类</li>\n<li>包含了对象类型的成员，且这个成员有构造函数 (编译器生成或自定义)</li>\n<li>父类有构造函数 (编译器生成或自定义)</li>\n<li>对象创建后，需要做一些额外操作时 (比如内存操作，函数调用)，编译器一般都会为期生成构造函数</li>\n</ul>\n<h4 id=\"内部类\"><a class=\"anchor\" href=\"#内部类\">#</a> 内部类</h4>\n<blockquote>\n<p>如果将类 A 定义在类 C 的内部，那么类 A 就是一个内部类 (嵌套类)</p>\n</blockquote>\n<ul>\n<li>内部类的特点\n<ul>\n<li>支持 public,protected,private 权限</li>\n<li>成员函数可以直接访问其外部类对象的所有成员 (反过来不行)</li>\n<li>成员函数可以直接不带类名，对象名访问其外部类的 static 成员</li>\n<li>不会影响外部类的内存布局</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"局部类\"><a class=\"anchor\" href=\"#局部类\">#</a> 局部类</h4>\n<blockquote>\n<p>在一个 <code>函数内部</code> 定义的类，称为局部类</p>\n</blockquote>\n<ul>\n<li>局部域仅限于所在的函数内部</li>\n<li>其所有的成员必须定义在类内部，不允许定义 static 成员变量</li>\n<li>成员函数不能直接访问函数的局部变量 (static 变量除外)</li>\n<li>在函数内部定义的类如果未调用类和函数，并不会每次调用函数都调用类</li>\n</ul>\n<h4 id=\"类型转换\"><a class=\"anchor\" href=\"#类型转换\">#</a> 类型转换</h4>\n<ul>\n<li>C 语言风格类型转换符\n<ul>\n<li>(type)expression</li>\n<li>type(expression)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span> d2 <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>C++ 中有 <code>4</code>  个类型转换符\n<ul>\n<li>static_cast</li>\n<li>dynamic_cast</li>\n<li>reinterpret_cast</li>\n<li>const_cast</li>\n<li>使用格式:xx_cast&lt;type&gt;(expression)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"const_cast\"><a class=\"anchor\" href=\"#const_cast\">#</a> const_cast</h5>\n<blockquote>\n<p>一般用于 <code>去</code> 除 <code>const</code>  属性，将 <code>const</code>  转换为 <code>非const</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">const</span> Person<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 实现去除 const 属性的强制类型转换</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">const_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 汇编语言相同</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t12: \tPerson* p2 = const_cast&lt;Person*>(p1);</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>00007FF773E2197C 48 8B 45 08          mov         rax,qword ptr [rbp+8]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>00007FF773E21980 48 89 45 28          mov         qword ptr [rbp+28h],rax</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t13: \tPerson* p3 = (Person*)p1;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>00007FF773E21984 48 8B 45 08          mov         rax,qword ptr [rbp+8]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>00007FF773E21988 48 89 45 48          mov         qword ptr [rbp+48h],rax</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"dynamic_cast\"><a class=\"anchor\" href=\"#dynamic_cast\">#</a> dynamic_cast</h5>\n<blockquote>\n<p>一般用于 <code>多态</code> 类型的转换，有 <code>运行</code> 时 <code>安全检测</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tPerson<span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"P1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> p1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"P2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> p2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 用于多态类型转换 student 和 Person 没有多态没有虚函数会报错</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 不太安全，Person 赋值给 student，子类赋值给父类，不安全</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tStudent<span class=\"token operator\">*</span> stu1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Student <span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不安全</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tStudent<span class=\"token operator\">*</span> stu2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Student <span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 安全</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 其它方式会把地址完全转过来</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"stu1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> stu1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不安全会清空，安全检测</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"stu2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> stu2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>P1 = 0000019F7CD6C8B0</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>P2 = 0000019F7CD6C2C0 </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>stu1 = 0000000000000000 //p1 赋值失败</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>stu2 = 0000019F7CD6C2C0 //p2 成功</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"static_cast\"><a class=\"anchor\" href=\"#static_cast\">#</a> static_cast</h5>\n<ul>\n<li>对比 dynamic_cast，缺乏运行时安全检测</li>\n<li><code>不能交叉转换</code>  (不是同一继承体系的，无法转换)</li>\n<li>常用语 <code>基本数据类型</code> 的转换， <code>非const转成const</code></li>\n<li>适用较广</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Person<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tCar<span class=\"token operator\">*</span> c1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Car<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 报错，交叉转换不允许 car 和 Person 没有任何关系</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">//Car* c2 = static_cast&lt;Car*>(p1);</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 基本类型转换</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"reinterpret_cast\"><a class=\"anchor\" href=\"#reinterpret_cast\">#</a> reinterpret_cast</h5>\n<ul>\n<li>属于比较 <code>底层的强制转换</code> ，没有任何类型检查和格式转换， <code>仅仅是简单的二进制数据拷贝</code></li>\n<li><code>可以交叉转换</code></li>\n<li><code>可以将指针和整数相互转换</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 小端模式从后面开始读</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 二进制 0000 1010 0000 0000 0000 0000</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 十六进制: 0A 00 00 00</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//int a = 10;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//double 八个字节，double 和 int 并不能简单的二进制 copy</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 00 00 00 00 00 00 24 40</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 二进制纯 copy</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a= \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"d= \"</span> <span class=\"token operator\">&lt;&lt;</span> d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>a= 10</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>d= 8.33713e+80</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>参考资料:《30 小时快速精通 C++ 和外挂》</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW50ZWwuY29tL2NvbnRlbnQvd3d3L3VzL2VuL2RldmVsb3Blci9hcnRpY2xlcy90ZWNobmljYWwvaW50ZWwtc2RtLmh0bWw=\">https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html</span> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "计算机科学",
                "C++",
                "汇编与STl新特征",
                "C++",
                "计算机科学",
                "汇编"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "title": "C++异常处理",
            "date_published": "2023-03-01T04:52:35.000Z",
            "content_html": "<h4 id=\"异常\"><a class=\"anchor\" href=\"#异常\">#</a> 异常</h4>\n<ul>\n<li>异常是程序运行过程中出现问题</li>\n<li>&quot;异常&quot; 并不经常出现</li>\n<li>处理异常使程序像没有发生过问题一样继续执行</li>\n</ul>\n<h4 id=\"何时使用异常处理\"><a class=\"anchor\" href=\"#何时使用异常处理\">#</a> 何时使用异常处理</h4>\n<ul>\n<li>异常处理 用于处理同步错误 (语句执行时发生的错误)</li>\n<li>常见的异常处理错误:</li>\n</ul>\n<blockquote>\n<p>数组下标越界，算法溢出，被零除，函数参数不合法，内存不够引起的内存分配不成功</p>\n</blockquote>\n<ul>\n<li>异常处理不是用于处理异步事件相关的错误的</li>\n</ul>\n<blockquote>\n<p>磁盘读写结束，网络信息到达，点击鼠标或键盘，这些与程序的控制流程并行，独立</p>\n</blockquote>\n<h4 id=\"异常处理的基本思想\"><a class=\"anchor\" href=\"#异常处理的基本思想\">#</a> 异常处理的基本思想</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtdBEE0yRM2cl2h5S9z9t0B9HbyfO9KGNscBicHTwbSn5lK5u8K1mqqK4mb7F4m4rQicLVPoNNCWiaOA/0?wx_fmt=png\" alt=\"异常处理额基本思想\" title=\"异常处理额基思想\" /></p>\n<h4 id=\"异常处理的语法\"><a class=\"anchor\" href=\"#异常处理的语法\">#</a> 异常处理的语法</h4>\n<ul>\n<li>抛掷异常的程序段</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">throw</span> 表达式<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表达式子可以是变量也可以是语句或小段代码</span></pre></td></tr></table></figure><ul>\n<li>捕获并处理异常的程序段</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t复合语句<span class=\"token punctuation\">(</span>保护段<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>异常声明<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t复合语句<span class=\"token punctuation\">(</span>异常处理程序<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>异常声明<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t复合语句</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><ul>\n<li>若有异常则通过 <code>throw</code>  创建一个异常对象并抛掷</li>\n<li>将可能抛出异常的程序段嵌在 <code>try</code>  块之中。通过正常的顺序执行到达 <code>try</code>  语句，然后执行 try 块内的保护段</li>\n<li>如果在保护段执行期间没有引起异常，那么跟在 try 块后的 catch 子句就不执行。程序从 try 块后的最后一个 catch 子句后面的语句继续执行</li>\n<li>catch 子句按其在 try 块后出现的顺序被检查。匹配的 catch 子句将被捕获并处理异常 (或继续抛掷异常)</li>\n<li>如果匹配的处理器未找到，则库函数 <code>terminate</code>  将被自动调用，其默认是调用 <code>abort终止程序</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>处理除零异常</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过 throw 创建 x 的异常对象抛掷给 x</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"5 / 2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"8 / 0 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"7 / 1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is divided by zero !\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"That is ok.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>5 / 2 = 2</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>8 is divided by zero !</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>That is ok.</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>*/</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>带析构语句的类的 C++ 异常处理</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyException</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token operator\">~</span> <span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tstring message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructor of Demo\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor of Demo\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span>MyException<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tDemo d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Throw MyException in func() \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">throw</span> <span class=\"token function\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exception thrown by func()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"In main function\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>MyException<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Caught an exception: \"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Resume the exception of main()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>In main function</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>Constructor of Demo</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>Throw MyException in func()</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>Destructor of Demo</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>Caught an exception: exception thrown by func()</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>Resume the exception of main()</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"异常接口声明\"><a class=\"anchor\" href=\"#异常接口声明\">#</a> 异常接口声明</h4>\n<blockquote>\n<p>异常声明 (异常规范， <code>Exception specifications</code> ) 一个函数显式声明可能抛出的异常，有利于函数的调用者为异常处理做好准备</p>\n</blockquote>\n<ul>\n<li>可以在函数的声明中列出这个哈数可能抛掷的所有异常类型</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>若无异常接口声明，则此函数可以抛掷 <code>任何类型</code> 的异常</li>\n<li>不抛掷任何异常的函数声明如下</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"noexcept异常说明\"><a class=\"anchor\" href=\"#noexcept异常说明\">#</a>  <code>noexcept</code>  异常说明</h4>\n<ul>\n<li>对明确 <code>不会</code> 抛出异常的函数使用 <code>noexcept</code>  说明修饰</li>\n<li>声明方式:</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>返回值类型 <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>异常处理使编译和运行时有 <code>额外开销</code> ，省去异常处理可优化 <code>加速调用</code></li>\n<li>需保持该函数内部调用函数和定义语句均不会抛出异常的一致性</li>\n<li>noexcept 运算符，可判断函数是否使用了 noexcept 说明</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回 true，因为 f 有 noexcept 说明</span></pre></td></tr></table></figure><h4 id=\"慎用异常声明的情况\"><a class=\"anchor\" href=\"#慎用异常声明的情况\">#</a> 慎用异常声明的情况</h4>\n<ul>\n<li>对于带类型参数的函数模版，要尽量避免使用 exception specifications, 因为不同类型对于相同行为的定义不同，抛出的异常也就不同，因而函数模版很难或不可能确定它具现代的函数实体所可能抛出的异常</li>\n<li>使用回调 (callback) 函数时</li>\n<li>系统可能抛出的异常</li>\n</ul>\n<h4 id=\"异常处理中的构造与析构\"><a class=\"anchor\" href=\"#异常处理中的构造与析构\">#</a> 异常处理中的构造与析构</h4>\n<h5 id=\"自动的析构\"><a class=\"anchor\" href=\"#自动的析构\">#</a> 自动的析构</h5>\n<ul>\n<li>找到一个匹配的 catch 异常处理后\n<ul>\n<li>初始化异常参数</li>\n<li>将从对应的 try 块开始到异常被抛掷之间构造 (且尚未析构) 的所有自动对象进行析构</li>\n<li>从最后一个 catch 处理之后开始恢复执行</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"标准程序库继承关系\"><a class=\"anchor\" href=\"#标准程序库继承关系\">#</a> 标准程序库继承关系</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtdBEE0yRM2cl2h5S9z9t0BrgiamoaUWaML3MGFNqzEWQ6V3mq3smy3HsubAcYvRn6EnAsCqAb31Ng/0?wx_fmt=png\" alt=\"标准程序库继承关系\" /></p>\n<h4 id=\"c标准库各种异常类所代表的异常\"><a class=\"anchor\" href=\"#c标准库各种异常类所代表的异常\">#</a> C++ 标准库各种异常类所代表的异常</h4>\n<table>\n<thead>\n<tr>\n<th><strong>异常类</strong></th>\n<th><strong>头文件</strong></th>\n<th><strong>异常的含义</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>bad_alloc</strong></td>\n<td>exception</td>\n<td>用 new 动态分配空间失败</td>\n</tr>\n<tr>\n<td><strong>bad_cast</strong></td>\n<td>new</td>\n<td>执行 dynamic_cast 失败（dynamic_cast 参见 8.7.2 节）</td>\n</tr>\n<tr>\n<td><strong>bad_typeid</strong></td>\n<td>typeinfo</td>\n<td>对某个空指针 p 执行 typeid (*p)（typeid 参见 8.7.2 节）</td>\n</tr>\n<tr>\n<td><strong>bad_exception</strong></td>\n<td>typeinfo</td>\n<td>当某个函数 fun () 因在执行过程中抛出了异常声明所不允许的异常而调用 unexpected () 函数时，若 unexpected () 函数又一次抛出了 fun () 的异常声明所不允许的异常，且 fun () 的异常声明列表中有 bad_exception，则会有一个 bad_exception 异常在 fun () 的调用点被抛出</td>\n</tr>\n<tr>\n<td><strong>ios_base::failure</strong></td>\n<td>ios</td>\n<td>用来表示 C++ 的输入输出流执行过程中发生的错误</td>\n</tr>\n<tr>\n<td><strong>underflow_error</strong></td>\n<td>stdexcept</td>\n<td>算术运算时向下溢出</td>\n</tr>\n<tr>\n<td><strong>overflow_error</strong></td>\n<td>stdexcept</td>\n<td>算术运算时向上溢出</td>\n</tr>\n<tr>\n<td><strong>range_error</strong></td>\n<td>stdexcept</td>\n<td>内部计算时发生作用域的错误</td>\n</tr>\n<tr>\n<td><strong>out_of_range</strong></td>\n<td>stdexcept</td>\n<td>表示一个参数值不在允许的范围之内</td>\n</tr>\n<tr>\n<td><strong>length_error</strong></td>\n<td>stdexcept</td>\n<td>尝试创建一个长度超过最大允许值的对象</td>\n</tr>\n<tr>\n<td><strong>invalid_argument</strong></td>\n<td>stdexcept</td>\n<td>表示向函数传入无效参数</td>\n</tr>\n<tr>\n<td><strong>domain_error</strong></td>\n<td>stdexcept</td>\n<td>执行一段程序所需要的先决条件不满足</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"标准异常类的基础\"><a class=\"anchor\" href=\"#标准异常类的基础\">#</a> 标准异常类的基础</h4>\n<ul>\n<li><code>exception</code> ：标准程序库异常类的 <code>公共基类</code></li>\n<li><code>logic_error</code> ：表示可以在程序中被预先检测到的异常\n<ul>\n<li>如果小心地编写程序，这类异常能够避免</li>\n</ul>\n</li>\n<li><code>runtime_error</code> : 表示 <code>难以</code> 被预先检测的异常</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>计算三角形的面积</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdexcept></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 给出三角形三边长，计算三角形面积</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 判断三角形表长是否为正</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> b <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">invalid_argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the side length should be positive\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 判断三边长是否满足三角不等式</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">&lt;=</span> c <span class=\"token operator\">||</span> b <span class=\"token operator\">+</span> c <span class=\"token operator\">&lt;=</span> a <span class=\"token operator\">||</span> c <span class=\"token operator\">+</span> a <span class=\"token operator\">&lt;=</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> <span class=\"token function\">invalid_argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the side length should fit the triangle inequation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 由 heron 公式计算三角形面积</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">double</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 三角形三边长</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input the side lengths of a triangle:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tcin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b <span class=\"token operator\">>></span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> s <span class=\"token operator\">=</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 尝试计算三角形面积</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Area:\"</span> <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error:\"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "编程语言",
                "C++",
                "计算机科学"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%B5%81%E7%A8%8B%E5%BA%93%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%B5%81%E7%A8%8B%E5%BA%93%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/",
            "title": "C++流程库输入与输出",
            "date_published": "2023-02-28T06:40:35.000Z",
            "content_html": "<h4 id=\"流对象与文件操作\"><a class=\"anchor\" href=\"#流对象与文件操作\">#</a> 流对象与文件操作</h4>\n<ul>\n<li>程序建立一个流对象\n<ul>\n<li>当程序与 <code>外界环节</code> 进行信息交流时，存在着两个对象，一个是程序中的对象，另一个是文件对象</li>\n<li>流是一种抽象，它负责在数据的生产者和数据的消费者之间建立联系，并管理 <code>数据的流动</code></li>\n</ul>\n</li>\n<li>指定这个流对象与某个文件对象建立连接</li>\n<li>程序操作流对象</li>\n<li>流对象通过文件系统对所连接的文件产生作用</li>\n</ul>\n<h4 id=\"提取与插入\"><a class=\"anchor\" href=\"#提取与插入\">#</a> 提取与插入</h4>\n<ul>\n<li>读操作在流数据抽象中被称为 (从流中) 提取</li>\n<li>写操作被称为 (向流中) 插入</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>说明</th>\n<th>包含文件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>抽象流基类</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>ios </code></td>\n<td>流基类</td>\n<td><code>ios </code></td>\n</tr>\n<tr>\n<td>输入流类</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>istream  </code></td>\n<td>通用输入流类和其它输入流的基类</td>\n<td><code>istream  </code></td>\n</tr>\n<tr>\n<td><code> ifstream </code></td>\n<td>文件输入流类</td>\n<td><code>fstream</code></td>\n</tr>\n<tr>\n<td><code>istringstream</code></td>\n<td>字符串输入流类</td>\n<td><code>sstream</code></td>\n</tr>\n<tr>\n<td>输出流类</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>ostream</code></td>\n<td>通用输出流类和其它输出流的基类</td>\n<td><code>ostream</code></td>\n</tr>\n<tr>\n<td><code>ofstream</code></td>\n<td>文件输出流类</td>\n<td><code>fstream</code></td>\n</tr>\n<tr>\n<td><code>ostringstream</code></td>\n<td>字符串输出流类</td>\n<td><code>sstream</code></td>\n</tr>\n<tr>\n<td>输入 / 输出流类</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>iostream</code></td>\n<td>通用输入 / 输出流类和其它输入 / 输出流的基类</td>\n<td><code>istream</code></td>\n</tr>\n<tr>\n<td><code>fstream</code></td>\n<td>文件输入 / 输出流类</td>\n<td><code>fstream</code></td>\n</tr>\n<tr>\n<td><code>stringstream</code></td>\n<td>字符串输入 / 输出流类</td>\n<td><code>sstream</code></td>\n</tr>\n<tr>\n<td>流缓冲区类</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>streambuf</code></td>\n<td>抽象流缓冲区基类</td>\n<td><code>streambuf</code></td>\n</tr>\n<tr>\n<td><code>filebuf</code></td>\n<td>磁盘文件的流缓冲区类</td>\n<td><code>fstream</code></td>\n</tr>\n<tr>\n<td><code>stringbuf</code></td>\n<td>字符串的流缓冲区类</td>\n<td><code>sstream</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"预先定义的输出流对象\"><a class=\"anchor\" href=\"#预先定义的输出流对象\">#</a> 预先定义的输出流对象</h4>\n<ul>\n<li><code>cout</code>  标准输出</li>\n<li><code>cerr</code>  标准错误输出， <code>没有缓冲</code> ，发送给他的内容立即被输出</li>\n<li><code>clog </code> 类似 <code>cerr</code> , 但 <code>有缓冲</code> ，缓冲区满时被输出</li>\n</ul>\n<h4 id=\"构造输出流对象\"><a class=\"anchor\" href=\"#构造输出流对象\">#</a> 构造输出流对象</h4>\n<ul>\n<li>\n<p><code>ofstream</code>  类支持 <code>磁盘文件</code> 输出</p>\n</li>\n<li>\n<p>如果在构造函数中制定一个文件名，当构造这个对象时该文件是自动打开的</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ofstream <span class=\"token function\">myFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>可以在调用默认构造函数之后使用 <code>open</code>  成员函数打开文件</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ofstream myFile<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明一个静态文件输出流对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myFile<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 打开文件，使流对象与文件建立联系，关联</span></pre></td></tr></table></figure><ul>\n<li>在构造对象或用 open 打开文件时可以指定模式，默认存文本文件</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ofstream <span class=\"token function\">myFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">,</span>iso_base<span class=\"token double-colon punctuation\">::</span>out <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"文件输出流成员函数\"><a class=\"anchor\" href=\"#文件输出流成员函数\">#</a> 文件输出流成员函数</h4>\n<ul>\n<li>与操作符等价的成员函数</li>\n<li>执行 <code>非格式化</code> 写操作的成员函数</li>\n<li>其它修改流状态且不同于操作符或插入运算符的成员函数</li>\n</ul>\n<h4 id=\"文件输出流成员函数-2\"><a class=\"anchor\" href=\"#文件输出流成员函数-2\">#</a> 文件输出流成员函数</h4>\n<ul>\n<li><code>open</code>  函数\n<ul>\n<li>把流与一个特定的磁盘文件关联起来</li>\n<li>需要指定打开模式</li>\n</ul>\n</li>\n<li><code>put</code>  函数\n<ul>\n<li>把一个字符写到输出流中</li>\n</ul>\n</li>\n<li><code>write</code>  函数\n<ul>\n<li>把内存中的一块内容写到一个文件输出流中 (写 <code>二进制</code> 文件用)</li>\n</ul>\n</li>\n<li><code>seekp</code>  和 <code>tellp</code>  函数\n<ul>\n<li>操作文件流的 <code>内部指针</code> ，</li>\n<li><code>seekp</code>  写到什么位置标志</li>\n<li><code>tellp</code>  告诉文件位置，开始的字节数</li>\n</ul>\n</li>\n<li><code>close</code>  函数\n<ul>\n<li>关闭与一个文件输出流关联的磁盘文件</li>\n</ul>\n</li>\n<li>错误处理函数\n<ul>\n<li>在写到一个流时进行错误处理</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"向文本文件输出\"><a class=\"anchor\" href=\"#向文本文件输出\">#</a> 向文本文件输出</h4>\n<h5 id=\"插入运算符\"><a class=\"anchor\" href=\"#插入运算符\">#</a> 插入运算符</h5>\n<ul>\n<li>插入 ( <code>&lt;&lt;</code> ) 运算符\n<ul>\n<li>传送字节到输出流对象，为所有标准 C++ 数据类型预先设计</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"操作符manipulator\"><a class=\"anchor\" href=\"#操作符manipulator\">#</a> 操作符 ( <code>manipulator</code> )</h5>\n<ul>\n<li>插入运算符 与操作符一起工作\n<ul>\n<li>控制输出格式</li>\n</ul>\n</li>\n<li>很多操作符都定义在</li>\n</ul>\n<blockquote>\n<p><code>ios_base</code>  类中 (如 <code>hex(),&lt;iomanio&gt;头文件(如setprecision())</code> )</p>\n</blockquote>\n<ul>\n<li>控制输出宽度\n<ul>\n<li>在流中放入 <code>setw</code>  操作符或调用 <code>width</code>  成员函数为每个项指定输出宽度</li>\n</ul>\n</li>\n<li><code>setw</code>  和 <code>width</code>  仅影响紧随其后的输出项，但其它流格式操纵符保存有效指导发生改变</li>\n<li><code>dec</code> ， <code>oct</code>  和 <code>hex</code>  操作符设置输入和输出的默认进制</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">double</span> values<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">35.36</span><span class=\"token punctuation\">,</span><span class=\"token number\">653.7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4358.24</span> <span class=\"token punctuation\">,</span><span class=\"token number\">124567899</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">// 使用 width 控制输出宽度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// 每个字符 10 个字节</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 影响其后的输出项，只影响一个</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t  1.23</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t 35.36</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t 653.7</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   4358.24</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>1.24568e+08</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"输出到文本\"><a class=\"anchor\" href=\"#输出到文本\">#</a> 输出到文本</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tofstream <span class=\"token function\">txtout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">double</span> values<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">35.36</span><span class=\"token punctuation\">,</span><span class=\"token number\">653.7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4358.24</span> <span class=\"token punctuation\">,</span><span class=\"token number\">124567899</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\ttxtout<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\ttxtout <span class=\"token operator\">&lt;&lt;</span>  values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\ttxtout<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记得关闭</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"http://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtdBEE0yRM2cl2h5S9z9t0B545Libn5ovg0KCLo1DPz8nGeRVgNCkQnw7dNjv2S0LS0AWBKFYLOP8w/0?wx_fmt=png\" alt=\"文本输出\" title=\"文本输出\" /></p>\n<h5 id=\"一行多输出宽度对齐精度\"><a class=\"anchor\" href=\"#一行多输出宽度对齐精度\">#</a> 一行多输出，宽度，对齐，精度</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iomanip></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">double</span> values<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1.23</span><span class=\"token punctuation\">,</span><span class=\"token number\">35.36</span><span class=\"token punctuation\">,</span><span class=\"token number\">653.7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4358.24</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstring names<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Zoot\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Jimmy\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"AI\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Stan\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 设置对齐方式</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"设置对齐方式\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setiosflags</span><span class=\"token punctuation\">(</span>ios_base<span class=\"token double-colon punctuation\">::</span>left<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 左对齐</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 输出精度</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"控制输出精度\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setiosflags</span><span class=\"token punctuation\">(</span>ios_base<span class=\"token double-colon punctuation\">::</span>fixed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setiosflags</span><span class=\"token punctuation\">(</span>ios_base<span class=\"token double-colon punctuation\">::</span>left<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 左对齐</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">resetiosflags</span><span class=\"token punctuation\">(</span>ios_base<span class=\"token double-colon punctuation\">::</span>left<span class=\"token punctuation\">)</span><span class=\"token comment\">// 清除左对齐设置</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 输出精度 scientific</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"控制输出精度scientific\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setiosflags</span><span class=\"token punctuation\">(</span>ios_base<span class=\"token double-colon punctuation\">::</span>scientific<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setiosflags</span><span class=\"token punctuation\">(</span>ios_base<span class=\"token double-colon punctuation\">::</span>left<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 左对齐</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">resetiosflags</span><span class=\"token punctuation\">(</span>ios_base<span class=\"token double-colon punctuation\">::</span>left<span class=\"token punctuation\">)</span><span class=\"token comment\">// 清楚左对齐设置</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  Zoot      1.23</pre></td></tr><tr><td data-num=\"51\"></td><td><pre> Jimmy     35.36</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tAI     653.7</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  Stan   4358.24</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>设置对齐方式</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>Zoot  1.23</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>Jimmy 35.36</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>AI    653.7</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>Stan  4358.24</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>控制输出精度</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>Zoot  1.230000         1.2</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>Jimmy 35.4            35.4</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>AI    653.7          653.7</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>Stan  4358.2        4358.2</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>控制输出精度 scientific</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>Zoot  0x1.3ae147ae147aep+0</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Jimmy 0x1.1ae147ae147aep+5</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>AI    0x1.46d999999999ap+9</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Stan  0x1.1063d70a3d70ap+12</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"setiosflags操作符\"><a class=\"anchor\" href=\"#setiosflags操作符\">#</a>  <code>setiosflags</code>  操作符</h4>\n<ul>\n<li>头文件 <code>iomanip</code></li>\n<li><code>ios_base::前缀</code></li>\n<li><code>setiosflags</code>  不同于 <code>width</code>  和 <code>setw</code> ，它的影响是持久的，直到 <code>resetiosflags</code>  重新恢复默认值时为止</li>\n<li><code>setiosflags</code>  的参数是该流的格式标志值，可用按位或 (|) 运算符就行组合</li>\n</ul>\n<h5 id=\"setiosflags参数\"><a class=\"anchor\" href=\"#setiosflags参数\">#</a>  <code>setiosflags</code>  参数</h5>\n<blockquote>\n<p>流的格式标识</p>\n</blockquote>\n<ul>\n<li><code>ios_base::skipws </code> 在输入中跳过空白 。</li>\n<li><code>ios_base::left</code>  左对齐值，用填充字符填充右边。</li>\n<li><code>ios_base::right </code> 右对齐值，用填充字符填充左边（默认对齐方式）。</li>\n<li><code>ios_base::internal</code>  在规定的宽度内，指定前缀符号之后，数值之前，插入指定的填充字符。</li>\n<li><code>ios_base::dec </code> 以十进制形式格式化数值（默认进制）。</li>\n<li><code>ios_base::oct</code>  以八进制形式格式化数值 。</li>\n<li><code>ios_base::hex</code>  以十六进制形式格式化数值。</li>\n<li><code>ios_base::showbase</code>  插入前缀符号以表明整数的数制。</li>\n<li><code>ios_base::showpoint</code>  对浮点数值显示小数点和尾部的 0 。</li>\n<li><code>ios_base::uppercase </code> 对于十六进制数值显示大写字母 A 到 F，对于科学格式显示大写字母 E 。</li>\n<li><code>ios_base::showpos</code>  对于非负数显示正号（“+”）。</li>\n<li><code>ios_base::scientific </code> 以科学格式显示浮点数值。</li>\n<li><code>ios_base::fixed</code>  以定点格式显示浮点数值（没有指数部分） 。</li>\n<li><code>ios_base::unitbuf </code> 在每次插入之后转储并清除缓冲区内容。</li>\n</ul>\n<h4 id=\"精度\"><a class=\"anchor\" href=\"#精度\">#</a> 精度</h4>\n<ul>\n<li>浮点数输出精度的默认值是 <code>6</code> , 例如：3466.98</li>\n<li>改变精度: <code>setprecision</code>  操作符 (头文件 <code>iomanip</code>  中)</li>\n<li>如果不指定 fixed 或 scientific, 精度值表示有效数字位数</li>\n<li>如果设置了 <code>ios_base::fixed</code>  或 <code>ios_base::scientific</code>  精度值表示 <code>小数点之后的位数</code></li>\n</ul>\n<h4 id=\"二进制文件流\"><a class=\"anchor\" href=\"#二进制文件流\">#</a> 二进制文件流</h4>\n<ul>\n<li>使用 <code>ofstream</code>  构造函数中的模式参数指定 <code>二进制输出模式</code></li>\n<li>以通常方式构造一个流，然后使用 <code>setmode</code>  成员函数，在文件打开后改变模式；</li>\n<li>通过二进制文件输出流对象完成输出</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Date</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> mon<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tDate dt <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">92</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tofstream <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"date.dat\"</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 二进制</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"向字符串输出\"><a class=\"anchor\" href=\"#向字符串输出\">#</a> 向字符串输出</h4>\n<blockquote>\n<p>将字符串作为输出流的目标，可以实现将其他数据类型转换为字符换的功能</p>\n</blockquote>\n<h4 id=\"字符串输出流\"><a class=\"anchor\" href=\"#字符串输出流\">#</a> 字符串输出流</h4>\n<ul>\n<li>用于构造字符串</li>\n<li>功能\n<ul>\n<li>支持 <code>ofstream</code>  类除 <code>open</code> ， <code>close</code>  外的所有操作</li>\n<li><code>str函数</code> 可以返回当前已构造的字符串</li>\n</ul>\n</li>\n<li>典型应用\n<ul>\n<li>将数值转换为字符串</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>函数模版 toString 可以将・各种支持・\"&lt;&lt;\" 插入符类型的额对象转换为字符串</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">inline</span> string <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tostringstream os<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建字符串输出流</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tos <span class=\"token operator\">&lt;&lt;</span> v<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 将变量 v 的值写入字符串流</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回输出流生成的字符串</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tstring str1 <span class=\"token operator\">=</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> str1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tstring str2 <span class=\"token operator\">=</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> str2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>5</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>1.2</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"输入流\"><a class=\"anchor\" href=\"#输入流\">#</a> 输入流</h4>\n<ul>\n<li><code>tream</code>  类最适合用于顺序文本模式输入， <code>cin</code>  是实例</li>\n<li><code>ifstream</code>  类支持磁盘文件输入</li>\n<li><code>istringstram</code></li>\n</ul>\n<h4 id=\"构造输入流对象\"><a class=\"anchor\" href=\"#构造输入流对象\">#</a> 构造输入流对象</h4>\n<ul>\n<li>如果在构造函数中指定一个文件名，在构造该对象时该文件便自动打开。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ifstream <span class=\"token function\">myFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>在调用默认构造函数之后使用 open 函数来打开文件。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ifstream myFile<span class=\"token punctuation\">;</span><span class=\"token comment\">// 建立一个文件流对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myFile<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 打开文件 \"filename”</span></pre></td></tr></table></figure><ul>\n<li>打开文件时可以指定模式</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ifstream <span class=\"token function\">myFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>in <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"使用提取运算符从文本文件输入\"><a class=\"anchor\" href=\"#使用提取运算符从文本文件输入\">#</a> 使用 <code>提取运算符</code> 从文本文件输入</h4>\n<ul>\n<li>提取运算符 (&gt;&gt;) 对于所有标准 c++ 数据类型预先设计</li>\n<li>是从一个输入流对象获取直接最容易的方法</li>\n<li><code>ios</code>  类中很多操纵符都可以应用于输入流，但是只有少数几个对输入流对象具有实际影响，最重要 的是进制操作符 <code>dec十进制</code> ， <code>oct八进制</code> 和 <code>hex十六进制</code></li>\n</ul>\n<h4 id=\"输入流相关函数\"><a class=\"anchor\" href=\"#输入流相关函数\">#</a> 输入流相关函数</h4>\n<ul>\n<li><code>open函数</code> 把该流与一个特定磁盘文件相关联。</li>\n<li><code>get函数</code> 的功能与提取运算符 (&gt;&gt;) 很相像，主要的不同点是 get 函数在读入数据时包括 <code>空白字符</code> 。</li>\n<li><code>getline</code>  的功能是从输入流中读取多个字符，并且允许指定输入终止字符，读取完成后，从读取的内容中删除终止字符。</li>\n<li><code>read成员函数</code> 从一个文件读字节到一个指定的内存区域，由长度参数确定要读的字节数。当遇到文件结束或者在文本模式文件中遇到文件结束标记字符时结束读取。</li>\n<li><code>seekg函数</code> 用来设置文件输入流中读取数据位置的指针。</li>\n<li><code>tellg函数</code> 返回当前文件读指针的位置。</li>\n<li><code>close函数</code> 关闭与一个文件输入流关联的磁盘文件。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>get 函数应用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 从键盘中输入，然后输出</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//ctrl+z 结束</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>为输入流指定一个终止字符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tstring line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Type a line terminated by '\\t'\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">,</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> line <span class=\"token operator\">&lt;&lt;</span>  endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>从文件中读一个二进制记录到一个结构体</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">SalaryInfo</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">double</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tSalaryInfo employee1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">600001</span><span class=\"token punctuation\">,</span><span class=\"token number\">8000</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明结构体</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tofstream <span class=\"token function\">os</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"payroll\"</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>out <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 文件输出流，二进制类型</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 字符转换，大小</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>employee1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>employee1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将结构体写入文件输出流</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tifstream <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"payroll\"</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>in <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读二进制文件。输入方式，二进制文件</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tSalaryInfo employee2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>employee2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>employee2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> employee2<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> employee2<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ERROR:Cannot open file 'payroll'\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>用 seekg 函数设置位置指针</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> values<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tofstream <span class=\"token function\">os</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"integers\"</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>out <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tifstream <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"integers\"</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>in <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">seekg</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 跳跃三个整数位置</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The 4th integer in the file 'integers' is \"</span> <span class=\"token operator\">&lt;&lt;</span> v <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ERROR :Cannot open file 'integers'\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>读入一个文件并显示出其中 0 元素的位置</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tifstream <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"integers\"</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>in <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 读到文件尾 file 为 0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token comment\">//tellg 函数返回当前文件读指针的位置</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tstreampos here <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">tellg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file <span class=\"token operator\">&amp;&amp;</span> v <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Position:\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> here <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\tis 0\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ERROR:Cannot open file \\\"integers\\\".\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"从字符串输入\"><a class=\"anchor\" href=\"#从字符串输入\">#</a> 从字符串输入</h4>\n<blockquote>\n<p>将字符串作为文本输入流的源，可以经字符串转换为其他数据类型</p>\n</blockquote>\n<h5 id=\"字符串输入流istringstream\"><a class=\"anchor\" href=\"#字符串输入流istringstream\">#</a> 字符串输入流 ( <code>istringstream</code> )</h5>\n<ul>\n<li>用于从 <code>字符串读取数据</code></li>\n<li>在构造函数中设置要读取的字符串</li>\n<li>功能\n<ul>\n<li>支持 <code>ifstream</code>  类的除 <code>open，close</code>  外的所有操作</li>\n</ul>\n</li>\n<li>典型应用\n<ul>\n<li>将字符串转换为数值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用 istringstream 将字符串转换为数值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">inline</span> T <span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tistringstream <span class=\"token function\">is</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 创建输入字符串流</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tT v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tis <span class=\"token operator\">>></span> v<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 从输入字符串流中读取变量 v</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 返回变量 v</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">int</span> v1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">fromString</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> v1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">double</span> v2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">fromString</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> v2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"重要输入输出流\"><a class=\"anchor\" href=\"#重要输入输出流\">#</a> 重要输入 / 输出流</h5>\n<ul>\n<li>iostream 对象可以是数据的源或目的</li>\n<li>两个重要的 I/O 流类都是从 iostream 派生，他们是 fstream 和 stringstream\n<ul>\n<li>这些类继承了前面描述的 istream 和 ostream 类功能</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"fstream类\"><a class=\"anchor\" href=\"#fstream类\">#</a> fstream 类</h6>\n<ul>\n<li>fstream 类支持磁盘文件输入和输出</li>\n<li>可构造 fstream 实现从一个特定磁盘文件读并谢大鹏磁盘 文件</li>\n<li>一个 fstream 对象是 有两个逻辑 子流的单个流，两个子流一个用于输入，另一个用于输出</li>\n</ul>\n<h6 id=\"stringstream类\"><a class=\"anchor\" href=\"#stringstream类\">#</a> stringstream 类</h6>\n<ul>\n<li>stringstream 类支持面向字符串的输入和输出</li>\n<li>可以用于对同一个字符串的内容交换读写 ，同样是由两个逻辑子流构成</li>\n</ul>\n<h4 id=\"getline读取文本练习\"><a class=\"anchor\" href=\"#getline读取文本练习\">#</a>  <code>getline</code>  读取文本练习</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span> <span class=\"token comment\">// 文本 输出</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span> <span class=\"token comment\">// 引用字符串</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iomanip></span>  <span class=\"token comment\">// 对齐操作符头文件</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;istream></span>  <span class=\"token comment\">// 输入流函数</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 打开文件，默认文本形式</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tofstream <span class=\"token function\">textout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span>ios_base<span class=\"token double-colon punctuation\">::</span>out <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tstring hello <span class=\"token operator\">=</span> <span class=\"token string\">\"hello test\\nhello second!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">//textout.width (20);  // 文字占 20 个字节</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ttextout </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">//&lt;&lt; setiosflags (ios_base::right)  // 右对齐</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token operator\">&lt;&lt;</span>hello<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\ttextout<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 读取文章内容</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tifstream <span class=\"token function\">myFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> ios_base<span class=\"token double-colon punctuation\">::</span>in <span class=\"token operator\">|</span> ios_base<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tstring out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用 while 读取一行一行的读入</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">// 使用 getline 读取文件中字符，</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">//getline 函数原型 getline (std::cin,string s，char ch),</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 表示以字符 ch 来结束字符串的读入。</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>myFile<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> out <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">/*else</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t&#123;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tcout &lt;&lt; \"ERROR:Cannot open file 'text.txt'\" &lt;&lt; endl;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t&#125;*/</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tmyFile<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jcGx1c3BsdXMuY29tL3JlZmVyZW5jZS8=\">C++ 参考文档</span><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jcGx1c3BsdXMuY29tL3JlZmVyZW5jZS8=\">http://www.cplusplus.com/reference/</span> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "编程语言",
                "C++",
                "计算机科学"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%B3%9B%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%B3%9B%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/",
            "title": "C++泛化程序设计",
            "date_published": "2023-02-27T04:01:09.000Z",
            "content_html": "<h4 id=\"泛型程序设计\"><a class=\"anchor\" href=\"#泛型程序设计\">#</a> 泛型程序设计</h4>\n<ul>\n<li>编程不依赖于具体数据类型的程序</li>\n<li>将算法从特定的数据结构中抽象出来，成为通用的 C++ 的模块为泛型程序设计奠定关键基础</li>\n</ul>\n<h4 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h4>\n<ul>\n<li>在 <code>C++ STL</code>  库中用 &quot;概念&quot; 来界定具备一定功能的数据类型\n<ul>\n<li>将 “可以比大小的所有数据类型 (有比较运算符)“这一概念记为 <code>Comparable</code></li>\n<li>将” 具有共有的复制构造函数并可以用‘=’赋值的数据类型 “这一概念记为 <code>Assignable</code></li>\n<li>将 “可以比大小，具有公有的复制构造函数并可以用’=‘赋值的所有数据类型” 这个概念记作 <code>Sortable</code></li>\n</ul>\n</li>\n<li>对于两个不同的概念 A 和 B，如果概念 A 所需求的所有功能也是概念 B 所需求的功能，那么就说概念 B 是概念 A 的子概念\n<ul>\n<li><code>sortable</code>  是 Comparable 的子概念，也是 <code>Assignable</code>  的子概念</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"模型\"><a class=\"anchor\" href=\"#模型\">#</a> 模型</h4>\n<ul>\n<li>(model): 符合一个概念的数据类型称为该概念的模型\n<ul>\n<li>int 是 Comparable 概念的模型</li>\n<li>静态数组类型不是 Assignable 概念的模型 (无法用 &quot;=&quot; 给整个静态数组赋值 &quot;)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"用概念做模型参数名\"><a class=\"anchor\" href=\"#用概念做模型参数名\">#</a> 用概念做模型参数名</h4>\n<ul>\n<li>为概念赋予一个名称，并使用该名称作为模版参数名</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 表示 insertionSort 这样一个函数模版的原型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sortable</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">insertSort</span><span class=\"token punctuation\">(</span>Sortable a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbu9gl5iaXpZfp2frL7XicianeJicK9Nz6uMGxGSxUcoLpRlEfENRibf3S2jFia1qA04ORlHquAl1z3JEXCQ/0?wx_fmt=png\" alt=\"STL组件之间的关系\" title=\"STL组件之间的关系\" /></p>\n<h4 id=\"stl\"><a class=\"anchor\" href=\"#stl\">#</a>  <code>STL</code></h4>\n<ul>\n<li><code>STL</code> : 标准模板库 (Standard Template Library 简称 <code>STL</code> ) 提供了一些非常常用的数据结构和算法， <code>STL</code>  定义了一套概念体系，为泛化程序设计提供了逻辑基础</li>\n<li><code>STL</code>  中的各个类模版，函数模版的参数都是用这个体系概念来规定的</li>\n<li>使用 <code>STL</code>  模版，类型参数既可以是 <code>C++标准库</code> 中已有的类型，也可以是自己定义的类型 - 只要这些类型是所要求概念的模型</li>\n</ul>\n<h4 id=\"stl的基本组件\"><a class=\"anchor\" href=\"#stl的基本组件\">#</a>  <code>STL</code>  的基本组件</h4>\n<ul>\n<li>容器 (container)</li>\n<li>迭代器 (iterator)</li>\n<li>函数对象 (function object)</li>\n<li>算法 (algorithms)</li>\n</ul>\n<h4 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h4>\n<ul>\n<li>Iterators (迭代器) 是算法和容器的桥梁\n<blockquote>\n<p>将迭代器作为算法的参数，通过迭代器来访问容器而不是把容器直接作为算法的参数</p>\n</blockquote>\n</li>\n<li>将函数对象作为算法的参数而不是将函数所执行的运算作为算法的一部分</li>\n<li>使用 <code>STL</code>  中提供的或自定义的迭代器和函数对象，配合 <code>STL</code>  算法，可以组合出各种各样的功能</li>\n<li>迭代器泛化的指针</li>\n<li>提供了顺序访问容器中每个元素的方法</li>\n<li>可以使用 &quot;++&quot; 运算符来获得指向下一个元素的迭代器</li>\n<li>可以使用 &quot;*&quot; 运算符访问一个迭代器所指向的元素，如果元素类型是类或结构体，还可以使用 &quot;-&gt;&quot; 运算符来直接访问该元素的一个成员</li>\n<li>有些迭代器还支持通过 &quot;--&quot; 运算符获得指向上一个元素的迭代器</li>\n<li>有些迭代器是泛化的指针：指针也具有同样的特性，因此指针本身就是一种迭代器</li>\n<li>使用独立于 <code>STL</code>  容器的迭代器，需要包含头文件 <code>&lt;iterator&gt;</code></li>\n</ul>\n<h4 id=\"容器\"><a class=\"anchor\" href=\"#容器\">#</a> 容器</h4>\n<ul>\n<li>容纳，包含一组元素的对象</li>\n<li>基本容器类模版\n<ul>\n<li>顺序容器</li>\n</ul>\n<blockquote>\n<p><code>array</code>  (数组), <code>vector</code>  (向量), <code>deque</code>  (双端队列), <code>forward_list</code>  (单链表), <code>list</code>  (列表)</p>\n</blockquote>\n<ul>\n<li>(有序) 关联容器</li>\n</ul>\n<blockquote>\n<p><code>set</code>  (集合), <code>multiset</code>  (多重集合), <code>map</code>  (映射), <code>multimap</code>  (多重 (可重复) 映射)</p>\n</blockquote>\n<ul>\n<li>无序关联容器</li>\n</ul>\n<blockquote>\n<p><code>unordered_set</code>  (无序集合), <code>unordered_multiset</code>  (无序多重集合)<br />\n <code>unordered_map</code>  (无序映射), <code>unorder_multimap</code>  (无序多重映射)</p>\n</blockquote>\n</li>\n<li>容器适配器</li>\n</ul>\n<blockquote>\n<p><code>stack</code>  (栈), <code>queue</code>  (队列), <code>priority_queue</code>  (优先队列)</p>\n</blockquote>\n<ul>\n<li>使用容器，需要包含对应的头文件</li>\n</ul>\n<h4 id=\"函数对象\"><a class=\"anchor\" href=\"#函数对象\">#</a> 函数对象</h4>\n<ul>\n<li>一个行为类似函数的对象，对它可以像调用函数一样调用</li>\n<li>函数对象时泛化的函数：任何普通的函数和任何重载了 “()” 运算符的类的对象都可以作为函数对象使用</li>\n<li>使用 <code>STL</code>  的函数对象，需要包含头文件 <code>&lt;functional&gt;</code></li>\n</ul>\n<h4 id=\"transform-算法\"><a class=\"anchor\" href=\"#transform-算法\">#</a> transform 算法</h4>\n<ul>\n<li>transform 算法 <code>遍历first和last两个迭代器所指向的元素</code> ，</li>\n<li>将每个元素的值作为函数对象 op 的参数</li>\n<li>将 <code>op</code>  的返回值通过迭代器 <code>result</code>  顺序输出</li>\n<li>遍历完成后 <code>result迭代器</code> 指向的是输出的最后一个元素的下一个位置，transform 会将迭代器返回</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Inputlterator</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Outputlterator</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnaryFunction</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Outputlterator <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>InputLterator first<span class=\"token punctuation\">,</span>Inputlterator<span class=\"token punctuation\">,</span>Outputlterator result<span class=\"token punctuation\">,</span>UnaryFunction op<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>first<span class=\"token operator\">!=</span>last<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>first<span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token operator\">*</span>result <span class=\"token operator\">=</span> <span class=\"token function\">op</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"算法algorithms\"><a class=\"anchor\" href=\"#算法algorithms\">#</a> 算法 (algorithms)</h4>\n<ul>\n<li><code>STL</code>  包含 70 多种算法\n<ul>\n<li>例如：排序算法，消除算法，计数算法，变换算法，置换算法和容器管理等</li>\n</ul>\n</li>\n<li>可以广泛用于不同的对象和内置的数据类型</li>\n<li>使用 <code>STL</code>  算法，需要包含头文件 <code>&lt;algorithm&gt;</code></li>\n</ul>\n<h4 id=\"例从标准输入读入几个整数存入向量容器输出相反数\"><a class=\"anchor\" href=\"#例从标准输入读入几个整数存入向量容器输出相反数\">#</a> 例：从标准输入读入几个整数，存入向量容器，输出相反数</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span>\t\t<span class=\"token comment\">// 向量</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iterator></span>  <span class=\"token comment\">// 迭代器</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span>  <span class=\"token comment\">// 算法</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span> <span class=\"token comment\">// 函数对象</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 容器</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"## \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">negate</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 算法，negate 取相反数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"迭代器-2\"><a class=\"anchor\" href=\"#迭代器-2\">#</a> 迭代器</h4>\n<ul>\n<li>迭代器是算法和容器的桥梁\n<ul>\n<li>迭代器用作访问容器中的元素</li>\n<li>算法不直接操作容器中的数据，而是通过 <code>迭代器</code> 间接操作</li>\n</ul>\n</li>\n<li>算法和容器独立\n<ul>\n<li>添加新的算法，无需影响容器的实现</li>\n<li>添加新的容器，原有的算法也能适用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"输入迭代器和输出迭代器\"><a class=\"anchor\" href=\"#输入迭代器和输出迭代器\">#</a> 输入迭代器和输出迭代器</h4>\n<ul>\n<li>输入迭代器\n<ul>\n<li><code>istream_iterator&lt;T&gt;</code></li>\n<li>以输入流 (如 <code>cin</code>  为参数构造)</li>\n<li>可用 *(p++) 获取下一个输入的元素</li>\n</ul>\n</li>\n<li>输出流迭代器\n<ul>\n<li><code>ostream_iterator&lt;T&gt;</code></li>\n<li>构造时需要提供输出流 (如 <code>cout</code> )</li>\n<li>可用 <code>(*p++)=x</code>  将 <code>x</code>  输出到输出流</li>\n</ul>\n</li>\n<li>二者都属于适配器\n<ul>\n<li>适配器是用来为已有对象提供新的接口的对象</li>\n<li>输入流适配器和输出流适配器为流对象提供了迭代器的接口</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 从标准输入读入几个实数，分别输出它们的平方</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iterator></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 求平方的函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 从标准输入读入若干个实数，分别将它们的平方输出</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">istream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">istream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 头，尾，写入结果，函数处理</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 头：输入流迭代器，double， 关联到 cin</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 尾没有构造函数，不给为空，---- 指向输入流结束</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 写入结果:cout  \"\\t\" 两个输出项之间的分隔符</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 函数处理:square</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"迭代器的区别\"><a class=\"anchor\" href=\"#迭代器的区别\">#</a> 迭代器的区别</h4>\n<ul>\n<li>两个迭代器表示一个区间:[ <code>p1,p2</code> )  包含 <code>p1</code>  不包含 <code>p2</code></li>\n<li><code>STL</code>  算法常以 <code>迭代器的区间</code> 作为输入，传递输入数据</li>\n<li>合法的区间\n<ul>\n<li><code>p1</code>  经过 n 次 <code>(n&gt;0)</code>  自增 (++) 操作后满足 <code>p1==p2</code> ;</li>\n</ul>\n</li>\n<li>区间包含 <code>p1</code> ，但不包含 <code>p2</code></li>\n</ul>\n<h4 id=\"综合运用迭代器示例\"><a class=\"anchor\" href=\"#综合运用迭代器示例\">#</a> 综合运用迭代器示例</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iterator></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 将来自输入 迭代器的 n 个 T 类型数值排序，将结果 通过输出迭代器 result 输出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputIterator</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">OutputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mySort</span><span class=\"token punctuation\">(</span>InputIterator first<span class=\"token punctuation\">,</span>InputIterator last<span class=\"token punctuation\">,</span>OutputIterator result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 通过输入迭代器将输入数据存入向量容器 s 中</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> first <span class=\"token operator\">!=</span> last<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>first<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">//push_back 依次插入元素，直到结束</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将数据放入向量容器 s 中</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 对 s 进行排序，sort 函数的参数必须是随机访问迭代器</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将 s 序列通过输出迭代器输出</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 将 s 数组的内容排序后输出</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">double</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token generic-function\"><span class=\"token function\">mySort</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 从标准输入读入若干整数，ctrl+z 结束输入</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token generic-function\"><span class=\"token function\">mySort</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">istream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">istream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"迭代器的辅助函数\"><a class=\"anchor\" href=\"#迭代器的辅助函数\">#</a> 迭代器的辅助函数</h4>\n<ul>\n<li><code>advance(p,n)</code>\n<ul>\n<li>对 p 执行 n 次自增操作</li>\n</ul>\n</li>\n<li><code>distance(first,last)</code>\n<ul>\n<li>计算两个迭代器 first 和 last 的距离，即对 <code>first</code>  执行多少次 &quot;++&quot; 操作后，能使 <code>first==last</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"容器的基本功能与分类\"><a class=\"anchor\" href=\"#容器的基本功能与分类\">#</a> 容器的基本功能与分类</h4>\n<blockquote>\n<p>容器类是容纳 ，包含一组元素或元素集合的对象。基于容器中元素的组织方式： <code>顺序容器，关联容器</code> <br />\n按照与容器所关联的迭代器类型划分:  <code>可逆容器-&gt;随机访问容器</code></p>\n</blockquote>\n<h4 id=\"容器的分类\"><a class=\"anchor\" href=\"#容器的分类\">#</a> 容器的分类</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtxASiaP0Zux0l2BKlicrl5icIVO7BbToPdxmR4gT37PhicylHFEwvxwcplXyNEnc2OqI2yR9jicpANicwQ/0?wx_fmt=png\" alt=\"容器的分类\" title=\"容器的分类\" /><br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtxASiaP0Zux0l2BKlicrl5icIL0yADmWT72fO7J4eHqTNXUDnTKXhqbkbCTQaD1iaicfksrxgcGcicjpgw/0?wx_fmt=png%22%E5%AE%B9%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB%22\" alt=\"容器的分类\" /></p>\n<h4 id=\"容器的通用功能\"><a class=\"anchor\" href=\"#容器的通用功能\">#</a> 容器的通用功能</h4>\n<ul>\n<li>容器的通用功能\n<ul>\n<li>用默认构造函数构造空容器</li>\n<li>支持关系运算符: <code> ==,!=,&lt;,&lt;=,&gt;,&gt;=</code></li>\n<li>begin (),end (): 获得容器首尾常迭代器</li>\n<li><code>cbegin(),cend()</code> : 获取容器首，尾常迭代器，不需要改变容器时更安全</li>\n<li>clear (): 将容器清空</li>\n<li>empty (): 判断容器是否为空</li>\n<li>size (): 得到容器元素个数</li>\n<li><code>s1.swap(s2)</code> : 将 <code>s1</code>  和 <code>s2</code>  两个容器内容交换</li>\n</ul>\n</li>\n<li>相关数据类型\n<ul>\n<li><code>S::iterator</code>  ：指向容器元素的迭代器类型</li>\n<li><code>S::const_iterator</code> ：常迭代器类型</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"对可逆容器的访问\"><a class=\"anchor\" href=\"#对可逆容器的访问\">#</a> 对可逆容器的访问</h4>\n<ul>\n<li><code>STL</code>  为每个可逆容器都提供了逆向迭代器\n<ul>\n<li><code>rbegin()</code> : 指向容器尾的逆向迭代器</li>\n<li><code>rend()</code> : 指向容器首的逆向迭代器</li>\n</ul>\n</li>\n<li>逆向迭代器的类型名的表示方式如下 (S 表示容器类型)\n<ul>\n<li><code>S::reverse_iterator</code> : 逆向迭代器类型</li>\n<li><code>S::const_reverse_iterator</code> : 逆向常迭代器类型</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"顺序容器\"><a class=\"anchor\" href=\"#顺序容器\">#</a> 顺序容器</h4>\n<ul>\n<li><code>STL</code>  中的顺序容器\n<ul>\n<li>向量 ( <code>vecctor</code> )</li>\n<li>双端队列 ( <code>deque</code> )</li>\n<li>列表 (list)</li>\n<li>单向链表 (forward_list)</li>\n<li>数组 (array)</li>\n</ul>\n</li>\n<li>元素线性排列，可以随时在指定位置插入元素和删除元素</li>\n<li>必须符合 Assignable (即具有共有的复制构造函数并可用 &quot;=&quot; 赋值)</li>\n<li>array 对象的大小固定，forward_list 有特殊的添加和删除操作</li>\n</ul>\n<h4 id=\"顺序容器的基本功能\"><a class=\"anchor\" href=\"#顺序容器的基本功能\">#</a> 顺序容器的基本功能</h4>\n<ul>\n<li>默认构造函数</li>\n<li><code>S s(n,t)</code> ; 构造一个由 n 个 t 元素构成的容器实例 s</li>\n<li><code>S s(n)</code> ; 构造一个有 n 个元素的容器实例，每个元素都是 <code>T()</code></li>\n<li><code>S s(q1,q2)</code> ; 使用将 <code>[q1,q2)</code>  区间内的数据作为 s 的元素构造 s</li>\n</ul>\n<h4 id=\"赋值函数\"><a class=\"anchor\" href=\"#赋值函数\">#</a> 赋值函数</h4>\n<blockquote>\n<p>assign 将指定的元素赋给顺序容器，顺序容器中原先的元素会被清除，赋值函数的三种形式 是与构造函数一一对应的</p>\n</blockquote>\n<ul>\n<li><code>s.assign(n,t)</code>  赋值后的容器由 n 个 t 元素构成</li>\n<li><code>s.assign(n)</code> , 赋值后的容器有 n 个元素的容器实例 s，每个元素都是 T ()</li>\n<li><code>s.assign(q1,q2)</code>  赋值后的容器的元素为 <code>[q1,q2)</code>  区间内的数据</li>\n</ul>\n<h4 id=\"插入函数\"><a class=\"anchor\" href=\"#插入函数\">#</a> 插入函数</h4>\n<blockquote>\n<p>可以一次插入一个或多个指定元素，也可以将一个迭代器区间中的序列插入，通过一个指定当前容器元素的迭代器来指示插入位置，返回值为指向新插入的元素中第一个元素的迭代器</p>\n</blockquote>\n<ul>\n<li><code>s.insert(p1,t)</code>  在 s 容器中 <code>p1</code>  所指向的位置插入一个 t 的复制，插入后的元素夹在原 <code>p1</code>  和 <code>p1-1</code>  所指向的元素之间</li>\n<li><code>s.insert(p1,n,t)</code>  在 s 容器中 <code>p1</code>  所指向的位置插入 n 个 t 的复制，插入后的元素夹在原 <code>p1</code>  和 <code>p1-1</code>  所指向的元素之间</li>\n<li><code>s.insert(p1,q1,q2)</code>  将 <code>[q1,q2)</code>  区间的元素顺序复制插入到 s 容器 <code>p1</code>  位置处，新元素夹在 <code>p1</code>  和 <code>p1-1</code>  所指向的元素之间</li>\n<li><code>s.emplace(p1,args)</code>  将参数 <code>args</code>  传递给 T 的构造函数构造新元素 t，在 s 容器中 <code>p1</code>  所指向的位置插入该元素，插入后的元素夹在原 <code>p1</code>  和 <code>p1-1</code>  所指向的元素之间</li>\n</ul>\n<h4 id=\"其它函数\"><a class=\"anchor\" href=\"#其它函数\">#</a> 其它函数</h4>\n<ul>\n<li>erase</li>\n<li>clear</li>\n<li>pop_front (只对 list 和 <code>deque</code> )</li>\n<li>pop_back</li>\n<li>首尾元素的直接访问\n<ul>\n<li>front</li>\n<li>back</li>\n</ul>\n</li>\n<li>改变大小\n<ul>\n<li>resize</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"顺序容器的基本操作\"><a class=\"anchor\" href=\"#顺序容器的基本操作\">#</a> 顺序容器的基本操作</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;list></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 输出指定顺序容器的元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 第一个输出字符，第二个传入容器类型常引用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span>  <span class=\"token function\">printContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> msg <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 从标准输入读入 10 个整数，将让门分别从 s 的头部加入</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tdeque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tcin <span class=\"token operator\">>></span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// 将 x 的数据存入到 s 当中，每次都加入到开头位置</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">printContainer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deque at first\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 用 s 容器的内容的逆序构造列表容器</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">l</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">printContainer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list at first\"</span><span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 将列表容器 l 的每相邻顺序颠倒 </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iter <span class=\"token operator\">!=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 遍历 l</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>iter<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\titer <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除该元素</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tl<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>iter<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">printContainer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list at list\"</span><span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 用列表容器 l 的内容给 s 赋值，将 s 输出</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">printContainer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deque at last\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>0 9 8 6 4 3 2 1 5 4</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>deque at first:0 9 8 6 4 3 2 1 5 4</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>list at first:4 5 1 2 3 4 6 8 9 0</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>list at list:5 4 2 1 4 3 8 6 0 9</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>deque at last:5 4 2 1 4 3 8 6 0 9</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"顺序容器的特点\"><a class=\"anchor\" href=\"#顺序容器的特点\">#</a> 顺序容器的特点</h4>\n<h5 id=\"向量vector\"><a class=\"anchor\" href=\"#向量vector\">#</a> 向量 ( <code>vector</code> )</h5>\n<ul>\n<li>特点:\n<ul>\n<li>一个可以扩展的 <code>动态数组</code></li>\n<li>随机访问，在尾部插入或删除元素快</li>\n<li>在中间或头部插入或 删除元素慢</li>\n</ul>\n</li>\n<li>向量的容量\n<ul>\n<li>容量 (capacity): 实际分配空间的大小</li>\n<li><code>s.capacity()</code> ：返回当前容量</li>\n<li><code>s.reserve()</code> ：若容量 小于 n 则对 s 进行扩展，使其容量至少为 n</li>\n<li><code>s.shrink_to_fit()</code> : 回收未使用的元素空间，即 size 和 capacity 函数返回值相等</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"双端队列deque\"><a class=\"anchor\" href=\"#双端队列deque\">#</a> 双端队列 ( <code>deque</code> )</h5>\n<ul>\n<li>特点:\n<ul>\n<li>在两端插入和删除元素快</li>\n<li>在中间插入或 删除元素慢</li>\n<li>随机访问较快，但比向量容量慢</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 通过双端队列实现奇偶排序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 先按照从大到 小顺序输出计数，再按照从小到 大顺序输出偶数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tistream_iterator<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token function\">i1</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i2<span class=\"token punctuation\">;</span><span class=\"token comment\">// 建立一对输入流迭代器</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token function\">s1</span><span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">,</span> i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 通过输入迭代器从标准输入流中输入数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将输入的整数排序</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tdeque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 循环遍历 s1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>iter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\ts2<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 偶数放到 s2 尾部</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\ts2<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 奇数放到 s2 首部</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 将 s2 的结果输出</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"列表\"><a class=\"anchor\" href=\"#列表\">#</a> 列表</h4>\n<ul>\n<li>特点\n<ul>\n<li>在任意位置插入和删除元素都很快</li>\n<li><code>不</code> 支持随机访问 (链表)</li>\n</ul>\n</li>\n<li>结合 ( <code>splice</code> ) 操作\n<ul>\n<li><code>s1.splice(p,s2,q1,q2):</code>  将 <code>s2</code>  中 <code>[q1,q2)</code>  移动到 p 所指向元素之前</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;list></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstring names1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"helen\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lucy\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Susan\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstring names2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"David\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Levin\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Mike\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 用 names1 数组的内容构造列表 s1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span>names1<span class=\"token punctuation\">,</span> names1 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 用 names2 数组的内容够着列表 s2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span>names2<span class=\"token punctuation\">,</span> names2 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 将 s1 的第一个元素放到 s2 的最后</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ts2<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter1 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//iter1 指向 s1 首</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">advance</span><span class=\"token punctuation\">(</span>iter1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//iter1 前进 2 个元素，它将指向 s1 第三个元素</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter2 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//iter2 指向 s2 首</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token operator\">++</span>iter2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//iter2 前进一个元素，它将指向 s2 的第二个元素</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter3 <span class=\"token operator\">=</span> iter2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用 iter2 初始化 iter3</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">advance</span><span class=\"token punctuation\">(</span>iter3<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//iter3 前进 2 个元素，它将指向 s2 的第 4 个元素</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 将 [iter2,iter3) 范围内的结点接到 s1 中 iter1 指向的结点前</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>iter1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> iter2<span class=\"token punctuation\">,</span> iter3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 分别将 s1 和 s2 输出</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>helen lucy David Levin Susan</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Bob Mike Alice</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"单向链表forward_list\"><a class=\"anchor\" href=\"#单向链表forward_list\">#</a> 单向链表 ( <code>forward_list</code> )</h4>\n<ul>\n<li>单向链表每个结点只有指向下个结点的指针，没有简单的方法来获取一个节点的前驱</li>\n<li><code>未定义insert,emplace和erase操作</code> ，而定义了 insert_after,emplace_after 和 erase_after 操作，其参数与 list 的 insert， <code>emmplace</code>  和 erase 相同，但并不是插入或删除迭代器 <code>p1</code>  所指向的元素，而是对 <code>p1</code>  所只元素之后的结点进行操作</li>\n<li>不支持 size 操作</li>\n</ul>\n<h4 id=\"数组array\"><a class=\"anchor\" href=\"#数组array\">#</a> 数组 (array)</h4>\n<ul>\n<li><code>array</code>  是对内置数组的封装，提供了更安全，更方便的使用数组的方式</li>\n<li>array 的对象的 <code>大小是固定</code> 的，定义时除了需要指定元素类型，还需要指定容器大小</li>\n<li>不能动态地改变容器大小</li>\n</ul>\n<h4 id=\"顺序容器的比较\"><a class=\"anchor\" href=\"#顺序容器的比较\">#</a> 顺序容器的比较</h4>\n<ul>\n<li>如果需要执行大量的随机访问操作，而且当扩展容器时只需要向容器尾部加入新的元素，就应当选择向量容器 vector</li>\n<li>如果需要少量的随机访问操作，需要 在容器两端插入或删除操作，则应当选择双端队列容器 <code>deque</code> ;</li>\n<li>如果不需要对容器进行随机访问，但是需要在中间位置插入或删除元素，就应当选择列表容器 list 或 forward_list</li>\n<li>如果需要数组，array 相对于内置数组类型而言，是一种更安全，更容易使用的数组类型</li>\n</ul>\n<h4 id=\"顺序容器的插入迭代器\"><a class=\"anchor\" href=\"#顺序容器的插入迭代器\">#</a> 顺序容器的插入迭代器</h4>\n<ul>\n<li>用于向容器头部，尾部或中间指定位置插入元素的迭代器</li>\n<li>包括前插迭代器 ( <code>front_inserter)</code> , 后插迭代器 ( <code>back_inserter</code> ) 和任意位置插入迭代器 (inserter)</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>back_inserter <span class=\"token function\">iter</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过 iter 把 5 插入 s 末尾</span></pre></td></tr></table></figure><h4 id=\"顺序容器的适配器\"><a class=\"anchor\" href=\"#顺序容器的适配器\">#</a> 顺序容器的适配器</h4>\n<blockquote>\n<p>以顺序容器的基础构建一些常用数据结构，是对顺序容器的封装</p>\n</blockquote>\n<ul>\n<li>栈 (stack)：最先压入的元素最后被弹出</li>\n<li>队列 (queue)：最先压入的元素最先被弹出</li>\n<li>优先级队列 <code>(priority_qyeye)</code> : 最 &quot;大&quot; 的 元素最先被弹出</li>\n</ul>\n<h4 id=\"栈和队列模版\"><a class=\"anchor\" href=\"#栈和队列模版\">#</a> 栈和队列模版</h4>\n<ul>\n<li>栈模版</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sequence</span> <span class=\"token operator\">=</span> deque<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">></span><span class=\"token keyword\">class</span> <span class=\"token class-name\">stack</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>队列模版</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">FrontInsertionSequence</span> <span class=\"token operator\">=</span> deque<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">></span><span class=\"token keyword\">class</span> <span class=\"token class-name\">queue</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>栈可以用任何一种顺序容器作为基础容器，而队列只允许用前插顺序容器 (双端队列或列表)</li>\n</ul>\n<h4 id=\"栈和队列共同支持的操作\"><a class=\"anchor\" href=\"#栈和队列共同支持的操作\">#</a> 栈和队列共同支持的操作</h4>\n<ul>\n<li><code>s1 op s2</code>    op 可以是 ==,!=,&lt;,&lt;=,&gt;,&gt;= 之一，它会对两个容器适配器之间的元素按字典序进行比较</li>\n<li><code>s.size() </code> 返回 s 的元素个数</li>\n<li><code>s.empty() </code>  返回 s 是否为空</li>\n<li><code>s.push(t)</code>    将元素 t 压入 s 中</li>\n<li><code>s.pop()  </code> 将一个元素从 s 中弹出，对于栈来说，每次弹出的是最后被压入的元素，而对于队列，每次被弹出的是最先被 压入的元素</li>\n<li>不支持迭代器，因为他们不允许对惹你元素进行访问</li>\n</ul>\n<h4 id=\"栈和队列不同的操作\"><a class=\"anchor\" href=\"#栈和队列不同的操作\">#</a> 栈和队列不同的操作</h4>\n<ul>\n<li>栈的操作\n<ul>\n<li><code>s.top()</code>  返回栈顶元素的引用</li>\n</ul>\n</li>\n<li>队列操作\n<ul>\n<li><code>s.front()</code>  获得队头元素的引用</li>\n<li><code>s.back()  </code> 获得队尾元素的引用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"栈反向输出单词\"><a class=\"anchor\" href=\"#栈反向输出单词\">#</a> 栈反向输出单词</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstring str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tcin <span class=\"token operator\">>></span> str<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 从键盘输入一个字符串</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 将字符串的每个元素顺序压入栈中</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string<span class=\"token double-colon punctuation\">::</span>iterator iter <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>iter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 将栈中的元素顺序弹出并输出</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"优先级队列\"><a class=\"anchor\" href=\"#优先级队列\">#</a> 优先级队列</h4>\n<ul>\n<li>优先级队列 也像栈和队列一样支持元素的压入和弹出，但元素弹出的顺序与 元素的大小 有关，每次弹出的总是 <code>容器中最&quot;大&quot;的一个元素</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sequence</span> <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">priority_queue</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>优先级队列的基础容器必须是支持随机访问的顺序容器</li>\n<li>支持栈和队列的 size,empty,push,pop 几个成员函数，用法与栈和队列相同</li>\n<li>优先级队列并不支持比较操作</li>\n<li>与栈类似，优先级队列提供一个 top 函数，可以获得下一个即将被弹出元素的引用</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "编程语言",
                "C++",
                "计算机科学",
                "泛化程序设计"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Linux/Linux%E7%A8%8B%E5%BA%8F%E4%B8%8E%E8%BF%9B%E7%A8%8B/",
            "url": "https://www.blog.foryouos.cn/computer-science/Linux/Linux%E7%A8%8B%E5%BA%8F%E4%B8%8E%E8%BF%9B%E7%A8%8B/",
            "title": "线程进程",
            "date_published": "2023-02-27T01:50:00.000Z",
            "content_html": "<p>程序：（静态的概念）源代码，指令</p>\n<p>进程：运行着的程序，一个程序可以创建多个进程</p>\n<p>线程：线程从属于进程，一个进程可以有多个线程，线程之间共享进程的资源</p>\n<p>任务：具体要做的事情（进程 / 线程）</p>\n<h4 id=\"获取进程id\"><a class=\"anchor\" href=\"#获取进程id\">#</a> 获取进程 ID</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//linux 编程环境</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">man</span> getpid //得到linux帮助文档，Linux的编程手册</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include &lt;sys/types.h></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pid_t getpid<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pid_t getppid<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//pid_t类型用于存放进程的ID号</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> //返回当前正在运行的进程ID号</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  //返回当前进程额父进程的ID号</pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">su</span>    //进入管理权限</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /     //进入根目录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mkdir</span> C_test  //创建C_test文件夹</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> C_test    //进入此文件夹</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">nano</span> pid.c   //创建pid.c的文件</pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbs5CI8nJRCM8iasJSRBKkWayRZWiaOa5a4kz7iaNypnib8uGED9oRCVu2hkbOibXntOB4TnogiadRJHjFtA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//写完代码后输入  ctrl+x   保存并退出</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//首次使用Linux环境编译，错误多多，完全没有任何提升和自动语句</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gcc pid.c  //编译运行gid.c文件,生成执行文件名a.out</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./a.out     //执行pid.c得出执行结果 ctrl+z 停止运行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">man</span> pstree  //获得关于pstree 的帮助文档</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pstree <span class=\"token parameter variable\">-p</span>  //得出进程树，谁创建的谁，查看进程树</pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbs5CI8nJRCM8iasJSRBKkWayic1KZs8iapu8Gfu1TPTr8ybic8ricpaPNyFQ6hHc2UHDOMOpuBn2dWPYiaw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<h4 id=\"创建进程\"><a class=\"anchor\" href=\"#创建进程\">#</a> 创建进程</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">man</span> fork   //查看fork的Linux开发手</pre></td></tr></table></figure><h4 id=\"fork函数创建一个孩子进程\"><a class=\"anchor\" href=\"#fork函数创建一个孩子进程\">#</a> fork 函数创建一个孩子进程</h4>\n<blockquote>\n<p>需要引用的库</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include &lt;sys/types.h></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pid_t fork<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  //创建进程通过复制调用进程，新创建的进程称为子进程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//子进程和父进程运行在不同的区间，相互独立，但父进程和子进程有相同的内容</pre></td></tr></table></figure><p>运行：</p>\n<pre><code>nano 2_fork_1.c    //创键c文件\n</code></pre>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv3kia1l6wwtmbQETqNgJibrYf3ULiaE93LNntbML2oje60fz3ettmh1RMYibmiaWtrajzOf6KY96IvRTg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<pre><code>gcc 2_fork_1.c./a.out\n</code></pre>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv3kia1l6wwtmbQETqNgJibrYTnjpMnhWCdOUxDw6potWF2iaIibia1xVUnlPsAzW9cwnDeWNzFZrhn1bw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<p>输出两个 Hello word!</p>\n<p>fork 函数将 A 设为父进程，创建子进程 B，两者内容相同都会输出 hello word</p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvBOZfBmtPlIkD1LnnlTiawunLqDwoPAkX24vP17ZbCgzI0IicVAbuVtgOeNfhZBzt4cIl9ImWXibztA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvBOZfBmtPlIkD1LnnlTiawuh5kjDGpeagbOKabRDPcAyDR3OdVLMe64qDW0MT3Bv7H4Zv4qFXGLsQ/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<p>父进程返回子进程的 id 号，子进程的 pid 为零</p>\n<p>失败的话，返回 - 1，</p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvBOZfBmtPlIkD1LnnlTiawu6tVkYZ2Bkmfs3JHibhEtpfKiaLib3K4qToLudNywRsuCQ5aZlI1JuYdsw/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvBOZfBmtPlIkD1LnnlTiawuCl6EH49AyKncf1ocJticxl9OlVibBQibKwWMuZX4HTnaquk6BdbLfAibicA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> 2_fork_1.c fork_2.c   //复制2_fork_1.c的代码到fork_2.c</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">nano</span> for_2.c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#include &lt;stdio.h></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#include &lt;sys/types.h></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>int main<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        pid_t pid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        pid <span class=\"token operator\">=</span> fork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"pid=%d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        if<span class=\"token punctuation\">(</span>pid <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#include &lt;stdio.h></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#include &lt;sys/types.h></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>int main<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        pid_t pid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        pid <span class=\"token operator\">=</span> fork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"pid=%d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        if<span class=\"token punctuation\">(</span>pid <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>       <span class=\"token keyword\">else</span> if<span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                            printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Good morning<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                            sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>//输出结果：交替运行</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>//宏观上子进程父进程并发执行，微观上父进程先调度</pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include &lt;stdio.h></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include &lt;sys/types.h></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>int main<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        pid_t pid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        int count <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        pid <span class=\"token operator\">=</span> fork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"pid=%d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        if<span class=\"token punctuation\">(</span>pid <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world count = %d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,count++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span> if<span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Good morning count = %d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,count++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>父进程和子进程内存是相互独立的。</p>\n</blockquote>\n<blockquote>\n<p>父进程和子进程的运行没有相互依赖的关系</p>\n</blockquote>\n<h4 id=\"监控子进程wait函数\"><a class=\"anchor\" href=\"#监控子进程wait函数\">#</a> 监控子进程 wait 函数</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">man</span> <span class=\"token function\">wait</span>  //等待任意子进程终止，会有返回值，返回那个进程终止，返回其ID号</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//引用库</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include &lt;sys/types.h></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pid_t wait<span class=\"token punctuation\">(</span>int *wstatus<span class=\"token punctuation\">)</span>  //地址变量,不希望用就设置为空指针</pre></td></tr></table></figure><blockquote>\n<p>创建三个子进程，五秒钟，10 秒钟，15 秒结束，父进程等所有子进程结束再结束</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nano</span>  5_fork.c</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include &lt;stdio.h></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include &lt;sys/types.h></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#include &lt;sys/wait.h></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#include &lt;stdlib.h></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//run model:./a.out <span class=\"token number\">10</span> <span class=\"token number\">5</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">(</span>there child process ,after 15s they are over</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>int main<span class=\"token punctuation\">(</span>int argc,char *argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        pid_t child_pid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        int numDead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        int i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        for<span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> argc<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                switch<span class=\"token punctuation\">(</span>fork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token keyword\">case</span> -1: </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                perror<span class=\"token punctuation\">(</span><span class=\"token string\">\"fork()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                       <span class=\"token keyword\">case</span> <span class=\"token number\">0</span>:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                                printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"child %d started $ = %d, sleeping %s seconds<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, i , getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>,argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                                sleep<span class=\"token punctuation\">(</span>atoi<span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                                exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        default:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                                <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        numDead <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>//当前有几个子进程结束了</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                child_pid <span class=\"token operator\">=</span> wait<span class=\"token punctuation\">(</span>NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  //返回子进程结束的ID号</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                if<span class=\"token punctuation\">(</span>child_pid<span class=\"token operator\">==</span>-1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"No morre children,Byebye Byebye<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                numDead++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"wait() returned child  PID : %d(numDead = %d)<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, child_pid,numDead <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>//指向</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>gcc 5_fork.c</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>./a.out <span class=\"token number\">10</span> <span class=\"token number\">5</span> <span class=\"token number\">15</span>   //运行参数</pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvBOZfBmtPlIkD1LnnlTiawudbwh0nficOkWuDDpajFjbq3Yia0r46ziaxNR6z8ica3DyeS9PARcbBiaEMQ/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<h4 id=\"线程函数pthread_create\"><a class=\"anchor\" href=\"#线程函数pthread_create\">#</a> 线程函数 pthread_create</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//引入库函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include &lt;pthread.h></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//创建新的线程</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>int pthread_create<span class=\"token punctuation\">(</span>pthread_t *thread, const pthread_attr_t,void *<span class=\"token punctuation\">(</span>*start_routne<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>void*<span class=\"token punctuation\">)</span>,void *arq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//第一个参数线程Id号，第二个参数线程结构体指针类型空就是NULL</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>//第三个函数指针，第四个参数，也可为NULL</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//成功返回值为0，错误返回错误数字</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//编译的时候末位要加  <span class=\"token parameter variable\">-pthread</span></pre></td></tr></table></figure><h4 id=\"等待线程结束\"><a class=\"anchor\" href=\"#等待线程结束\">#</a> 等待线程结束</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>int pthread_join<span class=\"token punctuation\">(</span>pthread_t thread,void **retval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//编译并且链接给 pthread</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//调用成功返回零</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//第一个为线程参数。等待的线程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//第二个为</pre></td></tr></table></figure><p>编写：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include &lt;pthread.h></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include &lt;stdlib.h></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>void *thread_function<span class=\"token punctuation\">(</span>void *arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>int main<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        pthread_t pthread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        int ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        int <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>//传递子针，传递给线程arg</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        //线程用到所有资源都依赖于进程，</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        ret <span class=\"token operator\">=</span> pthread_create<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pthread,NULL,*thread_function,<span class=\"token operator\">&amp;</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        if<span class=\"token punctuation\">(</span>ret <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                perror<span class=\"token punctuation\">(</span><span class=\"token string\">\"pthread_create\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        //while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//让进程永远不结束，否则线程资源也会被回收</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        //使用函数等线程来结束 pthread_join，才会接着运行</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        pthread_join<span class=\"token punctuation\">(</span>pthread,NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"The thread is over ,process is over too.<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token builtin class-name\">return</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>void *thread_function<span class=\"token punctuation\">(</span>void *arg<span class=\"token punctuation\">)</span>  //arg为count指针</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span>       //线程每隔几秒打印</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        int i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread begins running<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        for<span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> *<span class=\"token punctuation\">(</span>int*<span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>//编译:</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>gcc 6_thread.c <span class=\"token parameter variable\">-pthread</span>  //编译</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>./a.out  //运行</pre></td></tr></table></figure><h4 id=\"创建两个线程多个线程\"><a class=\"anchor\" href=\"#创建两个线程多个线程\">#</a> 创建两个线程 / 多个线程</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//创建多个线程，多次调用pthread即可</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include &lt;stdio.h></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include &lt;pthread.h></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#include &lt;stdlib.h></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>void *thread1_function<span class=\"token punctuation\">(</span>void *arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>void *thread2_function<span class=\"token punctuation\">(</span>void *arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>int count <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>int main<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        pthread_t pthread2,pthread1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        int ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        //int <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>//传递子针，传递给线程arg</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        //线程用到所有资源都依赖于进程，</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ret <span class=\"token operator\">=</span> pthread_create<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pthread1,NULL,*thread1_function,NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        if<span class=\"token punctuation\">(</span>ret <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                perror<span class=\"token punctuation\">(</span><span class=\"token string\">\"pthread1_create\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        //创建第二个线程</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        ret <span class=\"token operator\">=</span> pthread_create<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pthread2,NULL,thread2_function,NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        if<span class=\"token punctuation\">(</span>ret <span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                perror<span class=\"token punctuation\">(</span><span class=\"token string\">\"pthread_create\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        //while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//让进程永远不结束，否则线程资源也会被回收</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        //使用函数等线程来结束 pthread_join，才会接着运行</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        pthread_join<span class=\"token punctuation\">(</span>pthread1,NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        pthread_join<span class=\"token punctuation\">(</span>pthread2,NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"The thread is over ,process is over too.<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token builtin class-name\">return</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>void *thread1_function<span class=\"token punctuation\">(</span>void *arg<span class=\"token punctuation\">)</span>  //arg为count指针</pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span>       //线程每隔几秒打印</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        int i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread begins running<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        //for<span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> *<span class=\"token punctuation\">(</span>int*<span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world count = %d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,count++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>void *thread2_function<span class=\"token punctuation\">(</span>void *arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread2 begins runnings<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Good morning count = %d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,count++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv3lprxuaVmgdia0Lo9JSzQltLHM6ojyZV6FxkQOms5shg8r9qeF1xM0Py5dZNoNwBR0WWgibBp9t5Q/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<blockquote>\n<p>总：父子进程分别打印 count，父进程和子进程会分别独立打印，独立的全局 count 值</p>\n</blockquote>\n<p>进程和线程不同，会使用同一个 count 值是累加的</p>\n<p>补：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数//里面参数为0表示正常退出，为1/-1表示程序异常退出</pre></td></tr></table></figure><blockquote>\n<p>参考：“嵌入式开发” Linux 简明教程 01～06</p>\n</blockquote>\n",
            "tags": [
                "计算机科学",
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Linux/linux%E5%85%A5%E9%97%A8(1)/",
            "url": "https://www.blog.foryouos.cn/computer-science/Linux/linux%E5%85%A5%E9%97%A8(1)/",
            "title": "linux入门1",
            "date_published": "2023-02-27T01:39:43.000Z",
            "content_html": "<h3 id=\"linux基础命令1关机文件类操作\"><a class=\"anchor\" href=\"#linux基础命令1关机文件类操作\">#</a> Linux 基础命令 1 关机文件类操作</h3>\n<blockquote>\n<p>Linux 主要是通过命令行来进行运行管理的操作系统</p>\n</blockquote>\n<h4 id=\"比图像化windows的优点\"><a class=\"anchor\" href=\"#比图像化windows的优点\">#</a> 比图像化 Windows 的优点：</h4>\n<ul>\n<li>快速</li>\n<li>批量化</li>\n<li>自动化</li>\n<li>智能化的处理业务</li>\n</ul>\n<p>进入 root 权限 (首次）</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">passwd</span>   // 首次需要设置密码//输入密码su   // 就如root用户权限</pre></td></tr></table></figure><h4 id=\"常见关机重启和注销指令\"><a class=\"anchor\" href=\"#常见关机重启和注销指令\">#</a> 常见关机，重启和注销指令:</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbswkxBUQxd5lWI8gV177foWAR72moHpkVYfY9v5BFrUeCOlAQNb1BJoXFVtjvksEt0tt576xSy9YA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<h4 id=\"linux各文件夹含义及用途\"><a class=\"anchor\" href=\"#linux各文件夹含义及用途\">#</a> Linux 各文件夹含义及用途：</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbswkxBUQxd5lWI8gV177foWUnglAOpHTduT98iaInccOFOrQbXCbjK5ibZNYKIricc8TmrG0icWWMuwjA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsYHvxfYOdPtq8846ywUeha8qLyoe9m5egrfmiaQzaoTQ6oShC5AjGbEZsyjFR1pTeia2q3KKZVBWZg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<ol>\n<li>/boot 该目录默认存放 Linux 的启动文件和内核，包含可引导的 Linux 内核和引导装载（boot loader）配置文件（GRUB）</li>\n<li>/initrd : boot loader initialized RAM disk 就是 boot loader 初始化的内存盘。在 Linux 内核启动前，boot loader 会将存储介质（一般是硬盘）中的 initrd 文件加载到内存，内核启动时会在访问真正的根文件系统前先访问该内存中的 initrd 文件系统</li>\n<li>/bin 存放 linux 的常用命令，例如 ls,sort,date 和 chmod，</li>\n<li>/sbin 存放 系统管理员使用的管理程序，包含管理命令和守护进程</li>\n<li>/var 存放经常被 修改的文件，包括各种日志，数据数据文件。这里放置作为 FTP 服务器（/var/ftp），web 服务器（/var/www）共享文件，它还包含所有系统日志文件 (/var/log)</li>\n<li>/etc 存放系统管理 时要 用到的各种配置文件和子目录，例如：网络配置文件，文件系统，x 系统配置文件 ，设备配置信息，设置用户信息</li>\n<li>/dev 包含了 Linux 系统中使用的所有外部设备，它实际上是访问这些外部设备的端口，访问这些外部设备与访问一个文件或一个目录没有区别</li>\n<li>/mnt 临时将别的文件系统挂在该目录下</li>\n<li>/root 超级用户的主目录</li>\n<li>/home 如果创建一个名为 “XX” 的用户，那么在 /home 目录下就有一个对应的 “/home/xx” 路径，用来存放该目录的主目录</li>\n<li>/usr 用户的应用程序和文件几乎都存放在该目录下</li>\n<li>/lib 存放系统动态链接共享库，几乎所有应用程序都会 用到该目录下的共享库</li>\n<li>/opt 第三方软件在安装时默认安装目录（警惕删除）</li>\n<li>/tmp 用来存放不同程序执行时产生的临时文件，该目录会被系统自动清理干净</li>\n<li>/proc 可以在该目录下获取系统信息 ，这些信息是在内存中由系统自己产生的，该目录的内容不在硬件上而在内存里</li>\n<li>/misc 可以让多用户堆积和临时转移自己的文件</li>\n<li>/lost+found 该目录在大多数情况下都是空的，当突然停电，或者非正常关机后，有些文件就临时存放在这里</li>\n<li>文件颜色的含义：蓝色为文件夹，绿色为可执行文件，浅蓝色是链接文件，红框文件是加了 SUID 位，任意限权；红色为压缩文件，褐色为设备文件。</li>\n</ol>\n<h4 id=\"文件和目录操作命令\"><a class=\"anchor\" href=\"#文件和目录操作命令\">#</a> 文件和目录操作命令</h4>\n<ul>\n<li>pwd（print working directory）:: 显示当前工作目录的绝对路径，查看当前所在路径</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">pwd</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">pwd</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// 必须有空格，通常情况下不需要带任何参数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">pwd</span> <span class=\"token parameter variable\">-L</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//logical的首字符缩写，显示逻辑路径（忽略软链接文件）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">pwd</span> <span class=\"token parameter variable\">-P</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>// physical首字符缩写，显示物理路径，</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//如果是软链接文件，则会显示软链接文件对应的源文件</pre></td></tr></table></figure><ul>\n<li>cd（change directory） 切换目录</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//语法格式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>dir<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>目录<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//默认情况下，单独执行cd命令，可切换到当前登陆用户的家目录</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//（由系统环境变量<span class=\"token environment constant\">HOME</span>定义）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">help</span> <span class=\"token builtin class-name\">cd</span>  //查看系统帮助</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//用法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">cd</span> -  //切换到上一次所在的目录路径</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ~  //切换到当前用户的家目录所在的路径</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>  //切换到当前目录的上一级目录所在的路径，一个点为当前目录</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token parameter variable\">-P</span>  //若切换的目标目录hi软链接，则直接指向真正的物理目标目录</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token parameter variable\">-L</span>  //直接切换啊软链接所在的目录</pre></td></tr></table></figure><h4 id=\"tab键具有自动补齐功能\"><a class=\"anchor\" href=\"#tab键具有自动补齐功能\">#</a> TAb 键具有自动补齐功能</h4>\n<p>注意:</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>绝对路径从 “/” 根开始的路径，如: /data/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>相对路径不从斜线开始   如: data/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//进入当前目录的父目录的父目录</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/</pre></td></tr></table></figure><h4 id=\"tree\"><a class=\"anchor\" href=\"#tree\">#</a> tree</h4>\n<ul>\n<li>tree: 以树形结构显示目录下的所有内容，包括所有文件，子目录及子目录里的目录和文件</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tree <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>directory<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tree <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>目录<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//tree命令后若不接选项和目录就会默认显示当前所在路径目录的目录结构</pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>显示所有文件，包含隐藏文件（以 “.” 点开头的文件）</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>只显示目录</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>显示每个文件的全路径</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>不显示树枝，常与 - f 参数配合使用</td>\n</tr>\n<tr>\n<td>-L level</td>\n<td>遍历目录的最大层数，level 为大于 0 的正整数</td>\n</tr>\n<tr>\n<td>-F</td>\n<td>在执行文件，目录，Socket, 符号连接，管道名称等不同类型文件的结尾，各自加上 &quot;*&quot;,&quot;/&quot;,&quot;=&quot;,&quot;@&quot;,&quot;|&quot; 号，类似 ls 命令的 - F 选项</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tree    //显示当前目录的结构</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tree <span class=\"token parameter variable\">-a</span>   //以树形结构显示目录下的所有内容</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tree <span class=\"token parameter variable\">-L</span> <span class=\"token number\">1</span>   //-L参数后接数字，表示查看目录的层数，不带-L选项默认显示所有层数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>tree <span class=\"token parameter variable\">-d</span> /etc/    // -d参数表示只显示目录</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>tree <span class=\"token parameter variable\">-L</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-f</span> /boot/   //-f显示内容的完整路</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>tree <span class=\"token parameter variable\">-L</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-F</span> /boot/    //使用-F参数会在幕后后面添加“/”，方便区分目录</pre></td></tr></table></figure><h4 id=\"mkdir\"><a class=\"anchor\" href=\"#mkdir\">#</a> mkdir</h4>\n<blockquote>\n<p>mkdir （make directories）创建目录，默认情况下，如果要创建的目录已存在，则会提示此文件已存在，而不会继续创建目录</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>directory<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>目录<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// <span class=\"token function\">mkdir</span> 命令可以同时创建多个目录，格式为mkdir，dir1，dir2</pre></td></tr></table></figure><h4 id=\"mkdir使用及说明\"><a class=\"anchor\" href=\"#mkdir使用及说明\">#</a> mkdir 使用及说明</h4>\n<table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-p</td>\n<td>1，递归创建目录，递归：父目录及其子目录及其子目录及其子目录的子目录 2，即使要创建的目录事先已存在也不会报错提示目录已存在</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>设置新创建目录的默认目录对应的权限</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示创建目录的过程</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> data  //在当前目录下创建data目录//再此执行创建命令会提示目录已经存在</pre></td></tr></table></figure><blockquote>\n<p>注意：window 下的目录路径样式为 D:\\data\\test, 而 Linux 样式的路径样式为 /data/test, 它们的目录顶点和分隔符均不同</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-m</span> <span class=\"token number\">333</span> dir2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>// 创建目录时指定333的数字权限</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-ld</span> dir2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//可以看到权限已经发生变化</pre></td></tr></table></figure><h4 id=\"touch命令\"><a class=\"anchor\" href=\"#touch命令\">#</a> touch 命令:</h4>\n<ul>\n<li>创建新的空文件</li>\n<li>改变已有文件的时间戳属性</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">touch</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>文件<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>注意；touch 是创建新文件，medir 是创建空目录，touch 虽不能创建目录，但是可以修改目录的时间戳</p>\n<table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>只更改指定文件的最后访问时间</td>\n</tr>\n<tr>\n<td>-d STRING</td>\n<td>使用字符串 STRING 代表的时间作为模板设置指定文件的时间属性</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>只更改指定文件的最后修改时间</td>\n</tr>\n<tr>\n<td>-r file</td>\n<td>将特定文件的时间属性设置为与模板文件 file 时间属性相同</td>\n</tr>\n<tr>\n<td>-t STAMP</td>\n<td>使用 [[CC] YY] MMDDhhmm [.ss] 格式的时间设置文件的时间属性，格式的含义从左到右依次为：世纪，年，月，日，时，分，秒</td>\n</tr>\n</tbody>\n</table>\n<p>使用:</p>\n<pre><code>mkdir /test    //在根下新建test目录\ncd /test/       //切换到此目录\ntouch oldboy.txt   //创建空文件oldboy.txt\nls                //查看文件表的文件\ntouch a.txt b.txt   //同时创建多个文件\ntouch stu&#123;01..05&#125;    //利用&#123;&#125;输出的字符序列批量创建文件\nstat oldboy.txt      //查看文件的时间戳属性\ntouch -a oldboy.txt   // 更改最后访时间\ntouch -m oldboy.txt    //更改最后修改时间\nls -lh oldboy.txt      //修改文件修改时间\ntouch -d 20202001 oldboy.txt   // 指定创建文件后的修改时间\ntouch -r a.txt oldboy.txt     //让oldboy.txt的时间属性和a.txt一致\n</code></pre>\n<h4 id=\"gnulinux\"><a class=\"anchor\" href=\"#gnulinux\">#</a> GNU/Linux</h4>\n<blockquote>\n<p>文件有三种类型的时间戳</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Access   最后访问文件的时间</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Modify   最后修改文件的时间</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Change   最后改变文件状态的时间</pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-lt</span>  // 最后修改时间</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-lc</span>  // 状态改变时间</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-lu</span>  //最后访问时间</pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsYHvxfYOdPtq8846ywUehaR2Gl4JASCZRNw4vGB5D7LyJg9OI35YpvHwu0R3RePn6utl2sBz3UZA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsYHvxfYOdPtq8846ywUehaCRArCXCTrhxdib1PtzUhR0Pfe2tI4Ipvfu9ibbKVjJbtUoDKI77RoajA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<h4 id=\"ls\"><a class=\"anchor\" href=\"#ls\">#</a> ls</h4>\n<blockquote>\n<p>ls ：列出目录的内容及其内容属性信息（list directory contents）</p>\n</blockquote>\n<pre><code>ls [option] [file]\nls [选项] [&lt;文件或目录&gt;]\n// 命令后面的选项和目录文件可以省略，表示 查看当前路径的文件信息\n</code></pre>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsYHvxfYOdPtq8846ywUehaOZzAiaUUhtadGHJx86WRkK78tWKBQOunIV82DpPAcCgTJiaQic1U0HSNg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> .file4.txt   //再创建一个隐藏文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//在linux系统中以“.”点开头的文件就是隐藏文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> --time-style<span class=\"token operator\">=</span>long-iso //以long-iso方式显示时间，当遇到目录时间显示不一致 s时</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ls</span> --full-time //用于显示完整的时间，等同于</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> --time-style<span class=\"token operator\">=</span>full-iso</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">date</span>  //显示当前系统时间</pre></td></tr></table></figure><h4 id=\"cp\"><a class=\"anchor\" href=\"#cp\">#</a> cp</h4>\n<blockquote>\n<p>复制文件或目录</p>\n</blockquote>\n<pre><code>cp [option] [source] [dest]\ncp [选项] [源文件] [目标文件]\n</code></pre>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtPJDhG2drZFicBoHEoSN6I5fm7sSn2FAib4E68UcCNl4nLMoVuxYZZvyGkULZI5PujaJeyO2KbQXVw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<pre><code>cp file1.txt file2.txt    //复制file1.txt为file4.txt\ncp -i file1.txt file2.txt  //若出现重复，会提示是否覆盖\n//备份操作\ncp /etc/ssh/sshd_config&#123;,.ori&#125;\n//对大括号的展开操作  /etc/ssh/sshd_config&#123;,.ori&#125;展开成/etc/ssh/sshd_config /etc/ssh/sshd_config.ori 再传给cp命令\n</code></pre>\n<h4 id=\"mv-move移动或重命名文件\"><a class=\"anchor\" href=\"#mv-move移动或重命名文件\">#</a> mv: （move）移动或重命名文件</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mv</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>source<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>dest<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mv</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>源文件<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>目标文件<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-f</td>\n<td>若目标文件已经存在，则不会询问而是直接覆盖</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>若目标文件已经存在，则会询问是否覆盖</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>不覆盖已经存在的文件</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>指定 mv 的目标文件，适用于移动多个源文件到一个目录的情况，此时目标文件在前，源文件在后，和 cp 命令的 - t 选项功能一致</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>在源文件比目标文件新，或目标文件不存在时才进行移动</td>\n</tr>\n</tbody>\n</table>\n<pre><code>mv file6.txt file7.txt //若file7.txt不存在则将file6.txt重命名为file7.txt\n//若file7.txt存在，则将file5.txt覆盖为file7.txt\nmv file.txt dir1/  \n//dir1位目录且存在，则移动file.txt到dir1下，若dir1不存在，则重命名为dir1的普通文件\n</code></pre>\n<h4 id=\"rm\"><a class=\"anchor\" href=\"#rm\">#</a> rm</h4>\n<blockquote>\n<p>rm：删除一个多多个文件或目录（remove files or directories）</p>\n</blockquote>\n<pre><code>rm [option] [file]rm [选项] [&lt;文件或目录&gt;]\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-f</td>\n<td>强制删除。忽略不存在的文件，不提示确认</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>在删除前需要确认</td>\n</tr>\n<tr>\n<td>-I</td>\n<td>在删除超过三个文件或者递归删除前要求确认（一个大文件下小文件一起删除）</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归删除目录及其内容</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> ./*     //加上“./”</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//禁止使用rm <span class=\"token parameter variable\">-fr</span> /oldboy/* ,这个命令如果多了空格可能会带来在灾难</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-fr</span> /oldboy/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>// <span class=\"token string\">\"*\"</span>的前面不小心多了空格，会删除当前目录的所有内容，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-fr</span> /oldboy/ *    //把当前目录（根）下面的目录全部删除</pre></td></tr></table></figure><h4 id=\"rmdir\"><a class=\"anchor\" href=\"#rmdir\">#</a> rmdir</h4>\n<blockquote>\n<p>rmdir ：用于删除空目录 (remove empty directories)，当目录不为空时，命令不起作用。</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rmdir</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>directory<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rmdir</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>目录<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-p</td>\n<td>递归删除目录，当子目录删除后其父目录为空时，也一并删除。如果整个路径被删除，或者由于某些原因保留了部分路径，则系统在标准输出上显示对应的信息</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示命令的执行过程</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"in硬链接与软连接\"><a class=\"anchor\" href=\"#in硬链接与软连接\">#</a> In 硬链接与软连接</h4>\n<blockquote>\n<p>功能：创建文件间的链接（make links between files）</p>\n</blockquote>\n<pre><code>ln [option] [source] [target]\nln [选项] [源文件或目录] [目标文件或目录]\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>无参数</td>\n<td>创建硬链接</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>创建软连接 (符号链接)</td>\n</tr>\n</tbody>\n</table>\n<p>硬链接：通过索引结点（Inode）来进行链接。在 Linux 文件系统中，所有文件都有一个独有的 inode 编号。多个文件指向同一索引结点（inode），硬链接相当于文件的另外一个入口</p>\n<pre><code>ln /etc/hosts hard_link\n//给/etc/hosts 文件做硬链接\n//通过ls查看硬链接数值\nls -i /etc/hosts hard_link\nrm -f /etc/hosts  //删除源文件\nln hard_link /etc/host   //再次链接回来\n</code></pre>\n<h5 id=\"硬链接\"><a class=\"anchor\" href=\"#硬链接\">#</a> 硬链接：</h5>\n<ul>\n<li>具有相同 inode 节点号的多个文件互为硬链接文件</li>\n<li>删除硬链接文件或者删除源文件任意之一，文件实体并未被删除</li>\n<li>只有删除了源文件以及源文件所对应的硬链接文件，文件实体才会被删除</li>\n<li>硬链接文件就是文件的另外一个入口</li>\n<li>可以通过设置硬链接文件，来防止重要文件被误删</li>\n<li>硬链接文件可以用 rm 命令删除</li>\n<li>对于静态文件（没有进程正在调用的文件）来讲，当对应硬链接数为 0（i_link）时，文件就会被删除，i_link 的查看方法是 ls-lih,</li>\n<li>很多硬件设备的快照功能，就是利用了硬链接</li>\n</ul>\n<h6 id=\"软链接\"><a class=\"anchor\" href=\"#软链接\">#</a> 软链接</h6>\n<blockquote>\n<p>类似 windows 里的快捷方式，软链接是真正的链接文件</p>\n</blockquote>\n<ul>\n<li>软链接文件 inode 值和源文件，硬链接文件都不同</li>\n<li>软链接文件的文件类型是 l （字母 l）</li>\n<li>软链接类似一个文本文件，里面存放的是源文件的路径，指向源文件实体</li>\n<li>即使删除了源文件，软链接文件也依然存在，但是无法访问指向的源文件路径内容</li>\n<li>失效的时候一般白字红底闪烁提示</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>对于目录，不可以创建硬链接，但是可以创建软连接</li>\n<li>目录的硬链接文件不能跨越文件系统（硬链接需要相同的 inode 值）</li>\n</ul>\n<h4 id=\"readlink\"><a class=\"anchor\" href=\"#readlink\">#</a> readlink</h4>\n<blockquote>\n<p>readlink : 查看符号链接文件的真实内容</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>readlink <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">]</span>readlink <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>文件<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-f</td>\n<td>一直跟随符号链接，直到非符号链接的文件位置，但要保证最后必须存在一个非符号链接的文件</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "计算机科学",
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%A8%A1%E5%9D%97%E4%B8%8E%E7%BE%A4%E4%BD%93%E6%95%B0%E6%8D%AE/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%A8%A1%E5%9D%97%E4%B8%8E%E7%BE%A4%E4%BD%93%E6%95%B0%E6%8D%AE/",
            "title": "C++模块与群体数据",
            "date_published": "2023-02-26T09:07:09.000Z",
            "content_html": "<h4 id=\"引例整数和浮点数求绝对值\"><a class=\"anchor\" href=\"#引例整数和浮点数求绝对值\">#</a> 引例整数和浮点数求绝对值</h4>\n<ul>\n<li>使用两种重载函数？</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">?</span> <span class=\"token operator\">-</span>x<span class=\"token operator\">:</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">?</span> <span class=\"token operator\">-</span>x<span class=\"token operator\">:</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>解决：函数模版\n<ul>\n<li>创建一个通用功能的函数</li>\n<li>支持多种不同形参</li>\n<li>简化重载函数的函数体设计</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* project : 模版求绝对值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>  <span class=\"token comment\">//T 也可使用其它名称</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>T <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>T x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span>x <span class=\"token operator\">:</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"函数模版定义语法\"><a class=\"anchor\" href=\"#函数模版定义语法\">#</a> 函数模版定义语法</h4>\n<ul>\n<li>语法形式\n<ul>\n<li>template &lt;模版参数表&gt;</li>\n<li>函数定义</li>\n</ul>\n</li>\n<li>模版参数表的内容\n<ul>\n<li>类型参数: class (或 typename) 标识符</li>\n<li>常量参数：类型说明符 标识符</li>\n<li>模版参数: template &lt;参数表&gt; class 标识符</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"函数模版\"><a class=\"anchor\" href=\"#函数模版\">#</a> 函数模版</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token comment\">// 定义函数模版</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">outputArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">*</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果数组元素是类的对象，需要该对象所属类重载流插入运算符 \"&lt;&lt;\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> A_count <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> B_count <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> C_count <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>A_count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">double</span> b<span class=\"token punctuation\">[</span>B_count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7.7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8.8</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span>C_count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"welcome\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a array contains:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">outputArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> A_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b array contains:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">outputArray</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> B_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c array contains:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">outputArray</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> C_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>a array contains:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>1 2 3 4 5 6 7 8</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>b array contains:</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>c array contains:</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>w e l c o m e</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>*/</span></pre></td></tr></table></figure><ul>\n<li>注意:\n<ul>\n<li>一个函数模版并非自动可以处理所有类型的数据</li>\n<li>只有能够进行函数模版中运算的类型，可以作为类型实参</li>\n<li>自定义的类，需要重载模版中的运算符，才能作为类型实参</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h4 id=\"类模版的作用\"><a class=\"anchor\" href=\"#类模版的作用\">#</a> 类模版的作用</h4>\n<ul>\n<li>使用类模版使用户可以为类声明一种模式，使得类中的某些数据成员，某些成员函数的参数，某些成员函数的返回值，能去 “任意” 类型 (包含基本类型的和用户自定义类型)</li>\n</ul>\n<h4 id=\"类模版的声明\"><a class=\"anchor\" href=\"#类模版的声明\">#</a> 类模版的声明</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span>模版参数表<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> 模版</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t模版声明</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>如果需要在类模版以外定义其成员函数，则要采用以下形式:\n<ul>\n<li><code>template</code>  &lt;模版参数表&gt;</li>\n<li>类型名 类名 &lt;模版参数标识符列表&gt;:: 函数名 (参数表)</li>\n</ul>\n</li>\n<li>模版参数表中参数可以声明为该模版类的友元类</li>\n<li>可通过 <code>typedef</code>  或者 <code>using</code>  对实例化的类模版定义别名</li>\n</ul>\n<h4 id=\"模版的默认实参\"><a class=\"anchor\" href=\"#模版的默认实参\">#</a> 模版的默认实参</h4>\n<ul>\n<li>类似于函数形参可有默认实参，函数 / 类模版可有默认模版实参</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span>T _x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>T _y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tT x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tT y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"使用模版\"><a class=\"anchor\" href=\"#使用模版\">#</a> 使用模版</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Point<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 给定模版参数 int，定义整数点对象 (0,0)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Point<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模版实参列表 & lt;> 为空，默认 double 类型初始化</span></pre></td></tr></table></figure><h4 id=\"类模版实例\"><a class=\"anchor\" href=\"#类模版实例\">#</a> 类模版实例</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 学号</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">float</span> gpa<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 平均分</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Store</span> <span class=\"token comment\">// 类模版，实现对任意数据进行存取</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tT item<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//item 用于存放任意类型的数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">bool</span> haveValue<span class=\"token punctuation\">;</span> <span class=\"token comment\">//haveValue 标记 item 是否已被存入内容</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">friend</span> T<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将参数类型 T 声明为友元类</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tT<span class=\"token operator\">&amp;</span> <span class=\"token function\">getElem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 提取数据函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">pubElem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存入数据函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token class-name\">Store</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">haveValue</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>T<span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Store</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getElem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 如试图提取未初始化的数据，则终止程序</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>haveValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"No item present!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使程序完全退出，返回到操作系统</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">return</span> item<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 item 中存放的数据</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Store</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">pubElem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">//haveValue 置为 true，标识 item 中已存入数值</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\thaveValue <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\titem <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 x 值存入 item</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">using</span> IntStore <span class=\"token operator\">=</span> Store<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tIntStore s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">pubElem</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\ts2<span class=\"token punctuation\">.</span><span class=\"token function\">pubElem</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">getElem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">getElem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tStudent g <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tStore<span class=\"token operator\">&lt;</span>Student<span class=\"token operator\">></span> s3<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将结构体传给类 T 类型换成 Student 结构体</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\ts3<span class=\"token punctuation\">.</span><span class=\"token function\">pubElem</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The student id is \"</span> <span class=\"token operator\">&lt;&lt;</span> s3<span class=\"token punctuation\">.</span><span class=\"token function\">getElem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tStore<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Retrieving object D...\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">getElem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">//d 未初始化，执行函数 D.getElement () 时导致程序终止</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>3 -7</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>The student id is 1000</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Retrieving object D...No item present!</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"群体的概念\"><a class=\"anchor\" href=\"#群体的概念\">#</a> 群体的概念</h4>\n<ul>\n<li>群体时指由多个数据元素组成的集合体，群体可以分为两个大类：线性群体和非线性群体。</li>\n<li>线性群体中的元素按位置排列有序，可以区分为第一个元素，第二个元素</li>\n<li>非线性群体不用位置顺序来标识元素</li>\n<li>vector 就是用类模版实现的动态数组</li>\n</ul>\n<h4 id=\"动态数组类模版程序返回0~n的质数\"><a class=\"anchor\" href=\"#动态数组类模版程序返回0~n的质数\">#</a> 动态数组类模版程序：返回 0~N 的质数</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>动态类数组头指针 Array.h</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">ARRAY_H</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ARRAY_H</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cassert></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token comment\">// 数组类模版定义</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Array</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tT<span class=\"token operator\">*</span> list<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 用于存放动态分配的数组内存首地址</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组大小 (元素个数)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 复制构造函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tArray<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 重载 \"=\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tT<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 重载 []</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 重载 \"[]\" 常函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">operator</span> T<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 重载到 T * 类型的转换</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">operator</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 取数组的大小</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改数组的大小</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sz <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//sz 为数组的大小，应当非负</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tsize <span class=\"token operator\">=</span> sz<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 将元素个数赋值给 size</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tlist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 动态分配 size 个 T 类型的元素空间</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 复制构造函数</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tsize <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tlist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 动态分配 n 个 T 类型的元素空间</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tlist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 重载 “=” 运算符，将对象 rhs 赋值给本对象，实现对象之间的整体赋值</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 如果本对象中数组大小与 rhs 不同，则删除数组原有内存，然后重新分配</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rhs <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">!=</span> rhs<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> list<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除数组原有内存</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\tsize <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 设置本对象的数组大小</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\tlist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重新分配 size 个元素的内存</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token comment\">// 从对象 x 复制数组元素到本对象</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\tlist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">// 重载下标运算符，实现与普通数组一样通过下标访问元素，具有越界检查功能</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>T<span class=\"token operator\">&amp;</span> Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> n <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 检查下标是否越界</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">return</span> list<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回下标为 n 的数组元素</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> n <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 检查下标是否越界</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">return</span> list<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回下标为 n 的数组元素</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">// 重载指针转换运算符，将 Array 类的对象名转换为 T 类型的指针</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> T<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回当前对象中私有数组的首地址</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token comment\">// 取当前数组大小</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>  <span class=\"token comment\">// 返回数组大小</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token comment\">// 将数组大小修改为 sz</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 如果哦原有复制空间过下，重新分配数组内存</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sz <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 检查 sz 是否非负</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sz <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果指定的大小与原有大小一样，什么也不做</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\tT<span class=\"token operator\">*</span> newList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span>sz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 申请新的数组内存</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sz <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> sz <span class=\"token operator\">:</span> size<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将 sz 与 size 中较小的一个赋值给 n</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token comment\">// 将原有数组中前 n 个元素复制到新数组中</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\tnewList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> list<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 删除原数组</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\tlist <span class=\"token operator\">=</span> newList<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 使 list 指向新数组</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\tsize <span class=\"token operator\">=</span> sz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !ARRAY_H</span></span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 求 2~N 中的质数 main.h 主函数 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Array.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iomanip></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcin <span class=\"token operator\">>></span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 用来存放质数的数组，初始状态有 10 个元素</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tArray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//read(a, 10);</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a value > = 2 as upper limit for prime number:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">bool</span> isPrime <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 默认 i 是质数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 判断是否为质数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\tisPrime <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPrime<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\ta<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\ta<span class=\"token punctuation\">[</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"链表类模版\"><a class=\"anchor\" href=\"#链表类模版\">#</a> 链表类模版</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">NODE_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NODE_H</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 单链表的结点类模版 NOde.h</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向后继节点的指针</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tT data<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 数据域</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> item<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">insertAfter</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在本结点之后插入一个同类结点 P</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token function\">deleteAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 在删除本结点的后继节点，并返回其地址</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token function\">nextNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取后继节点的地址</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">const</span> Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token function\">nextNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取后续节点的地址</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 类的实现函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 构造函数，初始化数据和指针成员</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token operator\">:</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 返回后继节点的指针</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">nextNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 返回后继节点的指针</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">const</span> Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">nextNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>  <span class=\"token comment\">// 返回的常指针，只能读</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 在结点之后插入一个结点</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">insertAfter</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">//p 结点指针域指向当前节点的后继节点</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tnext <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 当前节点的指针域指向 p</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 删除节点之后的结点</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">deleteAfter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 结点物理上不直接删除</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> tempPtr <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 代表为空指针</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tnext <span class=\"token operator\">=</span> tempPtr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">return</span> tempPtr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回的就是被删除的指针</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !NODE_H</span></span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "编程语言",
                "C++",
                "计算机科学"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E5%A4%9A%E6%80%81%E6%80%A7/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E5%A4%9A%E6%80%81%E6%80%A7/",
            "title": "C++多态性",
            "date_published": "2023-02-25T08:01:09.000Z",
            "content_html": "<h3 id=\"第十八天c多态性\"><a class=\"anchor\" href=\"#第十八天c多态性\">#</a> 第十八天：C++ 多态性</h3>\n<h4 id=\"初始虚函数\"><a class=\"anchor\" href=\"#初始虚函数\">#</a> 初始虚函数</h4>\n<ul>\n<li>用 virtual 关键字说明的函数</li>\n<li>虚函数是实现运行时多态性的基础</li>\n<li>C++ 中虚函数是动态绑定的函数</li>\n<li>虚函数必须是非静态的成员函数，虚函数经过派生之后，就可以实现 <code>运行过程中</code> 的多态</li>\n</ul>\n<h4 id=\"虚表与动态绑定\"><a class=\"anchor\" href=\"#虚表与动态绑定\">#</a> 虚表与动态绑定</h4>\n<ul>\n<li>虚表\n<ul>\n<li>每个多态类有一个虚表 (virtual table)</li>\n<li>虚表中有当前类的各个虚函数的入口地址</li>\n<li>每个对象有一个指向当前类的虚表的指针 (虚指针 vptr)</li>\n</ul>\n</li>\n<li>动态绑定的视线\n<ul>\n<li>构造函数中为对象的虚指针赋值</li>\n<li>通过多态类型的指针或引用调用成员函数时，通过虚指针找到虚表，进而找到所调用的虚函数的入口地址</li>\n<li>通过该入口地址调用虚函数<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbu7YnRRUPXgITUzMmry5UibUUUlJI2bPTyglhrLgicI2ibSNNZBHS8QyjzyrEhPYCNQkSpAnb3na2Eqw/0?wx_fmt=jpeg\" alt=\"虚表示意图\" title=\"虚表示意图\" /></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span> <span class=\"token comment\">// 基类 Base1 定义</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 虚函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Base1</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>  <span class=\"token comment\">//const 限制只读</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base1::display\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span>   <span class=\"token comment\">// 公有派生类 Base2 继承</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 虚函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 覆盖基类的虚函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Base2</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>  <span class=\"token comment\">//const 限制只读</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base2::display\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span>  <span class=\"token comment\">// 公有派生类 Derived 定义</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 覆盖基类的虚函数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Derived</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derived::display\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>Base1<span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 参数为指向基类对象的指针</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tptr<span class=\"token operator\">-></span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对象指针 -> 成员名</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tBase1 base1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 定义 Base1 类对象</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tBase2 base2<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 定义 Base2 类对象</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tDerived derived<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义 Derived 类对象</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>base1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 用 Base1 对象的指针调用 fun 函数</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>base2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>derived<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>Base1::display</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>Base2::display</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>Derived::display</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"virtual关键字\"><a class=\"anchor\" href=\"#virtual关键字\">#</a> virtual 关键字</h4>\n<ul>\n<li>派生类可以不显式地用 virtual 声明虚函数，这时系统就会用以下规则来判断派生类的一个函数是不是虚函数。\n<ul>\n<li>该函数是否与基类的被覆盖的虚函数有相同的名称，参数个数及对应参数类型，cv 限定符 (是否 const)，引用限定符 (&amp; 或 &amp;&amp;)</li>\n<li>该函数的返回值类型是否与基类被覆盖的虚函数返回值类型相同，或者可以隐含转换为基类被覆盖的虚函数的返回值类型</li>\n</ul>\n</li>\n<li>如果派生类的函数满足上述条件，就会自动确定为虚函数，这时，派生类的虚函数便覆盖了基类的虚函数</li>\n<li>派生类中的虚函数还会隐藏基类中同名函数的所有其它重载类型</li>\n<li>一般习惯于在派生类的函数中也使用 virtual 关键字，以添加程序的可读性</li>\n</ul>\n<h4 id=\"哪些成员函数可以是虚函数\"><a class=\"anchor\" href=\"#哪些成员函数可以是虚函数\">#</a> 哪些成员函数可以是虚函数</h4>\n<ul>\n<li>一般非静态成员函数可以是虚函数</li>\n<li>构造函数不能是虚函数</li>\n<li>析构函数可以是虚函数</li>\n</ul>\n<h4 id=\"一般虚函数成员\"><a class=\"anchor\" href=\"#一般虚函数成员\">#</a> 一般虚函数成员</h4>\n<ul>\n<li>虚函数的声明</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">virtual</span> 函数类型 函数名<span class=\"token punctuation\">(</span>形参表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>虚函数声明只能出现在类定义中的函数原型声明中，而不能在成员函数实现的时候</li>\n<li>在派生类中可以对基类中的成员函数进行覆盖</li>\n<li>虚函数一般不声明为内联函数，因为对虚函数的调用需要动态绑定，而对内联函数的处理是静态的。</li>\n</ul>\n<hr />\n<h5 id=\"纯虚函数\"><a class=\"anchor\" href=\"#纯虚函数\">#</a> 纯虚函数</h5>\n<ul>\n<li>纯虚函数是一个在基类中声明的虚函数，它在该基类中没有定义具体的操作内容，要求各派生类根据实际需要定义自己的版本，纯虚函数的声明格式：</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">virtual</span> 函数类型 函数名<span class=\"token punctuation\">(</span>参数表<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"抽象类\"><a class=\"anchor\" href=\"#抽象类\">#</a> 抽象类</h5>\n<ul>\n<li>带有纯虚函数的类称为抽象类</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> 类名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> 类型 函数名<span class=\"token punctuation\">(</span>参数表<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 其他成员...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"抽象类的作用\"><a class=\"anchor\" href=\"#抽象类的作用\">#</a> 抽象类的作用:</h5>\n<ul>\n<li>抽象类为抽象和设计的目的而声明</li>\n<li>将有关的数据和行为组织在一个继承层次结构中，保证派生类具有要求的行为；</li>\n<li>对于暂时无法实现的函数，可以声明为纯虚函数，留给派生类去实现</li>\n<li>注意:\n<ul>\n<li>抽象类只能作为基类来使用</li>\n<li>不能定义抽象类的对象</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 抽象类 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 具有纯虚函数的类就叫做 “抽象类”</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 纯虚函数，函数没有结构体，等于 0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 抽象类是不能实例化的</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 覆盖基类的虚函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Base2</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base2::display()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 覆盖基类的虚函数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Derived</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derived::display()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>Base1<span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tptr<span class=\"token operator\">-></span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tBase2 base2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tDerived derived<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>base2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>derived<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"关键字override与final\"><a class=\"anchor\" href=\"#关键字override与final\">#</a> 关键字 override 与 final</h4>\n<ul>\n<li>override 与 final 都不是语言关键字 (keyword)，只有在特定的位置才有特别含义，其他地方仍旧可以作为一般标识符 (identifier) 使用。</li>\n</ul>\n<h5 id=\"override\"><a class=\"anchor\" href=\"#override\">#</a> override</h5>\n<ul>\n<li>显式覆盖函数</li>\n<li>声明该函数必须覆盖基类的虚函数，编译器可发现 &quot;未覆盖&quot; 错误</li>\n<li>覆盖要求\n<ul>\n<li>函数签名 (signature) 完全一致</li>\n<li>函数签名包括：函数名 参数列表  <code>const</code></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"显式覆盖的作用\"><a class=\"anchor\" href=\"#显式覆盖的作用\">#</a> 显式覆盖的作用</h6>\n<ul>\n<li>声明显式函数覆盖，在编译期间发现未覆盖的错误</li>\n<li>运用显式覆盖，编译器会检查派生类中声明 ``overrid` 的函数，在基类中是否存在可被覆盖的虚函数，若不存在，则会报错</li>\n</ul>\n<h4 id=\"final\"><a class=\"anchor\" href=\"#final\">#</a> final</h4>\n<ul>\n<li>用来避免类被继承，或是基类的函数被覆盖</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Base</span> <span class=\"token keyword\">final</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Derived</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token class-name\">Base1</span> <span class=\"token comment\">// 编译错误，Base1 为 final 不允许被继承</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 或</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Base2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此函数不能被派生类修改或覆盖</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Derived2</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token class-name\">Base2</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译错误，不允许被覆盖</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h4 id=\"运算符重载的意义\"><a class=\"anchor\" href=\"#运算符重载的意义\">#</a> 运算符重载的意义</h4>\n<ul>\n<li>运算符重载是对已有的运算符赋予多重含义，使同一个运算的数据时导致不同的行为</li>\n<li>针对自定义的类，可以对原有运算符进行重载</li>\n</ul>\n<h4 id=\"例如\"><a class=\"anchor\" href=\"#例如\">#</a> 例如</h4>\n<ul>\n<li>使复数类的对象可以用 &quot;+&quot; 运算符实现算法</li>\n<li>是时钟类可以用 &quot;++&quot; 运算符实现时间增加 1 秒</li>\n</ul>\n<h4 id=\"运算符重载的规定\"><a class=\"anchor\" href=\"#运算符重载的规定\">#</a> 运算符重载的规定</h4>\n<ul>\n<li>C<ins> 几乎可以重载全部的运算符，而且只能重载 C</ins> 中已经有的\n<ul>\n<li>不能重载:&quot;.&quot;,&quot;.*&quot;,&quot;::&quot;,&quot;?:&quot;</li>\n</ul>\n</li>\n<li>重载之后运算符的优先级和结合性都不会改变</li>\n<li>可以重载为类的非静态成员函数</li>\n<li>可以重载为非成员函数 (必要时可以声明为友元)</li>\n</ul>\n<h4 id=\"运算符重载为成员函数\"><a class=\"anchor\" href=\"#运算符重载为成员函数\">#</a> 运算符重载为成员函数</h4>\n<ul>\n<li>复数类加减法运算重载为成员函数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Complex</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">real</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">imag</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 运算符 + 重载成员函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tComplex <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 运算符 - 重载函数成员</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tComplex <span class=\"token keyword\">operator</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出复数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">double</span> real<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 复数实部</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">double</span> imag<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 复数虚部</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Complex Complex<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 创建一个临时无名对象作为返回值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span>real <span class=\"token operator\">+</span> c2<span class=\"token punctuation\">.</span>real<span class=\"token punctuation\">,</span> imag <span class=\"token operator\">+</span> c2<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Complex Complex<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex <span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token comment\">// 左操作数，右操作数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span>real <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">.</span>real<span class=\"token punctuation\">,</span> imag <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Complex</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> real <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> imag <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tComplex <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c1 = \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tc1<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c2 = \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tc2<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tc3 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 使用重载运算符完成复数减法</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c3 = c1 - c2 =\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tc3<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tc3 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">+</span> c2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用重载运算符完成复数加法</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c3 = c1 + c2 =\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tc3<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>c1 = (5,4)</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>c2 = (2,10)</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>c3 = c1 - c2 =(3,-6)</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>c3 = c1 + c2 =(7,14)</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"重载为类成员的运算符函数定义形式\"><a class=\"anchor\" href=\"#重载为类成员的运算符函数定义形式\">#</a> 重载为类成员的运算符函数定义形式</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>函数类型 <span class=\"token keyword\">operator</span> 运算符<span class=\"token punctuation\">(</span>形参<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 参数个数 = 原操作数个数 - 1 (后置 ++，-- 除外)</span></pre></td></tr></table></figure><h4 id=\"双目运算符重载规则\"><a class=\"anchor\" href=\"#双目运算符重载规则\">#</a> 双目运算符重载规则</h4>\n<ul>\n<li>如果要重载 B 为类成员函数，使之能够实现表达式 oped1 B oped2, 其中 oprd1 为类对象，则 B 应被重载为 A 类的成员函数，形参类型应该是 oprd2 所属的类型</li>\n<li>经重载后，表达式 oprd B oprd2 相当于 oprd1.operator B (oprd2)</li>\n</ul>\n<h5 id=\"重载前置和后置为时钟类成员函数\"><a class=\"anchor\" href=\"#重载前置和后置为时钟类成员函数\">#</a> 重载前置<ins>和后置</ins>为时钟类成员函数</h5>\n<ul>\n<li>前置单目运算符，重载函数没有形参</li>\n<li>后置 ++ 运算符，重载函数需要有一个 <code>int</code>  形参</li>\n<li>操作数是时钟类的对象</li>\n<li>实现时间增加 1 秒钟</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hour <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minute <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> second <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 前置单目运算符重载</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tClock<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">++</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 后置单目运算符重载</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tClock <span class=\"token keyword\">operator</span> <span class=\"token operator\">++</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//int 区分前置后置</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> hour<span class=\"token punctuation\">,</span> minute<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">Clock</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hour<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> second<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> hour <span class=\"token operator\">&amp;&amp;</span> hour <span class=\"token operator\">&lt;</span> <span class=\"token number\">24</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> minute <span class=\"token operator\">&amp;&amp;</span> minute <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span>second <span class=\"token operator\">&amp;&amp;</span>second <span class=\"token operator\">&lt;</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>hour <span class=\"token operator\">=</span> hour<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>minute <span class=\"token operator\">=</span> minute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>second <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Time error!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Clock</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token comment\">// 显示时间</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> hour <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> minute <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Clock<span class=\"token operator\">&amp;</span> Clock<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 前置 ++</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tsecond<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>second <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tsecond <span class=\"token operator\">-=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tminute<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minute <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\tminute <span class=\"token operator\">-=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\thour <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hour <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>Clock Clock<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 后置 ++</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 注意形参表中额整型参数</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tClock old <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用前置 “++” 运算符</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回当前值之后才加加</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tClock <span class=\"token function\">myclock</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"First time output:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tmyclock<span class=\"token punctuation\">.</span><span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Show myclock++\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">(</span>myclock<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Show ++myclock:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>myclock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>First time output:23:59:59</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Show myclock++23:59:59</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Show ++myclock:0:0:1</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"前置单目运算符\"><a class=\"anchor\" href=\"#前置单目运算符\">#</a> 前置单目运算符</h4>\n<ul>\n<li>如果要重载 U 为类成员函数，使之能够实现表达式 <code>U oprd</code> ，其中 <code>oprd</code>  为 A 类兑现，则 U 应被重载为 A 类的成员函数，无形参</li>\n<li>经重载后，表达式 <code>U oprd</code>  相当于 <code>oprd.operator U()</code></li>\n</ul>\n<h4 id=\"后置单目运算符和-重载规则\"><a class=\"anchor\" href=\"#后置单目运算符和-重载规则\">#</a> 后置单目运算符 ++ 和 -- 重载规则</h4>\n<ul>\n<li>如果要重载<ins>或 -- 为类成员函数，使之能够实现表达式  <code>oprd++</code>  或 <code>oprd--</code> ，其中 <code>oprd</code>  为 A 类对象，则</ins>或 -- 应被重载为 A 类的成员函数，且具有一个 int 类型形参</li>\n<li>经重载后，表达式 <code>oprd++</code>  相当于 <code>oprd.operator++(0)</code></li>\n</ul>\n<h4 id=\"运算符重载为非成员函数\"><a class=\"anchor\" href=\"#运算符重载为非成员函数\">#</a> 运算符重载为非成员函数</h4>\n<p>有些运算符不能重载为成员函数，例如：二元运算符的左操作数不是对象，或者是不能由我们重载运算符的对象</p>\n<h5 id=\"例题重载complex的加减法和运算符为非成员函数\"><a class=\"anchor\" href=\"#例题重载complex的加减法和运算符为非成员函数\">#</a> 例题：重载 Complex 的加减法和 &quot;&lt;&lt;&quot; 运算符为非成员函数</h5>\n<ul>\n<li>将 +，-(双目) 重载为非成员函数，并将其声明为复数类的友元，两个操作数都是复数类的常引用</li>\n<li>将 &lt;&lt;(双目) 重载为非成员函数，并将其声明为复数类的友元，它的左操作数是 <code>std::ostream</code>  引用，右操作符为复数类的常引用，返回 <code>std::ostream</code>  引用，用以支持下面形式的输出:<br />\n<img data-src=\"http://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtzFnlzYlDw2awEh7OY3gD1A0VMuWCC0LM47WqkibtMBA5N6enWLxGW6KnhuX1UW20ERX9vqOhYk0w/0?wx_fmt=png\" alt=\"输出流\" title=\"chatgpt输出流定义\" /></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 该输出调用的是</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Complex</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">real</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">imag</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 运算符 + 重载成员函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">friend</span> Complex <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c1<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 友元函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 运算符 - 重载函数成员</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">friend</span> Complex <span class=\"token keyword\">operator</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c1<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">friend</span> ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">double</span> real<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 复数实部</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">double</span> imag<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 复数虚部</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Complex <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 传引用效率更高，常引用，只能取数 ，不能修改</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span>real <span class=\"token operator\">+</span> c2<span class=\"token punctuation\">.</span>real<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">.</span>imag <span class=\"token operator\">+</span> c2<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Complex <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 左操作数，右操作数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span>real <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">.</span>real<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">.</span>imag <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 流对象</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span>real <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span>imag <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tComplex <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> c1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> c2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tc3 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 使用重载运算符完成复数减法</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c3 = c1 - c2 =\"</span> <span class=\"token operator\">&lt;&lt;</span> c3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tc3 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">+</span> c2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用重载运算符完成复数加法</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c3 = c1 + c2 =\"</span> <span class=\"token operator\">&lt;&lt;</span> c3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>c1 = (5,4)</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>c2 = (2,10)</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>c3 = c1 - c2 =(3,0)</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>c3 = c1 + c2 =(7,14)</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"运算符重载为非成员函数的规则\"><a class=\"anchor\" href=\"#运算符重载为非成员函数的规则\">#</a> 运算符重载为非成员函数的规则</h4>\n<ul>\n<li>函数的形参代表依自左至右次序排列的各操作数</li>\n<li>重载为非成员函数时\n<ul>\n<li>参数个数 = 原操作数个数 (后置 ++，-- 除外)</li>\n<li>至少应该有一个自定义类型的参数</li>\n</ul>\n</li>\n<li>后置单目运算符 ++ 和 -- 的重载函数，形参列表中要添加一个 int，但不必写形参名</li>\n<li>如果在运算符的重载函数中需要操作某类对象的私有成员，可以将此函数声明为该类的友元</li>\n</ul>\n<h4 id=\"运算符重载为非成员函数的规则-2\"><a class=\"anchor\" href=\"#运算符重载为非成员函数的规则-2\">#</a> 运算符重载为非成员函数的规则</h4>\n<ul>\n<li>双目运算符 B 重载后\n<ul>\n<li>表达式 oprd1 B oprd2</li>\n<li>等同于 operator B (oprd1,oprd2)</li>\n</ul>\n</li>\n<li>前置单目运算符 B 重载后\n<ul>\n<li>表达式 B oprd</li>\n<li>等同于 operator B (oprd)</li>\n</ul>\n</li>\n<li>后置单目运算符 ++ 和 -- 重载后\n<ul>\n<li>表达式 oprd B</li>\n<li>等同于 operator B (oprd,0)</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "编程语言",
                "C++",
                "计算机科学"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/",
            "title": "C++类的继承",
            "date_published": "2023-02-24T09:01:09.000Z",
            "content_html": "<h3 id=\"c-类的继承\"><a class=\"anchor\" href=\"#c-类的继承\">#</a> C++ 类的继承</h3>\n<h4 id=\"类的继承与派生\"><a class=\"anchor\" href=\"#类的继承与派生\">#</a> 类的继承与派生</h4>\n<ul>\n<li>继承与派生是同一过程从不同的角度看\n<ul>\n<li>保持已有类的特征而构造新类的过程称为继承</li>\n<li>在已有类的基础上新添自己的特征而产生新类的过程称为派生</li>\n</ul>\n</li>\n<li>被继承的已有类称为 <code>基类</code>  /(或父类)</li>\n<li>派生出的新类称为 <code>派生类</code>  /(或子类)</li>\n<li>直接参与派生出某类的基类称为 <code>直接基类</code></li>\n<li>基类的基类甚至更高层的基类称为 <code>间接基类</code></li>\n<li>继承的目的：实现设计与代码的重用</li>\n<li>派生的目的：当新问题出现，原有程序无法解决 (或不能完全解决) 需要对原有程序进行改造。</li>\n</ul>\n<h4 id=\"派生类的定义\"><a class=\"anchor\" href=\"#派生类的定义\">#</a> 派生类的定义</h4>\n<h5 id=\"单继承时\"><a class=\"anchor\" href=\"#单继承时\">#</a> 单继承时:</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> 派生类名<span class=\"token operator\">:</span>继承方式<span class=\"token number\">1</span> 基类名<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>继承方式<span class=\"token number\">2</span> 基类名<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t成员声明</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 每一个 \"继承方式\"，只用于限制对紧随其后之基类的继承</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">private</span> <span class=\"token class-name\">Base2</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>派生类的构成</p>\n<ul>\n<li>吸收基类成员\n<ul>\n<li>吸收基类成员之后，派生类实际上包含了它的全部积累中除构造和析构函数之外的全部成员</li>\n</ul>\n</li>\n<li>改造基类成员\n<ul>\n<li>如果派生类声明了一个和某基类成员同名的新成员，派生的新成员就隐藏或覆盖了外层同名成员</li>\n</ul>\n</li>\n<li>添加新的成员\n<ul>\n<li>派生类添加新成员使派生类在功能上有所发展</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"不同继承方式及类成员的访问控制\"><a class=\"anchor\" href=\"#不同继承方式及类成员的访问控制\">#</a> 不同继承方式及类成员的访问控制</h4>\n<h5 id=\"不同继承方式的影响主要体现在继承过来在哪里能用可以怎么用\"><a class=\"anchor\" href=\"#不同继承方式的影响主要体现在继承过来在哪里能用可以怎么用\">#</a> 不同继承方式的影响主要体现在:（继承过来，在哪里能用，可以怎么用)</h5>\n<ul>\n<li>派生类成员对基类成员的访问权限</li>\n<li>通过派生类对象对基类成员的访问权限</li>\n</ul>\n<h5 id=\"三种继承方式\"><a class=\"anchor\" href=\"#三种继承方式\">#</a> 三种继承方式:</h5>\n<ul>\n<li>共有继承 (初学精通)\n<ul>\n<li>基类的 public 和 protected 成员的访问 <code>属性</code> 在派生类中 <code>保持不变</code> ，但基类的 private 成员 <code>不可直接访问</code> 。</li>\n<li>派生类中的成员函数可以直接访问基类中的 public 和 protected 成员，但不能直接访问基类的 private 成员</li>\n<li>通过派生类的对象访问从基类继承的成员，只能访问 public 成员。</li>\n</ul>\n</li>\n<li>私有继承</li>\n<li>保护继承</li>\n</ul>\n<h5 id=\"公有继承举例\"><a class=\"anchor\" href=\"#公有继承举例\">#</a> 公有继承举例</h5>\n<h6 id=\"pointh\"><a class=\"anchor\" href=\"#pointh\">#</a>  <code>Point.h</code></h6>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_POINT_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_POINT_H</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token comment\">// 基类 Point 类的定义</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">initPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> offx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> offy<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tx <span class=\"token operator\">+=</span> offx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\ty <span class=\"token operator\">+=</span> offy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">float</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">float</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !_POINT_H</span></span></pre></td></tr></table></figure><h6 id=\"rectangleh\"><a class=\"anchor\" href=\"#rectangleh\">#</a>  <code>Rectangle.h</code></h6>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_RECTANGLE_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_RECTANGLE_H</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Point.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Point</span> <span class=\"token comment\">// 派生类的定义</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 新添共有函数成员</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">initRectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">initPoint</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用基类共有成员函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>w <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//this 此 Rectangle 指针，可以调用本类私有成员以及成成的派生类的共有函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>h <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">float</span> <span class=\"token function\">getH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">float</span> <span class=\"token function\">getW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 新添私有函数成员</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !_RECTANGLE_H</span></span></pre></td></tr></table></figure><h6 id=\"mainh\"><a class=\"anchor\" href=\"#mainh\">#</a>  <code>main.h</code></h6>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project : 矩形位置，类的继承</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Rectangle.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tRectangle rect<span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义 Rectangle 类的对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 设置举行数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\trect<span class=\"token punctuation\">.</span><span class=\"token function\">initRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置矩形数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\trect<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 移动矩形位置</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The data of rect(x,y,w,h):\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 输出矩形的特征参数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> rect<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> rect<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> rect<span class=\"token punctuation\">.</span><span class=\"token function\">getW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> rect<span class=\"token punctuation\">.</span><span class=\"token function\">getH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>The data of rect(x,y,w,h):</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>5,5,20,10</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"protected成员的特点与作用\"><a class=\"anchor\" href=\"#protected成员的特点与作用\">#</a>  <code>protected</code>  成员的特点与作用</h4>\n<ul>\n<li>对建立其 <code>所在类</code> 对象的模块来说，它与 <code>private</code>  成员的性质相同，类外不能直接访问</li>\n<li>对于其 <code>派生类</code> 来说，它与 <code>public</code>  成员性质相同</li>\n<li>即实现了数据隐藏，又方便继承，实现代码重用</li>\n</ul>\n<h4 id=\"私有继承private\"><a class=\"anchor\" href=\"#私有继承private\">#</a> 私有继承 ( <code>private</code> )</h4>\n<ul>\n<li>基类的 public 和 protected 成员都以 private 身份出现在派生类中，但 <code>基类的private成员不可直接访问</code> ，派生类内使用，不对外继承，在类外需要调用，需要在派生类中重新定义对外服务接口</li>\n<li>派生类中的成员函数可以直接访问基类中的 public 和 protected 成员，但不能直接访问基类的 private 成员</li>\n<li>通过派生类的对象不能直接访问从基类继承的任何成员</li>\n</ul>\n<h4 id=\"保护继承protected\"><a class=\"anchor\" href=\"#保护继承protected\">#</a> 保护继承 (protected)</h4>\n<ul>\n<li>基类的 <code>public</code>  和 <code>protected</code>  成员都以 <code>protected</code>  身份出现在派生类中，但基类的 <code>private</code>  成员是 <code>不可直接访问</code></li>\n<li>派生类中的成员函数可以直接访问基类中的 public 和 protected 成员，但不能直接访问基类的 private 成员</li>\n<li>通过派生类的对象不能直接访问从基类继承的任何成员</li>\n</ul>\n<h4 id=\"向上转型\"><a class=\"anchor\" href=\"#向上转型\">#</a> 向上转型</h4>\n<ul>\n<li>一个共有派生类的对象在使用上可以被当作基类的对象，反之则不可，具体表现在:\n<ul>\n<li>派生类的对象可以隐含转换为基类对象</li>\n<li>派生类的对象可以初始化基类的引用</li>\n<li>派生类的指针可以隐含转换为基类的指针</li>\n</ul>\n</li>\n<li>通过基类对象名，指针只能使用从基类继承的成员<br />\n注意：</li>\n</ul>\n<hr />\n<h4 id=\"继承时的构造函数\"><a class=\"anchor\" href=\"#继承时的构造函数\">#</a> 继承时的构造函数</h4>\n<ul>\n<li>默认情况下基类的构造函数不被继承，派生类需要定义自己的构造函数</li>\n<li>定义构造函数时，只需要对本类中新添成员进行初始化，对继承来的基类成员的初始化，是自动调用基类构造函数完成的</li>\n<li>派生类的构造函数需要给基类的构造函数传递参数</li>\n<li>C++11 规定可以用 using 语句继承基类构造函数，使之成为派生类的构造函数，但是只能初始化从基类继承的成员<br />\n语法形式:</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> Base<span class=\"token double-colon punctuation\">::</span>Base<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"单一继承时构造函数的定义\"><a class=\"anchor\" href=\"#单一继承时构造函数的定义\">#</a> 单一继承时构造函数的定义</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>派生类名<span class=\"token double-colon punctuation\">::</span>派生类名<span class=\"token punctuation\">(</span>基类所需的形参<span class=\"token punctuation\">,</span>本类成员所需的形参<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>基类名<span class=\"token punctuation\">(</span>形参表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>本类成员初始化列表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 其他初始化；</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"多继承时构造函数的定义\"><a class=\"anchor\" href=\"#多继承时构造函数的定义\">#</a> 多继承时构造函数的定义</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>派生类名<span class=\"token double-colon punctuation\">::</span>派生类名<span class=\"token punctuation\">(</span>参数表<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>基类名<span class=\"token number\">1</span><span class=\"token punctuation\">(</span>基类<span class=\"token number\">1</span>初始化参数表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>基类名<span class=\"token number\">2</span><span class=\"token punctuation\">(</span>基类<span class=\"token number\">2</span>初始化参数表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>基类名<span class=\"token function\">n</span><span class=\"token punctuation\">(</span>基类n初始化参数表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>本类成员初始化列表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 其他初始化；</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"派生类与基类的构造函数\"><a class=\"anchor\" href=\"#派生类与基类的构造函数\">#</a> 派生类与基类的构造函数</h4>\n<ul>\n<li>当基类中声明有默认构造函数或未声明构造函数时，派生类构造函数可以不向基类构造函数传递参数，也可以不声明构造函数。构造派生类的对象时，基类的默认构造函数将被调用</li>\n<li>当需要执行基类中带形参的构造函数来初始化基类数据时，派生类构造函数应在初始化列表中为基类构造函数提供参数</li>\n</ul>\n<h4 id=\"多继承且有对象成员时的构造函数\"><a class=\"anchor\" href=\"#多继承且有对象成员时的构造函数\">#</a> 多继承且有对象成员时的构造函数</h4>\n<p>即有继承又有组合的情况</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>派生类名<span class=\"token double-colon punctuation\">::</span>派生类名<span class=\"token punctuation\">(</span>参数表<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>基类名<span class=\"token number\">1</span><span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>基类名<span class=\"token number\">2</span><span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>基类名<span class=\"token function\">n</span><span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>对象成员初始化列表<span class=\"token punctuation\">,</span>基本类型成员初始化列表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 其他初始化；</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"构造函数的执行顺序\"><a class=\"anchor\" href=\"#构造函数的执行顺序\">#</a> 构造函数的执行顺序</h4>\n<p>1，调用基类构造函数，调用顺序按照它们被继承时声明的顺序 (从左向右)<br />\n 2，对初始化列表中的对象成员和基本类型成员进行初始化，初始化顺序按照它们在类中声明的顺序。对象成员初始化是自动调用对象所属类的构造函数完成的。<br />\n3，执行派生类的构造函数体中的内容。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructing Base1 \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructing Base2 \"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base3</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">Base3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructing Base3 * \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base3</span>  <span class=\"token comment\">// 首先按照此定义出书</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token function\">member2</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token function\">member1</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 此处的次序与构造函数的执行次序无关</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 之后根据此调用</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tBase1 member1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tBase2 member2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tBase3 member3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tDerived <span class=\"token function\">obj</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>Constructing Base2 2</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>Constructing Base1 1</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>Constructing Base3 *</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>Constructing Base1 3</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>Constructing Base2 4</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>Constructing Base3 *</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"复制构造函数\"><a class=\"anchor\" href=\"#复制构造函数\">#</a> 复制构造函数</h4>\n<ul>\n<li>若建立派生类对象时没有编写复制构造函数，编译器会生成一个隐含的复制构造函数，该函数先调用基类的复制构造函数，再为派生类新添的成员对象执行复制。</li>\n<li>若编写派生类的复制构造函数，一般都要为基类的复制构造函数传递参数</li>\n<li>派生类的复制构造函数只能接受一个参数，此参数不仅用来初始化派生类定义的成员，也将被传递给基类的复制构造函数。</li>\n<li>基类的复制构造函数形参类型是基类对象的引用，实参可以是派生类对象的引用</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">C</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> C <span class=\"token operator\">&amp;</span>c1<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"析构函数\"><a class=\"anchor\" href=\"#析构函数\">#</a> 析构函数</h4>\n<ul>\n<li>析构函数不被继承，派生类如果需要，要自行声明析构函数</li>\n<li>声明方法与一般 (无继承关系时) 类的析构函数相同</li>\n<li>不需要显式地调用基类的析构函数，系统会自动隐式调用</li>\n<li>析构函数的调用次序与析构函数相反</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 析构函数与构造函数的执行次序相反 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructing Base1 \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructing Base1\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructing Base2 \"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructing Base2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base3</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">Base3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructing Base3 * \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Base3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructing Base3\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base3</span>  <span class=\"token comment\">// 首先按照此定义出书</span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token function\">member2</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token function\">member1</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">// 此处的次序与构造函数的执行次序无关</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 之后根据此调用</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tBase1 member1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tBase2 member2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tBase3 member3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tDerived <span class=\"token function\">obj</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">/*  </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>Constructing Base2 2</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>Constructing Base1 1</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Constructing Base3 *</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>Constructing Base1 3</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Constructing Base2 4</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Constructing Base3 *</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>Destructing Base3</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>Destructing Base2</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>Destructing Base1</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>Destructing Base3</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>Destructing Base1</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>Destructing Base2</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"虚继承\"><a class=\"anchor\" href=\"#虚继承\">#</a> 虚继承</h4>\n<h5 id=\"作用域限定\"><a class=\"anchor\" href=\"#作用域限定\">#</a> 作用域限定</h5>\n<ul>\n<li>当派生类与基类中有相同成员时\n<ul>\n<li>若未特别限定，则通过派生类对象使用的是派生类中的同名成员</li>\n<li>若要通过派生类对象访问基类中被隐藏的同名成员，应使用基类名和作用域操作符 (::) 来限定</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"member of bases1\"</span> <span class=\"token operator\">&lt;&lt;</span>var<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"member of bases2\"</span> <span class=\"token operator\">&lt;&lt;</span> var <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"member of Derived\"</span> <span class=\"token operator\">&lt;&lt;</span> var <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tDerived d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tDerived<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 访问 Derived 类成员</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\td<span class=\"token punctuation\">.</span>var <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\td<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 访问 Base1 基类成员</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\td<span class=\"token punctuation\">.</span>Base1<span class=\"token double-colon punctuation\">::</span>var <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\td<span class=\"token punctuation\">.</span><span class=\"token class-name\">Base1</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 访问 Base2 基类成员</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tp<span class=\"token operator\">-></span>Base2<span class=\"token double-colon punctuation\">::</span>var <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tp<span class=\"token operator\">-></span><span class=\"token class-name\">Base2</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>member of Derived1</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>member of bases12</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>member of bases23</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"虚基类语法与用途\"><a class=\"anchor\" href=\"#虚基类语法与用途\">#</a> 虚基类语法与用途</h4>\n<ul>\n<li>需要解决的问题\n<ul>\n<li>当派生类从对个基类派生，而这些基类又共同基类，则在访问此共同基类中的成员时，将产生冗余，并有可能因冗余带来不一致性</li>\n</ul>\n</li>\n<li>虚基类声明\n<ul>\n<li>以 <code>virtual</code>  说明基类继承方式</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B1</span><span class=\"token operator\">:</span><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> B</pre></td></tr></table></figure><ul>\n<li>作用:\n<ul>\n<li>主要用来解决多继承时可能发生的对同一基类继承多次而产生的二义性问题</li>\n<li>为最远的派生类提供唯一的基类成员，而不重复产生多次复制</li>\n</ul>\n</li>\n<li>注意:\n<ul>\n<li>在第一级继承时就要将共同基类设计为虚基类</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> var0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"member of bases1\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base0</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> var1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base0</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">int</span> var2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"member of Derived\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tDerived d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\td<span class=\"token punctuation\">.</span>var0 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接访问虚基类的数据成员</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\td<span class=\"token punctuation\">.</span><span class=\"token function\">fun0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接访问虚基类的函数成员</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>Base1<span class=\"token double-colon punctuation\">::</span>var0 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>Base2<span class=\"token double-colon punctuation\">::</span>var0 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空间地址相同</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>var0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">/* 输出:</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>member of bases1</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>00000066B05BF6E0, 00000066B05BF6E0</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>00000066B05BF6E0</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"有虚基类时的构造函数\"><a class=\"anchor\" href=\"#有虚基类时的构造函数\">#</a> 有虚基类时的构造函数</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Base0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> var<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">var0</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> var0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"member of bases0\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base0</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> var<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Base0</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">int</span> var1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base0</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> var<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Base0</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">int</span> var2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> var<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Base0</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">)</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"member of Derived\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tDerived <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最远派生类对象</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\td<span class=\"token punctuation\">.</span>var0 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接访问虚基类的数据成员</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\td<span class=\"token punctuation\">.</span><span class=\"token function\">fun0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接访问虚基类的函数成员</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">/* 输出:</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>member of bases0</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"虚基类及其派生类构造函数\"><a class=\"anchor\" href=\"#虚基类及其派生类构造函数\">#</a> 虚基类及其派生类构造函数</h4>\n<ul>\n<li>建立对象时所指定的类称为 <code>最远派生类</code></li>\n<li>虚基类的成员是由最远派生类的构造函数通过调用虚基类的构造函数进行初始化的</li>\n<li>在整个继承结构中，直接或间接继承虚基类的所有派生类，都必须在构造函数的成员初始化表中为虚基类的构造函数列出参数。如果未列出，则表示调用该虚基类的默认构造函数</li>\n<li>在建立对象时，只有最远派生类的构造函数调用虚基类的构造函数，其他类对虚基类构造函数的调用被忽略。</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "编程语言",
                "C++",
                "计算机科学"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Git/GitHub%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/",
            "url": "https://www.blog.foryouos.cn/computer-science/Git/GitHub%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/",
            "title": "github个性化设置",
            "date_published": "2023-02-23T14:04:51.000Z",
            "content_html": "<h4 id=\"github首页自定义美化\"><a class=\"anchor\" href=\"#github首页自定义美化\">#</a> Github 首页自定义美化</h4>\n<ul>\n<li>主页名称设置的与自己 id 名字想通<br />\n<img data-src=\"http://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtLErS9QZU88YJJ9Kg7ZWTpEN9JwicC7EdA3XiaUtKY9CqTEvia0rD48DqTtCnsNBiaX090mwrbsM6NKg/0?wx_fmt=png\" alt=\"主页名称设置成自己的名字\" /></li>\n<li>通过 README.md 就会自动呈现到 GitHub 主页，使用 Markdown 语法<br />\n<img data-src=\"http://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtLErS9QZU88YJJ9Kg7ZWTpTeeOuAphVibGp2Vh3TaPE0pqIBXHs67nzKEtrGJCKhVrSKPZxCOF7Qw/0?wx_fmt=png\" alt=\"修改内容\" /></li>\n<li>如何使图片位于右边</li>\n</ul>\n<pre><code class=\"language-HTML\">&lt;img src=&quot;https://user-assets.sxlcdn.com/images/9527/Fnrnj5JtFfuw8x4iP_-7NSZDpUaU.gif&quot; referrerpolicy=&quot;no-referrer&quot; align=&quot;right&quot; &gt;\n</code></pre>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaGllbGRzLmlvLw==\">GitHub 徽章</span><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly92aXNpdG9yLWJhZGdlLmdsaXRjaC5tZS8=\">GitHub 访客勋章</span><sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NvbmdxdWFucGVuZy9zdGF0cy1jYXJkcw==\">社交统计</span><sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup></li>\n</ul>\n<h4 id=\"github自定义域名\"><a class=\"anchor\" href=\"#github自定义域名\">#</a> Github 自定义域名</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1zZXR0aW5naWQtMWs2bnRmNjRkbzZya3VqOTI4a2phNTBwbGE0NTQyYmVxM2NxYnN5azdib2EuZ2l0aHViLmlv\">进入主项目的 setting 设置个人的项目名 id.github.io</span>, 在左边的 page 下设置个人域名，在并强制 HTTPS<br />\n<img data-src=\"http://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtLErS9QZU88YJJ9Kg7ZWTpdKcqdVRPTH5WNKmFsRCZSLHc6C5x7aN4zXqb20XNMiaric0jj6MVjeAA/0?wx_fmt=png\" alt=\"GitHub项目名\" /><br />\n<img data-src=\"http://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtLErS9QZU88YJJ9Kg7ZWTpTdSPLYqK5yJMkFlu5kCicRnsntxEuqWqnIRzydmhkPN2ccMJccxOYHw/0?wx_fmt=png\" alt=\"域名设置强制https\" /></li>\n<li>在域名服务端设置（以百度云为例)<br />\n 除了第五个记录值改为自己的其它完全相同<br />\n<img data-src=\"http://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtLErS9QZU88YJJ9Kg7ZWTpPk8WqSRJ1Rs1153snU0DyWQh85nfJMqXQvPKGc0FgmjEjSH0RSuLCQ/0?wx_fmt=png\" alt=\"域名服务端设置\" /></li>\n</ul>\n<h4 id=\"https问题\"><a class=\"anchor\" href=\"#https问题\">#</a> https 问题:</h4>\n<ul>\n<li>若设置了 Https，Chrome 浏览器网址左边的没有小黑锁，显示不安全，点 F12 进入开发者选项，看那个链接没有 https，修改即可实现小黑锁，安全。</li>\n</ul>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaGllbGRzLmlvLw==\">https://shields.io/</span> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92aXNpdG9yLWJhZGdlLmdsaXRjaC5tZS8=\">https://visitor-badge.glitch.me/</span> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NvbmdxdWFucGVuZy9zdGF0cy1jYXJkcw==\">https://github.com/songquanpeng/stats-cards</span> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "计算机科学",
                "Git分布式版本控制",
                "Git",
                "编程语言"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "C++数组指针字符串",
            "date_published": "2023-02-23T09:08:09.000Z",
            "content_html": "<h3 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h3>\n<p>数组是具有一定顺序关系的若干相同类型变量的集合体，组成数组的变量。</p>\n<h4 id=\"范围for循环\"><a class=\"anchor\" href=\"#范围for循环\">#</a> 范围 for 循环</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tb<span class=\"token punctuation\">[</span><span class=\"token number\">10</span> <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 遍历容器十分方便，遍历的另一种形式，从 a 中依次取出元素，进行操作</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//auto 自动类型，根据 a 的类型确定 e 的类型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 范围 for 循环，输出 a 中每个元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 下标迭代循环，输出 b 中每个元素</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h4 id=\"数组初始化\"><a class=\"anchor\" href=\"#数组初始化\">#</a> 数组初始化</h4>\n<ul>\n<li>如果不作任何初始化，局部作用域的非静态数组中会存在垃圾数据，static 数组中的数组默认初始化为 0</li>\n<li>如果只对部分元素初始化，剩下的未显式初始化的元素，将自动被初始化为零</li>\n</ul>\n<h4 id=\"对象数组\"><a class=\"anchor\" href=\"#对象数组\">#</a> 对象数组</h4>\n<ul>\n<li>定义对象数组\n<ul>\n<li>类名 数组名 [元素个数]</li>\n</ul>\n</li>\n<li>访问对象数组元素\n<ul>\n<li>通过下标访问</li>\n<li>数组名 [下标]. 成员名</li>\n</ul>\n</li>\n<li>对象数组初始化\n<ul>\n<li>数组中每一个元素对象被创建时，系统都会调用类构造函数初始化该对象。</li>\n<li>通过初始化列表赋值</li>\n<li Point(1,2),Point(3,4)=\"\">Point a[2]=</li>\n<li>如果没有为数组元素指定显式初始值，数组元素便使用默认值初始化 (调用默认构造函数)</li>\n</ul>\n</li>\n<li>对象数组的析构\n<ul>\n<li>当数组中每一个对象被删除时，系统都要调用一次析构函数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Pont.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Default Constructor called.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructor called.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor called\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> newY<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Moving the point to(\"</span> <span class=\"token operator\">&lt;&lt;</span> newX <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> newY <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tx <span class=\"token operator\">=</span> newX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\ty <span class=\"token operator\">=</span> newY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Entering main...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tPoint a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Exiting main...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>* Entering main...</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>* Default Constructor called.</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>* Default Constructor called.</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>* Moving the point to(10,20)</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>* Moving the point to(11,21)</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>* Exiting main...</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>* Destructor called</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>* Destructor called</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"指针\"><a class=\"anchor\" href=\"#指针\">#</a> 指针</h3>\n<ul>\n<li>指针：内存地址，用于间接访问内存单元</li>\n<li>指针变量：用于存放地址的变量<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvicMgsRBhgayuYtLPvnzX9llE8Xe4ibd1m43EhagTrgffUobhpTjW9gDnRYSicHVD956NrMh7dIXfsw/0?wx_fmt=jpeg\" alt=\"指针变量\" title=\"指针变量\" /></li>\n<li><code>零</code> 可以赋给指针，表示空指针</li>\n<li>向指针变量赋值的值必须是地址常量，不能是普通整数</li>\n<li>允许定义或声明指向 void 类型的指针，该指针可以被赋予任何类型对象的地址</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>general<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>以往用 0 或者 NULL 去表达空指针的问题\n<ul>\n<li>C/C++ 的 NULL 宏是个有很多潜在 BUG 的宏。因为有的库把其定义为整数 0，有的定义成 (void*) 0.</li>\n<li>C++11 使用 nullptr 关键字，是表达更准确，类型安全的空指针</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"指向常量的指针\"><a class=\"anchor\" href=\"#指向常量的指针\">#</a> 指向常量的指针</h4>\n<p>不能通过指向常量的指针改变所指对象的值，但指针本身可以改变，可以指向另外的对象</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p1 是指向常量的指针</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，p1 本身的值可以改变</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 编译时出错，不能通过 p1 改变所指的对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>b<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"指针类型的常量\"><a class=\"anchor\" href=\"#指针类型的常量\">#</a> 指针类型的常量</h4>\n<p>若声明指针常量，则指针本身的值不能被改变，指针本身是常量</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 可以</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 错误，p2 是指针常量，值不能被改变</span></pre></td></tr></table></figure><h4 id=\"指针数组\"><a class=\"anchor\" href=\"#指针数组\">#</a> 指针数组</h4>\n<ul>\n<li>数组的元素是指针型</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Point <span class=\"token operator\">*</span>pa<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 由 pa [0],pa [1] 两个指针组成</span></pre></td></tr></table></figure><p>利用数组与二维数组对比比</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> line1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> line2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> line3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 定义整型指针数组并初始化</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Pline<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> line1<span class=\"token punctuation\">,</span>line2<span class=\"token punctuation\">,</span>line3 <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Matrix test:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 输出矩阵</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> Pline<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Matrix test:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>1 0 0</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>0 1 0</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>0 0 1</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"以指针作为函数参数\"><a class=\"anchor\" href=\"#以指针作为函数参数\">#</a> 以指针作为函数参数</h4>\n<ul>\n<li>需要数据双向传递时 (引用也可以达到响应效果)\n<blockquote>\n<p>用指针作为函数的参数，可以使被调函数通过形参指针存取主调函数中实参指针指向的数组，实现数据的双向 传递</p>\n</blockquote>\n</li>\n<li>小传递一组数据，只传首地址运行效率比较高\n<blockquote>\n<p>实参是数组名时形参可以是指针</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project: 从浮点数中取整数和浮点数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>注：浮点数在机器内部近似存储</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">splitFloat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> intpart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> fracPart<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token operator\">*</span>intpart <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取 x 的整数部分</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token operator\">*</span>fracPart <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> <span class=\"token operator\">*</span>intpart<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取 x 的小数部分</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter 3 float point numbers:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tcin <span class=\"token operator\">>></span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token function\">splitFloat</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"integer Part=\"</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Fraction Part = \"</span> <span class=\"token operator\">&lt;&lt;</span> f <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Enter 3 float point numbers:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>3.14</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>integer Part=3 Fraction Part = 0.14</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>9.7</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>integer Part=9 Fraction Part = 0.7</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>5</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>integer Part=5 Fraction Part = 0</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"指针常量\"><a class=\"anchor\" href=\"#指针常量\">#</a> 指针常量</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Project：有关常量的几个问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//N 值不可修改</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> M <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//*p 不可修改，p 可以更改指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可通过赋值指针修改</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> A <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 只可初始化，不可膝盖</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">//N = 7;// 错误</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//M = 5; // 此值也不允许修改</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 地址不能改变，也不能 * p 赋值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//*p = 9; // 左值也不可修改</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//*q = 9; // 左值不可修改</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tq <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>q <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project: 使用 const 进行权限管理</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 加 const 常量，其只有读的权限，不能修改</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#123;\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#125;\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tcin <span class=\"token operator\">>></span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/*1 2 3 4 5 6</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>&#123;1,2,3,4,5,6&#125;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"指针类型的函数\"><a class=\"anchor\" href=\"#指针类型的函数\">#</a> 指针类型的函数</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>存储类型 数据类型 <span class=\"token operator\">*</span>函数名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 函数体语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：</p>\n<ul>\n<li>不要将非静态局部地址用作函数的返回值\n<ul>\n<li>在 <code>子函数中定义局部变量</code> 后将其<sub>地址</sub>返回给主函数，就是非法地址</li>\n</ul>\n</li>\n<li>返回的指针要确保在主调函数中是有效，合法的地址\n<ul>\n<li>主函数中定义的数组，在子函数中对该数组元素进行某种操作后，返回其中一个元素的地址</li>\n<li>在子函数中通过动态内存分配 new 操作取得的内存地址返回给主函数是合法有效的，但是内存分配和释放不在同一级别，要注意不能忘记释放，避免内存泄露。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token function\">newintvar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回的地址指向的是动态分配的空间</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 函数运行结束时，p 中的地址仍有效</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token function\">newintvar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> intptr <span class=\"token operator\">=</span> <span class=\"token function\">newintvar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token operator\">*</span>intptr <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问的是合法有效的地址</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">delete</span> intptr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 如果忘记在这里释放，会造成内存泄露</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>内存泄露</code> ：程序中已分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p>\n<h4 id=\"函数指针的定义函数指针指向的是程序代码存储区\"><a class=\"anchor\" href=\"#函数指针的定义函数指针指向的是程序代码存储区\">#</a> 函数指针的定义：函数指针指向的是程序代码存储区。</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>存储类型 数据类型 <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>函数指针名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"函数指针的典型用途\"><a class=\"anchor\" href=\"#函数指针的典型用途\">#</a> 函数指针的典型用途</h5>\n<ul>\n<li>通过函数指针调用的函数\n<ul>\n<li>将函数的指针作为参数传递给一个函数，使得在处理相似事件的时候可以灵活的使用不同的方法</li>\n</ul>\n</li>\n<li>调用者不关心谁是被调用者\n<ul>\n<li>需直到存在一个具有特定原型和限定条件的被调用函数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 函数指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 求最大值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 求最小值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 求和</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入整数a: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入整数b：\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tcin <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Max of\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"and\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Min of\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"and\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Sum of\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"and\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"对象指针\"><a class=\"anchor\" href=\"#对象指针\">#</a> 对象指针</h4>\n<ul>\n<li>对象指针定义形式\n<ul>\n<li>类名 * 对象指针名</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Point <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Point <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过指针访问对象成员\n<ul>\n<li>对象指针名 -&gt; 成员名</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ptr<span class=\"token operator\">-></span><span class=\"token function\">getx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 相当于<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tPoint <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tPoint<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 定义对象指针，用 a 的地址初始化</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token operator\">-></span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用指针访问对象成员</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 用对象名访问对象成员</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"this-指针\"><a class=\"anchor\" href=\"#this-指针\">#</a> this 指针</h4>\n<ul>\n<li>隐含于类的每一个非静态成员函数中</li>\n<li>指出成员函数所操作的对象\n<ul>\n<li>当通过一个对象调用成员函数时，系统先将该对象的地址赋给 this 指针，然后调用成员函数，成员函数对对象的数据成员进行操作时，就隐含使用了 this 指针</li>\n<li>Point 类的 getX 函数中 return x 相当于 return this-&gt;x;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"前向引用声明\"><a class=\"anchor\" href=\"#前向引用声明\">#</a> 前向引用声明</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fred</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前向引用生命</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Barney</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tFred <span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 不使用指针的话，由于编译器不知道 fred 细节，没法分配空间等操作，将报错，使用对象指针达到效果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fred</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tBarney y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"动态内存分配\"><a class=\"anchor\" href=\"#动态内存分配\">#</a> 动态内存分配</h4>\n<ul>\n<li>new 类型名 T (初始化参数)</li>\n<li>功能:\n<ul>\n<li>在程序执行期间，申请用于存放 T 类型对象的存储空间，并依次初始化参数进行初始化。</li>\n<li>基本类型初始化：如果有初始化参数，依初始化参数进行初始化，如果没有括号和初始化参数，不进行初始化，新分配的内存中内容不确定，如果有括号但初始化参数为空，初始化为 0</li>\n<li>对象类型：如果有初始化参数，以初始化参数中的值为参数调用构造函数进行初始化，如果没有括号和初始化参数或者有括号但初始化参数为空，用默认构造函数初始化</li>\n</ul>\n</li>\n<li>结果值：成功：T 类型的指针，指向新分配的内存，失败：抛出异常</li>\n</ul>\n<hr />\n<h4 id=\"动态申请动态数组\"><a class=\"anchor\" href=\"#动态申请动态数组\">#</a> 动态申请动态数组</h4>\n<ul>\n<li>new 类型名 T [表达式][常量表达式]......()</li>\n<li>功能:\n<ul>\n<li>在程序执行期间，申请用于存档 T 类型对象数组的内存空间，可以有 &quot;()&quot; 但初始化列表必须为空</li>\n<li>如果有 &quot;()&quot;, 对每个元素的初始化与执行 &quot;new T ()&quot; 所做进行初始化的方式相同</li>\n<li>如果没有 &quot;()&quot;, 对每个元素的初始化与执行 &quot;new T&quot; 所做进行初始化的方式相同</li>\n</ul>\n</li>\n<li>结果值\n<ul>\n<li>如果内存申请成功，返回一个指向新分配内存首地址的指针</li>\n<li>如果失败，抛出异常</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span><span class=\"token operator\">*</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 一维数组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"释放内存操作符delete\"><a class=\"anchor\" href=\"#释放内存操作符delete\">#</a> 释放内存操作符 delete</h4>\n<ul>\n<li>delete 指针 p</li>\n<li>功能：释放指针 p 所指向的内存，p 必须是 new 操作的返回值</li>\n<li>delete [] 指针 p</li>\n<li>功能：释放指针 p 所指向的数组，p 必须是用 new 分配得到的数组首地址</li>\n</ul>\n<hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor called.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Default Destructor called.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor called\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 常函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> newY<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tx <span class=\"token operator\">=</span> newX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\ty <span class=\"token operator\">=</span> newY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"step one:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tPoint<span class=\"token operator\">*</span> ptr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Point<span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用默认构造函数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">delete</span> ptr1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 删除对象，自动调用析构函数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Step two\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tptr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">delete</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>step one:</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>Default Destructor called.</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>Destructor called</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>Step two</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>Destructor called.</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>Destructor called</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>*/</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor called.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Default Destructor called.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor called\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 常函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> newY<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tx <span class=\"token operator\">=</span> newX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\ty <span class=\"token operator\">=</span> newY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tPoint<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Point<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建对象数组</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tptr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过指针访问数组元素的成员</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tptr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Deleting...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除整个对象数组</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Default Destructor called.</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>Default Destructor called.</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>Deleting...</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>Destructor called</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>Destructor called</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"创建动态数组\"><a class=\"anchor\" href=\"#创建动态数组\">#</a> 创建动态数组</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 创建动态内存分配孔家</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一个为表达式，后面为常量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cp <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> cp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放整个动态多维数组空间</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"将动态数组封装成类\"><a class=\"anchor\" href=\"#将动态数组封装成类\">#</a> 将动态数组封装成类</h4>\n<ul>\n<li>更加简介，便于管理\n<ul>\n<li>建立和删除数组的过程比较繁琐</li>\n<li>封装成类后更加简洁，便于管理</li>\n</ul>\n</li>\n<li>可以在访问数组元素前检查下标是否越界\n<ul>\n<li>用 assert 来检查，assert 只在调试时生效</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cassert></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor called.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Default Destructor called.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor called\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 常函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> newY<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tx <span class=\"token operator\">=</span> newX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\ty <span class=\"token operator\">=</span> newY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayOfPoints</span>  <span class=\"token comment\">// 创建动态数组类</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">ArrayOfPoints</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tpoints <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Point<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 建立数组，就要想起在何处释放</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">ArrayOfPoints</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Deleting ...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 释放数组 </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> points<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tPoint<span class=\"token operator\">&amp;</span> <span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回引用</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> points<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tPoint<span class=\"token operator\">*</span> points<span class=\"token punctuation\">;</span><span class=\"token comment\">// 指向动态数组首地址</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组大小</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please enter the count of points:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tcin <span class=\"token operator\">>></span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tArrayOfPoints <span class=\"token function\">points</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建数组对象</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tpoints<span class=\"token punctuation\">.</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问数组元素的成员</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tpoints<span class=\"token punctuation\">.</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问数组元素的成员</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>Please enter the count of points:3</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>Default Destructor called.</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>Default Destructor called.</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Default Destructor called.</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>Deleting ...</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Destructor called</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Destructor called</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>Destructor called</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"为什么element函数返回对象的引用\"><a class=\"anchor\" href=\"#为什么element函数返回对象的引用\">#</a> 为什么 element 函数返回对象的引用</h5>\n<ul>\n<li>返回 &quot;引用&quot; 可以用来操作封装数组对象内部的数据元素，如果返回 &quot;值&quot; 则只是返回了一个副本，通过副本是无法操作原来数组中的元素的。</li>\n</ul>\n<h4 id=\"vector容器\"><a class=\"anchor\" href=\"#vector容器\">#</a> vector 容器</h4>\n<ul>\n<li>封装任何类型的动态数组</li>\n<li>数组下标越界检查</li>\n</ul>\n<h5 id=\"vector容器定义\"><a class=\"anchor\" href=\"#vector容器定义\">#</a> vector 容器定义:</h5>\n<ul>\n<li>vector &lt;元素类型&gt; 数组对象名 (数组长度)</li>\n<li>vector&lt;int&gt;arr (5)   // 建立大小为 5 的 int 数组</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 计算数组 arr 中元素的平均值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">double</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tsum <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">return</span> sum <span class=\"token operator\">/</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"n = \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token function\">arr</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建数组对象</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input \"</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" real number:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tcin <span class=\"token operator\">>></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Average = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"基于for循环配合auto举例\"><a class=\"anchor\" href=\"#基于for循环配合auto举例\">#</a> 基于 for 循环配合 auto 举例</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 基于范围的 for 循环配合 auto 举例</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>v <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">/*v.begin (), 指向首元素的迭代器，可以认为是指向首元素的 “泛型” 指针 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">//auto 是 i 的类型根据后面变</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "编程语言",
                "C++",
                "计算机科学",
                "指针"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Git/Git%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95/",
            "url": "https://www.blog.foryouos.cn/computer-science/Git/Git%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95/",
            "title": "Git使用语法",
            "date_published": "2023-02-23T04:28:05.000Z",
            "content_html": "<h3 id=\"git\"><a class=\"anchor\" href=\"#git\">#</a> Git</h3>\n<h4 id=\"删除分支\"><a class=\"anchor\" href=\"#删除分支\">#</a> 删除分支</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>分支名<span class=\"token operator\">></span></pre></td></tr></table></figure><h4 id=\"修改分支名\"><a class=\"anchor\" href=\"#修改分支名\">#</a> 修改分支名</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> <span class=\"token operator\">&lt;</span>原分支名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>新分支名<span class=\"token operator\">></span></pre></td></tr></table></figure><hr />\n<h4 id=\"查看简明状态说明\"><a class=\"anchor\" href=\"#查看简明状态说明\">#</a> 查看简明状态说明</h4>\n<ul>\n<li>git 目录中的文件状态包含：是否跟踪，是否修改，是否已存入暂存区</li>\n<li>参数的一个横杠表示缩写，两个横杠表示全程</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> status <span class=\"token parameter variable\">-s</span> <span class=\"token comment\"># 查看简明状态说明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> M README <span class=\"token comment\"># 已修改，但未暂存 (M 的位置靠右，红色)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> MM Rakefile <span class=\"token comment\"># 已修改，暂存后又作了修改（有暂存和未暂存)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> A lib/git.rb <span class=\"token comment\"># 新添加到暂存区，未提交</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> M lib/simplegit.rb <span class=\"token comment\">#已修改，已暂存</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ？？ LICENSE.txt <span class=\"token comment\">#新添加，未跟踪</span></pre></td></tr></table></figure><h4 id=\"忽略文件\"><a class=\"anchor\" href=\"#忽略文件\">#</a> 忽略文件</h4>\n<p>添加一个名为 <code>.gitignore</code>  的文件，列出要忽略的文件的模式</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>*.<span class=\"token punctuation\">[</span>oa<span class=\"token punctuation\">]</span> <span class=\"token comment\">#忽略以.o 或.a 结尾的文件 (一般这类文件在编译过程出现)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>*~     <span class=\"token comment\">#忽略以～结尾的文件 (一般是文本编辑软件保存的副本)</span></pre></td></tr></table></figure><h5 id=\"gitignore文件格式规范\"><a class=\"anchor\" href=\"#gitignore文件格式规范\">#</a>  <code>.gitignore</code>  文件格式规范</h5>\n<ul>\n<li>所有空行或者以 <strong>#</strong> 开头都会被 Git 忽略 (注释符号)</li>\n<li>可以使用标准的 glob 模式（shell 所使用的简化正则）匹配，它会递归整个工作区</li>\n<li>匹配模式可以以 (<strong>/</strong>) 开头防止递归</li>\n<li>以  (<strong>/</strong>)  结尾指定目录</li>\n<li>要忽略指定模式以外的文件或目录，可以在模式前加上叹号 (<strong>!</strong>) 取反</li>\n<li>星号 (*) 匹配零个或多个任意字符</li>\n<li>[ <code>abc</code> ] 匹配任何一个列在括号中的字符</li>\n<li>文件 (<strong>？</strong>) 只匹配一个任意一个字符</li>\n<li>[0-9] 表示匹配所有 0 到 9 的数字，在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配</li>\n<li>使用两个 (****<strong>) 表示匹配任意中间目录，比如 a/</strong>/z 可以匹配 a/z,a/b/z,a/b/c/z 等</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9naXRpZ25vcmU=\">详情</span><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>*.a   <span class=\"token comment\"># 忽略所有的.a 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">!</span>lib.a   <span class=\"token comment\"># 跟踪所有的 lib.a，基表你在前面忽略了.a 文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/TODO   <span class=\"token comment\"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>build/  <span class=\"token comment\"># 忽略任何目录下名为 build 的文件夹</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>doc/*.txt  <span class=\"token comment\"># 忽略 doc/notes.txt 但不忽略深层次的</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>doc/**/*.pdf  <span class=\"token comment\"># 忽略 doc/ 目录及其所有子目录下的.pdf 文件</span></pre></td></tr></table></figure><hr />\n<h4 id=\"查看修改的具体内容\"><a class=\"anchor\" href=\"#查看修改的具体内容\">#</a> 查看修改的具体内容</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token comment\"># 比较修改之前还没有暂存起来的变化内容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token parameter variable\">--staged</span> <span class=\"token comment\"># 查看已暂存的将要添加到下次提交里的内容</span></pre></td></tr></table></figure><p><code>注意</code> : <code>git status</code>  只能查看文件变化的状态，并不能查看具体修改了哪些内容。使用 <code>git diff</code>  可以查看具体变化的内容<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsY0YabUMSXt2xbpITduhdCdE1VrpZsiabp9K5nViaB8ugo6JqPXqL0VxXFzc2Z7kBBpa8yNQUicP0lg/0?wx_fmt=png\" alt=\"git diff\" title=\"git diff运行图\" /></p>\n<hr />\n<h4 id=\"查看提交历史\"><a class=\"anchor\" href=\"#查看提交历史\">#</a> 查看提交历史</h4>\n<p>不传入任何参数的默认情况先， <code>git log</code>  会按时间先后顺序列出所有的提交，最新的更新排在最上面</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> log</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> log <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-2</span> <span class=\"token comment\"># -p 显示差异，-2 显示最近的提交次数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> log <span class=\"token parameter variable\">--stat</span> <span class=\"token comment\"># 显示每次提交的差异统计</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#使用不同的默认格式展示提交历史</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#oneline 把每个提交放在一行显示，还有 short，full，fuller</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> log <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>oneline  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># --pretty=format:\"% h - % an,% ar:% s\" 定制记录的显示格式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> log <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>format:<span class=\"token string\">\"%h - %an,%ar:%s\"</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsY0YabUMSXt2xbpITduhdCK3V2TY33PTgJhlsYSgYfHGV4FcqynIOWknRnXUVxD9MM0RcxicRvxUA/0?wx_fmt=png\" alt=\"git log\" title=\"git log运行\" /><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyL0dpdC0lRTUlOUYlQkElRTclQTElODAtJUU2JTlGJUE1JUU3JTlDJThCJUU2JThGJTkwJUU0JUJBJUE0JUU1JThFJTg2JUU1JThGJUIyI3ByZXR0eV9mb3JtYXQ=\"> 常见的 format 选项</span><sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup></p>\n<hr />\n<h4 id=\"撤销操作\"><a class=\"anchor\" href=\"#撤销操作\">#</a> 撤销操作</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--amend</span>  <span class=\"token comment\">#重新提交，且只有一次提交记录</span></pre></td></tr></table></figure><h4 id=\"远程仓库中抓取与拉取\"><a class=\"anchor\" href=\"#远程仓库中抓取与拉取\">#</a> 远程仓库中抓取与拉取</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>get fetch <span class=\"token operator\">&lt;</span>remote<span class=\"token operator\">></span></pre></td></tr></table></figure><p>此命令只会将数据下载到本地仓库 -- 它并不会自动合并或者修改你当前的工作，必须手动将其合并</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> pull</pre></td></tr></table></figure><p>此命令会自动抓取后合并该远程分支到当前分支<br />\n默认情况下， <code>git clone</code>  会自动设置本地 master 分支跟踪克隆的远程仓库的 <code>master</code>  分支 (或其它名字的默认分支)。运行 <code>git pull</code>  通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支</p>\n<hr />\n<h4 id=\"打标签\"><a class=\"anchor\" href=\"#打标签\">#</a> 打标签</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> tag  <span class=\"token comment\">#完整标签列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-l</span> <span class=\"token string\">\"v2.0\"</span>  <span class=\"token comment\"># 只显示包含 v2.0 的标签。注意加星号 (*)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-list</span> <span class=\"token string\">\"v2.0\"</span></pre></td></tr></table></figure><ul>\n<li>轻量标签：本质上是将提交和存储到一个文件中 --- 没有保存任何其它信息</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> tag v1.4-lw  <span class=\"token comment\"># 不需要添加选项</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> show v1.4-lw  <span class=\"token comment\">#查看标签信息，没有任何额外信息</span></pre></td></tr></table></figure><ul>\n<li>附注标签：是存储在 Git 数据库中的一个完整对象，它们是可以被校验的，其中包含打标签者的名字，电子邮箱地址，日期时间，此外还有一个标签信息，并且可以使用 GNU Privacy Guard 签名并验证。通常会建议创建附注标签。</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-a</span> v1.4 <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"my version 1.4\"</span> <span class=\"token comment\"># -a 表示 add，-m 表示附件信息</span></pre></td></tr></table></figure><h4 id=\"共享标签\"><a class=\"anchor\" href=\"#共享标签\">#</a> 共享标签</h4>\n<p>git push 命令并不会传送标签到远程仓库服务器上，在创建完标签后必须显式地推送标签到贡献服务器上，这个过程就像共享远程分支一样</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> push origin v1.5 <span class=\"token comment\"># 显式地推送标签到远程仓库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--tags</span> <span class=\"token comment\">#一次性推送所有不在远程仓库上的标签</span></pre></td></tr></table></figure><h4 id=\"删除标签\"><a class=\"anchor\" href=\"#删除标签\">#</a> 删除标签</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-d</span> v1.4-lw  <span class=\"token comment\"># 删除一个轻量标签，但并不会从远程仓库移除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token operator\">&lt;</span>remote<span class=\"token operator\">></span> :refs/tags/v1.4-lw  <span class=\"token comment\">#更新远程仓库</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 第二行或者</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token operator\">&lt;</span>remote<span class=\"token operator\">></span> <span class=\"token parameter variable\">--delete</span> <span class=\"token operator\">&lt;</span>tagname<span class=\"token operator\">></span></pre></td></tr></table></figure><h4 id=\"命令别名\"><a class=\"anchor\" href=\"#命令别名\">#</a> 命令别名</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.co checkout</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.br branch</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.ci commit</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.st status</pre></td></tr></table></figure><hr />\n<h4 id=\"修改分支名-2\"><a class=\"anchor\" href=\"#修改分支名-2\">#</a> 修改分支名</h4>\n<p>首先保证本地代码是最新的</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> oldbranchName newbranchname <span class=\"token comment\">#修改本地分支名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push origin :oldbranchName  <span class=\"token comment\">#删除远程分支</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--delete</span> oldbranchName  <span class=\"token comment\">#或者删除远程分支</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#改名后的本地分支推送到远程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> push --set-uostream origin newbranchname</pre></td></tr></table></figure><hr />\n<ul>\n<li>Workspace ：工作区</li>\n<li>Index/Stage：暂存区</li>\n<li>Repository: 仓库区 (或本地仓库)</li>\n<li>Remote：远程仓库<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsY0YabUMSXt2xbpITduhdCmRbmErzicx7hkKfAXmOeNB9dOthFSKeicnDwLhzY23DpDaQkZIZbjvNQ/0?wx_fmt=png\" alt=\"Git命令\" title=\"git命令流程\" /></li>\n</ul>\n<hr />\n<h3 id=\"改名文件并将这个改名放入暂存区\"><a class=\"anchor\" href=\"#改名文件并将这个改名放入暂存区\">#</a> 改名文件并将这个改名放入暂存区</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">mv</span> <span class=\"token punctuation\">[</span>file-original<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>file-renamed<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><hr />\n<h3 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h3>\n<ul>\n<li><a href=\"https://git-scm.com/book/zh/v2\"><strong>GiT-book 中文</strong></a><sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NoYXJ0LnpoZW5nbGluZ2x1LmNuL3BhZ2VzLzYzNTA4OC8=\">Git 笔记</span><sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup></li>\n</ul>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9naXRpZ25vcmU=\">https://github.com/github/gitignore</span> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyL0dpdC0lRTUlOUYlQkElRTclQTElODAtJUU2JTlGJUE1JUU3JTlDJThCJUU2JThGJTkwJUU0JUJBJUE0JUU1JThFJTg2JUU1JThGJUIyI3ByZXR0eV9mb3JtYXQ=\">https://git-scm.com/book/zh/v2/Git - 基础 - 查看提交历史 #pretty_format</span> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3Yy\">https://git-scm.com/book/zh/v2</span> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cDovL2NoYXJ0LnpoZW5nbGluZ2x1LmNuL3BhZ2VzLzYzNTA4OC8=\">http://chart.zhenglinglu.cn/pages/635088/</span> <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "计算机科学",
                "Git分布式版本控制",
                "Git",
                "编程语言"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%BF%9D%E6%8A%A4/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%BF%9D%E6%8A%A4/",
            "title": "C++数据共享与保护",
            "date_published": "2023-02-22T05:53:36.000Z",
            "content_html": "<h3 id=\"数据的共享与保护\"><a class=\"anchor\" href=\"#数据的共享与保护\">#</a> 数据的共享与保护</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include &lt;iostream></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//C++标准程序库的所有标识符都被声明在std命名空间内</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>int main<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hello std!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t//std::cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello std!\"</span> <span class=\"token operator\">&lt;&lt;</span> std::endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h4>\n<p>不同位置定义的变量和对象，其作用域，可见性，生存期都不同。程序模需要协作共同完成整个系统的功能，模块间需要共享数据，就需要直到应该将变量和对象定义在什么位置</p>\n<h4 id=\"函数原形作用域\"><a class=\"anchor\" href=\"#函数原形作用域\">#</a> 函数原形作用域</h4>\n<p>函数原型作用域中的参数，其作用域始于 &quot;(&quot;, 结束于 &quot;)&quot;</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>double area<span class=\"token punctuation\">(</span>double radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"局部作用域\"><a class=\"anchor\" href=\"#局部作用域\">#</a> 局部作用域</h4>\n<p>函数的形参，在块中声明的标识符，其作用域自声明处起，限于块中<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvicMgsRBhgayuYtLPvnzX9lFgmkOGPQnS55qoejMgRic6ydZy4s9TT0cniaLI0DJiadbIVC1lwOqX3dw/0?wx_fmt=jpeg\" alt=\"局部作用域\" title=\"局部作用域\" /></p>\n<h4 id=\"类作用域\"><a class=\"anchor\" href=\"#类作用域\">#</a> 类作用域</h4>\n<p>其范围包括类体和非内联成员函数的函数体</p>\n<h4 id=\"命名空间作用域\"><a class=\"anchor\" href=\"#命名空间作用域\">#</a> 命名空间作用域</h4>\n<p>命名空间可以解决类名，函数名等的命名冲突</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>namespace 命名空间名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t各种声明<span class=\"token punctuation\">(</span>函数声明，类声明<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>例:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> SomeNs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClass</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 引用类名:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>SomeNs<span class=\"token double-colon punctuation\">::</span>Someclass objl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>using</code>  语句的两种形式</p>\n<ul>\n<li>using 命名空间名：：标识符名；</li>\n<li><code>using namespace</code>  命名空间名；</li>\n</ul>\n<h4 id=\"特殊的命名空间\"><a class=\"anchor\" href=\"#特殊的命名空间\">#</a> 特殊的命名空间</h4>\n<ul>\n<li>全局命名空间：默认全局</li>\n<li>匿名命名空间 (给空间没有名字): 对每个源文件是惟一的 (限于当前文件)</li>\n</ul>\n<h4 id=\"限定作用域的枚举类\"><a class=\"anchor\" href=\"#限定作用域的枚举类\">#</a> 限定作用域的枚举类</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color</span><span class=\"token punctuation\">&#123;</span>red<span class=\"token punctuation\">,</span>yellow<span class=\"token punctuation\">,</span>green<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不限定作用域</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color2</span><span class=\"token punctuation\">&#123;</span>red<span class=\"token punctuation\">,</span>yellow<span class=\"token punctuation\">,</span>green<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 错误，重复定义</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">color2</span><span class=\"token punctuation\">&#123;</span>red<span class=\"token punctuation\">,</span>yellow<span class=\"token punctuation\">,</span>green<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 正确，限定作用域</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>color c<span class=\"token operator\">=</span>red<span class=\"token punctuation\">;</span><span class=\"token comment\">// 全局作用域 color 枚举类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>color2 c2 <span class=\"token operator\">=</span> red<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误，color2 元素不在有效作用域内</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>color2 c2 <span class=\"token operator\">=</span> color2<span class=\"token double-colon punctuation\">::</span>red<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，使用 color2 作用域枚举元素</span></pre></td></tr></table></figure><h4 id=\"可见性\"><a class=\"anchor\" href=\"#可见性\">#</a> 可见性</h4>\n<ul>\n<li>可见性表示从内层作用域向外层作用域 &quot;看&quot; 时能看见什么</li>\n<li>如果标识在某处可见，就可以在该处引用此标识符</li>\n<li>如果某个标识符在外层中声明，且在内层中没有同一标识符的声明，则该标识符在内层可见</li>\n<li>对于两个嵌套的作用域，如果在内层作用域内与外层作用域中同名的标识符，则外层作用域的标识符在内层不可见</li>\n</ul>\n<h4 id=\"对象的生存期\"><a class=\"anchor\" href=\"#对象的生存期\">#</a> 对象的生存期</h4>\n<p>对象从产生到结束这段时间，在对象生存周期，最想将保持它的值 ，直到被更新为止</p>\n<ul>\n<li>静态生存期：生存期与程序的运行期相同，在文件作用域中声明的对象具有这种生存期，在函数内部声明静态生存期对象，要冠以关键字 static</li>\n<li>动态生存期：没有用 <code>static</code>  声明，开始于程序执行到声明点时，结束于命名该标识符的作用域结束处。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//C++ 标准程序库的所有标识符都被声明在 std 命名空间内</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//i 为全局变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">other</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//a,b 为静态全局变量，具有全局寿命，局部可见，只第一次进入函数时被初始化</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//c 为局部变量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\ta <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//4</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\ti <span class=\"token operator\">+=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//33</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tc <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//15</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"---- - other----\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" i：\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" a:\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" b:\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" c\"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">//a 为静态局部变量，具有全局 寿命，局部可见</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//b,c 为局部变量，具有动态生存期</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"——----main----\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">//i=1,a 默认为 0，b=-10,c=0</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" i：\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" a:\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" b:\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" c\"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tc <span class=\"token operator\">+=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//c=8</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">other</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"——----main----\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" i：\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" a:\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" b:\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" c\"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\ti <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">other</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"对象间的共享\"><a class=\"anchor\" href=\"#对象间的共享\">#</a> 对象间的共享</h4>\n<ul>\n<li>同类对象数据共享：静态数据成员</li>\n<li>同类对象功能共享：静态函数成员</li>\n<li>类与外部数据共享：友元</li>\n</ul>\n<h5 id=\"静态数据成员\"><a class=\"anchor\" href=\"#静态数据成员\">#</a> 静态数据成员</h5>\n<pre><code>* 用关键字`static`声明\n* 为该类的所有对象共享，静态数据成员具有静态生存期\n* 一般在类外初始化，用\\(::)来指明所属的类\n* C++11支持静态常量\\(`const`或`constexpr`修饰)类内初始化，此时类外仍可定义该静态成员，但不可再次初始化操作\n</code></pre>\n<p>静态成员举例</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//C++ 标准程序库的所有标识符都被声明在 std 命名空间内</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 外部接口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// 在构造函数中对 cout 累加，所有对象共同共同维护一个 count</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span>Point<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 复制构造函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tx <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\ty <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tcount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">showCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Object count:\"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 静态数据成员声明，用于记录点的个数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token double-colon punctuation\">::</span>Point<span class=\"token double-colon punctuation\">::</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 静态数据成员定义和初始化，使用类名限定</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tPoint <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Point A:\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">showCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出对象个数</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tPoint <span class=\"token function\">b</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Point B:\"</span> <span class=\"token operator\">&lt;&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tb<span class=\"token punctuation\">.</span><span class=\"token function\">showCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出对象个数</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>* 输出：</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>Point A:4,4 Object count:1</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>Point B:4,4 Object count:2</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"类的静态函数成员\"><a class=\"anchor\" href=\"#类的静态函数成员\">#</a> 类的静态函数成员</h5>\n<ul>\n<li>类外代码可以使用类名和作用域操作符来调用静态成员函数</li>\n<li>静态成员函数主要用于处理该类的静态数据成员，可以直接调用静态成员函数</li>\n<li>如果访问非静态成员，要通过对象来访问</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 静态函数成员，主函数可以直接调用查看 count</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Object count:\"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 静态数据成员声明，用于记录点的个数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> Point<span class=\"token double-colon punctuation\">::</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 静态数据成员定义和初始化，使用类名限定</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出对象个数</span></pre></td></tr></table></figure><h4 id=\"友元\"><a class=\"anchor\" href=\"#友元\">#</a> 友元</h4>\n<ul>\n<li>友元是 C++ 提供的一种破坏数据封装和数据隐藏的机制</li>\n<li>通过经一个模块声明为另一个模块的友元，一个模块能够引用到另一个模块中本被隐藏的信息</li>\n<li>可以使用友元函数和友元类</li>\n<li>为了确数据的完整性，及数据封装与隐藏的原则，建议尽量不适用或少使用友元</li>\n</ul>\n<h4 id=\"友元函数\"><a class=\"anchor\" href=\"#友元函数\">#</a> 友元函数</h4>\n<ul>\n<li>友元函数是在类声明中由关键字 friend 修饰说明的非成员函数，在它的函数体中能够通过对象名访问 private 和 protected 成员</li>\n<li>作用：增加灵活性，使程序员可以在封装和快速性方面做出合理选择</li>\n<li>访问对象中的成员必须通过对象名</li>\n</ul>\n<hr />\n<h5 id=\"使用友元函数计算两点间的距离\"><a class=\"anchor\" href=\"#使用友元函数计算两点间的距离\">#</a> 使用友元函数计算两点间的距离</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">float</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>Point<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> Point<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 友元函数，只要在类体中就行</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 私有函数成员</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">float</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>Point<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> Point<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tPoint <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"This distance is:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">/*This distance is:5*/</span></pre></td></tr></table></figure><h4 id=\"友元类\"><a class=\"anchor\" href=\"#友元类\">#</a> 友元类</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvicMgsRBhgayuYtLPvnzX9lIaCOw1eCP1BUAgJkgId0waWCYC4jW1HbjibibxCwibddWB8FXjXX4o9JQ/0?wx_fmt=jpeg\" alt=\"友元类举例\" title=\"友元类举例\" /></p>\n<hr />\n<p><code>类的友元关系是单向的</code> ：如果声明 B 类是 A 类的友元，B 类的成员函数就可以访问 A 类的私有和保护数据，但 A 类的成员函数却不能访问 B 类的私有，保护数据</p>\n<hr />\n<h4 id=\"共享数据的保护\"><a class=\"anchor\" href=\"#共享数据的保护\">#</a> 共享数据的保护</h4>\n<ul>\n<li>对于既需要共享，又需要防止改变的数据应该声明为常类型 (用 const 进行修饰)</li>\n<li>对于不改变对象状态的成员函数应该声明为常函数</li>\n</ul>\n<h4 id=\"常对象\"><a class=\"anchor\" href=\"#常对象\">#</a> 常对象</h4>\n<ul>\n<li>用 const 修饰的对象\n<ul>\n<li>使用 const 关键字说明的函数</li>\n<li>常成员函数不更新对象的数据成员</li>\n<li>常成员函数说明格式:\n<ul>\n<li>类型说明符 函数名 （参数表) const;</li>\n<li>这里，const 是函数类型的一个组成部分，因此在实现部分也要带 const 关键字</li>\n<li>const 关键字可以被用于参与对重载函数的区分</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>通过常对象只能调用它的常成员函数</li>\n<li>常数据成员\n<ul>\n<li>使用 const 说明的数据成员</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">R</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r2<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">r1</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">r2</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 常成员函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> r1<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">R</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> r1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">&lt;&lt;</span> r2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">R</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> r1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">&lt;&lt;</span> r2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tR <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">const</span> R <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tb<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用 void print () const</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"常数据成员\"><a class=\"anchor\" href=\"#常数据成员\">#</a> 常数据成员</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 在任何地方都不能赋值运算</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span><span class=\"token comment\">// 静态常数据成员</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//A::A (int i)&#123;a=1&#125;  // 不能进行赋值，只能写入初始化列表里面</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">A</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 写入初始化列表</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h4 id=\"常引用\"><a class=\"anchor\" href=\"#常引用\">#</a> 常引用</h4>\n<ul>\n<li>如果咋声明引用时用 const 修饰，被声明的引用就是常引用</li>\n<li>常引用所引用的对象不能被更新</li>\n<li>如果用常引用做形参，便不会意外地发生对实参的更改。常引用的声明形式</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> 类型说明符 <span class=\"token operator\">&amp;</span>引用名<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">float</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Point<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> Point<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 友元函数，只要在类体中就行</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 私有函数成员</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">float</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Point<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> Point<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "编程语言",
                "C++",
                "计算机科学"
            ]
        }
    ]
}