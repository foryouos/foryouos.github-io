{
    "version": "https://jsonfeed.org/version/1",
    "title": "瓶子的跋涉",
    "subtitle": "YuHeShui",
    "icon": "https://www.blog.foryouos.cn/images/favicon.ico",
    "description": "破碎的瓶子 & 编程笔记",
    "home_page_url": "https://www.blog.foryouos.cn",
    "items": [
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Linux/Linux%E7%A8%8B%E5%BA%8F%E4%B8%8E%E8%BF%9B%E7%A8%8B/",
            "url": "https://www.blog.foryouos.cn/computer-science/Linux/Linux%E7%A8%8B%E5%BA%8F%E4%B8%8E%E8%BF%9B%E7%A8%8B/",
            "title": "线程进程",
            "date_published": "2023-02-27T01:50:00.000Z",
            "content_html": "<p>程序：（静态的概念）源代码，指令</p>\n<p>进程：运行着的程序，一个程序可以创建多个进程</p>\n<p>线程：线程从属于进程，一个进程可以有多个线程，线程之间共享进程的资源</p>\n<p>任务：具体要做的事情（进程 / 线程）</p>\n<h4 id=\"获取进程id\"><a class=\"anchor\" href=\"#获取进程id\">#</a> 获取进程 ID</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//linux 编程环境</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">man</span> getpid //得到linux帮助文档，Linux的编程手册</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include &lt;sys/types.h></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pid_t getpid<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pid_t getppid<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//pid_t类型用于存放进程的ID号</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> //返回当前正在运行的进程ID号</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  //返回当前进程额父进程的ID号</pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">su</span>    //进入管理权限</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /     //进入根目录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mkdir</span> C_test  //创建C_test文件夹</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> C_test    //进入此文件夹</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">nano</span> pid.c   //创建pid.c的文件</pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbs5CI8nJRCM8iasJSRBKkWayRZWiaOa5a4kz7iaNypnib8uGED9oRCVu2hkbOibXntOB4TnogiadRJHjFtA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//写完代码后输入  ctrl+x   保存并退出</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//首次使用Linux环境编译，错误多多，完全没有任何提升和自动语句</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gcc pid.c  //编译运行gid.c文件,生成执行文件名a.out</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./a.out     //执行pid.c得出执行结果 ctrl+z 停止运行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">man</span> pstree  //获得关于pstree 的帮助文档</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pstree <span class=\"token parameter variable\">-p</span>  //得出进程树，谁创建的谁，查看进程树</pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbs5CI8nJRCM8iasJSRBKkWayic1KZs8iapu8Gfu1TPTr8ybic8ricpaPNyFQ6hHc2UHDOMOpuBn2dWPYiaw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<h4 id=\"创建进程\"><a class=\"anchor\" href=\"#创建进程\">#</a> 创建进程</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">man</span> fork   //查看fork的Linux开发手</pre></td></tr></table></figure><h4 id=\"fork函数创建一个孩子进程\"><a class=\"anchor\" href=\"#fork函数创建一个孩子进程\">#</a> fork 函数创建一个孩子进程</h4>\n<blockquote>\n<p>需要引用的库</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include &lt;sys/types.h></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pid_t fork<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  //创建进程通过复制调用进程，新创建的进程称为子进程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//子进程和父进程运行在不同的区间，相互独立，但父进程和子进程有相同的内容</pre></td></tr></table></figure><p>运行：</p>\n<pre><code>nano 2_fork_1.c    //创键c文件\n</code></pre>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv3kia1l6wwtmbQETqNgJibrYf3ULiaE93LNntbML2oje60fz3ettmh1RMYibmiaWtrajzOf6KY96IvRTg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<pre><code>gcc 2_fork_1.c./a.out\n</code></pre>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv3kia1l6wwtmbQETqNgJibrYTnjpMnhWCdOUxDw6potWF2iaIibia1xVUnlPsAzW9cwnDeWNzFZrhn1bw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<p>输出两个 Hello word!</p>\n<p>fork 函数将 A 设为父进程，创建子进程 B，两者内容相同都会输出 hello word</p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvBOZfBmtPlIkD1LnnlTiawunLqDwoPAkX24vP17ZbCgzI0IicVAbuVtgOeNfhZBzt4cIl9ImWXibztA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvBOZfBmtPlIkD1LnnlTiawuh5kjDGpeagbOKabRDPcAyDR3OdVLMe64qDW0MT3Bv7H4Zv4qFXGLsQ/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<p>父进程返回子进程的 id 号，子进程的 pid 为零</p>\n<p>失败的话，返回 - 1，</p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvBOZfBmtPlIkD1LnnlTiawu6tVkYZ2Bkmfs3JHibhEtpfKiaLib3K4qToLudNywRsuCQ5aZlI1JuYdsw/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvBOZfBmtPlIkD1LnnlTiawuCl6EH49AyKncf1ocJticxl9OlVibBQibKwWMuZX4HTnaquk6BdbLfAibicA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> 2_fork_1.c fork_2.c   //复制2_fork_1.c的代码到fork_2.c</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">nano</span> for_2.c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#include &lt;stdio.h></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#include &lt;sys/types.h></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>int main<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        pid_t pid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        pid <span class=\"token operator\">=</span> fork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"pid=%d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        if<span class=\"token punctuation\">(</span>pid <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#include &lt;stdio.h></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#include &lt;sys/types.h></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>int main<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        pid_t pid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        pid <span class=\"token operator\">=</span> fork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"pid=%d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        if<span class=\"token punctuation\">(</span>pid <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>       <span class=\"token keyword\">else</span> if<span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                            printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Good morning<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                            sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>//输出结果：交替运行</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>//宏观上子进程父进程并发执行，微观上父进程先调度</pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include &lt;stdio.h></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include &lt;sys/types.h></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>int main<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        pid_t pid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        int count <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        pid <span class=\"token operator\">=</span> fork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"pid=%d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        if<span class=\"token punctuation\">(</span>pid <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world count = %d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,count++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span> if<span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Good morning count = %d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,count++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>父进程和子进程内存是相互独立的。</p>\n</blockquote>\n<blockquote>\n<p>父进程和子进程的运行没有相互依赖的关系</p>\n</blockquote>\n<h4 id=\"监控子进程wait函数\"><a class=\"anchor\" href=\"#监控子进程wait函数\">#</a> 监控子进程 wait 函数</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">man</span> <span class=\"token function\">wait</span>  //等待任意子进程终止，会有返回值，返回那个进程终止，返回其ID号</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//引用库</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include &lt;sys/types.h></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pid_t wait<span class=\"token punctuation\">(</span>int *wstatus<span class=\"token punctuation\">)</span>  //地址变量,不希望用就设置为空指针</pre></td></tr></table></figure><blockquote>\n<p>创建三个子进程，五秒钟，10 秒钟，15 秒结束，父进程等所有子进程结束再结束</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nano</span>  5_fork.c</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include &lt;stdio.h></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include &lt;sys/types.h></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#include &lt;sys/wait.h></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#include &lt;stdlib.h></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//run model:./a.out <span class=\"token number\">10</span> <span class=\"token number\">5</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">(</span>there child process ,after 15s they are over</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>int main<span class=\"token punctuation\">(</span>int argc,char *argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        pid_t child_pid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        int numDead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        int i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        for<span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> argc<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                switch<span class=\"token punctuation\">(</span>fork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token keyword\">case</span> -1: </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                perror<span class=\"token punctuation\">(</span><span class=\"token string\">\"fork()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                       <span class=\"token keyword\">case</span> <span class=\"token number\">0</span>:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                                printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"child %d started $ = %d, sleeping %s seconds<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, i , getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>,argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                                sleep<span class=\"token punctuation\">(</span>atoi<span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                                exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        default:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                                <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        numDead <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>//当前有几个子进程结束了</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                child_pid <span class=\"token operator\">=</span> wait<span class=\"token punctuation\">(</span>NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  //返回子进程结束的ID号</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                if<span class=\"token punctuation\">(</span>child_pid<span class=\"token operator\">==</span>-1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"No morre children,Byebye Byebye<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                numDead++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"wait() returned child  PID : %d(numDead = %d)<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, child_pid,numDead <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>//指向</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>gcc 5_fork.c</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>./a.out <span class=\"token number\">10</span> <span class=\"token number\">5</span> <span class=\"token number\">15</span>   //运行参数</pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvBOZfBmtPlIkD1LnnlTiawudbwh0nficOkWuDDpajFjbq3Yia0r46ziaxNR6z8ica3DyeS9PARcbBiaEMQ/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<h4 id=\"线程函数pthread_create\"><a class=\"anchor\" href=\"#线程函数pthread_create\">#</a> 线程函数 pthread_create</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//引入库函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include &lt;pthread.h></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//创建新的线程</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>int pthread_create<span class=\"token punctuation\">(</span>pthread_t *thread, const pthread_attr_t,void *<span class=\"token punctuation\">(</span>*start_routne<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>void*<span class=\"token punctuation\">)</span>,void *arq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//第一个参数线程Id号，第二个参数线程结构体指针类型空就是NULL</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>//第三个函数指针，第四个参数，也可为NULL</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//成功返回值为0，错误返回错误数字</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//编译的时候末位要加  <span class=\"token parameter variable\">-pthread</span></pre></td></tr></table></figure><h4 id=\"等待线程结束\"><a class=\"anchor\" href=\"#等待线程结束\">#</a> 等待线程结束</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>int pthread_join<span class=\"token punctuation\">(</span>pthread_t thread,void **retval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//编译并且链接给 pthread</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//调用成功返回零</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//第一个为线程参数。等待的线程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//第二个为</pre></td></tr></table></figure><p>编写：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include &lt;pthread.h></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include &lt;stdlib.h></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>void *thread_function<span class=\"token punctuation\">(</span>void *arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>int main<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        pthread_t pthread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        int ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        int <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>//传递子针，传递给线程arg</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        //线程用到所有资源都依赖于进程，</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        ret <span class=\"token operator\">=</span> pthread_create<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pthread,NULL,*thread_function,<span class=\"token operator\">&amp;</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        if<span class=\"token punctuation\">(</span>ret <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                perror<span class=\"token punctuation\">(</span><span class=\"token string\">\"pthread_create\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        //while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//让进程永远不结束，否则线程资源也会被回收</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        //使用函数等线程来结束 pthread_join，才会接着运行</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        pthread_join<span class=\"token punctuation\">(</span>pthread,NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"The thread is over ,process is over too.<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token builtin class-name\">return</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>void *thread_function<span class=\"token punctuation\">(</span>void *arg<span class=\"token punctuation\">)</span>  //arg为count指针</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span>       //线程每隔几秒打印</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        int i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread begins running<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        for<span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> *<span class=\"token punctuation\">(</span>int*<span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>//编译:</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>gcc 6_thread.c <span class=\"token parameter variable\">-pthread</span>  //编译</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>./a.out  //运行</pre></td></tr></table></figure><h4 id=\"创建两个线程多个线程\"><a class=\"anchor\" href=\"#创建两个线程多个线程\">#</a> 创建两个线程 / 多个线程</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//创建多个线程，多次调用pthread即可</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include &lt;stdio.h></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include &lt;pthread.h></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#include &lt;unistd.h></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#include &lt;stdlib.h></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>void *thread1_function<span class=\"token punctuation\">(</span>void *arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>void *thread2_function<span class=\"token punctuation\">(</span>void *arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>int count <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>int main<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        pthread_t pthread2,pthread1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        int ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        //int <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>//传递子针，传递给线程arg</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        //线程用到所有资源都依赖于进程，</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ret <span class=\"token operator\">=</span> pthread_create<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pthread1,NULL,*thread1_function,NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        if<span class=\"token punctuation\">(</span>ret <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                perror<span class=\"token punctuation\">(</span><span class=\"token string\">\"pthread1_create\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        //创建第二个线程</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        ret <span class=\"token operator\">=</span> pthread_create<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pthread2,NULL,thread2_function,NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        if<span class=\"token punctuation\">(</span>ret <span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                perror<span class=\"token punctuation\">(</span><span class=\"token string\">\"pthread_create\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        //while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//让进程永远不结束，否则线程资源也会被回收</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        //使用函数等线程来结束 pthread_join，才会接着运行</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        pthread_join<span class=\"token punctuation\">(</span>pthread1,NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        pthread_join<span class=\"token punctuation\">(</span>pthread2,NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"The thread is over ,process is over too.<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token builtin class-name\">return</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>void *thread1_function<span class=\"token punctuation\">(</span>void *arg<span class=\"token punctuation\">)</span>  //arg为count指针</pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span>       //线程每隔几秒打印</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        int i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread begins running<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        //for<span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> *<span class=\"token punctuation\">(</span>int*<span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world count = %d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,count++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>void *thread2_function<span class=\"token punctuation\">(</span>void *arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread2 begins runnings<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        while<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Good morning count = %d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,count++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbv3lprxuaVmgdia0Lo9JSzQltLHM6ojyZV6FxkQOms5shg8r9qeF1xM0Py5dZNoNwBR0WWgibBp9t5Q/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<blockquote>\n<p>总：父子进程分别打印 count，父进程和子进程会分别独立打印，独立的全局 count 值</p>\n</blockquote>\n<p>进程和线程不同，会使用同一个 count 值是累加的</p>\n<p>补：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数//里面参数为0表示正常退出，为1/-1表示程序异常退出</pre></td></tr></table></figure><blockquote>\n<p>参考：“嵌入式开发” Linux 简明教程 01～06</p>\n</blockquote>\n",
            "tags": [
                "计算机科学",
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Linux/linux%E5%85%A5%E9%97%A8(1)/",
            "url": "https://www.blog.foryouos.cn/computer-science/Linux/linux%E5%85%A5%E9%97%A8(1)/",
            "title": "linux入门1",
            "date_published": "2023-02-27T01:39:43.000Z",
            "content_html": "<h3 id=\"linux基础命令1关机文件类操作\"><a class=\"anchor\" href=\"#linux基础命令1关机文件类操作\">#</a> Linux 基础命令 1 关机文件类操作</h3>\n<blockquote>\n<p>Linux 主要是通过命令行来进行运行管理的操作系统</p>\n</blockquote>\n<h4 id=\"比图像化windows的优点\"><a class=\"anchor\" href=\"#比图像化windows的优点\">#</a> 比图像化 Windows 的优点：</h4>\n<ul>\n<li>快速</li>\n<li>批量化</li>\n<li>自动化</li>\n<li>智能化的处理业务</li>\n</ul>\n<p>进入 root 权限 (首次）</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">passwd</span>   // 首次需要设置密码//输入密码su   // 就如root用户权限</pre></td></tr></table></figure><h4 id=\"常见关机重启和注销指令\"><a class=\"anchor\" href=\"#常见关机重启和注销指令\">#</a> 常见关机，重启和注销指令:</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbswkxBUQxd5lWI8gV177foWAR72moHpkVYfY9v5BFrUeCOlAQNb1BJoXFVtjvksEt0tt576xSy9YA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<h4 id=\"linux各文件夹含义及用途\"><a class=\"anchor\" href=\"#linux各文件夹含义及用途\">#</a> Linux 各文件夹含义及用途：</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbswkxBUQxd5lWI8gV177foWUnglAOpHTduT98iaInccOFOrQbXCbjK5ibZNYKIricc8TmrG0icWWMuwjA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsYHvxfYOdPtq8846ywUeha8qLyoe9m5egrfmiaQzaoTQ6oShC5AjGbEZsyjFR1pTeia2q3KKZVBWZg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<ol>\n<li>/boot 该目录默认存放 Linux 的启动文件和内核，包含可引导的 Linux 内核和引导装载（boot loader）配置文件（GRUB）</li>\n<li>/initrd : boot loader initialized RAM disk 就是 boot loader 初始化的内存盘。在 Linux 内核启动前，boot loader 会将存储介质（一般是硬盘）中的 initrd 文件加载到内存，内核启动时会在访问真正的根文件系统前先访问该内存中的 initrd 文件系统</li>\n<li>/bin 存放 linux 的常用命令，例如 ls,sort,date 和 chmod，</li>\n<li>/sbin 存放 系统管理员使用的管理程序，包含管理命令和守护进程</li>\n<li>/var 存放经常被 修改的文件，包括各种日志，数据数据文件。这里放置作为 FTP 服务器（/var/ftp），web 服务器（/var/www）共享文件，它还包含所有系统日志文件 (/var/log)</li>\n<li>/etc 存放系统管理 时要 用到的各种配置文件和子目录，例如：网络配置文件，文件系统，x 系统配置文件 ，设备配置信息，设置用户信息</li>\n<li>/dev 包含了 Linux 系统中使用的所有外部设备，它实际上是访问这些外部设备的端口，访问这些外部设备与访问一个文件或一个目录没有区别</li>\n<li>/mnt 临时将别的文件系统挂在该目录下</li>\n<li>/root 超级用户的主目录</li>\n<li>/home 如果创建一个名为 “XX” 的用户，那么在 /home 目录下就有一个对应的 “/home/xx” 路径，用来存放该目录的主目录</li>\n<li>/usr 用户的应用程序和文件几乎都存放在该目录下</li>\n<li>/lib 存放系统动态链接共享库，几乎所有应用程序都会 用到该目录下的共享库</li>\n<li>/opt 第三方软件在安装时默认安装目录（警惕删除）</li>\n<li>/tmp 用来存放不同程序执行时产生的临时文件，该目录会被系统自动清理干净</li>\n<li>/proc 可以在该目录下获取系统信息 ，这些信息是在内存中由系统自己产生的，该目录的内容不在硬件上而在内存里</li>\n<li>/misc 可以让多用户堆积和临时转移自己的文件</li>\n<li>/lost+found 该目录在大多数情况下都是空的，当突然停电，或者非正常关机后，有些文件就临时存放在这里</li>\n<li>文件颜色的含义：蓝色为文件夹，绿色为可执行文件，浅蓝色是链接文件，红框文件是加了 SUID 位，任意限权；红色为压缩文件，褐色为设备文件。</li>\n</ol>\n<h4 id=\"文件和目录操作命令\"><a class=\"anchor\" href=\"#文件和目录操作命令\">#</a> 文件和目录操作命令</h4>\n<ul>\n<li>pwd（print working directory）:: 显示当前工作目录的绝对路径，查看当前所在路径</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">pwd</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">pwd</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// 必须有空格，通常情况下不需要带任何参数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">pwd</span> <span class=\"token parameter variable\">-L</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//logical的首字符缩写，显示逻辑路径（忽略软链接文件）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">pwd</span> <span class=\"token parameter variable\">-P</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>// physical首字符缩写，显示物理路径，</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//如果是软链接文件，则会显示软链接文件对应的源文件</pre></td></tr></table></figure><ul>\n<li>cd（change directory） 切换目录</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//语法格式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>dir<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>目录<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//默认情况下，单独执行cd命令，可切换到当前登陆用户的家目录</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//（由系统环境变量<span class=\"token environment constant\">HOME</span>定义）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">help</span> <span class=\"token builtin class-name\">cd</span>  //查看系统帮助</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//用法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">cd</span> -  //切换到上一次所在的目录路径</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ~  //切换到当前用户的家目录所在的路径</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>  //切换到当前目录的上一级目录所在的路径，一个点为当前目录</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token parameter variable\">-P</span>  //若切换的目标目录hi软链接，则直接指向真正的物理目标目录</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token parameter variable\">-L</span>  //直接切换啊软链接所在的目录</pre></td></tr></table></figure><h4 id=\"tab键具有自动补齐功能\"><a class=\"anchor\" href=\"#tab键具有自动补齐功能\">#</a> TAb 键具有自动补齐功能</h4>\n<p>注意:</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>绝对路径从 “/” 根开始的路径，如: /data/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>相对路径不从斜线开始   如: data/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//进入当前目录的父目录的父目录</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/</pre></td></tr></table></figure><h4 id=\"tree\"><a class=\"anchor\" href=\"#tree\">#</a> tree</h4>\n<ul>\n<li>tree: 以树形结构显示目录下的所有内容，包括所有文件，子目录及子目录里的目录和文件</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tree <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>directory<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tree <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>目录<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//tree命令后若不接选项和目录就会默认显示当前所在路径目录的目录结构</pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>显示所有文件，包含隐藏文件（以 “.” 点开头的文件）</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>只显示目录</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>显示每个文件的全路径</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>不显示树枝，常与 - f 参数配合使用</td>\n</tr>\n<tr>\n<td>-L level</td>\n<td>遍历目录的最大层数，level 为大于 0 的正整数</td>\n</tr>\n<tr>\n<td>-F</td>\n<td>在执行文件，目录，Socket, 符号连接，管道名称等不同类型文件的结尾，各自加上 &quot;*&quot;,&quot;/&quot;,&quot;=&quot;,&quot;@&quot;,&quot;|&quot; 号，类似 ls 命令的 - F 选项</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tree    //显示当前目录的结构</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tree <span class=\"token parameter variable\">-a</span>   //以树形结构显示目录下的所有内容</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tree <span class=\"token parameter variable\">-L</span> <span class=\"token number\">1</span>   //-L参数后接数字，表示查看目录的层数，不带-L选项默认显示所有层数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>tree <span class=\"token parameter variable\">-d</span> /etc/    // -d参数表示只显示目录</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>tree <span class=\"token parameter variable\">-L</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-f</span> /boot/   //-f显示内容的完整路</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>tree <span class=\"token parameter variable\">-L</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-F</span> /boot/    //使用-F参数会在幕后后面添加“/”，方便区分目录</pre></td></tr></table></figure><h4 id=\"mkdir\"><a class=\"anchor\" href=\"#mkdir\">#</a> mkdir</h4>\n<blockquote>\n<p>mkdir （make directories）创建目录，默认情况下，如果要创建的目录已存在，则会提示此文件已存在，而不会继续创建目录</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>directory<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>目录<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// <span class=\"token function\">mkdir</span> 命令可以同时创建多个目录，格式为mkdir，dir1，dir2</pre></td></tr></table></figure><h4 id=\"mkdir使用及说明\"><a class=\"anchor\" href=\"#mkdir使用及说明\">#</a> mkdir 使用及说明</h4>\n<table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-p</td>\n<td>1，递归创建目录，递归：父目录及其子目录及其子目录及其子目录的子目录 2，即使要创建的目录事先已存在也不会报错提示目录已存在</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>设置新创建目录的默认目录对应的权限</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示创建目录的过程</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> data  //在当前目录下创建data目录//再此执行创建命令会提示目录已经存在</pre></td></tr></table></figure><blockquote>\n<p>注意：window 下的目录路径样式为 D:\\data\\test, 而 Linux 样式的路径样式为 /data/test, 它们的目录顶点和分隔符均不同</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-m</span> <span class=\"token number\">333</span> dir2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>// 创建目录时指定333的数字权限</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-ld</span> dir2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//可以看到权限已经发生变化</pre></td></tr></table></figure><h4 id=\"touch命令\"><a class=\"anchor\" href=\"#touch命令\">#</a> touch 命令:</h4>\n<ul>\n<li>创建新的空文件</li>\n<li>改变已有文件的时间戳属性</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">touch</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>文件<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>注意；touch 是创建新文件，medir 是创建空目录，touch 虽不能创建目录，但是可以修改目录的时间戳</p>\n<table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>只更改指定文件的最后访问时间</td>\n</tr>\n<tr>\n<td>-d STRING</td>\n<td>使用字符串 STRING 代表的时间作为模板设置指定文件的时间属性</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>只更改指定文件的最后修改时间</td>\n</tr>\n<tr>\n<td>-r file</td>\n<td>将特定文件的时间属性设置为与模板文件 file 时间属性相同</td>\n</tr>\n<tr>\n<td>-t STAMP</td>\n<td>使用 [[CC] YY] MMDDhhmm [.ss] 格式的时间设置文件的时间属性，格式的含义从左到右依次为：世纪，年，月，日，时，分，秒</td>\n</tr>\n</tbody>\n</table>\n<p>使用:</p>\n<pre><code>mkdir /test    //在根下新建test目录\ncd /test/       //切换到此目录\ntouch oldboy.txt   //创建空文件oldboy.txt\nls                //查看文件表的文件\ntouch a.txt b.txt   //同时创建多个文件\ntouch stu&#123;01..05&#125;    //利用&#123;&#125;输出的字符序列批量创建文件\nstat oldboy.txt      //查看文件的时间戳属性\ntouch -a oldboy.txt   // 更改最后访时间\ntouch -m oldboy.txt    //更改最后修改时间\nls -lh oldboy.txt      //修改文件修改时间\ntouch -d 20202001 oldboy.txt   // 指定创建文件后的修改时间\ntouch -r a.txt oldboy.txt     //让oldboy.txt的时间属性和a.txt一致\n</code></pre>\n<h4 id=\"gnulinux\"><a class=\"anchor\" href=\"#gnulinux\">#</a> GNU/Linux</h4>\n<blockquote>\n<p>文件有三种类型的时间戳</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Access   最后访问文件的时间</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Modify   最后修改文件的时间</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Change   最后改变文件状态的时间</pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-lt</span>  // 最后修改时间</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-lc</span>  // 状态改变时间</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-lu</span>  //最后访问时间</pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsYHvxfYOdPtq8846ywUehaR2Gl4JASCZRNw4vGB5D7LyJg9OI35YpvHwu0R3RePn6utl2sBz3UZA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsYHvxfYOdPtq8846ywUehaCRArCXCTrhxdib1PtzUhR0Pfe2tI4Ipvfu9ibbKVjJbtUoDKI77RoajA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<h4 id=\"ls\"><a class=\"anchor\" href=\"#ls\">#</a> ls</h4>\n<blockquote>\n<p>ls ：列出目录的内容及其内容属性信息（list directory contents）</p>\n</blockquote>\n<pre><code>ls [option] [file]\nls [选项] [&lt;文件或目录&gt;]\n// 命令后面的选项和目录文件可以省略，表示 查看当前路径的文件信息\n</code></pre>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsYHvxfYOdPtq8846ywUehaOZzAiaUUhtadGHJx86WRkK78tWKBQOunIV82DpPAcCgTJiaQic1U0HSNg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> .file4.txt   //再创建一个隐藏文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//在linux系统中以“.”点开头的文件就是隐藏文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> --time-style<span class=\"token operator\">=</span>long-iso //以long-iso方式显示时间，当遇到目录时间显示不一致 s时</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ls</span> --full-time //用于显示完整的时间，等同于</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> --time-style<span class=\"token operator\">=</span>full-iso</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">date</span>  //显示当前系统时间</pre></td></tr></table></figure><h4 id=\"cp\"><a class=\"anchor\" href=\"#cp\">#</a> cp</h4>\n<blockquote>\n<p>复制文件或目录</p>\n</blockquote>\n<pre><code>cp [option] [source] [dest]\ncp [选项] [源文件] [目标文件]\n</code></pre>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtPJDhG2drZFicBoHEoSN6I5fm7sSn2FAib4E68UcCNl4nLMoVuxYZZvyGkULZI5PujaJeyO2KbQXVw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\" alt=\"图片\" /></p>\n<pre><code>cp file1.txt file2.txt    //复制file1.txt为file4.txt\ncp -i file1.txt file2.txt  //若出现重复，会提示是否覆盖\n//备份操作\ncp /etc/ssh/sshd_config&#123;,.ori&#125;\n//对大括号的展开操作  /etc/ssh/sshd_config&#123;,.ori&#125;展开成/etc/ssh/sshd_config /etc/ssh/sshd_config.ori 再传给cp命令\n</code></pre>\n<h4 id=\"mv-move移动或重命名文件\"><a class=\"anchor\" href=\"#mv-move移动或重命名文件\">#</a> mv: （move）移动或重命名文件</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mv</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>source<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>dest<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mv</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>源文件<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>目标文件<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-f</td>\n<td>若目标文件已经存在，则不会询问而是直接覆盖</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>若目标文件已经存在，则会询问是否覆盖</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>不覆盖已经存在的文件</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>指定 mv 的目标文件，适用于移动多个源文件到一个目录的情况，此时目标文件在前，源文件在后，和 cp 命令的 - t 选项功能一致</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>在源文件比目标文件新，或目标文件不存在时才进行移动</td>\n</tr>\n</tbody>\n</table>\n<pre><code>mv file6.txt file7.txt //若file7.txt不存在则将file6.txt重命名为file7.txt\n//若file7.txt存在，则将file5.txt覆盖为file7.txt\nmv file.txt dir1/  \n//dir1位目录且存在，则移动file.txt到dir1下，若dir1不存在，则重命名为dir1的普通文件\n</code></pre>\n<h4 id=\"rm\"><a class=\"anchor\" href=\"#rm\">#</a> rm</h4>\n<blockquote>\n<p>rm：删除一个多多个文件或目录（remove files or directories）</p>\n</blockquote>\n<pre><code>rm [option] [file]rm [选项] [&lt;文件或目录&gt;]\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-f</td>\n<td>强制删除。忽略不存在的文件，不提示确认</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>在删除前需要确认</td>\n</tr>\n<tr>\n<td>-I</td>\n<td>在删除超过三个文件或者递归删除前要求确认（一个大文件下小文件一起删除）</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归删除目录及其内容</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> ./*     //加上“./”</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//禁止使用rm <span class=\"token parameter variable\">-fr</span> /oldboy/* ,这个命令如果多了空格可能会带来在灾难</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-fr</span> /oldboy/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>// <span class=\"token string\">\"*\"</span>的前面不小心多了空格，会删除当前目录的所有内容，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-fr</span> /oldboy/ *    //把当前目录（根）下面的目录全部删除</pre></td></tr></table></figure><h4 id=\"rmdir\"><a class=\"anchor\" href=\"#rmdir\">#</a> rmdir</h4>\n<blockquote>\n<p>rmdir ：用于删除空目录 (remove empty directories)，当目录不为空时，命令不起作用。</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rmdir</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>directory<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rmdir</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>目录<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-p</td>\n<td>递归删除目录，当子目录删除后其父目录为空时，也一并删除。如果整个路径被删除，或者由于某些原因保留了部分路径，则系统在标准输出上显示对应的信息</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示命令的执行过程</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"in硬链接与软连接\"><a class=\"anchor\" href=\"#in硬链接与软连接\">#</a> In 硬链接与软连接</h4>\n<blockquote>\n<p>功能：创建文件间的链接（make links between files）</p>\n</blockquote>\n<pre><code>ln [option] [source] [target]\nln [选项] [源文件或目录] [目标文件或目录]\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>无参数</td>\n<td>创建硬链接</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>创建软连接 (符号链接)</td>\n</tr>\n</tbody>\n</table>\n<p>硬链接：通过索引结点（Inode）来进行链接。在 Linux 文件系统中，所有文件都有一个独有的 inode 编号。多个文件指向同一索引结点（inode），硬链接相当于文件的另外一个入口</p>\n<pre><code>ln /etc/hosts hard_link\n//给/etc/hosts 文件做硬链接\n//通过ls查看硬链接数值\nls -i /etc/hosts hard_link\nrm -f /etc/hosts  //删除源文件\nln hard_link /etc/host   //再次链接回来\n</code></pre>\n<h5 id=\"硬链接\"><a class=\"anchor\" href=\"#硬链接\">#</a> 硬链接：</h5>\n<ul>\n<li>具有相同 inode 节点号的多个文件互为硬链接文件</li>\n<li>删除硬链接文件或者删除源文件任意之一，文件实体并未被删除</li>\n<li>只有删除了源文件以及源文件所对应的硬链接文件，文件实体才会被删除</li>\n<li>硬链接文件就是文件的另外一个入口</li>\n<li>可以通过设置硬链接文件，来防止重要文件被误删</li>\n<li>硬链接文件可以用 rm 命令删除</li>\n<li>对于静态文件（没有进程正在调用的文件）来讲，当对应硬链接数为 0（i_link）时，文件就会被删除，i_link 的查看方法是 ls-lih,</li>\n<li>很多硬件设备的快照功能，就是利用了硬链接</li>\n</ul>\n<h6 id=\"软链接\"><a class=\"anchor\" href=\"#软链接\">#</a> 软链接</h6>\n<blockquote>\n<p>类似 windows 里的快捷方式，软链接是真正的链接文件</p>\n</blockquote>\n<ul>\n<li>软链接文件 inode 值和源文件，硬链接文件都不同</li>\n<li>软链接文件的文件类型是 l （字母 l）</li>\n<li>软链接类似一个文本文件，里面存放的是源文件的路径，指向源文件实体</li>\n<li>即使删除了源文件，软链接文件也依然存在，但是无法访问指向的源文件路径内容</li>\n<li>失效的时候一般白字红底闪烁提示</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>对于目录，不可以创建硬链接，但是可以创建软连接</li>\n<li>目录的硬链接文件不能跨越文件系统（硬链接需要相同的 inode 值）</li>\n</ul>\n<h4 id=\"readlink\"><a class=\"anchor\" href=\"#readlink\">#</a> readlink</h4>\n<blockquote>\n<p>readlink : 查看符号链接文件的真实内容</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>readlink <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">]</span>readlink <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>文件<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-f</td>\n<td>一直跟随符号链接，直到非符号链接的文件位置，但要保证最后必须存在一个非符号链接的文件</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "计算机科学",
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Git/GitHub%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/",
            "url": "https://www.blog.foryouos.cn/computer-science/Git/GitHub%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/",
            "title": "github个性化设置",
            "date_published": "2023-02-23T14:04:51.000Z",
            "content_html": "<h4 id=\"github首页自定义美化\"><a class=\"anchor\" href=\"#github首页自定义美化\">#</a> Github 首页自定义美化</h4>\n<ul>\n<li>主页名称设置的与自己 id 名字想通<br />\n<img data-src=\"http://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtLErS9QZU88YJJ9Kg7ZWTpEN9JwicC7EdA3XiaUtKY9CqTEvia0rD48DqTtCnsNBiaX090mwrbsM6NKg/0?wx_fmt=png\" alt=\"主页名称设置成自己的名字\" /></li>\n<li>通过 README.md 就会自动呈现到 GitHub 主页，使用 Markdown 语法<br />\n<img data-src=\"http://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtLErS9QZU88YJJ9Kg7ZWTpTeeOuAphVibGp2Vh3TaPE0pqIBXHs67nzKEtrGJCKhVrSKPZxCOF7Qw/0?wx_fmt=png\" alt=\"修改内容\" /></li>\n<li>如何使图片位于右边</li>\n</ul>\n<pre><code class=\"language-HTML\">&lt;img src=&quot;https://user-assets.sxlcdn.com/images/9527/Fnrnj5JtFfuw8x4iP_-7NSZDpUaU.gif&quot; referrerpolicy=&quot;no-referrer&quot; align=&quot;right&quot; &gt;\n</code></pre>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaGllbGRzLmlvLw==\">GitHub 徽章</span><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly92aXNpdG9yLWJhZGdlLmdsaXRjaC5tZS8=\">GitHub 访客勋章</span><sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NvbmdxdWFucGVuZy9zdGF0cy1jYXJkcw==\">社交统计</span><sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup></li>\n</ul>\n<h4 id=\"github自定义域名\"><a class=\"anchor\" href=\"#github自定义域名\">#</a> Github 自定义域名</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1zZXR0aW5naWQtMWs2bnRmNjRkbzZya3VqOTI4a2phNTBwbGE0NTQyYmVxM2NxYnN5azdib2EuZ2l0aHViLmlv\">进入主项目的 setting 设置个人的项目名 id.github.io</span>, 在左边的 page 下设置个人域名，在并强制 HTTPS<br />\n<img data-src=\"http://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtLErS9QZU88YJJ9Kg7ZWTpdKcqdVRPTH5WNKmFsRCZSLHc6C5x7aN4zXqb20XNMiaric0jj6MVjeAA/0?wx_fmt=png\" alt=\"GitHub项目名\" /><br />\n<img data-src=\"http://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtLErS9QZU88YJJ9Kg7ZWTpTdSPLYqK5yJMkFlu5kCicRnsntxEuqWqnIRzydmhkPN2ccMJccxOYHw/0?wx_fmt=png\" alt=\"域名设置强制https\" /></li>\n<li>在域名服务端设置（以百度云为例)<br />\n 除了第五个记录值改为自己的其它完全相同<br />\n<img data-src=\"http://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtLErS9QZU88YJJ9Kg7ZWTpPk8WqSRJ1Rs1153snU0DyWQh85nfJMqXQvPKGc0FgmjEjSH0RSuLCQ/0?wx_fmt=png\" alt=\"域名服务端设置\" /></li>\n</ul>\n<h4 id=\"https问题\"><a class=\"anchor\" href=\"#https问题\">#</a> https 问题:</h4>\n<ul>\n<li>若设置了 Https，Chrome 浏览器网址左边的没有小黑锁，显示不安全，点 F12 进入开发者选项，看那个链接没有 https，修改即可实现小黑锁，安全。</li>\n</ul>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaGllbGRzLmlvLw==\">https://shields.io/</span> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92aXNpdG9yLWJhZGdlLmdsaXRjaC5tZS8=\">https://visitor-badge.glitch.me/</span> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NvbmdxdWFucGVuZy9zdGF0cy1jYXJkcw==\">https://github.com/songquanpeng/stats-cards</span> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "计算机科学",
                "Git分布式版本控制",
                "Git",
                "编程语言"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "C++数组指针字符串",
            "date_published": "2023-02-23T09:08:09.000Z",
            "content_html": "<h3 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h3>\n<p>数组是具有一定顺序关系的若干相同类型变量的集合体，组成数组的变量。</p>\n<h4 id=\"范围for循环\"><a class=\"anchor\" href=\"#范围for循环\">#</a> 范围 for 循环</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tb<span class=\"token punctuation\">[</span><span class=\"token number\">10</span> <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 遍历容器十分方便，遍历的另一种形式，从 a 中依次取出元素，进行操作</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//auto 自动类型，根据 a 的类型确定 e 的类型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 范围 for 循环，输出 a 中每个元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 下标迭代循环，输出 b 中每个元素</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h4 id=\"数组初始化\"><a class=\"anchor\" href=\"#数组初始化\">#</a> 数组初始化</h4>\n<ul>\n<li>如果不作任何初始化，局部作用域的非静态数组中会存在垃圾数据，static 数组中的数组默认初始化为 0</li>\n<li>如果只对部分元素初始化，剩下的未显式初始化的元素，将自动被初始化为零</li>\n</ul>\n<h4 id=\"对象数组\"><a class=\"anchor\" href=\"#对象数组\">#</a> 对象数组</h4>\n<ul>\n<li>定义对象数组\n<ul>\n<li>类名 数组名 [元素个数]</li>\n</ul>\n</li>\n<li>访问对象数组元素\n<ul>\n<li>通过下标访问</li>\n<li>数组名 [下标]. 成员名</li>\n</ul>\n</li>\n<li>对象数组初始化\n<ul>\n<li>数组中每一个元素对象被创建时，系统都会调用类构造函数初始化该对象。</li>\n<li>通过初始化列表赋值</li>\n<li Point(1,2),Point(3,4)=\"\">Point a[2]=</li>\n<li>如果没有为数组元素指定显式初始值，数组元素便使用默认值初始化 (调用默认构造函数)</li>\n</ul>\n</li>\n<li>对象数组的析构\n<ul>\n<li>当数组中每一个对象被删除时，系统都要调用一次析构函数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Pont.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Default Constructor called.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructor called.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor called\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> newY<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Moving the point to(\"</span> <span class=\"token operator\">&lt;&lt;</span> newX <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> newY <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tx <span class=\"token operator\">=</span> newX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\ty <span class=\"token operator\">=</span> newY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Entering main...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tPoint a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Exiting main...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>* Entering main...</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>* Default Constructor called.</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>* Default Constructor called.</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>* Moving the point to(10,20)</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>* Moving the point to(11,21)</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>* Exiting main...</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>* Destructor called</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>* Destructor called</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"指针\"><a class=\"anchor\" href=\"#指针\">#</a> 指针</h3>\n<ul>\n<li>指针：内存地址，用于间接访问内存单元</li>\n<li>指针变量：用于存放地址的变量<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvicMgsRBhgayuYtLPvnzX9llE8Xe4ibd1m43EhagTrgffUobhpTjW9gDnRYSicHVD956NrMh7dIXfsw/0?wx_fmt=jpeg\" alt=\"指针变量\" title=\"指针变量\" /></li>\n<li><code>零</code> 可以赋给指针，表示空指针</li>\n<li>向指针变量赋值的值必须是地址常量，不能是普通整数</li>\n<li>允许定义或声明指向 void 类型的指针，该指针可以被赋予任何类型对象的地址</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>general<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>以往用 0 或者 NULL 去表达空指针的问题\n<ul>\n<li>C/C++ 的 NULL 宏是个有很多潜在 BUG 的宏。因为有的库把其定义为整数 0，有的定义成 (void*) 0.</li>\n<li>C++11 使用 nullptr 关键字，是表达更准确，类型安全的空指针</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"指向常量的指针\"><a class=\"anchor\" href=\"#指向常量的指针\">#</a> 指向常量的指针</h4>\n<p>不能通过指向常量的指针改变所指对象的值，但指针本身可以改变，可以指向另外的对象</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p1 是指向常量的指针</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，p1 本身的值可以改变</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 编译时出错，不能通过 p1 改变所指的对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>b<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"指针类型的常量\"><a class=\"anchor\" href=\"#指针类型的常量\">#</a> 指针类型的常量</h4>\n<p>若声明指针常量，则指针本身的值不能被改变，指针本身是常量</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 可以</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 错误，p2 是指针常量，值不能被改变</span></pre></td></tr></table></figure><h4 id=\"指针数组\"><a class=\"anchor\" href=\"#指针数组\">#</a> 指针数组</h4>\n<ul>\n<li>数组的元素是指针型</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Point <span class=\"token operator\">*</span>pa<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 由 pa [0],pa [1] 两个指针组成</span></pre></td></tr></table></figure><p>利用数组与二维数组对比比</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> line1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> line2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> line3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 定义整型指针数组并初始化</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> Pline<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> line1<span class=\"token punctuation\">,</span>line2<span class=\"token punctuation\">,</span>line3 <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Matrix test:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 输出矩阵</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> Pline<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Matrix test:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>1 0 0</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>0 1 0</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>0 0 1</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"以指针作为函数参数\"><a class=\"anchor\" href=\"#以指针作为函数参数\">#</a> 以指针作为函数参数</h4>\n<ul>\n<li>需要数据双向传递时 (引用也可以达到响应效果)\n<blockquote>\n<p>用指针作为函数的参数，可以使被调函数通过形参指针存取主调函数中实参指针指向的数组，实现数据的双向 传递</p>\n</blockquote>\n</li>\n<li>小传递一组数据，只传首地址运行效率比较高\n<blockquote>\n<p>实参是数组名时形参可以是指针</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project: 从浮点数中取整数和浮点数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>注：浮点数在机器内部近似存储</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">splitFloat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> intpart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> fracPart<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token operator\">*</span>intpart <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取 x 的整数部分</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token operator\">*</span>fracPart <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> <span class=\"token operator\">*</span>intpart<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取 x 的小数部分</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter 3 float point numbers:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tcin <span class=\"token operator\">>></span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token function\">splitFloat</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"integer Part=\"</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Fraction Part = \"</span> <span class=\"token operator\">&lt;&lt;</span> f <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Enter 3 float point numbers:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>3.14</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>integer Part=3 Fraction Part = 0.14</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>9.7</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>integer Part=9 Fraction Part = 0.7</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>5</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>integer Part=5 Fraction Part = 0</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"指针常量\"><a class=\"anchor\" href=\"#指针常量\">#</a> 指针常量</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Project：有关常量的几个问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//N 值不可修改</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> M <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//*p 不可修改，p 可以更改指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可通过赋值指针修改</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> A <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 只可初始化，不可膝盖</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">//N = 7;// 错误</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//M = 5; // 此值也不允许修改</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 地址不能改变，也不能 * p 赋值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//*p = 9; // 左值也不可修改</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//*q = 9; // 左值不可修改</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tq <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>q <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project: 使用 const 进行权限管理</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 加 const 常量，其只有读的权限，不能修改</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#123;\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#125;\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tcin <span class=\"token operator\">>></span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/*1 2 3 4 5 6</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>&#123;1,2,3,4,5,6&#125;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"指针类型的函数\"><a class=\"anchor\" href=\"#指针类型的函数\">#</a> 指针类型的函数</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>存储类型 数据类型 <span class=\"token operator\">*</span>函数名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 函数体语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：</p>\n<ul>\n<li>不要将非静态局部地址用作函数的返回值\n<ul>\n<li>在 <code>子函数中定义局部变量</code> 后将其<sub>地址</sub>返回给主函数，就是非法地址</li>\n</ul>\n</li>\n<li>返回的指针要确保在主调函数中是有效，合法的地址\n<ul>\n<li>主函数中定义的数组，在子函数中对该数组元素进行某种操作后，返回其中一个元素的地址</li>\n<li>在子函数中通过动态内存分配 new 操作取得的内存地址返回给主函数是合法有效的，但是内存分配和释放不在同一级别，要注意不能忘记释放，避免内存泄露。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token function\">newintvar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回的地址指向的是动态分配的空间</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 函数运行结束时，p 中的地址仍有效</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token function\">newintvar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> intptr <span class=\"token operator\">=</span> <span class=\"token function\">newintvar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token operator\">*</span>intptr <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问的是合法有效的地址</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">delete</span> intptr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 如果忘记在这里释放，会造成内存泄露</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>内存泄露</code> ：程序中已分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p>\n<h4 id=\"函数指针的定义函数指针指向的是程序代码存储区\"><a class=\"anchor\" href=\"#函数指针的定义函数指针指向的是程序代码存储区\">#</a> 函数指针的定义：函数指针指向的是程序代码存储区。</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>存储类型 数据类型 <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>函数指针名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"函数指针的典型用途\"><a class=\"anchor\" href=\"#函数指针的典型用途\">#</a> 函数指针的典型用途</h5>\n<ul>\n<li>通过函数指针调用的函数\n<ul>\n<li>将函数的指针作为参数传递给一个函数，使得在处理相似事件的时候可以灵活的使用不同的方法</li>\n</ul>\n</li>\n<li>调用者不关心谁是被调用者\n<ul>\n<li>需直到存在一个具有特定原型和限定条件的被调用函数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 函数指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 求最大值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 求最小值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 求和</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入整数a: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入整数b：\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tcin <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Max of\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"and\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Min of\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"and\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Sum of\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"and\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"对象指针\"><a class=\"anchor\" href=\"#对象指针\">#</a> 对象指针</h4>\n<ul>\n<li>对象指针定义形式\n<ul>\n<li>类名 * 对象指针名</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Point <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Point <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过指针访问对象成员\n<ul>\n<li>对象指针名 -&gt; 成员名</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ptr<span class=\"token operator\">-></span><span class=\"token function\">getx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 相当于<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tPoint <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tPoint<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 定义对象指针，用 a 的地址初始化</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token operator\">-></span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用指针访问对象成员</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 用对象名访问对象成员</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"this-指针\"><a class=\"anchor\" href=\"#this-指针\">#</a> this 指针</h4>\n<ul>\n<li>隐含于类的每一个非静态成员函数中</li>\n<li>指出成员函数所操作的对象\n<ul>\n<li>当通过一个对象调用成员函数时，系统先将该对象的地址赋给 this 指针，然后调用成员函数，成员函数对对象的数据成员进行操作时，就隐含使用了 this 指针</li>\n<li>Point 类的 getX 函数中 return x 相当于 return this-&gt;x;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"前向引用声明\"><a class=\"anchor\" href=\"#前向引用声明\">#</a> 前向引用声明</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fred</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前向引用生命</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Barney</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tFred <span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 不使用指针的话，由于编译器不知道 fred 细节，没法分配空间等操作，将报错，使用对象指针达到效果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fred</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tBarney y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"动态内存分配\"><a class=\"anchor\" href=\"#动态内存分配\">#</a> 动态内存分配</h4>\n<ul>\n<li>new 类型名 T (初始化参数)</li>\n<li>功能:\n<ul>\n<li>在程序执行期间，申请用于存放 T 类型对象的存储空间，并依次初始化参数进行初始化。</li>\n<li>基本类型初始化：如果有初始化参数，依初始化参数进行初始化，如果没有括号和初始化参数，不进行初始化，新分配的内存中内容不确定，如果有括号但初始化参数为空，初始化为 0</li>\n<li>对象类型：如果有初始化参数，以初始化参数中的值为参数调用构造函数进行初始化，如果没有括号和初始化参数或者有括号但初始化参数为空，用默认构造函数初始化</li>\n</ul>\n</li>\n<li>结果值：成功：T 类型的指针，指向新分配的内存，失败：抛出异常</li>\n</ul>\n<hr />\n<h4 id=\"动态申请动态数组\"><a class=\"anchor\" href=\"#动态申请动态数组\">#</a> 动态申请动态数组</h4>\n<ul>\n<li>new 类型名 T [表达式][常量表达式]......()</li>\n<li>功能:\n<ul>\n<li>在程序执行期间，申请用于存档 T 类型对象数组的内存空间，可以有 &quot;()&quot; 但初始化列表必须为空</li>\n<li>如果有 &quot;()&quot;, 对每个元素的初始化与执行 &quot;new T ()&quot; 所做进行初始化的方式相同</li>\n<li>如果没有 &quot;()&quot;, 对每个元素的初始化与执行 &quot;new T&quot; 所做进行初始化的方式相同</li>\n</ul>\n</li>\n<li>结果值\n<ul>\n<li>如果内存申请成功，返回一个指向新分配内存首地址的指针</li>\n<li>如果失败，抛出异常</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span><span class=\"token operator\">*</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 一维数组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"释放内存操作符delete\"><a class=\"anchor\" href=\"#释放内存操作符delete\">#</a> 释放内存操作符 delete</h4>\n<ul>\n<li>delete 指针 p</li>\n<li>功能：释放指针 p 所指向的内存，p 必须是 new 操作的返回值</li>\n<li>delete [] 指针 p</li>\n<li>功能：释放指针 p 所指向的数组，p 必须是用 new 分配得到的数组首地址</li>\n</ul>\n<hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor called.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Default Destructor called.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor called\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 常函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> newY<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tx <span class=\"token operator\">=</span> newX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\ty <span class=\"token operator\">=</span> newY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"step one:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tPoint<span class=\"token operator\">*</span> ptr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Point<span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用默认构造函数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">delete</span> ptr1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 删除对象，自动调用析构函数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Step two\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tptr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">delete</span> ptr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>step one:</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>Default Destructor called.</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>Destructor called</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>Step two</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>Destructor called.</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>Destructor called</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>*/</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor called.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Default Destructor called.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor called\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 常函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> newY<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tx <span class=\"token operator\">=</span> newX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\ty <span class=\"token operator\">=</span> newY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tPoint<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Point<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建对象数组</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tptr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过指针访问数组元素的成员</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tptr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Deleting...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除整个对象数组</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Default Destructor called.</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>Default Destructor called.</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>Deleting...</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>Destructor called</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>Destructor called</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"创建动态数组\"><a class=\"anchor\" href=\"#创建动态数组\">#</a> 创建动态数组</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 创建动态内存分配孔家</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一个为表达式，后面为常量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cp <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> cp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放整个动态多维数组空间</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"将动态数组封装成类\"><a class=\"anchor\" href=\"#将动态数组封装成类\">#</a> 将动态数组封装成类</h4>\n<ul>\n<li>更加简介，便于管理\n<ul>\n<li>建立和删除数组的过程比较繁琐</li>\n<li>封装成类后更加简洁，便于管理</li>\n</ul>\n</li>\n<li>可以在访问数组元素前检查下标是否越界\n<ul>\n<li>用 assert 来检查，assert 只在调试时生效</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cassert></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor called.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Default Destructor called.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor called\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 常函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> newY<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tx <span class=\"token operator\">=</span> newX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\ty <span class=\"token operator\">=</span> newY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayOfPoints</span>  <span class=\"token comment\">// 创建动态数组类</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">ArrayOfPoints</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tpoints <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Point<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 建立数组，就要想起在何处释放</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">ArrayOfPoints</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Deleting ...\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 释放数组 </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> points<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tPoint<span class=\"token operator\">&amp;</span> <span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回引用</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> points<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tPoint<span class=\"token operator\">*</span> points<span class=\"token punctuation\">;</span><span class=\"token comment\">// 指向动态数组首地址</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组大小</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please enter the count of points:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tcin <span class=\"token operator\">>></span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tArrayOfPoints <span class=\"token function\">points</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建数组对象</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tpoints<span class=\"token punctuation\">.</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问数组元素的成员</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tpoints<span class=\"token punctuation\">.</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问数组元素的成员</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>Please enter the count of points:3</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>Default Destructor called.</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>Default Destructor called.</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Default Destructor called.</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>Deleting ...</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Destructor called</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Destructor called</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>Destructor called</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"为什么element函数返回对象的引用\"><a class=\"anchor\" href=\"#为什么element函数返回对象的引用\">#</a> 为什么 element 函数返回对象的引用</h5>\n<ul>\n<li>返回 &quot;引用&quot; 可以用来操作封装数组对象内部的数据元素，如果返回 &quot;值&quot; 则只是返回了一个副本，通过副本是无法操作原来数组中的元素的。</li>\n</ul>\n<h4 id=\"vector容器\"><a class=\"anchor\" href=\"#vector容器\">#</a> vector 容器</h4>\n<ul>\n<li>封装任何类型的动态数组</li>\n<li>数组下标越界检查</li>\n</ul>\n<h5 id=\"vector容器定义\"><a class=\"anchor\" href=\"#vector容器定义\">#</a> vector 容器定义:</h5>\n<ul>\n<li>vector &lt;元素类型&gt; 数组对象名 (数组长度)</li>\n<li>vector&lt;int&gt;arr (5)   // 建立大小为 5 的 int 数组</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 计算数组 arr 中元素的平均值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">double</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tsum <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">return</span> sum <span class=\"token operator\">/</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"n = \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token function\">arr</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建数组对象</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please input \"</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" real number:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tcin <span class=\"token operator\">>></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Average = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"基于for循环配合auto举例\"><a class=\"anchor\" href=\"#基于for循环配合auto举例\">#</a> 基于 for 循环配合 auto 举例</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 基于范围的 for 循环配合 auto 举例</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>v <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">/*v.begin (), 指向首元素的迭代器，可以认为是指向首元素的 “泛型” 指针 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">//auto 是 i 的类型根据后面变</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "编程语言",
                "C++",
                "computer-science",
                "指针"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%A8%A1%E5%9D%97%E4%B8%8E%E7%BE%A4%E4%BD%93%E6%95%B0%E6%8D%AE/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%A8%A1%E5%9D%97%E4%B8%8E%E7%BE%A4%E4%BD%93%E6%95%B0%E6%8D%AE/",
            "title": "C++模块与群体数据",
            "date_published": "2023-02-23T09:07:09.000Z",
            "content_html": "<h4 id=\"引例整数和浮点数求绝对值\"><a class=\"anchor\" href=\"#引例整数和浮点数求绝对值\">#</a> 引例整数和浮点数求绝对值</h4>\n<ul>\n<li>使用两种重载函数？</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">?</span> <span class=\"token operator\">-</span>x<span class=\"token operator\">:</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">?</span> <span class=\"token operator\">-</span>x<span class=\"token operator\">:</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>解决：函数模版\n<ul>\n<li>创建一个通用功能的函数</li>\n<li>支持多种不同形参</li>\n<li>简化重载函数的函数体设计</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* project : 模版求绝对值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>  <span class=\"token comment\">//T 也可使用其它名称</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>T <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>T x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span>x <span class=\"token operator\">:</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"函数模版定义语法\"><a class=\"anchor\" href=\"#函数模版定义语法\">#</a> 函数模版定义语法</h4>\n<ul>\n<li>语法形式\n<ul>\n<li>template &lt;模版参数表&gt;</li>\n<li>函数定义</li>\n</ul>\n</li>\n<li>模版参数表的内容\n<ul>\n<li>类型参数: class (或 typename) 标识符</li>\n<li>常量参数：类型说明符 标识符</li>\n<li>模版参数: template &lt;参数表&gt; class 标识符</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"函数模版\"><a class=\"anchor\" href=\"#函数模版\">#</a> 函数模版</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token comment\">// 定义函数模版</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">outputArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">*</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果数组元素是类的对象，需要该对象所属类重载流插入运算符 \"&lt;&lt;\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> A_count <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> B_count <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> C_count <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>A_count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">double</span> b<span class=\"token punctuation\">[</span>B_count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6.6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7.7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8.8</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span>C_count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"welcome\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a array contains:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">outputArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> A_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b array contains:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">outputArray</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> B_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c array contains:\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">outputArray</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> C_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>a array contains:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>1 2 3 4 5 6 7 8</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>b array contains:</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>c array contains:</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>w e l c o m e</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>*/</span></pre></td></tr></table></figure><ul>\n<li>注意:\n<ul>\n<li>一个函数模版并非自动可以处理所有类型的数据</li>\n<li>只有能够进行函数模版中运算的类型，可以作为类型实参</li>\n<li>自定义的类，需要重载模版中的运算符，才能作为类型实参</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h4 id=\"类模版的作用\"><a class=\"anchor\" href=\"#类模版的作用\">#</a> 类模版的作用</h4>\n<ul>\n<li>使用类模版使用户可以为类声明一种模式，使得类中的某些数据成员，某些成员函数的参数，某些成员函数的返回值，能去 “任意” 类型 (包含基本类型的和用户自定义类型)</li>\n</ul>\n<h4 id=\"类模版的声明\"><a class=\"anchor\" href=\"#类模版的声明\">#</a> 类模版的声明</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span>模版参数表<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> 模版</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t模版声明</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>如果需要在类模版以外定义其成员函数，则要采用以下形式:\n<ul>\n<li><code>template</code>  &lt;模版参数表&gt;</li>\n<li>类型名 类名 &lt;模版参数标识符列表&gt;:: 函数名 (参数表)</li>\n</ul>\n</li>\n<li>模版参数表中参数可以声明为该模版类的友元类</li>\n<li>可通过 <code>typedef</code>  或者 <code>using</code>  对实例化的类模版定义别名</li>\n</ul>\n<h4 id=\"模版的默认实参\"><a class=\"anchor\" href=\"#模版的默认实参\">#</a> 模版的默认实参</h4>\n<ul>\n<li>类似于函数形参可有默认实参，函数 / 类模版可有默认模版实参</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span>T _x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>T _y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tT x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tT y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"使用模版\"><a class=\"anchor\" href=\"#使用模版\">#</a> 使用模版</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Point<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 给定模版参数 int，定义整数点对象 (0,0)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Point<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模版实参列表 & lt;> 为空，默认 double 类型初始化</span></pre></td></tr></table></figure><h4 id=\"类模版实例\"><a class=\"anchor\" href=\"#类模版实例\">#</a> 类模版实例</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 学号</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">float</span> gpa<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 平均分</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Store</span> <span class=\"token comment\">// 类模版，实现对任意数据进行存取</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tT item<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//item 用于存放任意类型的数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">bool</span> haveValue<span class=\"token punctuation\">;</span> <span class=\"token comment\">//haveValue 标记 item 是否已被存入内容</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">friend</span> T<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将参数类型 T 声明为友元类</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tT<span class=\"token operator\">&amp;</span> <span class=\"token function\">getElem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 提取数据函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">pubElem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存入数据函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token class-name\">Store</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">haveValue</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>T<span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Store</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getElem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 如试图提取未初始化的数据，则终止程序</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>haveValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"No item present!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使程序完全退出，返回到操作系统</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">return</span> item<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 item 中存放的数据</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Store</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">pubElem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">//haveValue 置为 true，标识 item 中已存入数值</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\thaveValue <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\titem <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 x 值存入 item</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">using</span> IntStore <span class=\"token operator\">=</span> Store<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tIntStore s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">pubElem</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\ts2<span class=\"token punctuation\">.</span><span class=\"token function\">pubElem</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">getElem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">getElem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tStudent g <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tStore<span class=\"token operator\">&lt;</span>Student<span class=\"token operator\">></span> s3<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将结构体传给类 T 类型换成 Student 结构体</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\ts3<span class=\"token punctuation\">.</span><span class=\"token function\">pubElem</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The student id is \"</span> <span class=\"token operator\">&lt;&lt;</span> s3<span class=\"token punctuation\">.</span><span class=\"token function\">getElem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tStore<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Retrieving object D...\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">getElem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">//d 未初始化，执行函数 D.getElement () 时导致程序终止</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>3 -7</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>The student id is 1000</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Retrieving object D...No item present!</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"群体的概念\"><a class=\"anchor\" href=\"#群体的概念\">#</a> 群体的概念</h4>\n<ul>\n<li>群体时指由多个数据元素组成的集合体，群体可以分为两个大类：线性群体和非线性群体。</li>\n<li>线性群体中的元素按位置排列有序，可以区分为第一个元素，第二个元素</li>\n<li>非线性群体不用位置顺序来标识元素</li>\n<li>vector 就是用类模版实现的动态数组</li>\n</ul>\n<h4 id=\"动态数组类模版程序返回0~n的质数\"><a class=\"anchor\" href=\"#动态数组类模版程序返回0~n的质数\">#</a> 动态数组类模版程序：返回 0~N 的质数</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>动态类数组头指针 Array.h</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">ARRAY_H</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ARRAY_H</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cassert></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token comment\">// 数组类模版定义</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Array</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tT<span class=\"token operator\">*</span> list<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 用于存放动态分配的数组内存首地址</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组大小 (元素个数)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 复制构造函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tArray<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 重载 \"=\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tT<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 重载 []</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 重载 \"[]\" 常函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">operator</span> T<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 重载到 T * 类型的转换</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">operator</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 取数组的大小</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改数组的大小</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sz <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//sz 为数组的大小，应当非负</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tsize <span class=\"token operator\">=</span> sz<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 将元素个数赋值给 size</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tlist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 动态分配 size 个 T 类型的元素空间</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 复制构造函数</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tsize <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tlist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 动态分配 n 个 T 类型的元素空间</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tlist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 重载 “=” 运算符，将对象 rhs 赋值给本对象，实现对象之间的整体赋值</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 如果本对象中数组大小与 rhs 不同，则删除数组原有内存，然后重新分配</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rhs <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">!=</span> rhs<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> list<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除数组原有内存</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\tsize <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 设置本对象的数组大小</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\tlist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重新分配 size 个元素的内存</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token comment\">// 从对象 x 复制数组元素到本对象</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\tlist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">// 重载下标运算符，实现与普通数组一样通过下标访问元素，具有越界检查功能</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>T<span class=\"token operator\">&amp;</span> Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> n <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 检查下标是否越界</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">return</span> list<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回下标为 n 的数组元素</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> n <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 检查下标是否越界</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">return</span> list<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回下标为 n 的数组元素</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">// 重载指针转换运算符，将 Array 类的对象名转换为 T 类型的指针</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>Array<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> T<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回当前对象中私有数组的首地址</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token comment\">// 取当前数组大小</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>  <span class=\"token comment\">// 返回数组大小</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token comment\">// 将数组大小修改为 sz</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 如果哦原有复制空间过下，重新分配数组内存</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>sz <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 检查 sz 是否非负</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sz <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果指定的大小与原有大小一样，什么也不做</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\tT<span class=\"token operator\">*</span> newList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span>sz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 申请新的数组内存</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sz <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> sz <span class=\"token operator\">:</span> size<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将 sz 与 size 中较小的一个赋值给 n</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token comment\">// 将原有数组中前 n 个元素复制到新数组中</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\tnewList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> list<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 删除原数组</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\tlist <span class=\"token operator\">=</span> newList<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 使 list 指向新数组</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\tsize <span class=\"token operator\">=</span> sz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !ARRAY_H</span></span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 求 2~N 中的质数 main.h 主函数 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Array.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iomanip></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcin <span class=\"token operator\">>></span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 用来存放质数的数组，初始状态有 10 个元素</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tArray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//read(a, 10);</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter a value > = 2 as upper limit for prime number:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">bool</span> isPrime <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 默认 i 是质数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 判断是否为质数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\tisPrime <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPrime<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\ta<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\ta<span class=\"token punctuation\">[</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"链表类模版\"><a class=\"anchor\" href=\"#链表类模版\">#</a> 链表类模版</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">NODE_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NODE_H</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 单链表的结点类模版 NOde.h</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向后继节点的指针</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tT data<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 数据域</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> item<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">insertAfter</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在本结点之后插入一个同类结点 P</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token function\">deleteAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 在删除本结点的后继节点，并返回其地址</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token function\">nextNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取后继节点的地址</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">const</span> Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token function\">nextNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取后续节点的地址</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 类的实现函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 构造函数，初始化数据和指针成员</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token operator\">:</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 返回后继节点的指针</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">nextNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 返回后继节点的指针</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">const</span> Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">nextNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>  <span class=\"token comment\">// 返回的常指针，只能读</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 在结点之后插入一个结点</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">insertAfter</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">//p 结点指针域指向当前节点的后继节点</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tnext <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 当前节点的指针域指向 p</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 删除节点之后的结点</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">deleteAfter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 结点物理上不直接删除</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> tempPtr <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 代表为空指针</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tnext <span class=\"token operator\">=</span> tempPtr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">return</span> tempPtr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回的就是被删除的指针</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !NODE_H</span></span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "编程语言",
                "C++",
                "computer-science"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/",
            "title": "C++类的继承",
            "date_published": "2023-02-23T09:01:09.000Z",
            "content_html": "<h3 id=\"c-类的继承\"><a class=\"anchor\" href=\"#c-类的继承\">#</a> C++ 类的继承</h3>\n<h4 id=\"类的继承与派生\"><a class=\"anchor\" href=\"#类的继承与派生\">#</a> 类的继承与派生</h4>\n<ul>\n<li>继承与派生是同一过程从不同的角度看\n<ul>\n<li>保持已有类的特征而构造新类的过程称为继承</li>\n<li>在已有类的基础上新添自己的特征而产生新类的过程称为派生</li>\n</ul>\n</li>\n<li>被继承的已有类称为 <code>基类</code>  /(或父类)</li>\n<li>派生出的新类称为 <code>派生类</code>  /(或子类)</li>\n<li>直接参与派生出某类的基类称为 <code>直接基类</code></li>\n<li>基类的基类甚至更高层的基类称为 <code>间接基类</code></li>\n<li>继承的目的：实现设计与代码的重用</li>\n<li>派生的目的：当新问题出现，原有程序无法解决 (或不能完全解决) 需要对原有程序进行改造。</li>\n</ul>\n<h4 id=\"派生类的定义\"><a class=\"anchor\" href=\"#派生类的定义\">#</a> 派生类的定义</h4>\n<h5 id=\"单继承时\"><a class=\"anchor\" href=\"#单继承时\">#</a> 单继承时:</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> 派生类名<span class=\"token operator\">:</span>继承方式<span class=\"token number\">1</span> 基类名<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>继承方式<span class=\"token number\">2</span> 基类名<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t成员声明</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 每一个 \"继承方式\"，只用于限制对紧随其后之基类的继承</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">private</span> <span class=\"token class-name\">Base2</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>派生类的构成</p>\n<ul>\n<li>吸收基类成员\n<ul>\n<li>吸收基类成员之后，派生类实际上包含了它的全部积累中除构造和析构函数之外的全部成员</li>\n</ul>\n</li>\n<li>改造基类成员\n<ul>\n<li>如果派生类声明了一个和某基类成员同名的新成员，派生的新成员就隐藏或覆盖了外层同名成员</li>\n</ul>\n</li>\n<li>添加新的成员\n<ul>\n<li>派生类添加新成员使派生类在功能上有所发展</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"不同继承方式及类成员的访问控制\"><a class=\"anchor\" href=\"#不同继承方式及类成员的访问控制\">#</a> 不同继承方式及类成员的访问控制</h4>\n<h5 id=\"不同继承方式的影响主要体现在继承过来在哪里能用可以怎么用\"><a class=\"anchor\" href=\"#不同继承方式的影响主要体现在继承过来在哪里能用可以怎么用\">#</a> 不同继承方式的影响主要体现在:（继承过来，在哪里能用，可以怎么用)</h5>\n<ul>\n<li>派生类成员对基类成员的访问权限</li>\n<li>通过派生类对象对基类成员的访问权限</li>\n</ul>\n<h5 id=\"三种继承方式\"><a class=\"anchor\" href=\"#三种继承方式\">#</a> 三种继承方式:</h5>\n<ul>\n<li>共有继承 (初学精通)\n<ul>\n<li>基类的 public 和 protected 成员的访问 <code>属性</code> 在派生类中 <code>保持不变</code> ，但基类的 private 成员 <code>不可直接访问</code> 。</li>\n<li>派生类中的成员函数可以直接访问基类中的 public 和 protected 成员，但不能直接访问基类的 private 成员</li>\n<li>通过派生类的对象访问从基类继承的成员，只能访问 public 成员。</li>\n</ul>\n</li>\n<li>私有继承</li>\n<li>保护继承</li>\n</ul>\n<h5 id=\"公有继承举例\"><a class=\"anchor\" href=\"#公有继承举例\">#</a> 公有继承举例</h5>\n<h6 id=\"pointh\"><a class=\"anchor\" href=\"#pointh\">#</a>  <code>Point.h</code></h6>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_POINT_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_POINT_H</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token comment\">// 基类 Point 类的定义</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">initPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> offx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> offy<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tx <span class=\"token operator\">+=</span> offx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\ty <span class=\"token operator\">+=</span> offy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">float</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">float</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !_POINT_H</span></span></pre></td></tr></table></figure><h6 id=\"rectangleh\"><a class=\"anchor\" href=\"#rectangleh\">#</a>  <code>Rectangle.h</code></h6>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_RECTANGLE_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_RECTANGLE_H</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Point.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Point</span> <span class=\"token comment\">// 派生类的定义</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 新添共有函数成员</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">initRectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">initPoint</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用基类共有成员函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>w <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//this 此 Rectangle 指针，可以调用本类私有成员以及成成的派生类的共有函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>h <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">float</span> <span class=\"token function\">getH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">float</span> <span class=\"token function\">getW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\t<span class=\"token comment\">// 新添私有函数成员</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !_RECTANGLE_H</span></span></pre></td></tr></table></figure><h6 id=\"mainh\"><a class=\"anchor\" href=\"#mainh\">#</a>  <code>main.h</code></h6>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project : 矩形位置，类的继承</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Rectangle.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tRectangle rect<span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义 Rectangle 类的对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 设置举行数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\trect<span class=\"token punctuation\">.</span><span class=\"token function\">initRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置矩形数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\trect<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 移动矩形位置</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The data of rect(x,y,w,h):\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 输出矩形的特征参数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> rect<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> rect<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> rect<span class=\"token punctuation\">.</span><span class=\"token function\">getW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> rect<span class=\"token punctuation\">.</span><span class=\"token function\">getH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>The data of rect(x,y,w,h):</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>5,5,20,10</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"protected成员的特点与作用\"><a class=\"anchor\" href=\"#protected成员的特点与作用\">#</a>  <code>protected</code>  成员的特点与作用</h4>\n<ul>\n<li>对建立其 <code>所在类</code> 对象的模块来说，它与 <code>private</code>  成员的性质相同，类外不能直接访问</li>\n<li>对于其 <code>派生类</code> 来说，它与 <code>public</code>  成员性质相同</li>\n<li>即实现了数据隐藏，又方便继承，实现代码重用</li>\n</ul>\n<h4 id=\"私有继承private\"><a class=\"anchor\" href=\"#私有继承private\">#</a> 私有继承 ( <code>private</code> )</h4>\n<ul>\n<li>基类的 public 和 protected 成员都以 private 身份出现在派生类中，但 <code>基类的private成员不可直接访问</code> ，派生类内使用，不对外继承，在类外需要调用，需要在派生类中重新定义对外服务接口</li>\n<li>派生类中的成员函数可以直接访问基类中的 public 和 protected 成员，但不能直接访问基类的 private 成员</li>\n<li>通过派生类的对象不能直接访问从基类继承的任何成员</li>\n</ul>\n<h4 id=\"保护继承protected\"><a class=\"anchor\" href=\"#保护继承protected\">#</a> 保护继承 (protected)</h4>\n<ul>\n<li>基类的 <code>public</code>  和 <code>protected</code>  成员都以 <code>protected</code>  身份出现在派生类中，但基类的 <code>private</code>  成员是 <code>不可直接访问</code></li>\n<li>派生类中的成员函数可以直接访问基类中的 public 和 protected 成员，但不能直接访问基类的 private 成员</li>\n<li>通过派生类的对象不能直接访问从基类继承的任何成员</li>\n</ul>\n<h4 id=\"向上转型\"><a class=\"anchor\" href=\"#向上转型\">#</a> 向上转型</h4>\n<ul>\n<li>一个共有派生类的对象在使用上可以被当作基类的对象，反之则不可，具体表现在:\n<ul>\n<li>派生类的对象可以隐含转换为基类对象</li>\n<li>派生类的对象可以初始化基类的引用</li>\n<li>派生类的指针可以隐含转换为基类的指针</li>\n</ul>\n</li>\n<li>通过基类对象名，指针只能使用从基类继承的成员<br />\n注意：</li>\n</ul>\n<hr />\n<h4 id=\"继承时的构造函数\"><a class=\"anchor\" href=\"#继承时的构造函数\">#</a> 继承时的构造函数</h4>\n<ul>\n<li>默认情况下基类的构造函数不被继承，派生类需要定义自己的构造函数</li>\n<li>定义构造函数时，只需要对本类中新添成员进行初始化，对继承来的基类成员的初始化，是自动调用基类构造函数完成的</li>\n<li>派生类的构造函数需要给基类的构造函数传递参数</li>\n<li>C++11 规定可以用 using 语句继承基类构造函数，使之成为派生类的构造函数，但是只能初始化从基类继承的成员<br />\n语法形式:</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> Base<span class=\"token double-colon punctuation\">::</span>Base<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"单一继承时构造函数的定义\"><a class=\"anchor\" href=\"#单一继承时构造函数的定义\">#</a> 单一继承时构造函数的定义</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>派生类名<span class=\"token double-colon punctuation\">::</span>派生类名<span class=\"token punctuation\">(</span>基类所需的形参<span class=\"token punctuation\">,</span>本类成员所需的形参<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>基类名<span class=\"token punctuation\">(</span>形参表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>本类成员初始化列表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 其他初始化；</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"多继承时构造函数的定义\"><a class=\"anchor\" href=\"#多继承时构造函数的定义\">#</a> 多继承时构造函数的定义</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>派生类名<span class=\"token double-colon punctuation\">::</span>派生类名<span class=\"token punctuation\">(</span>参数表<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>基类名<span class=\"token number\">1</span><span class=\"token punctuation\">(</span>基类<span class=\"token number\">1</span>初始化参数表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>基类名<span class=\"token number\">2</span><span class=\"token punctuation\">(</span>基类<span class=\"token number\">2</span>初始化参数表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>基类名<span class=\"token function\">n</span><span class=\"token punctuation\">(</span>基类n初始化参数表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>本类成员初始化列表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 其他初始化；</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"派生类与基类的构造函数\"><a class=\"anchor\" href=\"#派生类与基类的构造函数\">#</a> 派生类与基类的构造函数</h4>\n<ul>\n<li>当基类中声明有默认构造函数或未声明构造函数时，派生类构造函数可以不向基类构造函数传递参数，也可以不声明构造函数。构造派生类的对象时，基类的默认构造函数将被调用</li>\n<li>当需要执行基类中带形参的构造函数来初始化基类数据时，派生类构造函数应在初始化列表中为基类构造函数提供参数</li>\n</ul>\n<h4 id=\"多继承且有对象成员时的构造函数\"><a class=\"anchor\" href=\"#多继承且有对象成员时的构造函数\">#</a> 多继承且有对象成员时的构造函数</h4>\n<p>即有继承又有组合的情况</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>派生类名<span class=\"token double-colon punctuation\">::</span>派生类名<span class=\"token punctuation\">(</span>参数表<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>基类名<span class=\"token number\">1</span><span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>基类名<span class=\"token number\">2</span><span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>基类名<span class=\"token function\">n</span><span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>对象成员初始化列表<span class=\"token punctuation\">,</span>基本类型成员初始化列表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 其他初始化；</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"构造函数的执行顺序\"><a class=\"anchor\" href=\"#构造函数的执行顺序\">#</a> 构造函数的执行顺序</h4>\n<p>1，调用基类构造函数，调用顺序按照它们被继承时声明的顺序 (从左向右)<br />\n 2，对初始化列表中的对象成员和基本类型成员进行初始化，初始化顺序按照它们在类中声明的顺序。对象成员初始化是自动调用对象所属类的构造函数完成的。<br />\n3，执行派生类的构造函数体中的内容。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructing Base1 \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructing Base2 \"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base3</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">Base3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructing Base3 * \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base3</span>  <span class=\"token comment\">// 首先按照此定义出书</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token function\">member2</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token function\">member1</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 此处的次序与构造函数的执行次序无关</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 之后根据此调用</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tBase1 member1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tBase2 member2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tBase3 member3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tDerived <span class=\"token function\">obj</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>Constructing Base2 2</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>Constructing Base1 1</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>Constructing Base3 *</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>Constructing Base1 3</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>Constructing Base2 4</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>Constructing Base3 *</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"复制构造函数\"><a class=\"anchor\" href=\"#复制构造函数\">#</a> 复制构造函数</h4>\n<ul>\n<li>若建立派生类对象时没有编写复制构造函数，编译器会生成一个隐含的复制构造函数，该函数先调用基类的复制构造函数，再为派生类新添的成员对象执行复制。</li>\n<li>若编写派生类的复制构造函数，一般都要为基类的复制构造函数传递参数</li>\n<li>派生类的复制构造函数只能接受一个参数，此参数不仅用来初始化派生类定义的成员，也将被传递给基类的复制构造函数。</li>\n<li>基类的复制构造函数形参类型是基类对象的引用，实参可以是派生类对象的引用</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">C</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> C <span class=\"token operator\">&amp;</span>c1<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"析构函数\"><a class=\"anchor\" href=\"#析构函数\">#</a> 析构函数</h4>\n<ul>\n<li>析构函数不被继承，派生类如果需要，要自行声明析构函数</li>\n<li>声明方法与一般 (无继承关系时) 类的析构函数相同</li>\n<li>不需要显式地调用基类的析构函数，系统会自动隐式调用</li>\n<li>析构函数的调用次序与析构函数相反</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 析构函数与构造函数的执行次序相反 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructing Base1 \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructing Base1\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructing Base2 \"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructing Base2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base3</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">Base3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructing Base3 * \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Base3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructing Base3\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base3</span>  <span class=\"token comment\">// 首先按照此定义出书</span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token function\">member2</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token function\">member1</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">// 此处的次序与构造函数的执行次序无关</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 之后根据此调用</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tBase1 member1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tBase2 member2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tBase3 member3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tDerived <span class=\"token function\">obj</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">/*  </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>Constructing Base2 2</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>Constructing Base1 1</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Constructing Base3 *</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>Constructing Base1 3</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Constructing Base2 4</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Constructing Base3 *</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>Destructing Base3</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>Destructing Base2</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>Destructing Base1</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>Destructing Base3</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>Destructing Base1</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>Destructing Base2</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"虚继承\"><a class=\"anchor\" href=\"#虚继承\">#</a> 虚继承</h4>\n<h5 id=\"作用域限定\"><a class=\"anchor\" href=\"#作用域限定\">#</a> 作用域限定</h5>\n<ul>\n<li>当派生类与基类中有相同成员时\n<ul>\n<li>若未特别限定，则通过派生类对象使用的是派生类中的同名成员</li>\n<li>若要通过派生类对象访问基类中被隐藏的同名成员，应使用基类名和作用域操作符 (::) 来限定</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"member of bases1\"</span> <span class=\"token operator\">&lt;&lt;</span>var<span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"member of bases2\"</span> <span class=\"token operator\">&lt;&lt;</span> var <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"member of Derived\"</span> <span class=\"token operator\">&lt;&lt;</span> var <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tDerived d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tDerived<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 访问 Derived 类成员</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\td<span class=\"token punctuation\">.</span>var <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\td<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 访问 Base1 基类成员</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\td<span class=\"token punctuation\">.</span>Base1<span class=\"token double-colon punctuation\">::</span>var <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\td<span class=\"token punctuation\">.</span><span class=\"token class-name\">Base1</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 访问 Base2 基类成员</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tp<span class=\"token operator\">-></span>Base2<span class=\"token double-colon punctuation\">::</span>var <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tp<span class=\"token operator\">-></span><span class=\"token class-name\">Base2</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>member of Derived1</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>member of bases12</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>member of bases23</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"虚基类语法与用途\"><a class=\"anchor\" href=\"#虚基类语法与用途\">#</a> 虚基类语法与用途</h4>\n<ul>\n<li>需要解决的问题\n<ul>\n<li>当派生类从对个基类派生，而这些基类又共同基类，则在访问此共同基类中的成员时，将产生冗余，并有可能因冗余带来不一致性</li>\n</ul>\n</li>\n<li>虚基类声明\n<ul>\n<li>以 <code>virtual</code>  说明基类继承方式</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B1</span><span class=\"token operator\">:</span><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> B</pre></td></tr></table></figure><ul>\n<li>作用:\n<ul>\n<li>主要用来解决多继承时可能发生的对同一基类继承多次而产生的二义性问题</li>\n<li>为最远的派生类提供唯一的基类成员，而不重复产生多次复制</li>\n</ul>\n</li>\n<li>注意:\n<ul>\n<li>在第一级继承时就要将共同基类设计为虚基类</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> var0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"member of bases1\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base0</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> var1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base0</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">int</span> var2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"member of Derived\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tDerived d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\td<span class=\"token punctuation\">.</span>var0 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接访问虚基类的数据成员</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\td<span class=\"token punctuation\">.</span><span class=\"token function\">fun0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接访问虚基类的函数成员</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>Base1<span class=\"token double-colon punctuation\">::</span>var0 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>Base2<span class=\"token double-colon punctuation\">::</span>var0 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空间地址相同</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">.</span>var0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">/* 输出:</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>member of bases1</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>00000066B05BF6E0, 00000066B05BF6E0</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>00000066B05BF6E0</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"有虚基类时的构造函数\"><a class=\"anchor\" href=\"#有虚基类时的构造函数\">#</a> 有虚基类时的构造函数</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Base0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> var<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">var0</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> var0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"member of bases0\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base0</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> var<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Base0</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">int</span> var1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base0</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> var<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Base0</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">int</span> var2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> var<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Base0</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">)</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">int</span> var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"member of Derived\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tDerived <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最远派生类对象</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\td<span class=\"token punctuation\">.</span>var0 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接访问虚基类的数据成员</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\td<span class=\"token punctuation\">.</span><span class=\"token function\">fun0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接访问虚基类的函数成员</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">/* 输出:</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>member of bases0</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"虚基类及其派生类构造函数\"><a class=\"anchor\" href=\"#虚基类及其派生类构造函数\">#</a> 虚基类及其派生类构造函数</h4>\n<ul>\n<li>建立对象时所指定的类称为 <code>最远派生类</code></li>\n<li>虚基类的成员是由最远派生类的构造函数通过调用虚基类的构造函数进行初始化的</li>\n<li>在整个继承结构中，直接或间接继承虚基类的所有派生类，都必须在构造函数的成员初始化表中为虚基类的构造函数列出参数。如果未列出，则表示调用该虚基类的默认构造函数</li>\n<li>在建立对象时，只有最远派生类的构造函数调用虚基类的构造函数，其他类对虚基类构造函数的调用被忽略。</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "编程语言",
                "C++",
                "computer-science"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E5%A4%9A%E6%80%81%E6%80%A7/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E5%A4%9A%E6%80%81%E6%80%A7/",
            "title": "C++多态性",
            "date_published": "2023-02-23T08:01:09.000Z",
            "content_html": "<h3 id=\"第十八天c多态性\"><a class=\"anchor\" href=\"#第十八天c多态性\">#</a> 第十八天：C++ 多态性</h3>\n<h4 id=\"初始虚函数\"><a class=\"anchor\" href=\"#初始虚函数\">#</a> 初始虚函数</h4>\n<ul>\n<li>用 virtual 关键字说明的函数</li>\n<li>虚函数是实现运行时多态性的基础</li>\n<li>C++ 中虚函数是动态绑定的函数</li>\n<li>虚函数必须是非静态的成员函数，虚函数经过派生之后，就可以实现 <code>运行过程中</code> 的多态</li>\n</ul>\n<h4 id=\"虚表与动态绑定\"><a class=\"anchor\" href=\"#虚表与动态绑定\">#</a> 虚表与动态绑定</h4>\n<ul>\n<li>虚表\n<ul>\n<li>每个多态类有一个虚表 (virtual table)</li>\n<li>虚表中有当前类的各个虚函数的入口地址</li>\n<li>每个对象有一个指向当前类的虚表的指针 (虚指针 vptr)</li>\n</ul>\n</li>\n<li>动态绑定的视线\n<ul>\n<li>构造函数中为对象的虚指针赋值</li>\n<li>通过多态类型的指针或引用调用成员函数时，通过虚指针找到虚表，进而找到所调用的虚函数的入口地址</li>\n<li>通过该入口地址调用虚函数<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbu7YnRRUPXgITUzMmry5UibUUUlJI2bPTyglhrLgicI2ibSNNZBHS8QyjzyrEhPYCNQkSpAnb3na2Eqw/0?wx_fmt=jpeg\" alt=\"虚表示意图\" title=\"虚表示意图\" /></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span> <span class=\"token comment\">// 基类 Base1 定义</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 虚函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Base1</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>  <span class=\"token comment\">//const 限制只读</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base1::display\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span>   <span class=\"token comment\">// 公有派生类 Base2 继承</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 虚函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 覆盖基类的虚函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Base2</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>  <span class=\"token comment\">//const 限制只读</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base2::display\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span>  <span class=\"token comment\">// 公有派生类 Derived 定义</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 覆盖基类的虚函数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Derived</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derived::display\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>Base1<span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 参数为指向基类对象的指针</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tptr<span class=\"token operator\">-></span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对象指针 -> 成员名</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tBase1 base1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 定义 Base1 类对象</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tBase2 base2<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 定义 Base2 类对象</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tDerived derived<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义 Derived 类对象</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>base1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 用 Base1 对象的指针调用 fun 函数</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>base2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>derived<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>Base1::display</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>Base2::display</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>Derived::display</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"virtual关键字\"><a class=\"anchor\" href=\"#virtual关键字\">#</a> virtual 关键字</h4>\n<ul>\n<li>派生类可以不显式地用 virtual 声明虚函数，这时系统就会用以下规则来判断派生类的一个函数是不是虚函数。\n<ul>\n<li>该函数是否与基类的被覆盖的虚函数有相同的名称，参数个数及对应参数类型，cv 限定符 (是否 const)，引用限定符 (&amp; 或 &amp;&amp;)</li>\n<li>该函数的返回值类型是否与基类被覆盖的虚函数返回值类型相同，或者可以隐含转换为基类被覆盖的虚函数的返回值类型</li>\n</ul>\n</li>\n<li>如果派生类的函数满足上述条件，就会自动确定为虚函数，这时，派生类的虚函数便覆盖了基类的虚函数</li>\n<li>派生类中的虚函数还会隐藏基类中同名函数的所有其它重载类型</li>\n<li>一般习惯于在派生类的函数中也使用 virtual 关键字，以添加程序的可读性</li>\n</ul>\n<h4 id=\"哪些成员函数可以是虚函数\"><a class=\"anchor\" href=\"#哪些成员函数可以是虚函数\">#</a> 哪些成员函数可以是虚函数</h4>\n<ul>\n<li>一般非静态成员函数可以是虚函数</li>\n<li>构造函数不能是虚函数</li>\n<li>析构函数可以是虚函数</li>\n</ul>\n<h4 id=\"一般虚函数成员\"><a class=\"anchor\" href=\"#一般虚函数成员\">#</a> 一般虚函数成员</h4>\n<ul>\n<li>虚函数的声明</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">virtual</span> 函数类型 函数名<span class=\"token punctuation\">(</span>形参表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>虚函数声明只能出现在类定义中的函数原型声明中，而不能在成员函数实现的时候</li>\n<li>在派生类中可以对基类中的成员函数进行覆盖</li>\n<li>虚函数一般不声明为内联函数，因为对虚函数的调用需要动态绑定，而对内联函数的处理是静态的。</li>\n</ul>\n<hr />\n<h5 id=\"纯虚函数\"><a class=\"anchor\" href=\"#纯虚函数\">#</a> 纯虚函数</h5>\n<ul>\n<li>纯虚函数是一个在基类中声明的虚函数，它在该基类中没有定义具体的操作内容，要求各派生类根据实际需要定义自己的版本，纯虚函数的声明格式：</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">virtual</span> 函数类型 函数名<span class=\"token punctuation\">(</span>参数表<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"抽象类\"><a class=\"anchor\" href=\"#抽象类\">#</a> 抽象类</h5>\n<ul>\n<li>带有纯虚函数的类称为抽象类</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> 类名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> 类型 函数名<span class=\"token punctuation\">(</span>参数表<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 其他成员...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"抽象类的作用\"><a class=\"anchor\" href=\"#抽象类的作用\">#</a> 抽象类的作用:</h5>\n<ul>\n<li>抽象类为抽象和设计的目的而声明</li>\n<li>将有关的数据和行为组织在一个继承层次结构中，保证派生类具有要求的行为；</li>\n<li>对于暂时无法实现的函数，可以声明为纯虚函数，留给派生类去实现</li>\n<li>注意:\n<ul>\n<li>抽象类只能作为基类来使用</li>\n<li>不能定义抽象类的对象</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 抽象类 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 具有纯虚函数的类就叫做 “抽象类”</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 纯虚函数，函数没有结构体，等于 0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 抽象类是不能实例化的</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 覆盖基类的虚函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Base2</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base2::display()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 覆盖基类的虚函数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Derived</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Derived::display()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>Base1<span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tptr<span class=\"token operator\">-></span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tBase2 base2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tDerived derived<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>base2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>derived<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"关键字override与final\"><a class=\"anchor\" href=\"#关键字override与final\">#</a> 关键字 override 与 final</h4>\n<ul>\n<li>override 与 final 都不是语言关键字 (keyword)，只有在特定的位置才有特别含义，其他地方仍旧可以作为一般标识符 (identifier) 使用。</li>\n</ul>\n<h5 id=\"override\"><a class=\"anchor\" href=\"#override\">#</a> override</h5>\n<ul>\n<li>显式覆盖函数</li>\n<li>声明该函数必须覆盖基类的虚函数，编译器可发现 &quot;未覆盖&quot; 错误</li>\n<li>覆盖要求\n<ul>\n<li>函数签名 (signature) 完全一致</li>\n<li>函数签名包括：函数名 参数列表  <code>const</code></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"显式覆盖的作用\"><a class=\"anchor\" href=\"#显式覆盖的作用\">#</a> 显式覆盖的作用</h6>\n<ul>\n<li>声明显式函数覆盖，在编译期间发现未覆盖的错误</li>\n<li>运用显式覆盖，编译器会检查派生类中声明 ``overrid` 的函数，在基类中是否存在可被覆盖的虚函数，若不存在，则会报错</li>\n</ul>\n<h4 id=\"final\"><a class=\"anchor\" href=\"#final\">#</a> final</h4>\n<ul>\n<li>用来避免类被继承，或是基类的函数被覆盖</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Base</span> <span class=\"token keyword\">final</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Derived</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token class-name\">Base1</span> <span class=\"token comment\">// 编译错误，Base1 为 final 不允许被继承</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 或</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Base2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此函数不能被派生类修改或覆盖</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Derived2</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token class-name\">Base2</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译错误，不允许被覆盖</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h4 id=\"运算符重载的意义\"><a class=\"anchor\" href=\"#运算符重载的意义\">#</a> 运算符重载的意义</h4>\n<ul>\n<li>运算符重载是对已有的运算符赋予多重含义，使同一个运算的数据时导致不同的行为</li>\n<li>针对自定义的类，可以对原有运算符进行重载</li>\n</ul>\n<h4 id=\"例如\"><a class=\"anchor\" href=\"#例如\">#</a> 例如</h4>\n<ul>\n<li>使复数类的对象可以用 &quot;+&quot; 运算符实现算法</li>\n<li>是时钟类可以用 &quot;++&quot; 运算符实现时间增加 1 秒</li>\n</ul>\n<h4 id=\"运算符重载的规定\"><a class=\"anchor\" href=\"#运算符重载的规定\">#</a> 运算符重载的规定</h4>\n<ul>\n<li>C<ins> 几乎可以重载全部的运算符，而且只能重载 C</ins> 中已经有的\n<ul>\n<li>不能重载:&quot;.&quot;,&quot;.*&quot;,&quot;::&quot;,&quot;?:&quot;</li>\n</ul>\n</li>\n<li>重载之后运算符的优先级和结合性都不会改变</li>\n<li>可以重载为类的非静态成员函数</li>\n<li>可以重载为非成员函数 (必要时可以声明为友元)</li>\n</ul>\n<h4 id=\"运算符重载为成员函数\"><a class=\"anchor\" href=\"#运算符重载为成员函数\">#</a> 运算符重载为成员函数</h4>\n<ul>\n<li>复数类加减法运算重载为成员函数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Complex</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">real</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">imag</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 运算符 + 重载成员函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tComplex <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 运算符 - 重载函数成员</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tComplex <span class=\"token keyword\">operator</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出复数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">double</span> real<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 复数实部</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">double</span> imag<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 复数虚部</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Complex Complex<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 创建一个临时无名对象作为返回值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span>real <span class=\"token operator\">+</span> c2<span class=\"token punctuation\">.</span>real<span class=\"token punctuation\">,</span> imag <span class=\"token operator\">+</span> c2<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Complex Complex<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex <span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token comment\">// 左操作数，右操作数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span>real <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">.</span>real<span class=\"token punctuation\">,</span> imag <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Complex</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> real <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> imag <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tComplex <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c1 = \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tc1<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c2 = \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tc2<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tc3 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 使用重载运算符完成复数减法</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c3 = c1 - c2 =\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tc3<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tc3 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">+</span> c2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用重载运算符完成复数加法</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c3 = c1 + c2 =\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tc3<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>c1 = (5,4)</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>c2 = (2,10)</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>c3 = c1 - c2 =(3,-6)</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>c3 = c1 + c2 =(7,14)</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"重载为类成员的运算符函数定义形式\"><a class=\"anchor\" href=\"#重载为类成员的运算符函数定义形式\">#</a> 重载为类成员的运算符函数定义形式</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>函数类型 <span class=\"token keyword\">operator</span> 运算符<span class=\"token punctuation\">(</span>形参<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 参数个数 = 原操作数个数 - 1 (后置 ++，-- 除外)</span></pre></td></tr></table></figure><h4 id=\"双目运算符重载规则\"><a class=\"anchor\" href=\"#双目运算符重载规则\">#</a> 双目运算符重载规则</h4>\n<ul>\n<li>如果要重载 B 为类成员函数，使之能够实现表达式 oped1 B oped2, 其中 oprd1 为类对象，则 B 应被重载为 A 类的成员函数，形参类型应该是 oprd2 所属的类型</li>\n<li>经重载后，表达式 oprd B oprd2 相当于 oprd1.operator B (oprd2)</li>\n</ul>\n<h5 id=\"重载前置和后置为时钟类成员函数\"><a class=\"anchor\" href=\"#重载前置和后置为时钟类成员函数\">#</a> 重载前置<ins>和后置</ins>为时钟类成员函数</h5>\n<ul>\n<li>前置单目运算符，重载函数没有形参</li>\n<li>后置 ++ 运算符，重载函数需要有一个 <code>int</code>  形参</li>\n<li>操作数是时钟类的对象</li>\n<li>实现时间增加 1 秒钟</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hour <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minute <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> second <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 前置单目运算符重载</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tClock<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">++</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 后置单目运算符重载</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tClock <span class=\"token keyword\">operator</span> <span class=\"token operator\">++</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//int 区分前置后置</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> hour<span class=\"token punctuation\">,</span> minute<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">Clock</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hour<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> second<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> hour <span class=\"token operator\">&amp;&amp;</span> hour <span class=\"token operator\">&lt;</span> <span class=\"token number\">24</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> minute <span class=\"token operator\">&amp;&amp;</span> minute <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span>second <span class=\"token operator\">&amp;&amp;</span>second <span class=\"token operator\">&lt;</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>hour <span class=\"token operator\">=</span> hour<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>minute <span class=\"token operator\">=</span> minute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>second <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Time error!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Clock</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token comment\">// 显示时间</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> hour <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> minute <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Clock<span class=\"token operator\">&amp;</span> Clock<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 前置 ++</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tsecond<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>second <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tsecond <span class=\"token operator\">-=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tminute<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minute <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\tminute <span class=\"token operator\">-=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\thour <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hour <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>Clock Clock<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 后置 ++</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 注意形参表中额整型参数</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tClock old <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用前置 “++” 运算符</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回当前值之后才加加</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tClock <span class=\"token function\">myclock</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"First time output:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tmyclock<span class=\"token punctuation\">.</span><span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Show myclock++\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">(</span>myclock<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Show ++myclock:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>myclock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>First time output:23:59:59</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Show myclock++23:59:59</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Show ++myclock:0:0:1</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"前置单目运算符\"><a class=\"anchor\" href=\"#前置单目运算符\">#</a> 前置单目运算符</h4>\n<ul>\n<li>如果要重载 U 为类成员函数，使之能够实现表达式 <code>U oprd</code> ，其中 <code>oprd</code>  为 A 类兑现，则 U 应被重载为 A 类的成员函数，无形参</li>\n<li>经重载后，表达式 <code>U oprd</code>  相当于 <code>oprd.operator U()</code></li>\n</ul>\n<h4 id=\"后置单目运算符和-重载规则\"><a class=\"anchor\" href=\"#后置单目运算符和-重载规则\">#</a> 后置单目运算符 ++ 和 -- 重载规则</h4>\n<ul>\n<li>如果要重载<ins>或 -- 为类成员函数，使之能够实现表达式  <code>oprd++</code>  或 <code>oprd--</code> ，其中 <code>oprd</code>  为 A 类对象，则</ins>或 -- 应被重载为 A 类的成员函数，且具有一个 int 类型形参</li>\n<li>经重载后，表达式 <code>oprd++</code>  相当于 <code>oprd.operator++(0)</code></li>\n</ul>\n<h4 id=\"运算符重载为非成员函数\"><a class=\"anchor\" href=\"#运算符重载为非成员函数\">#</a> 运算符重载为非成员函数</h4>\n<p>有些运算符不能重载为成员函数，例如：二元运算符的左操作数不是对象，或者是不能由我们重载运算符的对象</p>\n<h5 id=\"例题重载complex的加减法和运算符为非成员函数\"><a class=\"anchor\" href=\"#例题重载complex的加减法和运算符为非成员函数\">#</a> 例题：重载 Complex 的加减法和 &quot;&lt;&lt;&quot; 运算符为非成员函数</h5>\n<ul>\n<li>将 +，-(双目) 重载为非成员函数，并将其声明为复数类的友元，两个操作数都是复数类的常引用</li>\n<li>将 &lt;&lt;(双目) 重载为非成员函数，并将其声明为复数类的友元，它的左操作数是 <code>std::ostream</code>  引用，右操作符为复数类的常引用，返回 <code>std::ostream</code>  引用，用以支持下面形式的输出:<br />\n<img data-src=\"http://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtzFnlzYlDw2awEh7OY3gD1A0VMuWCC0LM47WqkibtMBA5N6enWLxGW6KnhuX1UW20ERX9vqOhYk0w/0?wx_fmt=png\" alt=\"输出流\" title=\"chatgpt输出流定义\" /></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cout<span class=\"token operator\">&lt;&lt;</span>a<span class=\"token operator\">&lt;&lt;</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 该输出调用的是</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Complex</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">real</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">imag</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 运算符 + 重载成员函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">friend</span> Complex <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c1<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 友元函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 运算符 - 重载函数成员</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">friend</span> Complex <span class=\"token keyword\">operator</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c1<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">friend</span> ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">double</span> real<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 复数实部</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">double</span> imag<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 复数虚部</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Complex <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 传引用效率更高，常引用，只能取数 ，不能修改</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span>real <span class=\"token operator\">+</span> c2<span class=\"token punctuation\">.</span>real<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">.</span>imag <span class=\"token operator\">+</span> c2<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Complex <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 左操作数，右操作数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">Complex</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span>real <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">.</span>real<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">.</span>imag <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Complex<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 流对象</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span>real <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span>imag <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tComplex <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">c2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> c1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> c2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tc3 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">-</span> c2<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 使用重载运算符完成复数减法</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c3 = c1 - c2 =\"</span> <span class=\"token operator\">&lt;&lt;</span> c3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tc3 <span class=\"token operator\">=</span> c1 <span class=\"token operator\">+</span> c2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用重载运算符完成复数加法</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c3 = c1 + c2 =\"</span> <span class=\"token operator\">&lt;&lt;</span> c3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>c1 = (5,4)</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>c2 = (2,10)</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>c3 = c1 - c2 =(3,0)</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>c3 = c1 + c2 =(7,14)</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"运算符重载为非成员函数的规则\"><a class=\"anchor\" href=\"#运算符重载为非成员函数的规则\">#</a> 运算符重载为非成员函数的规则</h4>\n<ul>\n<li>函数的形参代表依自左至右次序排列的各操作数</li>\n<li>重载为非成员函数时\n<ul>\n<li>参数个数 = 原操作数个数 (后置 ++，-- 除外)</li>\n<li>至少应该有一个自定义类型的参数</li>\n</ul>\n</li>\n<li>后置单目运算符 ++ 和 -- 的重载函数，形参列表中要添加一个 int，但不必写形参名</li>\n<li>如果在运算符的重载函数中需要操作某类对象的私有成员，可以将此函数声明为该类的友元</li>\n</ul>\n<h4 id=\"运算符重载为非成员函数的规则-2\"><a class=\"anchor\" href=\"#运算符重载为非成员函数的规则-2\">#</a> 运算符重载为非成员函数的规则</h4>\n<ul>\n<li>双目运算符 B 重载后\n<ul>\n<li>表达式 oprd1 B oprd2</li>\n<li>等同于 operator B (oprd1,oprd2)</li>\n</ul>\n</li>\n<li>前置单目运算符 B 重载后\n<ul>\n<li>表达式 B oprd</li>\n<li>等同于 operator B (oprd)</li>\n</ul>\n</li>\n<li>后置单目运算符 ++ 和 -- 重载后\n<ul>\n<li>表达式 oprd B</li>\n<li>等同于 operator B (oprd,0)</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "编程语言",
                "C++",
                "computer-science"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%BF%9D%E6%8A%A4/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%BF%9D%E6%8A%A4/",
            "title": "C++数据共享与保护",
            "date_published": "2023-02-23T05:53:36.000Z",
            "content_html": "<h3 id=\"数据的共享与保护\"><a class=\"anchor\" href=\"#数据的共享与保护\">#</a> 数据的共享与保护</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include &lt;iostream></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//C++标准程序库的所有标识符都被声明在std命名空间内</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>int main<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hello std!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t//std::cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello std!\"</span> <span class=\"token operator\">&lt;&lt;</span> std::endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h4>\n<p>不同位置定义的变量和对象，其作用域，可见性，生存期都不同。程序模需要协作共同完成整个系统的功能，模块间需要共享数据，就需要直到应该将变量和对象定义在什么位置</p>\n<h4 id=\"函数原形作用域\"><a class=\"anchor\" href=\"#函数原形作用域\">#</a> 函数原形作用域</h4>\n<p>函数原型作用域中的参数，其作用域始于 &quot;(&quot;, 结束于 &quot;)&quot;</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>double area<span class=\"token punctuation\">(</span>double radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"局部作用域\"><a class=\"anchor\" href=\"#局部作用域\">#</a> 局部作用域</h4>\n<p>函数的形参，在块中声明的标识符，其作用域自声明处起，限于块中<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvicMgsRBhgayuYtLPvnzX9lFgmkOGPQnS55qoejMgRic6ydZy4s9TT0cniaLI0DJiadbIVC1lwOqX3dw/0?wx_fmt=jpeg\" alt=\"局部作用域\" title=\"局部作用域\" /></p>\n<h4 id=\"类作用域\"><a class=\"anchor\" href=\"#类作用域\">#</a> 类作用域</h4>\n<p>其范围包括类体和非内联成员函数的函数体</p>\n<h4 id=\"命名空间作用域\"><a class=\"anchor\" href=\"#命名空间作用域\">#</a> 命名空间作用域</h4>\n<p>命名空间可以解决类名，函数名等的命名冲突</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>namespace 命名空间名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t各种声明<span class=\"token punctuation\">(</span>函数声明，类声明<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>例:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> SomeNs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClass</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 引用类名:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>SomeNs<span class=\"token double-colon punctuation\">::</span>Someclass objl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>using</code>  语句的两种形式</p>\n<ul>\n<li>using 命名空间名：：标识符名；</li>\n<li><code>using namespace</code>  命名空间名；</li>\n</ul>\n<h4 id=\"特殊的命名空间\"><a class=\"anchor\" href=\"#特殊的命名空间\">#</a> 特殊的命名空间</h4>\n<ul>\n<li>全局命名空间：默认全局</li>\n<li>匿名命名空间 (给空间没有名字): 对每个源文件是惟一的 (限于当前文件)</li>\n</ul>\n<h4 id=\"限定作用域的枚举类\"><a class=\"anchor\" href=\"#限定作用域的枚举类\">#</a> 限定作用域的枚举类</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color</span><span class=\"token punctuation\">&#123;</span>red<span class=\"token punctuation\">,</span>yellow<span class=\"token punctuation\">,</span>green<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不限定作用域</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color2</span><span class=\"token punctuation\">&#123;</span>red<span class=\"token punctuation\">,</span>yellow<span class=\"token punctuation\">,</span>green<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 错误，重复定义</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">color2</span><span class=\"token punctuation\">&#123;</span>red<span class=\"token punctuation\">,</span>yellow<span class=\"token punctuation\">,</span>green<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 正确，限定作用域</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>color c<span class=\"token operator\">=</span>red<span class=\"token punctuation\">;</span><span class=\"token comment\">// 全局作用域 color 枚举类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>color2 c2 <span class=\"token operator\">=</span> red<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误，color2 元素不在有效作用域内</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>color2 c2 <span class=\"token operator\">=</span> color2<span class=\"token double-colon punctuation\">::</span>red<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，使用 color2 作用域枚举元素</span></pre></td></tr></table></figure><h4 id=\"可见性\"><a class=\"anchor\" href=\"#可见性\">#</a> 可见性</h4>\n<ul>\n<li>可见性表示从内层作用域向外层作用域 &quot;看&quot; 时能看见什么</li>\n<li>如果标识在某处可见，就可以在该处引用此标识符</li>\n<li>如果某个标识符在外层中声明，且在内层中没有同一标识符的声明，则该标识符在内层可见</li>\n<li>对于两个嵌套的作用域，如果在内层作用域内与外层作用域中同名的标识符，则外层作用域的标识符在内层不可见</li>\n</ul>\n<h4 id=\"对象的生存期\"><a class=\"anchor\" href=\"#对象的生存期\">#</a> 对象的生存期</h4>\n<p>对象从产生到结束这段时间，在对象生存周期，最想将保持它的值 ，直到被更新为止</p>\n<ul>\n<li>静态生存期：生存期与程序的运行期相同，在文件作用域中声明的对象具有这种生存期，在函数内部声明静态生存期对象，要冠以关键字 static</li>\n<li>动态生存期：没有用 <code>static</code>  声明，开始于程序执行到声明点时，结束于命名该标识符的作用域结束处。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//C++ 标准程序库的所有标识符都被声明在 std 命名空间内</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//i 为全局变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">other</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//a,b 为静态全局变量，具有全局寿命，局部可见，只第一次进入函数时被初始化</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//c 为局部变量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\ta <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//4</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\ti <span class=\"token operator\">+=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//33</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tc <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//15</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"---- - other----\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" i：\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" a:\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" b:\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" c\"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">//a 为静态局部变量，具有全局 寿命，局部可见</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//b,c 为局部变量，具有动态生存期</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"——----main----\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">//i=1,a 默认为 0，b=-10,c=0</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" i：\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" a:\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" b:\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" c\"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tc <span class=\"token operator\">+=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//c=8</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">other</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"——----main----\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" i：\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" a:\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" b:\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" c\"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\ti <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">other</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"对象间的共享\"><a class=\"anchor\" href=\"#对象间的共享\">#</a> 对象间的共享</h4>\n<ul>\n<li>同类对象数据共享：静态数据成员</li>\n<li>同类对象功能共享：静态函数成员</li>\n<li>类与外部数据共享：友元</li>\n</ul>\n<h5 id=\"静态数据成员\"><a class=\"anchor\" href=\"#静态数据成员\">#</a> 静态数据成员</h5>\n<pre><code>* 用关键字`static`声明\n* 为该类的所有对象共享，静态数据成员具有静态生存期\n* 一般在类外初始化，用\\(::)来指明所属的类\n* C++11支持静态常量\\(`const`或`constexpr`修饰)类内初始化，此时类外仍可定义该静态成员，但不可再次初始化操作\n</code></pre>\n<p>静态成员举例</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//C++ 标准程序库的所有标识符都被声明在 std 命名空间内</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 外部接口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// 在构造函数中对 cout 累加，所有对象共同共同维护一个 count</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span>Point<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 复制构造函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tx <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\ty <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tcount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">showCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Object count:\"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 静态数据成员声明，用于记录点的个数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token double-colon punctuation\">::</span>Point<span class=\"token double-colon punctuation\">::</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 静态数据成员定义和初始化，使用类名限定</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tPoint <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Point A:\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">showCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出对象个数</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tPoint <span class=\"token function\">b</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Point B:\"</span> <span class=\"token operator\">&lt;&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tb<span class=\"token punctuation\">.</span><span class=\"token function\">showCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出对象个数</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>* 输出：</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>Point A:4,4 Object count:1</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>Point B:4,4 Object count:2</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"类的静态函数成员\"><a class=\"anchor\" href=\"#类的静态函数成员\">#</a> 类的静态函数成员</h5>\n<ul>\n<li>类外代码可以使用类名和作用域操作符来调用静态成员函数</li>\n<li>静态成员函数主要用于处理该类的静态数据成员，可以直接调用静态成员函数</li>\n<li>如果访问非静态成员，要通过对象来访问</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 静态函数成员，主函数可以直接调用查看 count</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Object count:\"</span> <span class=\"token operator\">&lt;&lt;</span> count <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 静态数据成员声明，用于记录点的个数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> Point<span class=\"token double-colon punctuation\">::</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 静态数据成员定义和初始化，使用类名限定</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">showCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出对象个数</span></pre></td></tr></table></figure><h4 id=\"友元\"><a class=\"anchor\" href=\"#友元\">#</a> 友元</h4>\n<ul>\n<li>友元是 C++ 提供的一种破坏数据封装和数据隐藏的机制</li>\n<li>通过经一个模块声明为另一个模块的友元，一个模块能够引用到另一个模块中本被隐藏的信息</li>\n<li>可以使用友元函数和友元类</li>\n<li>为了确数据的完整性，及数据封装与隐藏的原则，建议尽量不适用或少使用友元</li>\n</ul>\n<h4 id=\"友元函数\"><a class=\"anchor\" href=\"#友元函数\">#</a> 友元函数</h4>\n<ul>\n<li>友元函数是在类声明中由关键字 friend 修饰说明的非成员函数，在它的函数体中能够通过对象名访问 private 和 protected 成员</li>\n<li>作用：增加灵活性，使程序员可以在封装和快速性方面做出合理选择</li>\n<li>访问对象中的成员必须通过对象名</li>\n</ul>\n<hr />\n<h5 id=\"使用友元函数计算两点间的距离\"><a class=\"anchor\" href=\"#使用友元函数计算两点间的距离\">#</a> 使用友元函数计算两点间的距离</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">float</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>Point<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> Point<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 友元函数，只要在类体中就行</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 私有函数成员</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">float</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>Point<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> Point<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tPoint <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"This distance is:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">/*This distance is:5*/</span></pre></td></tr></table></figure><h4 id=\"友元类\"><a class=\"anchor\" href=\"#友元类\">#</a> 友元类</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvicMgsRBhgayuYtLPvnzX9lIaCOw1eCP1BUAgJkgId0waWCYC4jW1HbjibibxCwibddWB8FXjXX4o9JQ/0?wx_fmt=jpeg\" alt=\"友元类举例\" title=\"友元类举例\" /></p>\n<hr />\n<p><code>类的友元关系是单向的</code> ：如果声明 B 类是 A 类的友元，B 类的成员函数就可以访问 A 类的私有和保护数据，但 A 类的成员函数却不能访问 B 类的私有，保护数据</p>\n<hr />\n<h4 id=\"共享数据的保护\"><a class=\"anchor\" href=\"#共享数据的保护\">#</a> 共享数据的保护</h4>\n<ul>\n<li>对于既需要共享，又需要防止改变的数据应该声明为常类型 (用 const 进行修饰)</li>\n<li>对于不改变对象状态的成员函数应该声明为常函数</li>\n</ul>\n<h4 id=\"常对象\"><a class=\"anchor\" href=\"#常对象\">#</a> 常对象</h4>\n<ul>\n<li>用 const 修饰的对象\n<ul>\n<li>使用 const 关键字说明的函数</li>\n<li>常成员函数不更新对象的数据成员</li>\n<li>常成员函数说明格式:\n<ul>\n<li>类型说明符 函数名 （参数表) const;</li>\n<li>这里，const 是函数类型的一个组成部分，因此在实现部分也要带 const 关键字</li>\n<li>const 关键字可以被用于参与对重载函数的区分</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>通过常对象只能调用它的常成员函数</li>\n<li>常数据成员\n<ul>\n<li>使用 const 说明的数据成员</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">R</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r2<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">r1</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">r2</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 常成员函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> r1<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">R</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> r1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">&lt;&lt;</span> r2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">R</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> r1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">&lt;&lt;</span> r2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tR <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">const</span> R <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tb<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用 void print () const</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"常数据成员\"><a class=\"anchor\" href=\"#常数据成员\">#</a> 常数据成员</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 在任何地方都不能赋值运算</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span><span class=\"token comment\">// 静态常数据成员</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//A::A (int i)&#123;a=1&#125;  // 不能进行赋值，只能写入初始化列表里面</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">A</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 写入初始化列表</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h4 id=\"常引用\"><a class=\"anchor\" href=\"#常引用\">#</a> 常引用</h4>\n<ul>\n<li>如果咋声明引用时用 const 修饰，被声明的引用就是常引用</li>\n<li>常引用所引用的对象不能被更新</li>\n<li>如果用常引用做形参，便不会意外地发生对实参的更改。常引用的声明形式</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> 类型说明符 <span class=\"token operator\">&amp;</span>引用名<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">float</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Point<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> Point<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 友元函数，只要在类体中就行</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 私有函数成员</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">float</span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Point<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> Point<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "编程语言",
                "C++",
                "计算机科学"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/Git/Git%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95/",
            "url": "https://www.blog.foryouos.cn/computer-science/Git/Git%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95/",
            "title": "Git使用语法",
            "date_published": "2023-02-23T04:28:05.000Z",
            "content_html": "<h3 id=\"git\"><a class=\"anchor\" href=\"#git\">#</a> Git</h3>\n<h4 id=\"删除分支\"><a class=\"anchor\" href=\"#删除分支\">#</a> 删除分支</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>分支名<span class=\"token operator\">></span></pre></td></tr></table></figure><h4 id=\"修改分支名\"><a class=\"anchor\" href=\"#修改分支名\">#</a> 修改分支名</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> <span class=\"token operator\">&lt;</span>原分支名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>新分支名<span class=\"token operator\">></span></pre></td></tr></table></figure><hr />\n<h4 id=\"查看简明状态说明\"><a class=\"anchor\" href=\"#查看简明状态说明\">#</a> 查看简明状态说明</h4>\n<ul>\n<li>git 目录中的文件状态包含：是否跟踪，是否修改，是否已存入暂存区</li>\n<li>参数的一个横杠表示缩写，两个横杠表示全程</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> status <span class=\"token parameter variable\">-s</span> <span class=\"token comment\"># 查看简明状态说明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> M README <span class=\"token comment\"># 已修改，但未暂存 (M 的位置靠右，红色)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> MM Rakefile <span class=\"token comment\"># 已修改，暂存后又作了修改（有暂存和未暂存)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> A lib/git.rb <span class=\"token comment\"># 新添加到暂存区，未提交</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> M lib/simplegit.rb <span class=\"token comment\">#已修改，已暂存</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ？？ LICENSE.txt <span class=\"token comment\">#新添加，未跟踪</span></pre></td></tr></table></figure><h4 id=\"忽略文件\"><a class=\"anchor\" href=\"#忽略文件\">#</a> 忽略文件</h4>\n<p>添加一个名为 <code>.gitignore</code>  的文件，列出要忽略的文件的模式</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>*.<span class=\"token punctuation\">[</span>oa<span class=\"token punctuation\">]</span> <span class=\"token comment\">#忽略以.o 或.a 结尾的文件 (一般这类文件在编译过程出现)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>*~     <span class=\"token comment\">#忽略以～结尾的文件 (一般是文本编辑软件保存的副本)</span></pre></td></tr></table></figure><h5 id=\"gitignore文件格式规范\"><a class=\"anchor\" href=\"#gitignore文件格式规范\">#</a>  <code>.gitignore</code>  文件格式规范</h5>\n<ul>\n<li>所有空行或者以 <strong>#</strong> 开头都会被 Git 忽略 (注释符号)</li>\n<li>可以使用标准的 glob 模式（shell 所使用的简化正则）匹配，它会递归整个工作区</li>\n<li>匹配模式可以以 (<strong>/</strong>) 开头防止递归</li>\n<li>以  (<strong>/</strong>)  结尾指定目录</li>\n<li>要忽略指定模式以外的文件或目录，可以在模式前加上叹号 (<strong>!</strong>) 取反</li>\n<li>星号 (*) 匹配零个或多个任意字符</li>\n<li>[ <code>abc</code> ] 匹配任何一个列在括号中的字符</li>\n<li>文件 (<strong>？</strong>) 只匹配一个任意一个字符</li>\n<li>[0-9] 表示匹配所有 0 到 9 的数字，在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配</li>\n<li>使用两个 (****<strong>) 表示匹配任意中间目录，比如 a/</strong>/z 可以匹配 a/z,a/b/z,a/b/c/z 等</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9naXRpZ25vcmU=\">详情</span><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>*.a   <span class=\"token comment\"># 忽略所有的.a 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">!</span>lib.a   <span class=\"token comment\"># 跟踪所有的 lib.a，基表你在前面忽略了.a 文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/TODO   <span class=\"token comment\"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>build/  <span class=\"token comment\"># 忽略任何目录下名为 build 的文件夹</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>doc/*.txt  <span class=\"token comment\"># 忽略 doc/notes.txt 但不忽略深层次的</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>doc/**/*.pdf  <span class=\"token comment\"># 忽略 doc/ 目录及其所有子目录下的.pdf 文件</span></pre></td></tr></table></figure><hr />\n<h4 id=\"查看修改的具体内容\"><a class=\"anchor\" href=\"#查看修改的具体内容\">#</a> 查看修改的具体内容</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token comment\"># 比较修改之前还没有暂存起来的变化内容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token parameter variable\">--staged</span> <span class=\"token comment\"># 查看已暂存的将要添加到下次提交里的内容</span></pre></td></tr></table></figure><p><code>注意</code> : <code>git status</code>  只能查看文件变化的状态，并不能查看具体修改了哪些内容。使用 <code>git diff</code>  可以查看具体变化的内容<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsY0YabUMSXt2xbpITduhdCdE1VrpZsiabp9K5nViaB8ugo6JqPXqL0VxXFzc2Z7kBBpa8yNQUicP0lg/0?wx_fmt=png\" alt=\"git diff\" title=\"git diff运行图\" /></p>\n<hr />\n<h4 id=\"查看提交历史\"><a class=\"anchor\" href=\"#查看提交历史\">#</a> 查看提交历史</h4>\n<p>不传入任何参数的默认情况先， <code>git log</code>  会按时间先后顺序列出所有的提交，最新的更新排在最上面</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> log</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> log <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-2</span> <span class=\"token comment\"># -p 显示差异，-2 显示最近的提交次数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> log <span class=\"token parameter variable\">--stat</span> <span class=\"token comment\"># 显示每次提交的差异统计</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#使用不同的默认格式展示提交历史</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#oneline 把每个提交放在一行显示，还有 short，full，fuller</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> log <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>oneline  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># --pretty=format:\"% h - % an,% ar:% s\" 定制记录的显示格式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> log <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>format:<span class=\"token string\">\"%h - %an,%ar:%s\"</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsY0YabUMSXt2xbpITduhdCK3V2TY33PTgJhlsYSgYfHGV4FcqynIOWknRnXUVxD9MM0RcxicRvxUA/0?wx_fmt=png\" alt=\"git log\" title=\"git log运行\" /><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyL0dpdC0lRTUlOUYlQkElRTclQTElODAtJUU2JTlGJUE1JUU3JTlDJThCJUU2JThGJTkwJUU0JUJBJUE0JUU1JThFJTg2JUU1JThGJUIyI3ByZXR0eV9mb3JtYXQ=\"> 常见的 format 选项</span><sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup></p>\n<hr />\n<h4 id=\"撤销操作\"><a class=\"anchor\" href=\"#撤销操作\">#</a> 撤销操作</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--amend</span>  <span class=\"token comment\">#重新提交，且只有一次提交记录</span></pre></td></tr></table></figure><h4 id=\"远程仓库中抓取与拉取\"><a class=\"anchor\" href=\"#远程仓库中抓取与拉取\">#</a> 远程仓库中抓取与拉取</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>get fetch <span class=\"token operator\">&lt;</span>remote<span class=\"token operator\">></span></pre></td></tr></table></figure><p>此命令只会将数据下载到本地仓库 -- 它并不会自动合并或者修改你当前的工作，必须手动将其合并</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> pull</pre></td></tr></table></figure><p>此命令会自动抓取后合并该远程分支到当前分支<br />\n默认情况下， <code>git clone</code>  会自动设置本地 master 分支跟踪克隆的远程仓库的 <code>master</code>  分支 (或其它名字的默认分支)。运行 <code>git pull</code>  通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支</p>\n<hr />\n<h4 id=\"打标签\"><a class=\"anchor\" href=\"#打标签\">#</a> 打标签</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> tag  <span class=\"token comment\">#完整标签列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-l</span> <span class=\"token string\">\"v2.0\"</span>  <span class=\"token comment\"># 只显示包含 v2.0 的标签。注意加星号 (*)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-list</span> <span class=\"token string\">\"v2.0\"</span></pre></td></tr></table></figure><ul>\n<li>轻量标签：本质上是将提交和存储到一个文件中 --- 没有保存任何其它信息</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> tag v1.4-lw  <span class=\"token comment\"># 不需要添加选项</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> show v1.4-lw  <span class=\"token comment\">#查看标签信息，没有任何额外信息</span></pre></td></tr></table></figure><ul>\n<li>附注标签：是存储在 Git 数据库中的一个完整对象，它们是可以被校验的，其中包含打标签者的名字，电子邮箱地址，日期时间，此外还有一个标签信息，并且可以使用 GNU Privacy Guard 签名并验证。通常会建议创建附注标签。</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-a</span> v1.4 <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"my version 1.4\"</span> <span class=\"token comment\"># -a 表示 add，-m 表示附件信息</span></pre></td></tr></table></figure><h4 id=\"共享标签\"><a class=\"anchor\" href=\"#共享标签\">#</a> 共享标签</h4>\n<p>git push 命令并不会传送标签到远程仓库服务器上，在创建完标签后必须显式地推送标签到贡献服务器上，这个过程就像共享远程分支一样</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> push origin v1.5 <span class=\"token comment\"># 显式地推送标签到远程仓库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--tags</span> <span class=\"token comment\">#一次性推送所有不在远程仓库上的标签</span></pre></td></tr></table></figure><h4 id=\"删除标签\"><a class=\"anchor\" href=\"#删除标签\">#</a> 删除标签</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-d</span> v1.4-lw  <span class=\"token comment\"># 删除一个轻量标签，但并不会从远程仓库移除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token operator\">&lt;</span>remote<span class=\"token operator\">></span> :refs/tags/v1.4-lw  <span class=\"token comment\">#更新远程仓库</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 第二行或者</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token operator\">&lt;</span>remote<span class=\"token operator\">></span> <span class=\"token parameter variable\">--delete</span> <span class=\"token operator\">&lt;</span>tagname<span class=\"token operator\">></span></pre></td></tr></table></figure><h4 id=\"命令别名\"><a class=\"anchor\" href=\"#命令别名\">#</a> 命令别名</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.co checkout</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.br branch</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.ci commit</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.st status</pre></td></tr></table></figure><hr />\n<h4 id=\"修改分支名-2\"><a class=\"anchor\" href=\"#修改分支名-2\">#</a> 修改分支名</h4>\n<p>首先保证本地代码是最新的</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> oldbranchName newbranchname <span class=\"token comment\">#修改本地分支名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push origin :oldbranchName  <span class=\"token comment\">#删除远程分支</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--delete</span> oldbranchName  <span class=\"token comment\">#或者删除远程分支</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#改名后的本地分支推送到远程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> push --set-uostream origin newbranchname</pre></td></tr></table></figure><hr />\n<ul>\n<li>Workspace ：工作区</li>\n<li>Index/Stage：暂存区</li>\n<li>Repository: 仓库区 (或本地仓库)</li>\n<li>Remote：远程仓库<br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsY0YabUMSXt2xbpITduhdCmRbmErzicx7hkKfAXmOeNB9dOthFSKeicnDwLhzY23DpDaQkZIZbjvNQ/0?wx_fmt=png\" alt=\"Git命令\" title=\"git命令流程\" /></li>\n</ul>\n<hr />\n<h3 id=\"改名文件并将这个改名放入暂存区\"><a class=\"anchor\" href=\"#改名文件并将这个改名放入暂存区\">#</a> 改名文件并将这个改名放入暂存区</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">mv</span> <span class=\"token punctuation\">[</span>file-original<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>file-renamed<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><hr />\n<h3 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h3>\n<ul>\n<li><a href=\"https://git-scm.com/book/zh/v2\"><strong>GiT-book 中文</strong></a><sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NoYXJ0LnpoZW5nbGluZ2x1LmNuL3BhZ2VzLzYzNTA4OC8=\">Git 笔记</span><sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup></li>\n</ul>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9naXRpZ25vcmU=\">https://github.com/github/gitignore</span> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyL0dpdC0lRTUlOUYlQkElRTclQTElODAtJUU2JTlGJUE1JUU3JTlDJThCJUU2JThGJTkwJUU0JUJBJUE0JUU1JThFJTg2JUU1JThGJUIyI3ByZXR0eV9mb3JtYXQ=\">https://git-scm.com/book/zh/v2/Git - 基础 - 查看提交历史 #pretty_format</span> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3Yy\">https://git-scm.com/book/zh/v2</span> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cDovL2NoYXJ0LnpoZW5nbGluZ2x1LmNuL3BhZ2VzLzYzNTA4OC8=\">http://chart.zhenglinglu.cn/pages/635088/</span> <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "计算机科学",
                "Git分布式版本控制",
                "Git",
                "编程语言"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%B3%9B%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-1/cpp%E6%B3%9B%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/",
            "title": "C++泛化程序设计",
            "date_published": "2023-02-23T04:01:09.000Z",
            "content_html": "<h4 id=\"泛型程序设计\"><a class=\"anchor\" href=\"#泛型程序设计\">#</a> 泛型程序设计</h4>\n<ul>\n<li>编程不依赖于具体数据类型的程序</li>\n<li>将算法从特定的数据结构中抽象出来，成为通用的 C++ 的模块为泛型程序设计奠定关键基础</li>\n</ul>\n<h4 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h4>\n<ul>\n<li>在 <code>C++ STL</code>  库中用 &quot;概念&quot; 来界定具备一定功能的数据类型\n<ul>\n<li>将 “可以比大小的所有数据类型 (有比较运算符)“这一概念记为 <code>Comparable</code></li>\n<li>将” 具有共有的复制构造函数并可以用‘=’赋值的数据类型 “这一概念记为 <code>Assignable</code></li>\n<li>将 “可以比大小，具有公有的复制构造函数并可以用’=‘赋值的所有数据类型” 这个概念记作 <code>Sortable</code></li>\n</ul>\n</li>\n<li>对于两个不同的概念 A 和 B，如果概念 A 所需求的所有功能也是概念 B 所需求的功能，那么就说概念 B 是概念 A 的子概念\n<ul>\n<li><code>sortable</code>  是 Comparable 的子概念，也是 <code>Assignable</code>  的子概念</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"模型\"><a class=\"anchor\" href=\"#模型\">#</a> 模型</h4>\n<ul>\n<li>(model): 符合一个概念的数据类型称为该概念的模型\n<ul>\n<li>int 是 Comparable 概念的模型</li>\n<li>静态数组类型不是 Assignable 概念的模型 (无法用 &quot;=&quot; 给整个静态数组赋值 &quot;)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"用概念做模型参数名\"><a class=\"anchor\" href=\"#用概念做模型参数名\">#</a> 用概念做模型参数名</h4>\n<ul>\n<li>为概念赋予一个名称，并使用该名称作为模版参数名</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 表示 insertionSort 这样一个函数模版的原型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sortable</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">insertSort</span><span class=\"token punctuation\">(</span>Sortable a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbu9gl5iaXpZfp2frL7XicianeJicK9Nz6uMGxGSxUcoLpRlEfENRibf3S2jFia1qA04ORlHquAl1z3JEXCQ/0?wx_fmt=png\" alt=\"STL组件之间的关系\" title=\"STL组件之间的关系\" /></p>\n<h4 id=\"stl\"><a class=\"anchor\" href=\"#stl\">#</a>  <code>STL</code></h4>\n<ul>\n<li><code>STL</code> : 标准模板库 (Standard Template Library 简称 <code>STL</code> ) 提供了一些非常常用的数据结构和算法， <code>STL</code>  定义了一套概念体系，为泛化程序设计提供了逻辑基础</li>\n<li><code>STL</code>  中的各个类模版，函数模版的参数都是用这个体系概念来规定的</li>\n<li>使用 <code>STL</code>  模版，类型参数既可以是 <code>C++标准库</code> 中已有的类型，也可以是自己定义的类型 - 只要这些类型是所要求概念的模型</li>\n</ul>\n<h4 id=\"stl的基本组件\"><a class=\"anchor\" href=\"#stl的基本组件\">#</a>  <code>STL</code>  的基本组件</h4>\n<ul>\n<li>容器 (container)</li>\n<li>迭代器 (iterator)</li>\n<li>函数对象 (function object)</li>\n<li>算法 (algorithms)</li>\n</ul>\n<h4 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h4>\n<ul>\n<li>Iterators (迭代器) 是算法和容器的桥梁\n<blockquote>\n<p>将迭代器作为算法的参数，通过迭代器来访问容器而不是把容器直接作为算法的参数</p>\n</blockquote>\n</li>\n<li>将函数对象作为算法的参数而不是将函数所执行的运算作为算法的一部分</li>\n<li>使用 <code>STL</code>  中提供的或自定义的迭代器和函数对象，配合 <code>STL</code>  算法，可以组合出各种各样的功能</li>\n<li>迭代器泛化的指针</li>\n<li>提供了顺序访问容器中每个元素的方法</li>\n<li>可以使用 &quot;++&quot; 运算符来获得指向下一个元素的迭代器</li>\n<li>可以使用 &quot;*&quot; 运算符访问一个迭代器所指向的元素，如果元素类型是类或结构体，还可以使用 &quot;-&gt;&quot; 运算符来直接访问该元素的一个成员</li>\n<li>有些迭代器还支持通过 &quot;--&quot; 运算符获得指向上一个元素的迭代器</li>\n<li>有些迭代器是泛化的指针：指针也具有同样的特性，因此指针本身就是一种迭代器</li>\n<li>使用独立于 <code>STL</code>  容器的迭代器，需要包含头文件 <code>&lt;iterator&gt;</code></li>\n</ul>\n<h4 id=\"容器\"><a class=\"anchor\" href=\"#容器\">#</a> 容器</h4>\n<ul>\n<li>容纳，包含一组元素的对象</li>\n<li>基本容器类模版\n<ul>\n<li>顺序容器</li>\n</ul>\n<blockquote>\n<p><code>array</code>  (数组), <code>vector</code>  (向量), <code>deque</code>  (双端队列), <code>forward_list</code>  (单链表), <code>list</code>  (列表)</p>\n</blockquote>\n<ul>\n<li>(有序) 关联容器</li>\n</ul>\n<blockquote>\n<p><code>set</code>  (集合), <code>multiset</code>  (多重集合), <code>map</code>  (映射), <code>multimap</code>  (多重 (可重复) 映射)</p>\n</blockquote>\n<ul>\n<li>无序关联容器</li>\n</ul>\n<blockquote>\n<p><code>unordered_set</code>  (无序集合), <code>unordered_multiset</code>  (无序多重集合)<br />\n <code>unordered_map</code>  (无序映射), <code>unorder_multimap</code>  (无序多重映射)</p>\n</blockquote>\n</li>\n<li>容器适配器</li>\n</ul>\n<blockquote>\n<p><code>stack</code>  (栈), <code>queue</code>  (队列), <code>priority_queue</code>  (优先队列)</p>\n</blockquote>\n<ul>\n<li>使用容器，需要包含对应的头文件</li>\n</ul>\n<h4 id=\"函数对象\"><a class=\"anchor\" href=\"#函数对象\">#</a> 函数对象</h4>\n<ul>\n<li>一个行为类似函数的对象，对它可以像调用函数一样调用</li>\n<li>函数对象时泛化的函数：任何普通的函数和任何重载了 “()” 运算符的类的对象都可以作为函数对象使用</li>\n<li>使用 <code>STL</code>  的函数对象，需要包含头文件 <code>&lt;functional&gt;</code></li>\n</ul>\n<h4 id=\"transform-算法\"><a class=\"anchor\" href=\"#transform-算法\">#</a> transform 算法</h4>\n<ul>\n<li>transform 算法 <code>遍历first和last两个迭代器所指向的元素</code> ，</li>\n<li>将每个元素的值作为函数对象 op 的参数</li>\n<li>将 <code>op</code>  的返回值通过迭代器 <code>result</code>  顺序输出</li>\n<li>遍历完成后 <code>result迭代器</code> 指向的是输出的最后一个元素的下一个位置，transform 会将迭代器返回</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Inputlterator</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Outputlterator</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnaryFunction</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Outputlterator <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>InputLterator first<span class=\"token punctuation\">,</span>Inputlterator<span class=\"token punctuation\">,</span>Outputlterator result<span class=\"token punctuation\">,</span>UnaryFunction op<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>first<span class=\"token operator\">!=</span>last<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>first<span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token operator\">*</span>result <span class=\"token operator\">=</span> <span class=\"token function\">op</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"算法algorithms\"><a class=\"anchor\" href=\"#算法algorithms\">#</a> 算法 (algorithms)</h4>\n<ul>\n<li><code>STL</code>  包含 70 多种算法\n<ul>\n<li>例如：排序算法，消除算法，计数算法，变换算法，置换算法和容器管理等</li>\n</ul>\n</li>\n<li>可以广泛用于不同的对象和内置的数据类型</li>\n<li>使用 <code>STL</code>  算法，需要包含头文件 <code>&lt;algorithm&gt;</code></li>\n</ul>\n<h4 id=\"例从标准输入读入几个整数存入向量容器输出相反数\"><a class=\"anchor\" href=\"#例从标准输入读入几个整数存入向量容器输出相反数\">#</a> 例：从标准输入读入几个整数，存入向量容器，输出相反数</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span>\t\t<span class=\"token comment\">// 向量</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iterator></span>  <span class=\"token comment\">// 迭代器</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span>  <span class=\"token comment\">// 算法</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span> <span class=\"token comment\">// 函数对象</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 容器</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"## \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">negate</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 算法，negate 取相反数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"迭代器-2\"><a class=\"anchor\" href=\"#迭代器-2\">#</a> 迭代器</h4>\n<ul>\n<li>迭代器是算法和容器的桥梁\n<ul>\n<li>迭代器用作访问容器中的元素</li>\n<li>算法不直接操作容器中的数据，而是通过 <code>迭代器</code> 间接操作</li>\n</ul>\n</li>\n<li>算法和容器独立\n<ul>\n<li>添加新的算法，无需影响容器的实现</li>\n<li>添加新的容器，原有的算法也能适用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"输入迭代器和输出迭代器\"><a class=\"anchor\" href=\"#输入迭代器和输出迭代器\">#</a> 输入迭代器和输出迭代器</h4>\n<ul>\n<li>输入迭代器\n<ul>\n<li><code>istream_iterator&lt;T&gt;</code></li>\n<li>以输入流 (如 <code>cin</code>  为参数构造)</li>\n<li>可用 *(p++) 获取下一个输入的元素</li>\n</ul>\n</li>\n<li>输出流迭代器\n<ul>\n<li><code>ostream_iterator&lt;T&gt;</code></li>\n<li>构造时需要提供输出流 (如 <code>cout</code> )</li>\n<li>可用 <code>(*p++)=x</code>  将 <code>x</code>  输出到输出流</li>\n</ul>\n</li>\n<li>二者都属于适配器\n<ul>\n<li>适配器是用来为已有对象提供新的接口的对象</li>\n<li>输入流适配器和输出流适配器为流对象提供了迭代器的接口</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 从标准输入读入几个实数，分别输出它们的平方</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iterator></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 求平方的函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 从标准输入读入若干个实数，分别将它们的平方输出</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">istream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">istream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 头，尾，写入结果，函数处理</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 头：输入流迭代器，double， 关联到 cin</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 尾没有构造函数，不给为空，---- 指向输入流结束</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 写入结果:cout  \"\\t\" 两个输出项之间的分隔符</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 函数处理:square</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"迭代器的区别\"><a class=\"anchor\" href=\"#迭代器的区别\">#</a> 迭代器的区别</h4>\n<ul>\n<li>两个迭代器表示一个区间:[ <code>p1,p2</code> )  包含 <code>p1</code>  不包含 <code>p2</code></li>\n<li><code>STL</code>  算法常以 <code>迭代器的区间</code> 作为输入，传递输入数据</li>\n<li>合法的区间\n<ul>\n<li><code>p1</code>  经过 n 次 <code>(n&gt;0)</code>  自增 (++) 操作后满足 <code>p1==p2</code> ;</li>\n</ul>\n</li>\n<li>区间包含 <code>p1</code> ，但不包含 <code>p2</code></li>\n</ul>\n<h4 id=\"综合运用迭代器示例\"><a class=\"anchor\" href=\"#综合运用迭代器示例\">#</a> 综合运用迭代器示例</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iterator></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 将来自输入 迭代器的 n 个 T 类型数值排序，将结果 通过输出迭代器 result 输出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputIterator</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">OutputIterator</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mySort</span><span class=\"token punctuation\">(</span>InputIterator first<span class=\"token punctuation\">,</span>InputIterator last<span class=\"token punctuation\">,</span>OutputIterator result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 通过输入迭代器将输入数据存入向量容器 s 中</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> first <span class=\"token operator\">!=</span> last<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>first<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">//push_back 依次插入元素，直到结束</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将数据放入向量容器 s 中</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 对 s 进行排序，sort 函数的参数必须是随机访问迭代器</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将 s 序列通过输出迭代器输出</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 将 s 数组的内容排序后输出</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">double</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token generic-function\"><span class=\"token function\">mySort</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 从标准输入读入若干整数，ctrl+z 结束输入</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token generic-function\"><span class=\"token function\">mySort</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">istream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">istream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"迭代器的辅助函数\"><a class=\"anchor\" href=\"#迭代器的辅助函数\">#</a> 迭代器的辅助函数</h4>\n<ul>\n<li><code>advance(p,n)</code>\n<ul>\n<li>对 p 执行 n 次自增操作</li>\n</ul>\n</li>\n<li><code>distance(first,last)</code>\n<ul>\n<li>计算两个迭代器 first 和 last 的距离，即对 <code>first</code>  执行多少次 &quot;++&quot; 操作后，能使 <code>first==last</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"容器的基本功能与分类\"><a class=\"anchor\" href=\"#容器的基本功能与分类\">#</a> 容器的基本功能与分类</h4>\n<blockquote>\n<p>容器类是容纳 ，包含一组元素或元素集合的对象。基于容器中元素的组织方式： <code>顺序容器，关联容器</code> <br />\n按照与容器所关联的迭代器类型划分:  <code>可逆容器-&gt;随机访问容器</code></p>\n</blockquote>\n<h4 id=\"容器的分类\"><a class=\"anchor\" href=\"#容器的分类\">#</a> 容器的分类</h4>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtxASiaP0Zux0l2BKlicrl5icIVO7BbToPdxmR4gT37PhicylHFEwvxwcplXyNEnc2OqI2yR9jicpANicwQ/0?wx_fmt=png\" alt=\"容器的分类\" title=\"容器的分类\" /><br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtxASiaP0Zux0l2BKlicrl5icIL0yADmWT72fO7J4eHqTNXUDnTKXhqbkbCTQaD1iaicfksrxgcGcicjpgw/0?wx_fmt=png%22%E5%AE%B9%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB%22\" alt=\"容器的分类\" /></p>\n<h4 id=\"容器的通用功能\"><a class=\"anchor\" href=\"#容器的通用功能\">#</a> 容器的通用功能</h4>\n<ul>\n<li>容器的通用功能\n<ul>\n<li>用默认构造函数构造空容器</li>\n<li>支持关系运算符: <code> ==,!=,&lt;,&lt;=,&gt;,&gt;=</code></li>\n<li>begin (),end (): 获得容器首尾常迭代器</li>\n<li><code>cbegin(),cend()</code> : 获取容器首，尾常迭代器，不需要改变容器时更安全</li>\n<li>clear (): 将容器清空</li>\n<li>empty (): 判断容器是否为空</li>\n<li>size (): 得到容器元素个数</li>\n<li><code>s1.swap(s2)</code> : 将 <code>s1</code>  和 <code>s2</code>  两个容器内容交换</li>\n</ul>\n</li>\n<li>相关数据类型\n<ul>\n<li><code>S::iterator</code>  ：指向容器元素的迭代器类型</li>\n<li><code>S::const_iterator</code> ：常迭代器类型</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"对可逆容器的访问\"><a class=\"anchor\" href=\"#对可逆容器的访问\">#</a> 对可逆容器的访问</h4>\n<ul>\n<li><code>STL</code>  为每个可逆容器都提供了逆向迭代器\n<ul>\n<li><code>rbegin()</code> : 指向容器尾的逆向迭代器</li>\n<li><code>rend()</code> : 指向容器首的逆向迭代器</li>\n</ul>\n</li>\n<li>逆向迭代器的类型名的表示方式如下 (S 表示容器类型)\n<ul>\n<li><code>S::reverse_iterator</code> : 逆向迭代器类型</li>\n<li><code>S::const_reverse_iterator</code> : 逆向常迭代器类型</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"顺序容器\"><a class=\"anchor\" href=\"#顺序容器\">#</a> 顺序容器</h4>\n<ul>\n<li><code>STL</code>  中的顺序容器\n<ul>\n<li>向量 ( <code>vecctor</code> )</li>\n<li>双端队列 ( <code>deque</code> )</li>\n<li>列表 (list)</li>\n<li>单向链表 (forward_list)</li>\n<li>数组 (array)</li>\n</ul>\n</li>\n<li>元素线性排列，可以随时在指定位置插入元素和删除元素</li>\n<li>必须符合 Assignable (即具有共有的复制构造函数并可用 &quot;=&quot; 赋值)</li>\n<li>array 对象的大小固定，forward_list 有特殊的添加和删除操作</li>\n</ul>\n<h4 id=\"顺序容器的基本功能\"><a class=\"anchor\" href=\"#顺序容器的基本功能\">#</a> 顺序容器的基本功能</h4>\n<ul>\n<li>默认构造函数</li>\n<li><code>S s(n,t)</code> ; 构造一个由 n 个 t 元素构成的容器实例 s</li>\n<li><code>S s(n)</code> ; 构造一个有 n 个元素的容器实例，每个元素都是 <code>T()</code></li>\n<li><code>S s(q1,q2)</code> ; 使用将 <code>[q1,q2)</code>  区间内的数据作为 s 的元素构造 s</li>\n</ul>\n<h4 id=\"赋值函数\"><a class=\"anchor\" href=\"#赋值函数\">#</a> 赋值函数</h4>\n<blockquote>\n<p>assign 将指定的元素赋给顺序容器，顺序容器中原先的元素会被清除，赋值函数的三种形式 是与构造函数一一对应的</p>\n</blockquote>\n<ul>\n<li><code>s.assign(n,t)</code>  赋值后的容器由 n 个 t 元素构成</li>\n<li><code>s.assign(n)</code> , 赋值后的容器有 n 个元素的容器实例 s，每个元素都是 T ()</li>\n<li><code>s.assign(q1,q2)</code>  赋值后的容器的元素为 <code>[q1,q2)</code>  区间内的数据</li>\n</ul>\n<h4 id=\"插入函数\"><a class=\"anchor\" href=\"#插入函数\">#</a> 插入函数</h4>\n<blockquote>\n<p>可以一次插入一个或多个指定元素，也可以将一个迭代器区间中的序列插入，通过一个指定当前容器元素的迭代器来指示插入位置，返回值为指向新插入的元素中第一个元素的迭代器</p>\n</blockquote>\n<ul>\n<li><code>s.insert(p1,t)</code>  在 s 容器中 <code>p1</code>  所指向的位置插入一个 t 的复制，插入后的元素夹在原 <code>p1</code>  和 <code>p1-1</code>  所指向的元素之间</li>\n<li><code>s.insert(p1,n,t)</code>  在 s 容器中 <code>p1</code>  所指向的位置插入 n 个 t 的复制，插入后的元素夹在原 <code>p1</code>  和 <code>p1-1</code>  所指向的元素之间</li>\n<li><code>s.insert(p1,q1,q2)</code>  将 <code>[q1,q2)</code>  区间的元素顺序复制插入到 s 容器 <code>p1</code>  位置处，新元素夹在 <code>p1</code>  和 <code>p1-1</code>  所指向的元素之间</li>\n<li><code>s.emplace(p1,args)</code>  将参数 <code>args</code>  传递给 T 的构造函数构造新元素 t，在 s 容器中 <code>p1</code>  所指向的位置插入该元素，插入后的元素夹在原 <code>p1</code>  和 <code>p1-1</code>  所指向的元素之间</li>\n</ul>\n<h4 id=\"其它函数\"><a class=\"anchor\" href=\"#其它函数\">#</a> 其它函数</h4>\n<ul>\n<li>erase</li>\n<li>clear</li>\n<li>pop_front (只对 list 和 <code>deque</code> )</li>\n<li>pop_back</li>\n<li>首尾元素的直接访问\n<ul>\n<li>front</li>\n<li>back</li>\n</ul>\n</li>\n<li>改变大小\n<ul>\n<li>resize</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"顺序容器的基本操作\"><a class=\"anchor\" href=\"#顺序容器的基本操作\">#</a> 顺序容器的基本操作</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;list></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 输出指定顺序容器的元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 第一个输出字符，第二个传入容器类型常引用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span>  <span class=\"token function\">printContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> msg <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 从标准输入读入 10 个整数，将让门分别从 s 的头部加入</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tdeque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tcin <span class=\"token operator\">>></span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// 将 x 的数据存入到 s 当中，每次都加入到开头位置</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">printContainer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deque at first\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 用 s 容器的内容的逆序构造列表容器</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">l</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">printContainer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list at first\"</span><span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 将列表容器 l 的每相邻顺序颠倒 </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iter <span class=\"token operator\">!=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 遍历 l</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>iter<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\titer <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除该元素</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tl<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>iter<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">printContainer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list at list\"</span><span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 用列表容器 l 的内容给 s 赋值，将 s 输出</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">printContainer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deque at last\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>0 9 8 6 4 3 2 1 5 4</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>deque at first:0 9 8 6 4 3 2 1 5 4</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>list at first:4 5 1 2 3 4 6 8 9 0</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>list at list:5 4 2 1 4 3 8 6 0 9</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>deque at last:5 4 2 1 4 3 8 6 0 9</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"顺序容器的特点\"><a class=\"anchor\" href=\"#顺序容器的特点\">#</a> 顺序容器的特点</h4>\n<h5 id=\"向量vector\"><a class=\"anchor\" href=\"#向量vector\">#</a> 向量 ( <code>vector</code> )</h5>\n<ul>\n<li>特点:\n<ul>\n<li>一个可以扩展的 <code>动态数组</code></li>\n<li>随机访问，在尾部插入或删除元素快</li>\n<li>在中间或头部插入或 删除元素慢</li>\n</ul>\n</li>\n<li>向量的容量\n<ul>\n<li>容量 (capacity): 实际分配空间的大小</li>\n<li><code>s.capacity()</code> ：返回当前容量</li>\n<li><code>s.reserve()</code> ：若容量 小于 n 则对 s 进行扩展，使其容量至少为 n</li>\n<li><code>s.shrink_to_fit()</code> : 回收未使用的元素空间，即 size 和 capacity 函数返回值相等</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"双端队列deque\"><a class=\"anchor\" href=\"#双端队列deque\">#</a> 双端队列 ( <code>deque</code> )</h5>\n<ul>\n<li>特点:\n<ul>\n<li>在两端插入和删除元素快</li>\n<li>在中间插入或 删除元素慢</li>\n<li>随机访问较快，但比向量容量慢</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 通过双端队列实现奇偶排序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 先按照从大到 小顺序输出计数，再按照从小到 大顺序输出偶数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tistream_iterator<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token function\">i1</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i2<span class=\"token punctuation\">;</span><span class=\"token comment\">// 建立一对输入流迭代器</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token function\">s1</span><span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">,</span> i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 通过输入迭代器从标准输入流中输入数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将输入的整数排序</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tdeque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 循环遍历 s1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>iter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\ts2<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 偶数放到 s2 尾部</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\ts2<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 奇数放到 s2 首部</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 将 s2 的结果输出</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"列表\"><a class=\"anchor\" href=\"#列表\">#</a> 列表</h4>\n<ul>\n<li>特点\n<ul>\n<li>在任意位置插入和删除元素都很快</li>\n<li><code>不</code> 支持随机访问 (链表)</li>\n</ul>\n</li>\n<li>结合 ( <code>splice</code> ) 操作\n<ul>\n<li><code>s1.splice(p,s2,q1,q2):</code>  将 <code>s2</code>  中 <code>[q1,q2)</code>  移动到 p 所指向元素之前</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;list></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstring names1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"helen\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lucy\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Susan\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstring names2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"David\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Levin\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Mike\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 用 names1 数组的内容构造列表 s1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span>names1<span class=\"token punctuation\">,</span> names1 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 用 names2 数组的内容够着列表 s2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span>names2<span class=\"token punctuation\">,</span> names2 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 将 s1 的第一个元素放到 s2 的最后</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ts2<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter1 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//iter1 指向 s1 首</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">advance</span><span class=\"token punctuation\">(</span>iter1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//iter1 前进 2 个元素，它将指向 s1 第三个元素</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter2 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//iter2 指向 s2 首</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token operator\">++</span>iter2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//iter2 前进一个元素，它将指向 s2 的第二个元素</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter3 <span class=\"token operator\">=</span> iter2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用 iter2 初始化 iter3</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">advance</span><span class=\"token punctuation\">(</span>iter3<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//iter3 前进 2 个元素，它将指向 s2 的第 4 个元素</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 将 [iter2,iter3) 范围内的结点接到 s1 中 iter1 指向的结点前</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>iter1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> iter2<span class=\"token punctuation\">,</span> iter3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 分别将 s1 和 s2 输出</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostream_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>helen lucy David Levin Susan</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Bob Mike Alice</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"单向链表forward_list\"><a class=\"anchor\" href=\"#单向链表forward_list\">#</a> 单向链表 ( <code>forward_list</code> )</h4>\n<ul>\n<li>单向链表每个结点只有指向下个结点的指针，没有简单的方法来获取一个节点的前驱</li>\n<li><code>未定义insert,emplace和erase操作</code> ，而定义了 insert_after,emplace_after 和 erase_after 操作，其参数与 list 的 insert， <code>emmplace</code>  和 erase 相同，但并不是插入或删除迭代器 <code>p1</code>  所指向的元素，而是对 <code>p1</code>  所只元素之后的结点进行操作</li>\n<li>不支持 size 操作</li>\n</ul>\n<h4 id=\"数组array\"><a class=\"anchor\" href=\"#数组array\">#</a> 数组 (array)</h4>\n<ul>\n<li><code>array</code>  是对内置数组的封装，提供了更安全，更方便的使用数组的方式</li>\n<li>array 的对象的 <code>大小是固定</code> 的，定义时除了需要指定元素类型，还需要指定容器大小</li>\n<li>不能动态地改变容器大小</li>\n</ul>\n<h4 id=\"顺序容器的比较\"><a class=\"anchor\" href=\"#顺序容器的比较\">#</a> 顺序容器的比较</h4>\n<ul>\n<li>如果需要执行大量的随机访问操作，而且当扩展容器时只需要向容器尾部加入新的元素，就应当选择向量容器 vector</li>\n<li>如果需要少量的随机访问操作，需要 在容器两端插入或删除操作，则应当选择双端队列容器 <code>deque</code> ;</li>\n<li>如果不需要对容器进行随机访问，但是需要在中间位置插入或删除元素，就应当选择列表容器 list 或 forward_list</li>\n<li>如果需要数组，array 相对于内置数组类型而言，是一种更安全，更容易使用的数组类型</li>\n</ul>\n<h4 id=\"顺序容器的插入迭代器\"><a class=\"anchor\" href=\"#顺序容器的插入迭代器\">#</a> 顺序容器的插入迭代器</h4>\n<ul>\n<li>用于向容器头部，尾部或中间指定位置插入元素的迭代器</li>\n<li>包括前插迭代器 ( <code>front_inserter)</code> , 后插迭代器 ( <code>back_inserter</code> ) 和任意位置插入迭代器 (inserter)</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>back_inserter <span class=\"token function\">iter</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过 iter 把 5 插入 s 末尾</span></pre></td></tr></table></figure><h4 id=\"顺序容器的适配器\"><a class=\"anchor\" href=\"#顺序容器的适配器\">#</a> 顺序容器的适配器</h4>\n<blockquote>\n<p>以顺序容器的基础构建一些常用数据结构，是对顺序容器的封装</p>\n</blockquote>\n<ul>\n<li>栈 (stack)：最先压入的元素最后被弹出</li>\n<li>队列 (queue)：最先压入的元素最先被弹出</li>\n<li>优先级队列 <code>(priority_qyeye)</code> : 最 &quot;大&quot; 的 元素最先被弹出</li>\n</ul>\n<h4 id=\"栈和队列模版\"><a class=\"anchor\" href=\"#栈和队列模版\">#</a> 栈和队列模版</h4>\n<ul>\n<li>栈模版</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sequence</span> <span class=\"token operator\">=</span> deque<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">></span><span class=\"token keyword\">class</span> <span class=\"token class-name\">stack</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>队列模版</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">FrontInsertionSequence</span> <span class=\"token operator\">=</span> deque<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">></span><span class=\"token keyword\">class</span> <span class=\"token class-name\">queue</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>栈可以用任何一种顺序容器作为基础容器，而队列只允许用前插顺序容器 (双端队列或列表)</li>\n</ul>\n<h4 id=\"栈和队列共同支持的操作\"><a class=\"anchor\" href=\"#栈和队列共同支持的操作\">#</a> 栈和队列共同支持的操作</h4>\n<ul>\n<li><code>s1 op s2</code>    op 可以是 ==,!=,&lt;,&lt;=,&gt;,&gt;= 之一，它会对两个容器适配器之间的元素按字典序进行比较</li>\n<li><code>s.size() </code> 返回 s 的元素个数</li>\n<li><code>s.empty() </code>  返回 s 是否为空</li>\n<li><code>s.push(t)</code>    将元素 t 压入 s 中</li>\n<li><code>s.pop()  </code> 将一个元素从 s 中弹出，对于栈来说，每次弹出的是最后被压入的元素，而对于队列，每次被弹出的是最先被 压入的元素</li>\n<li>不支持迭代器，因为他们不允许对惹你元素进行访问</li>\n</ul>\n<h4 id=\"栈和队列不同的操作\"><a class=\"anchor\" href=\"#栈和队列不同的操作\">#</a> 栈和队列不同的操作</h4>\n<ul>\n<li>栈的操作\n<ul>\n<li><code>s.top()</code>  返回栈顶元素的引用</li>\n</ul>\n</li>\n<li>队列操作\n<ul>\n<li><code>s.front()</code>  获得队头元素的引用</li>\n<li><code>s.back()  </code> 获得队尾元素的引用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"栈反向输出单词\"><a class=\"anchor\" href=\"#栈反向输出单词\">#</a> 栈反向输出单词</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstring str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tcin <span class=\"token operator\">>></span> str<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 从键盘输入一个字符串</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 将字符串的每个元素顺序压入栈中</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>string<span class=\"token double-colon punctuation\">::</span>iterator iter <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>iter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 将栈中的元素顺序弹出并输出</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"优先级队列\"><a class=\"anchor\" href=\"#优先级队列\">#</a> 优先级队列</h4>\n<ul>\n<li>优先级队列 也像栈和队列一样支持元素的压入和弹出，但元素弹出的顺序与 元素的大小 有关，每次弹出的总是 <code>容器中最&quot;大&quot;的一个元素</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sequence</span> <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">priority_queue</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>优先级队列的基础容器必须是支持随机访问的顺序容器</li>\n<li>支持栈和队列的 size,empty,push,pop 几个成员函数，用法与栈和队列相同</li>\n<li>优先级队列并不支持比较操作</li>\n<li>与栈类似，优先级队列提供一个 top 函数，可以获得下一个即将被弹出元素的引用</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "C++",
                "郑莉老师C++语言程序设计",
                "编程语言",
                "C++",
                "computer-science",
                "泛化程序设计"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/hello-world/",
            "url": "https://www.blog.foryouos.cn/hello-world/",
            "title": "Hello World",
            "date_published": "2023-02-22T13:19:34.468Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}