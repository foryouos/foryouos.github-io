{
    "version": "https://jsonfeed.org/version/1",
    "title": "瓶子的跋涉",
    "subtitle": "YuHeShui",
    "icon": "https://www.blog.foryouos.cn/assets/favicon.ico",
    "description": "瓶子的跋涉 & 编程笔记",
    "home_page_url": "https://www.blog.foryouos.cn",
    "items": [
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-5/Qt%E4%BD%BF%E7%94%A8WinIO/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-5/Qt%E4%BD%BF%E7%94%A8WinIO/",
            "title": "Qt实现WinIO",
            "date_published": "2023-08-27T00:20:43.000Z",
            "content_html": "<h1 id=\"winio头文件\"><a class=\"anchor\" href=\"#winio头文件\">#</a> WinIO 头文件</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">WINIO_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WINIO_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//#include \"..\\drv\\winio_nt.h\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"winio_nt.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">WINIO_DLL</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WINIO_API</span> <span class=\"token expression\"><span class=\"token function\">_declspec</span><span class=\"token punctuation\">(</span>dllimport<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WINIO_API</span> </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">//// 初始化 WinIO 函数库</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  WINIO_API bool _stdcall <span class=\"token function\">InitializeWinIo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 关闭 WinIO 函数库  </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  WINIO_API <span class=\"token keyword\">void</span> _stdcall <span class=\"token function\">ShutdownWinIo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 将物理内存映射到一个 32 位应用程序的线性地址空间</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  WINIO_API PBYTE _stdcall <span class=\"token function\">MapPhysToLin</span><span class=\"token punctuation\">(</span>tagPhysStruct <span class=\"token operator\">&amp;</span>PhysStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 物理映射线性：使用此函数解除原先使用 MapPhysToLin 函数映射的一段物理内存区域，该区域被映射到</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 所属的线性地址空间</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  WINIO_API bool _stdcall <span class=\"token function\">UnmapPhysicalMemory</span><span class=\"token punctuation\">(</span>tagPhysStruct <span class=\"token operator\">&amp;</span>PhysStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 从指定的物理地址读取一个双字数据</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  WINIO_API bool _stdcall <span class=\"token function\">GetPhysLong</span><span class=\"token punctuation\">(</span>PBYTE pbPhysAddr<span class=\"token punctuation\">,</span> PDWORD pdwPhysVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token comment\">// 将一个双字型数据写入指定的物理地址</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  WINIO_API bool _stdcall <span class=\"token function\">SetPhysLong</span><span class=\"token punctuation\">(</span>PBYTE pbPhysAddr<span class=\"token punctuation\">,</span> DWORD dwPhysVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token comment\">// 从一个输入或输出端口读取一个字节 / 字 / 双字数据</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  WINIO_API bool _stdcall <span class=\"token function\">GetPortVal</span><span class=\"token punctuation\">(</span>WORD wPortAddr<span class=\"token punctuation\">,</span> PDWORD pdwPortVal<span class=\"token punctuation\">,</span> BYTE bSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">// 写一个字节 / 字 / 双字的数据写入输入或输出接口</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  WINIO_API bool _stdcall <span class=\"token function\">SetPortVal</span><span class=\"token punctuation\">(</span>WORD wPortAddr<span class=\"token punctuation\">,</span> DWORD dwPortVal<span class=\"token punctuation\">,</span> BYTE bSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token comment\">// 安装 WinIODriver  </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  WINIO_API bool _stdcall <span class=\"token function\">InstallWinIoDriver</span><span class=\"token punctuation\">(</span>PWSTR pszWinIoDriverPath<span class=\"token punctuation\">,</span> bool IsDemandLoaded <span class=\"token operator\">=</span> false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">// 移除 WinIODriver</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  WINIO_API bool _stdcall <span class=\"token function\">RemoveWinIoDriver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">extern</span> HANDLE hDriver<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">extern</span> bool IsWinIoInitialized<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">extern</span> bool g_Is64BitOS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>bool _stdcall <span class=\"token function\">StartWinIoDriver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>bool _stdcall <span class=\"token function\">StopWinIoDriver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h1 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h1>\n<h2 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h2>\n<blockquote>\n<p>本函数初始化 <code>WioIO函数库</code> 。</p>\n<p>必须在调用所有其他 <code>函数之前</code> 调用 <code>本函数</code> 。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bool _stdcall <span class=\"token function\">InitializeWinlo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"关闭winio\"><a class=\"anchor\" href=\"#关闭winio\">#</a> 关闭 WinIO</h2>\n<blockquote>\n<p>在内存中 <code>清除WinIO</code>  库，必须在 <code>中止函数之</code> 前或者 <code>不需要WinIO库</code> 时调用</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> _stdcall <span class=\"token function\">ShutdownWinIo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"读\"><a class=\"anchor\" href=\"#读\">#</a> 读</h2>\n<blockquote>\n<p>从一个 <code>输入</code> 或 <code>输出端口</code> 读取 <code>一个</code> 字 <code>节/字/双字</code> 数据</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bool _stdcall <span class=\"token function\">GetPortVal</span><span class=\"token punctuation\">(</span>WORD wPortAddr<span class=\"token punctuation\">,</span>PDWORD pwdPortVal<span class=\"token punctuation\">,</span>BYTE bSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//wPortAddr : 输入输出端口地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//pdwPortVal : 指向双字变量的指针， 接收从端口得到的数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//bSize : 需要读的字节数，可以是 1 (BYTE),2 (WORD) or 4 (DWORD)</span></pre></td></tr></table></figure><h2 id=\"写\"><a class=\"anchor\" href=\"#写\">#</a> 写</h2>\n<blockquote>\n<p>将 <code>一个字节/字/双字</code> 的数据 <code>写入输入或输出</code> 接口</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bool _stdcall <span class=\"token function\">SetPortVal</span><span class=\"token punctuation\">(</span>WORD wPortAddr<span class=\"token punctuation\">,</span> DWORD dwPortVal<span class=\"token punctuation\">,</span> BYTE bSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//wPortAddr  输入输出口地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//dwPortVal  要写入口的数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//bSize  要写的数据个数 可以是 1 (BYTE),2 (WORD) or 4 (DWORD)</span></pre></td></tr></table></figure><h2 id=\"物理内存映射\"><a class=\"anchor\" href=\"#物理内存映射\">#</a> 物理内存映射</h2>\n<blockquote>\n<p>将 <code>物理内存映射</code> 到一个 <code>32位应用程序</code> 的 <code>线性地址空间</code></p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PBYTE _stdcall <span class=\"token function\">MapPhysToLin</span><span class=\"token punctuation\">(</span>PBYTE pbPhysAddr<span class=\"token punctuation\">,</span> DWORD dwPhysSize<span class=\"token punctuation\">,</span> HANDLE <span class=\"token operator\">*</span>pPhysicalMemoryHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//pbPhyAddr  -- 指向物理地址的指针</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//dwPhySize -- 需要映射的字节数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//uPhysicalMemoryHandle 变量指针，如果调用成功，负责接收物理内存句柄，随后本句柄在调用 UnmapPhysicalMemory 函数时作为其第一个参数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 案例</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>PBYTE pbLinAddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>HANDLE PhysicalMemoryHandle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>pbLinAddr <span class=\"token operator\">=</span> <span class=\"token function\">MapPhysToLin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xA0000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65536</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>PhysicalMemoryHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>把物理地址范围 <code>0xA0000 - 0xAFFFF</code>  的地 <code>址空间映射</code> 与 <code>应用的线性地址</code> 空间。返回值为一个与物理地址 0xA0000 相关的线性地址。如出现 <code>错误</code> ，则返回值 <code>NULL</code></p>\n</blockquote>\n<h2 id=\"物理映射线性\"><a class=\"anchor\" href=\"#物理映射线性\">#</a> 物理映射线性</h2>\n<blockquote>\n<p>使用本函数解除原先使用 <code>MapPhysToLin</code>  函数映射的一段 <code>物理内存区域</code> ，该区域被映射到应用程序所属的 <code>线性地址空间</code></p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bool _stdcall <span class=\"token function\">UnmapPhysicalMemory</span><span class=\"token punctuation\">(</span>HANDLE PhysicalMemoryHandle<span class=\"token punctuation\">,</span>PBYTE pbLinAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>PhysicalMemoryHandle</code>   – <code> 物理</code> 内存区域的 <code>句柄</code> ，此参数由 MapPhysToLin 函数的调用返回</li>\n<li><code>pbLinAddr</code>  –  <code>MapPhysToLin</code>   –  函数调用 <code>返回的线性地址</code> 。</li>\n</ul>\n<h2 id=\"读双字数据\"><a class=\"anchor\" href=\"#读双字数据\">#</a> 读双字数据</h2>\n<blockquote>\n<p>从指定的 <code>物理地址</code> 读取一个 <code>双字数据</code></p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bool _stdcall <span class=\"token function\">GetPhysLong</span><span class=\"token punctuation\">(</span>PBYTE pbPhysAddr<span class=\"token punctuation\">,</span>PDWORD pdwPhysVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//pbPhysAddr  -- 指向物理地址的指针</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//pdwPhysVal  -- 指向一个双字变量的指针，接收从物理内存中传来的数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 成功 返回 非零值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 失败 返回 零值</span></pre></td></tr></table></figure><h2 id=\"双字型写入物理地址\"><a class=\"anchor\" href=\"#双字型写入物理地址\">#</a> 双字型写入物理地址</h2>\n<blockquote>\n<p>将一个 <code>双字型</code> 数据 <code>写入</code> 指定的物理地址</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bool _stdcall <span class=\"token function\">SetPhysLong</span><span class=\"token punctuation\">(</span>PBYTE pbPhysAddr<span class=\"token punctuation\">,</span>DWORD dwphysVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//pbPhysAddr  -- 指向物理地址的指针</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//pdwPhysVal  -- 指向待写入物理内存地址的双字型数据</span></pre></td></tr></table></figure><h1 id=\"getprocaddress函数\"><a class=\"anchor\" href=\"#getprocaddress函数\">#</a> GetProcAddress 函数</h1>\n<blockquote>\n<p>用于 <code>获取DLL</code>  中 <code>导出函数的地址</code>  (显式链接使用)</p>\n<p><code>GetProcAddress</code>  将 DLL 模块处理 (由 <code>LoadLibrary</code> , 或 <code>GetModuleHandle</code>  返回的 <code>参数</code> )，并采用要 <code>调用的函数的名称</code> 或 <code>函数的导出序号</code></p>\n<p>因为通过 <code>指针</code> 调用 <code>DLL函数</code> ，并且 <code>没有编译时</code> 类型检查，所以 <code>确保</code> 参数 <code>正确</code> ，以便 <code>不会</code> 超过在 <code>堆栈上</code> 分配的 <code>内存</code> 以及导致 <code>访问冲突</code> 。帮助提供类型安全的一种方法时查看 <code>导出函数</code> 的 <code>函数原型</code> ，并为函数指针创建匹配的 <code>typedef</code> 。</p>\n</blockquote>\n<h2 id=\"官方demo\"><a class=\"anchor\" href=\"#官方demo\">#</a> 官方 demo</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"windows.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">HRESULT</span> <span class=\"token punctuation\">(</span>CALLBACK<span class=\"token operator\">*</span> LPFNDLLFUNC1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">,</span>UINT<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>HRESULT <span class=\"token function\">LoadAndCallSomeFunction</span><span class=\"token punctuation\">(</span>DWORD dwParam1<span class=\"token punctuation\">,</span> UINT <span class=\"token operator\">*</span> puParam2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    HINSTANCE hDLL<span class=\"token punctuation\">;</span>               <span class=\"token comment\">// Handle to DLL</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    LPFNDLLFUNC1 lpfnDllFunc1<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Function pointer</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    HRESULT hrReturnVal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    hDLL <span class=\"token operator\">=</span> <span class=\"token function\">LoadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyDLL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> hDLL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        lpfnDllFunc1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LPFNDLLFUNC1<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hDLL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"DLLFunc1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> lpfnDllFunc1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// call the function</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            hrReturnVal <span class=\"token operator\">=</span> <span class=\"token function\">lpfnDllFunc1</span><span class=\"token punctuation\">(</span>dwParam1<span class=\"token punctuation\">,</span> puParam2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// report the error</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            hrReturnVal <span class=\"token operator\">=</span> ERROR_DELAY_LOAD_FAILED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">FreeLibrary</span><span class=\"token punctuation\">(</span>hDLL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        hrReturnVal <span class=\"token operator\">=</span> ERROR_DELAY_LOAD_FAILED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> hrReturnVal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>如何指定</code> 调用 <code>GetProcAddress时</code> 所需的函数取决于 <code>DLL的</code> 生成方式。</p>\n<p>仅当要 <code>链接到DLL</code>  使用模块定义 ( <code>.def</code> ) 文件生成，并且序号随函数在 <code>DLL.def</code>  文件的 <code>EXPORTS节</code> 中列出时，才能获取 <code>导出序号</code> 。如果 <code>DLL</code>  具有许多导出函数，则与使用函数名称相比，使用 <code>导出</code> 需要调用 <code>GetProcAddress</code>  会稍微 <code>快一些，</code> 因为导出序号充当 DLL 导出表中的索引。使用导出序号， <code>GetProcAddress</code>  可以 <code>直接查找函数</code> ，而不是将指定名称与 DLL 导出表中的函数名进行比较。但是当仅当可控制将序号分配给 <code>.def文件</code> 中的导出函数时，才应使用 <code>导出序号</code> 调用 <code>GetProcAddress</code></p>\n</blockquote>\n<h1 id=\"qt环境搭建\"><a class=\"anchor\" href=\"#qt环境搭建\">#</a> Qt 环境搭建</h1>\n<h2 id=\"pro文件\"><a class=\"anchor\" href=\"#pro文件\">#</a> pro 文件</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DEFINES <span class=\"token operator\">+=</span> WINIO_DLL</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>unix<span class=\"token operator\">|</span>win32<span class=\"token operator\">:</span> LIBS <span class=\"token operator\">+=</span> <span class=\"token operator\">-</span>L$$PWD<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span> <span class=\"token operator\">-</span>lWinIo64</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>RESOURCES <span class=\"token operator\">+=</span> \\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    source<span class=\"token punctuation\">.</span>qrc</pre></td></tr></table></figure><h2 id=\"头文件存储函数指针\"><a class=\"anchor\" href=\"#头文件存储函数指针\">#</a> 头文件存储函数指针</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">bool</span><span class=\"token punctuation\">(</span> _stdcall<span class=\"token operator\">*</span> LS_GetPhysLong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>PBYTE pbPhysAddr<span class=\"token punctuation\">,</span> PDWORD pdwPhysVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">bool</span><span class=\"token punctuation\">(</span> _stdcall<span class=\"token operator\">*</span> LS_SetPhysLong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>PBYTE pbPhysAddr<span class=\"token punctuation\">,</span> DWORD dwPhysVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">bool</span><span class=\"token punctuation\">(</span> _stdcall<span class=\"token operator\">*</span> LS_InitializeWinIo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">bool</span><span class=\"token punctuation\">(</span> _stdcall<span class=\"token operator\">*</span> LS_ShutdownWinIo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">bool</span><span class=\"token punctuation\">(</span> _stdcall<span class=\"token operator\">*</span> LS_GetPortVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>WORD wPortAddr<span class=\"token punctuation\">,</span> PDWORD pdwPortVal<span class=\"token punctuation\">,</span> BYTE bSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">bool</span><span class=\"token punctuation\">(</span> _stdcall<span class=\"token operator\">*</span> LS_SetPortVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>WORD wPortAddr<span class=\"token punctuation\">,</span> DWORD dwPortVal<span class=\"token punctuation\">,</span> BYTE bSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 对函数指针进行重定义。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>LS_GetPhysLong Lib_GetPhysLong<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>LS_SetPhysLong Lib_SetPhysLong<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>LS_InitializeWinIo Lib_InitializeWinIo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>LS_ShutdownWinIo Lib_ShutdownWinIo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>LS_SetPortVal Lib_SetPortVal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>LS_GetPortVal Lib_GetPortVal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>HMODULE m_hDllFile<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 初始化 WinIO 文件</span></pre></td></tr></table></figure><h2 id=\"函数初始化\"><a class=\"anchor\" href=\"#函数初始化\">#</a> 函数初始化</h2>\n<blockquote>\n<p>放到函数的头文件中</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 加载动态链接库，并通过 GetProcAddress 方法调用取函数空间地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// @ 传入所需的动态链接库</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 返回 m_hDllFile 将作为 GetProcAddress 去调用 WinIO 的函数地址使用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    m_hDllFile <span class=\"token operator\">=</span> <span class=\"token function\">LoadLibrary</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"WinIo64\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_hDllFile <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">Bugart</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"加载WinIo64失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 对函数指针初始化 Lib_InitializeWinIo -> InitializeWinIo</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   Lib_InitializeWinIo<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LP_InitializeWinIo<span class=\"token punctuation\">)</span><span class=\"token operator\">::</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>m_hDllFile<span class=\"token punctuation\">,</span><span class=\"token string\">\"InitializeWinIo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> Lib_InitializeWinIo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">Bugart</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load error Lib_InitializeWinIo \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//qDebug ()&lt;&lt; \"后:\"&lt;&lt; Lib_InitializeWinIo;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 函数指针初始化  Lib_ShutdownWinIo ->  ShutdownWinIo</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> \tLib_ShutdownWinIo<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LP_ShutdownWinIo<span class=\"token punctuation\">)</span><span class=\"token operator\">::</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>m_hDllFile<span class=\"token punctuation\">,</span><span class=\"token string\">\"ShutdownWinIo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> Lib_ShutdownWinIo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">Bugart</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load error Lib_ShutdownWinIo \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 函数指针初始化 Lib_GetPhysLong -> GetPhysLong</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    Lib_GetPhysLong<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LP_GetPhysLong<span class=\"token punctuation\">)</span><span class=\"token operator\">::</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>m_hDllFile<span class=\"token punctuation\">,</span><span class=\"token string\">\"GetPhysLong\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> Lib_GetPhysLong<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">Bugart</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load error Lib_GetPhysLong \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 函数        Lib_SetPhysLong  -> SetPhysLong</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    Lib_SetPhysLong<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LP_SetPhysLong<span class=\"token punctuation\">)</span><span class=\"token operator\">::</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>m_hDllFile<span class=\"token punctuation\">,</span><span class=\"token string\">\"SetPhysLong\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> Lib_SetPhysLong<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">Bugart</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load error Lib_SetPhysLong \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    Lib_SetPortVal<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LP_SetPortVal<span class=\"token punctuation\">)</span><span class=\"token operator\">::</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>m_hDllFile<span class=\"token punctuation\">,</span><span class=\"token string\">\"SetPortVal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>Lib_SetPortVal<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">Bugart</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load error Lib_SetPortVal \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 初始化操作</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    Lib_GetPortVal<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LP_GetPortVal<span class=\"token punctuation\">)</span><span class=\"token operator\">::</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>m_hDllFile<span class=\"token punctuation\">,</span><span class=\"token string\">\"GetPortVal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>Lib_GetPortVal<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">Bugart</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load error Lib_GetPortVal \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"qt-winio调用\"><a class=\"anchor\" href=\"#qt-winio调用\">#</a> Qt WinIO 调用</h1>\n<ul>\n<li>\n<p>确保自己 系统处于 <code>测试模式 </code> \\n</p>\n</li>\n<li>\n<p>以管理员权限运行 <code>CMD</code> \\n</p>\n</li>\n<li>\n<p>在输入框输入 \\n</p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bcdedit /set testsigning on <span class=\"token comment\"># 并执行 重启即可进入测试模</span></pre></td></tr></table></figure><ul>\n<li>确保使用 <code>管理员权限</code> 打开软件 \\n</li>\n<li>\n<ul>\n<li>确保 <code>使用的版本</code> 与 <code>设备型号</code> 一致 \\n</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>确保将 <code>软件</code> 目录的 <code>WinIo64.sys</code>  文件的 <code>签名</code> 安装到 <code>本地</code> 。</li>\n</ul>\n</li>\n<li>右键点击 <code>WinIo64.sys</code></li>\n<li>点击属性 \\n  * 点击上面的数字签名</li>\n<li>选择第一个签名，查看详细信息</li>\n<li>选择 <code>查看证书</code></li>\n<li>选择 <code>安装证书</code></li>\n<li>存储位置选择  <code>本地计算机</code> ，点击 <code>下一步</code></li>\n<li><code>将所有的证书都放入下列 存储</code></li>\n<li>点击浏览 ，选择 <code>受信任</code> 的根证书颁发机构</li>\n<li>点击 <code>确认</code></li>\n<li>点击 <code>下一步</code></li>\n<li>点击 <code>完成</code>   导入成功即可</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "C++",
                "Qt",
                "C++",
                "计算机科学",
                "Qt",
                "寄存器"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/BIOS/%E5%AF%84%E5%AD%98%E5%99%A8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/",
            "url": "https://www.blog.foryouos.cn/BIOS/%E5%AF%84%E5%AD%98%E5%99%A8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/",
            "title": "寄存器调试工具RU&RW的使用",
            "date_published": "2023-08-15T23:55:00.000Z",
            "content_html": "<h1 id=\"ru工具入口\"><a class=\"anchor\" href=\"#ru工具入口\">#</a> RU 工具入口</h1>\n<blockquote>\n<p><code>RU</code>  是 <code>AMI  James Wang</code>  ，其中包括 <code>IA32 X64</code>  版本的 <code>Ru.EFI</code>  和一个  <code>Windows</code>  版本的 <code> Rw.EXE</code> 。</p>\n</blockquote>\n<ul>\n<li>\n<p>U 盘格式需要是 <code>Fat32格式</code></p>\n</li>\n<li>\n<p>将 <code> Ru文件</code>  当道 <code>U盘根目录</code></p>\n</li>\n<li>\n<p>将对应的 <code> shell文件</code>  放到 <code>efi/boot/</code>  目录下</p>\n</li>\n<li>\n<p>点击 <code>Delete</code>  进入 <code> BIOS</code>   , <code>密码</code>  统一为  <code>123456</code></p>\n</li>\n<li>\n<p>进入 <code>Sava &amp; Reset </code> 页面 选中最后一个 <code>Lanch EFI shell from file system</code></p>\n</li>\n<li>\n<p>进入 <code>Shell</code>  里面之后，输入 <code>Ru.efi</code>  进入 <code>Ru寄存器</code> 即可进行 <code>相关寄存器</code> 的操作</p>\n</li>\n</ul>\n<h1 id=\"ru工具的基本使用\"><a class=\"anchor\" href=\"#ru工具的基本使用\">#</a> RU 工具的基本使用</h1>\n<p><img data-src=\"https://img-blog.csdnimg.cn/2c30016e3fb44ee2bdc344bc26c23388.png\" alt=\"RU工具主菜单\" /></p>\n<h2 id=\"file菜单\"><a class=\"anchor\" href=\"#file菜单\">#</a> File 菜单</h2>\n<blockquote>\n<p>File 菜单提供了 <code>Load Save</code>  和 <code>Compare</code>  功能，用于 <code>保存</code> 和 <code>读取当</code> 前页面的 <code>数据</code> 。</p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/c0233918adc740ce875243241767c8f6.png\" alt=\"FIle菜单\" /></p>\n<h2 id=\"config菜单\"><a class=\"anchor\" href=\"#config菜单\">#</a>  <code>Config</code>  菜单</h2>\n<blockquote>\n<p><code>Config</code>  主要进行 <code>寄存器的访问</code> ，</p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/04d04591733b4e19b4c52dadc024c399.png\" alt=\"Config菜单\" /></p>\n<h3 id=\"pci\"><a class=\"anchor\" href=\"#pci\">#</a> PCI</h3>\n<blockquote>\n<p><code>PCI</code>  可以 <code>访问PCI设备</code> ， <code>选中后</code> 输入要 <code>查看设备</code> 的  <code>Bus Dev Func</code> ：</p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/39d028428530461cafbd8bff58ea8064.png\" alt=\"查看PCI设备的Bus\" /></p>\n<h3 id=\"isa-io\"><a class=\"anchor\" href=\"#isa-io\">#</a> ISA IO</h3>\n<blockquote>\n<p><code>ISA IO</code>  是 <code>Index/Data</code>  这种形式的访问 <code>IO Port</code> , <code>Index</code>  为 <code>行列</code> 的 <code>特点</code></p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/af5ae2d7b2804cd8b5851ea3cd7c4c20.png\" alt=\"ISA IO\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/751b0bfab72c4426af5beade0682ea4c.png\" alt=\"ISA IO选项\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/db9c46b2634243b0ad3a29ae7bc9ff47.png\" alt=\"查看CMOS的结果\" /></p>\n<h3 id=\"io-space\"><a class=\"anchor\" href=\"#io-space\">#</a> IO Space</h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/6ea12c9c2fbb40df987e9fd1e658dd0a.png\" alt=\"IO Space菜单\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/24fc0c6f0a6c4b35a9df5000ccccc2e2.png\" alt=\"Normal IO Space查看端口\" /></p>\n<h3 id=\"ide-identify\"><a class=\"anchor\" href=\"#ide-identify\">#</a>  <code>IDE Identify</code></h3>\n<blockquote>\n<p>查看当前系统中的 <code>SATA</code>  接口的 <code>硬盘信</code> 息 ( <code>PCIR</code>  接口的 <code>SSD</code>  不行)</p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/7e3a8e3f701c43689e25e05dd05bded9.png\" alt=\"IDE Identify查看硬盘选中\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/24626b50848f4cd6819a82722d297694.png\" alt=\"查看硬盘信息\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/ae26990ea50a4be7a40c102f479be2d9.png\" alt=\"查看硬盘信息\" /></p>\n<h3 id=\"acpi\"><a class=\"anchor\" href=\"#acpi\">#</a>  <code>ACPI</code></h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/f7ba7e6d2cc24c87bbd378264759bc8a.png\" alt=\"ACPI TABLE\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/f75c2e26b509402898ce48727c8e1876.png\" alt=\"查每一项的Table\" /></p>\n<h3 id=\"memory\"><a class=\"anchor\" href=\"#memory\">#</a>  <code>Memory</code></h3>\n<blockquote>\n<p>输入要查看的 <code>内存位置</code> 即可，最高 <code>支持4G</code>  的 <code>内存</code></p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/53e0e1eb936c4ee5a196e07fb955959a.png\" alt=\"输入要查看的内存位置\" /></p>\n<h3 id=\"cpu-msr\"><a class=\"anchor\" href=\"#cpu-msr\">#</a>  <code>CPU MSR</code></h3>\n<h3 id=\"smbios\"><a class=\"anchor\" href=\"#smbios\">#</a>  <code>SMBIOS</code></h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/36940f94687d4f7db46112c500562f80.png\" alt=\"查看本机的SMBIOS\" /></p>\n<h3 id=\"smbus\"><a class=\"anchor\" href=\"#smbus\">#</a>  <code>SMBus</code></h3>\n<blockquote>\n<p>根据设备相关硬件信息</p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/5b8955005867489780342b92cb950667.png\" alt=\"选择SMbus\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/23c98faa0ff3411681fad472c1cb60c3.png\" alt=\"选择PCH\" /></p>\n<h3 id=\"ati-pci-space\"><a class=\"anchor\" href=\"#ati-pci-space\">#</a>  <code>ATi PCI Space</code></h3>\n<blockquote>\n<p>图形处理器 <code>PCI</code>  空间</p>\n</blockquote>\n<h3 id=\"uefi-variable\"><a class=\"anchor\" href=\"#uefi-variable\">#</a>  <code>UEFI Variable</code></h3>\n<blockquote>\n<p>查看 <code>UEFI</code>  的变量 (可能存在不准，可在 <code>shell</code>  下查看)</p>\n</blockquote>\n<h3 id=\"ahci-mmio\"><a class=\"anchor\" href=\"#ahci-mmio\">#</a>  <code>AHCI MMIO</code></h3>\n<blockquote>\n<p><code>高级主机</code> 控制器接口 (``Advanced Host Control Interface <code>,</code> AHCI <code> )相关的</code> 内存映射输入 / 输出 `</p>\n<p><code>AHCI MMIO</code>  提供了一种访问 <code>AHCI</code>  控制器寄存器的方式。通过 <code>内存映射</code> ，系统 <code>软件</code> 可以 <code>读取</code> 和 <code>写入</code> 这些寄存器，以进行 <code>AHCI控制器</code> 的 <code>配置</code> 和 <code>管理</code> 。这些存储器存储了 <code>关于SATA</code>  设备的状态，命令，错误信息等数据。</p>\n</blockquote>\n<h3 id=\"usb-mmio\"><a class=\"anchor\" href=\"#usb-mmio\">#</a>  <code>USB MMIO</code></h3>\n<h2 id=\"go菜单\"><a class=\"anchor\" href=\"#go菜单\">#</a> GO 菜单</h2>\n<p><img data-src=\"https://img-blog.csdnimg.cn/1d338770de1b41b6bce918744afeefb2.png\" alt=\"Go菜单\" /></p>\n<ul>\n<li><code>Next</code>  切换：查看 <code>下</code> 一个项目</li>\n<li><code>Previous</code>  切换查看 <code>上</code> 一个项目</li>\n<li><code>Clear all history </code></li>\n<li><code>Mem/IO space </code></li>\n</ul>\n<h2 id=\"tools菜单\"><a class=\"anchor\" href=\"#tools菜单\">#</a>  <code>Tools</code>  菜单</h2>\n<p><img data-src=\"https://img-blog.csdnimg.cn/58ce076c647a4c03a9130b3ca1d5648b.png\" alt=\"Tools菜单\" /></p>\n<ul>\n<li><code>List PCI devices</code>  : 列出当前系统中 <code>全部PCI</code>  设备</li>\n<li><code>Toggle 8/16/32 bit </code> 使当前界面在 <code>8Byte</code> , <code>16Byte</code> , <code>32Byte</code>  显示之间 <code>切换</code> ，在 <code>查看寄存器</code> 时很有用</li>\n<li><code>Toggle ASCII/Info </code> : 切换界面在 <code>ASCII显示</code> 和 <code>信息显示模式</code> 切换</li>\n<li><code>System Info</code>  显示当前系统基本信息</li>\n<li><code>Help </code> 帮助信息</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsrTqzTjU1sh2GL0KbQcJdOkEd5dUHF7d6YFJbaR0h06erbRZntdLQqKyUnP1epQ2JvYEXD1Hsvhw/640?wx_fmt=png\" alt=\"ASCII显示\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/3ac600db6b644a14beb47a349eab530b.png\" alt=\"信息显示\" /></p>\n<h2 id=\"change-color\"><a class=\"anchor\" href=\"#change-color\">#</a> Change Color</h2>\n<blockquote>\n<p>切换 <code>页面</code> 配色</p>\n<ul>\n<li><code>Normal</code>  模式， <code>绿红</code></li>\n<li><code>User Defined</code>    <code>黑白</code></li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/a0afdc01f1d54cdd869150fa521331a7.png\" alt=\"切换界面配色\" /></p>\n<h2 id=\"toggle-sound\"><a class=\"anchor\" href=\"#toggle-sound\">#</a> Toggle Sound</h2>\n<blockquote>\n<p>切换声音</p>\n</blockquote>\n<h2 id=\"reboot-int-19\"><a class=\"anchor\" href=\"#reboot-int-19\">#</a> Reboot INT 19</h2>\n<h2 id=\"turn-off-system\"><a class=\"anchor\" href=\"#turn-off-system\">#</a> Turn off system</h2>\n<blockquote>\n<p>关机 (在 <code>UEFI</code>  下无效)</p>\n</blockquote>\n<h2 id=\"quit\"><a class=\"anchor\" href=\"#quit\">#</a> Quit</h2>\n<blockquote>\n<p><code>退出RU</code></p>\n</blockquote>\n<h1 id=\"快捷键\"><a class=\"anchor\" href=\"#快捷键\">#</a> 快捷键</h1>\n<blockquote>\n<ul>\n<li><code>F1</code>  帮助</li>\n<li><code>F2</code>  保存</li>\n<li><code>F3</code>   <code>load and program chipset</code>  负载和程序芯片组</li>\n<li><code>F4</code>   <code>ASCII显示</code> 和 <code>信息显示</code> 模式切换</li>\n<li><code>F5</code>  进入 <code>Config菜单</code> ，可以选择 <code>PCI</code> ， <code>ISA</code> ， <code>ACPI</code> ， <code>Memory CPU</code>  等</li>\n<li><code>F6 </code> 列出 <code>全部PCI设备</code></li>\n<li><code>F7</code>  在 <code>8bi</code> t， <code>16bit</code> ， <code>32 bit </code> 之间切换</li>\n<li><code>F8</code>   <code>比较文件</code></li>\n<li><code>F9</code>   <code>IO Space</code></li>\n<li><code>F10</code>  退出到 <code>Shell</code></li>\n</ul>\n</blockquote>\n<h1 id=\"x86信息基本操作\"><a class=\"anchor\" href=\"#x86信息基本操作\">#</a>  <code>X86</code>  信息基本操作</h1>\n<ul>\n<li><code>PCI信息</code> 的访问</li>\n<li>访问 <code>IO Port</code>  直接访问</li>\n<li><code>IO Port Index/Data</code>  方式访问</li>\n<li><code>Memory</code>  的访问</li>\n<li><code>Memory Index/Data</code>  方式的访问</li>\n<li><code>MSR</code>  的访问</li>\n</ul>\n<h1 id=\"使用ru获取cpu温度\"><a class=\"anchor\" href=\"#使用ru获取cpu温度\">#</a> 使用 RU 获取 CPU 温度</h1>\n<blockquote>\n<ul>\n<li><code>F5</code>  调出下面的 <code>菜单</code> 选择 <code>CPU MSR</code> , 或者直接 <code>ALT+ 8</code></li>\n<li></li>\n</ul>\n</blockquote>\n<h1 id=\"rw\"><a class=\"anchor\" href=\"#rw\">#</a> RW</h1>\n<blockquote>\n<p>在 <code>RW</code>  主界面可以通过快捷图标访问或 <code>Access</code>  下拉菜单选项中访问</p>\n<ul>\n<li>绿色区域：寄存器区</li>\n<li>蓝色区域：解析区</li>\n</ul>\n<p>寄存器可以显示 <code>256</code>  个 BYTE ( <code>0~255</code> )</p>\n<p><code>offset地址 = 横坐标 + 纵坐标 * 16</code></p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/d87d3f2be0fd4e27b0e84a5b8029175f.png\" alt=\"RW工具\" /></p>\n<h2 id=\"常用功能\"><a class=\"anchor\" href=\"#常用功能\">#</a> 常用功能</h2>\n<blockquote>\n<p>可以选择设备</p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/b121cc5535d347f688223f4673c8e23f.png\" alt=\"PCI Express\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/1dcdd732f3c3471daf27be94e4328901.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAc2VsZmN0cm9s,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"32位查看详细信息\" /></p>\n<h2 id=\"memory-2\"><a class=\"anchor\" href=\"#memory-2\">#</a> Memory</h2>\n<blockquote>\n<p>选择 Memory, 指定地址。</p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/ce7f867c631840dfac0a9d37bc527495.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAc2VsZmN0cm9s,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"打开Memory\" /></p>\n<h2 id=\"io-space-2\"><a class=\"anchor\" href=\"#io-space-2\">#</a> IO space</h2>\n<blockquote>\n<ul>\n<li>选择 <code>IO SPace</code></li>\n<li>输入 <code> IO Base</code></li>\n<li>查看对应的 <code>Port值</code></li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/8f6e5d828d3c4d3e8bbb8a349b21f541.png\" alt=\"IO Space\" /></p>\n<h2 id=\"io-index\"><a class=\"anchor\" href=\"#io-index\">#</a> I/O Index</h2>\n<blockquote>\n<ul>\n<li>\n<p>通过 IO Index/Data 访问 CMOS 寄存器，其分为上下两个 <code>BankIndex/Data Port</code>  :  <code>70h/71h </code></p>\n</li>\n<li>\n<p>点击 <code>OK</code>  即可查看 <code>CMOS寄存器</code> 的值</p>\n</li>\n<li>\n<p><code>时钟时间</code></p>\n</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/b96e1fdcb62e43abb6288691e20fd832.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAc2VsZmN0cm9s,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"查看时钟时间\" /></p>\n<h3 id=\"cmos寄存器地址spec\"><a class=\"anchor\" href=\"#cmos寄存器地址spec\">#</a>  <code>CMOS</code>  寄存器地址 <code>Spec</code></h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/fa4deb7e9f79424f82ca8995949b536c.png\" alt=\"CMOS寄存器地址Spec\" /></p>\n<h2 id=\"apci\"><a class=\"anchor\" href=\"#apci\">#</a>  <code>APCI</code></h2>\n<blockquote>\n<p>选择 <code>APCI Table</code>  选项，会列出所有加载 <code>ACPI table</code> , 以及对每一个 <code>table的解释</code> ，里面包含了 <code>BIOS</code>  的所有 <code>ASL code</code> ，也可以通过保存按钮把所有 <code>ACPI table</code>  保存下来</p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/6e1630c0d17d40b0a1564df96d012c28.png\" alt=\"ACPI table\" /></p>\n<blockquote>\n<p><code>XSDT Table</code>  包含所有其它 <code>table</code>  的 <code>入口地址</code> ，解析后包括: <code>签名/长度</code> ， <code>OEM ID</code>  和 <code>OEM Table ID</code>  等</p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/dbf81b5880c44310952cf14e7d24bed5.png\" alt=\"XSDT Table\" /></p>\n<h2 id=\"embedded-controller\"><a class=\"anchor\" href=\"#embedded-controller\">#</a>  <code>Embedded Controller</code></h2>\n<p><img data-src=\"https://img-blog.csdnimg.cn/e61713d85776497c9633050f1185980c.png?\" alt=\"EC\" /></p>\n<h2 id=\"usb\"><a class=\"anchor\" href=\"#usb\">#</a> USB</h2>\n<blockquote>\n<p>USB 拓扑结构，查看 USB 设备信息。</p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/8682c6af9d5e4ae98a6bf2ef31d007d1.png\" alt=\"USB\" /></p>\n<h2 id=\"smbios-structures\"><a class=\"anchor\" href=\"#smbios-structures\">#</a> SMBIOS Structures</h2>\n<blockquote>\n<p>包括一些基本的硬件信息， <code>SMBIOS</code> ( <code>System Management BIOS</code> ) 是主板或系统制造商以 <code>标准格式</code> 显示产品管理信息 <code>所需遵循</code> 的同意规范的 <code>统一规范</code> ，其数据包括了有关 <code>脑系统和配件 </code> 的信息。可以通过 <code>SMBIOS</code>  获取 <code>序列号</code> ， <code>电脑厂商</code> ， <code>内存</code> ， <code>串口</code> 以及 <code>其它硬件配置</code> 信息。</p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/b04e2f2cfb924aeaade201805737e48d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAc2VsZmN0cm9s,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"SMBIOS Structures\" /></p>\n<h2 id=\"command\"><a class=\"anchor\" href=\"#command\">#</a> Command</h2>\n<blockquote>\n<p>通过选项 Command，用户可以通过命令来读和写一些寄存器</p>\n<ul>\n<li><code>I 80</code></li>\n<li><code>I 60</code></li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/aaf8fea7d46d4c04aada9b8d73a98607.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAc2VsZmN0cm9s,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"Command\" /></p>\n<h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><a href=\"https://blog.csdn.net/lawrencexy/article/details/127013540\"> <code>UEFI下RU.EFI工具介绍</code> </a></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3hpYW5nMzUzOC9hcnRpY2xlL2RldGFpbHMvMTIwNzE2MTA4\">RW 使用</span></li>\n</ul>\n",
            "tags": [
                "BIOS",
                "BIOS",
                "寄存器"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/BIOS/BIOS%E5%B7%A5%E7%A8%8B%E6%A8%A1%E5%9D%97UEFI/",
            "url": "https://www.blog.foryouos.cn/BIOS/BIOS%E5%B7%A5%E7%A8%8B%E6%A8%A1%E5%9D%97UEFI/",
            "title": "BIOS工程模块UEFI",
            "date_published": "2023-08-13T23:55:00.000Z",
            "content_html": "<h1 id=\"模块\"><a class=\"anchor\" href=\"#模块\">#</a> 模块</h1>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvthkUaBMX9zWiccSLd09Nd7brATH5cjS3s0NK5d8SmaukA2e8z2csFDcvyjaTLMUgibwOCXKHgeChw/640?wx_fmt=png\" alt=\"模块与包概念\" title=\"模块与包\" /></p>\n<ul>\n<li>包：是一组 <code>模块</code> 及 <code>平台描述文件</code>  ( <code>.dsc</code>  文件)，包声明文件 ( <code>.dec</code>  文件) 组成的集合。</li>\n<li><code>模块</code> （ <code>可执行</code> 文件，即 <code>.efi</code>  文件) 像 <code>插件一样</code> 可以 <code>动态地</code> 加载到 <code>UEFI内核</code> 中。</li>\n<li>每个成功模块由 <code>元数据文件</code>  ( <code>.inf</code> ) 和 <code>源文件</code>  (有些情况包含 <code>.efi</code>  文件) 组成。 <code>.inf</code>  类似与 <code>Linux</code>  下得 <code>Makefile</code> ， <code>.dsc</code>  文件则相当于 VS 项目中的 <code>.sln文件</code> ；模块相当于 VS 项目中的工程， <code>.inf</code>  文件则相当于 VS 工程中的 <code>.proj文件</code> 。</li>\n</ul>\n<h1 id=\"uefi主要模块\"><a class=\"anchor\" href=\"#uefi主要模块\">#</a>  <code>UEFI</code>  主要模块</h1>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvthkUaBMX9zWiccSLd09Nd7tMz2Qy5M6Fv10JxMpzudOOfryCmmCYsMpqRdVUmUDl4CSz8lCLUkCA/640?wx_fmt=png\" alt=\"UEFI模块\" /></p>\n<h1 id=\"dsc文件\"><a class=\"anchor\" href=\"#dsc文件\">#</a>  <code>DSC</code>  文件</h1>\n<blockquote>\n<p><code>DSC</code>  文件描述了 <code>模块</code> ，库和组件如何编译，其中还包含很多 <code>的节</code> （ <code>section</code> ）标志，包含必要的 <code>[Defines]</code> , <code>[Components]</code> , 和可选的 <code>[LibraryClasses]</code> ， <code>[Libraries]</code> ， <code>[SkuIds]</code> ， <code>[BuildOptions]</code> ， <code>[PCD]</code> ， <code>[UserExtensions]</code> ， <code>[DefaultStores]</code> 。所有节标志，都内置与中括号中，且 <code>大小写敏感</code> 。在同一个括号中，可以包含复数的节标志字符串，他们之间使用 <code>逗号</code> 隔开，注释使用 <code>#</code></p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 使用逗号隔开</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>Library<span class=\"token punctuation\">.</span>X64<span class=\"token punctuation\">,</span>LibraryClasses<span class=\"token punctuation\">.</span>IPF<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre># 其制定CPU架构的节，通常的节<span class=\"token punctuation\">(</span>如<span class=\"token punctuation\">[</span>LibraryClasses<span class=\"token punctuation\">]</span>有更高的优先级优先使用高优先级编辑<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre># 在DSC文件中，使用<span class=\"token operator\">!</span>include来包含其他的文件，<span class=\"token operator\">!</span>include可以在任何节中出现</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>components<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">!</span>include StdLib<span class=\"token operator\">/</span>StdLib<span class=\"token punctuation\">.</span>inc  #包含StdLib库</pre></td></tr></table></figure><h2 id=\"defines\"><a class=\"anchor\" href=\"#defines\">#</a> [Defines]</h2>\n<blockquote>\n<p>此节定义 <code>各种变量</code> ，以供 <code>后续编译</code> 使用，必须在 <code>DEC中第一个</code> 定义，</p>\n<p>通过 <code>DEFINE</code>  定义的 <code>宏</code> 都是 <code>全局的</code> ，都可以使用 <code>$(MACRO)</code>  来访问</p>\n<p>语法如下</p>\n<p><code>[Defines]</code>  中可配置 <code>PCD</code>  信息， <code>PCD</code> : <code>Platform Configuration Database</code> , 数据库，类似 <code>window的注册表</code> 。PCD 除了 <code>SEC早期</code> ， <code>PEI阶段</code> ， <code>DXE早期阶段外</code> ，都可以访问。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Defines<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tName <span class=\"token operator\">=</span> Value</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    DEFINE MACRO <span class=\"token operator\">=</span> Value</pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvthkUaBMX9zWiccSLd09Nd7s6lnyZM22Zx1ice5RkWLZd85pBLeDXfGxiaibX46shQS9TNtWIVuNbgnw/640?wx_fmt=png\" alt=\"DSC文件变量\" title=\"DSC文件\" /></p>\n<h4 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 定义的全局宏，</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>Defines<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  PLATFORM_NAME                  <span class=\"token operator\">=</span> AppPkg</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  PLATFORM_GUID                  <span class=\"token operator\">=</span> <span class=\"token number\">0458</span>dade<span class=\"token operator\">-</span><span class=\"token number\">8</span>b6e<span class=\"token operator\">-</span><span class=\"token number\">4e45</span><span class=\"token operator\">-</span>b773<span class=\"token operator\">-</span><span class=\"token number\">1</span>b27cbda3e06</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  PLATFORM_VERSION               <span class=\"token operator\">=</span> <span class=\"token number\">0.01</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  DSC_SPECIFICATION              <span class=\"token operator\">=</span> <span class=\"token number\">0x00010006</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  OUTPUT_DIRECTORY               <span class=\"token operator\">=</span> Build<span class=\"token operator\">/</span>AppPkg</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  SUPPORTED_ARCHITECTURES        <span class=\"token operator\">=</span> IA32<span class=\"token operator\">|</span>IPF<span class=\"token operator\">|</span>X64</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  BUILD_TARGETS                  <span class=\"token operator\">=</span> DEBUG<span class=\"token operator\">|</span>RELEASE</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  SKUID_IDENTIFIER               <span class=\"token operator\">=</span> DEFAULT</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>#</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>  <span class=\"token expression\">Debug output control</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token expression\">DEFINE </span><span class=\"token macro-name\">DEBUG_ENABLE_OUTPUT</span>      <span class=\"token expression\"><span class=\"token operator\">=</span> FALSE       # Set to TRUE to enable debug output</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  DEFINE DEBUG_PRINT_ERROR_LEVEL  <span class=\"token operator\">=</span> <span class=\"token number\">0x80000040</span>  # Flags to control amount of debug output</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  DEFINE DEBUG_PROPERTY_MASK      <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  DEFINE UEFI_BOOK_DIR            <span class=\"token operator\">=</span> uefi\\book</pre></td></tr></table></figure><h2 id=\"libraryclasses\"><a class=\"anchor\" href=\"#libraryclasses\">#</a> [ <code>LibraryClasses</code> ]</h2>\n<blockquote>\n<p>用来 <code>提供模块</code> 所使用的 <code>库入口</code> ，而且它允许将模块编译成 <code>库</code> ，这些库可以被 [ <code>Components</code> ] 中的 <code>模块使用</code> ，当 <code>DSC</code>  文件中的模块不需要 <code>使用库</code> 时，这个节也可以不设置，可选的。</p>\n</blockquote>\n<h3 id=\"语法格式\"><a class=\"anchor\" href=\"#语法格式\">#</a> 语法格式</h3>\n<blockquote>\n<p><code>$(Arch)</code>  和 <code>$(MODULE_TYPE)</code>  是可选的，节内的库对指定的 <code>结构</code> 和 <code>模块</code> 都有效。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>LibraryClasses<span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>Arch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>MODULE_TYPE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>LiBraryClasses<span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>Arch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>MODULE_TYPE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tLibraryName <span class=\"token operator\">|</span> Path<span class=\"token operator\">/</span>LibraryName<span class=\"token punctuation\">.</span>inf</pre></td></tr></table></figure><blockquote>\n<p><code>LibraryClasses</code>  有 <code>六种</code> 表示方法，按照模块 <code>优先搜</code> 索的顺序，从 <code>高到低</code></p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>LibraryClasses<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>LibraryClasses<span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>Arch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>MODULE_TYPE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>LibraryClasses<span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>Arch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>MoDULE_TYPE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>LibraryClasses<span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>Arch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>MODULE_TYPE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>LibraryClasses<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>MODULE_TYPE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>LibraryClasses<span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>Arch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>LibraryClasses<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MdeModulePkg<span class=\"token operator\">/</span>Universal<span class=\"token operator\">/</span>PCD<span class=\"token operator\">/</span>Pei<span class=\"token operator\">/</span>Pcd<span class=\"token punctuation\">.</span>inf <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>LibraryClasses<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        PcdLib<span class=\"token operator\">|</span>MdePkg<span class=\"token operator\">/</span>Library<span class=\"token operator\">/</span>BasePcdLibNull<span class=\"token operator\">/</span>BasePcdLibNull<span class=\"token punctuation\">.</span>inf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre># 直接制定目前编译模块所需要的库，此方法优先级最高</pre></td></tr></table></figure><blockquote>\n<p>[ <code>Components</code> ] 中的模块在寻找所需要的库时，将按照上面 <code>优先级依次</code> 寻找</p>\n</blockquote>\n<h2 id=\"components\"><a class=\"anchor\" href=\"#components\">#</a> [ <code>Components</code> ]</h2>\n<blockquote>\n<p>用来定义模块编译的 <code>节</code> ，通过制定模块的 <code>INF文件</code> 所在的位置， <code>Build</code>  工具可以编译生成 <code>.efi</code>  文件。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Components<span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>Arch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tPath<span class=\"token operator\">/</span>and<span class=\"token operator\">/</span>Filename<span class=\"token punctuation\">.</span>inf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre># 语法格式</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>Components<span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>Arch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        Path<span class=\"token operator\">/</span>and<span class=\"token operator\">/</span>Filename<span class=\"token punctuation\">.</span>inf<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>LibraryClasses<span class=\"token operator\">></span> # 嵌套节</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    LibraryName <span class=\"token operator\">|</span> Path<span class=\"token operator\">/</span>LibraryName<span class=\"token punctuation\">.</span>inf</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> # 还可以嵌套<span class=\"token operator\">&lt;</span>Defines<span class=\"token operator\">></span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span>PCD<span class=\"token operator\">*</span><span class=\"token operator\">></span>和<span class=\"token operator\">&lt;</span>BuildOptions<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"buildoptions\"><a class=\"anchor\" href=\"#buildoptions\">#</a> [ <code>BuildOptions</code> ]</h2>\n<blockquote>\n<p>给出编译器和相关的 <code>编译参数</code> ，它会覆盖为编译模块准备的默认参数。如果是为了替换编译参数，则可以使用 <code>==</code> 。如果是为了添加编译参数，则可以使用 <code>=</code></p>\n</blockquote>\n<h3 id=\"语法格式-2\"><a class=\"anchor\" href=\"#语法格式-2\">#</a> 语法格式</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>BuildOptions<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$<span class=\"token punctuation\">&#123;</span>FAMILY<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span>$<span class=\"token punctuation\">&#123;</span>TARGET<span class=\"token punctuation\">&#125;</span>_$<span class=\"token punctuation\">&#123;</span>TAGNAME<span class=\"token punctuation\">&#125;</span>_<span class=\"token punctuation\">&#123;</span>ARCH<span class=\"token punctuation\">&#125;</span>_$<span class=\"token punctuation\">&#123;</span>TOOLCODE<span class=\"token punctuation\">&#125;</span>——FLAGS<span class=\"token punctuation\">[</span><span class=\"token operator\">=</span> <span class=\"token operator\">|</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">]</span> 编译参数</pre></td></tr></table></figure><h3 id=\"示例-2\"><a class=\"anchor\" href=\"#示例-2\">#</a> 示例</h3>\n<blockquote>\n<p>编译参数定义宏 <code>DISABLE_NEW_DEPRECATED_INTERFACES</code> , 作为 <code>源代码</code> 的 <code>编译开关</code> 。两个参数分别 <code>禁用优化</code> 和 <code>启用框架指针</code> 省略功能。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>BuildOptions<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token operator\">*</span>_<span class=\"token operator\">*</span>_<span class=\"token operator\">*</span>_CC_FLAGS <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>D DISABLE_NEW_DEPRECATED_INTEREACES</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    MSFT<span class=\"token operator\">:</span>DEBUG_<span class=\"token operator\">*</span>_<span class=\"token operator\">*</span>_CC_FLAGS <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>Od <span class=\"token operator\">/</span> Oy<span class=\"token operator\">-</span></pre></td></tr></table></figure><h2 id=\"语法格式-3\"><a class=\"anchor\" href=\"#语法格式-3\">#</a> 语法格式</h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvthkUaBMX9zWiccSLd09Nd7pnM2LyEL1LDNPZKicOwkFF3bf0HxbY1aQzFTp9Bf7ehQ2xMjVAAhtGA/640?wx_fmt=png\" alt=\"BuildOptions语法格式\" /></p>\n<blockquote>\n<p><code>FAMILY</code>  是指 <code>编译</code> 时使用的 <code>编译器</code> 。</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvthkUaBMX9zWiccSLd09Nd7yHJy3sIwPkvvs0hr43MFaR4Xn5Z8Xj4JlaKuU2S32kyLCk92ySAAZQ/640?wx_fmt=png\" alt=\"语法字段解释\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvthkUaBMX9zWiccSLd09Nd7RQGSCwJ8OIVqBpHHuLGgYVHxoriaNrqDiaR1jNnAUNJ2ZiadiaUq9Dn56w/640?wx_fmt=png\" alt=\"语法字段\" /></p>\n<h1 id=\"标准引用程序工程模块\"><a class=\"anchor\" href=\"#标准引用程序工程模块\">#</a> 标准引用程序工程模块</h1>\n<blockquote>\n<p>工程模块的基础，</p>\n<p>每个工程模块至少需要分为</p>\n<ul>\n<li><code>工程</code> 文件 :  <code>.inf文件</code></li>\n<li><code>源文件</code>  ： <code>C/C++</code>  文件， <code>.asm</code>  汇编文件，也包含 <code>.uni</code> ( <code>字符串资</code> 源文件) 和 <code>.vfr</code> ( <code>窗口资源</code> 文件)</li>\n</ul>\n</blockquote>\n<h1 id=\"inf文件\"><a class=\"anchor\" href=\"#inf文件\">#</a> INF 文件</h1>\n<blockquote>\n<p><code>INF</code>  是模块的 <code>工程文件</code> ，描述了模块的属性，包含模块由那些 <code>代码组成</code> ， <code>提供</code> 了 <code>什么</code>  ，依赖什么 <code>库</code> ，支持什么 <code>CPU架构</code> 等信息。对 ODM 厂商 (第三方开发者而言)，可以针对自家设备发布 <code>二进制形式的模块</code> ，不必提供源代码。</p>\n<p>一般来说，如果是提供 <code>库的模块</code> ，则其位于 <code>包的Library</code>  子目录下，并且会针对不同的架构再创建子目录划分；如果是 <code>UEFI_APPLICATION</code>  一般位于子目录 <code>Applications</code>  下。</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvthkUaBMX9zWiccSLd09Nd7dCOicwHV0R00OURQQxmwVrQYibGJicexkNj2PKxHJ9BZMhxRICNr22Qaw/640?wx_fmt=png\" alt=\"INF文件的节标志\" /></p>\n<h2 id=\"defines-2\"><a class=\"anchor\" href=\"#defines-2\">#</a> [Defines]</h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvthkUaBMX9zWiccSLd09Nd7x2FZ5Qnm6mZmSYOXB354qq17jrSUjTQsrfhM9ojWvLjNTE2EfeBLBQ/640?wx_fmt=png\" alt=\"Define变量\" /><br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvthkUaBMX9zWiccSLd09Nd7t8XpRN1gz8XJvcR24cslUeGKcNBVJpSsUCn8xAibEKCXTr9PSes3fxg/640?wx_fmt=png\" alt=\"Define变量\" /></p>\n<blockquote>\n<p>如果编译的模块为 <code>库模块</code> ，则 <code>LIBRARY_CLASS</code>  变量 <code>必须制定</code> ，生成的库模块在指定运行哪些 <code>类型</code> 的模块时使用</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LIBRARY_CLASS <span class=\"token operator\">=</span> FOO <span class=\"token operator\">|</span> PEI_CORE PEIM</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>LIBRARY_CLASS <span class=\"token operator\">=</span> BAR <span class=\"token operator\">|</span> DXE_CORE DXE_DRIVER DXE_SMM_DRIVER</pre></td></tr><tr><td data-num=\"3\"></td><td><pre># 如果只想在UEFI应用中使用，则可以如下设置</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>LIBRARY_CLASS <span class=\"token operator\">=</span> FOO <span class=\"token operator\">|</span> UEFI_APPLICATION</pre></td></tr></table></figure><h2 id=\"sources\"><a class=\"anchor\" href=\"#sources\">#</a> [Sources]</h2>\n<blockquote>\n<p>列出模块中所有的 <code>源文件</code> 和 <code>资源文件</code> ，这些文件位于 <code>INF文件</code> 所在的目录或者子目录。这个节可以针对不同的架构指定文件.</p>\n<p><code>$(Arch)</code>  可以是 <code>COMMON</code> , <code>IA32</code> , <code>X64</code> ， <code>IPF</code> , <code>EBC</code> , <code>ARM</code>  或 <code>AARCH64</code>  中任何 <code>一个</code> 。如果需要对 <code>所有架构</code> 适用，可以 <code>使用COMMON</code>  或者 <code>不指定任何架构</code> 。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Sources<span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>Arch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tSourceCode<span class=\"token punctuation\">.</span>c</pre></td></tr></table></figure><blockquote>\n<p>同时可以 <code>对源文件</code> 制定 <code>编译的工具链</code> ，即只有在使用指定的工具链时，此源文件才会被编译，目前常用的 <code>4种工具</code> 分别是 <code>MSFT</code>  (微软的 <code>Visual Studio编</code> 译器)， <code>GCC</code> ( <code>GNU GCC编译</code> 器)， <code>INTEL</code>  (Intel C 编译器和 <code>ntel EFI</code>  字节码编译器) 和 <code>RVCT</code> ( <code>ARM RealVIew</code>  工具链)</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Sources<span class=\"token punctuation\">.</span>ARM<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tGicV3<span class=\"token operator\">/</span>Arm<span class=\"token operator\">/</span>ArmGicV3<span class=\"token punctuation\">.</span>S  <span class=\"token operator\">|</span> GCC</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    GicV3<span class=\"token operator\">/</span>Arm<span class=\"token operator\">/</span>ArmGicV3<span class=\"token punctuation\">.</span><span class=\"token keyword\">asm</span>  <span class=\"token operator\">|</span> RVCT</pre></td></tr></table></figure><h2 id=\"buildoptions-2\"><a class=\"anchor\" href=\"#buildoptions-2\">#</a> [ <code>BuildOptions</code> ]</h2>\n<blockquote>\n<p><code>INF</code>  中的与 <code>DSC文件</code> 中的语法 <code>格式基本相同</code> ，区别在与 <code>INF文件</code> 只对 <code>本模块有效</code> 。而 <code>DSC</code>  对 <code>所有模块</code> 都有效。</p>\n<p>日常开发中，通过 INF 文件修改编译选项以解决一些 <code>特别问题</code> 。比如在解决 <code>汉字字符串</code> 显示问题时，强制要求编译器把源文件按 <code>UTF-8编码</code> 进行识别</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>BuildOptions<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tMSFT<span class=\"token operator\">:</span><span class=\"token operator\">*</span>_<span class=\"token operator\">*</span>_<span class=\"token operator\">*</span>_CC_FLAGS <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>utf<span class=\"token operator\">-</span><span class=\"token number\">8</span></pre></td></tr></table></figure><h2 id=\"protocols\"><a class=\"anchor\" href=\"#protocols\">#</a> [Protocols]</h2>\n<blockquote>\n<p>列出 <code>模块</code> 使用的 <code>协议</code> ，在 <code>INF文件</code> 中列出的是协议的 <code>GUID</code> ，通过 <code>EDK2</code>  的分析工具， <code>GUID</code>  被 <code>输出</code> 到模块的 <code>AUtoGen.c</code> ，如果模块 <code>没有使用任何协议</code> ，则这个 <code>节为空</code></p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Protocols<span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>Arch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>#COMMON<span class=\"token punctuation\">,</span>IA32<span class=\"token punctuation\">,</span>X64<span class=\"token punctuation\">,</span>IPF<span class=\"token punctuation\">,</span>EBC或者不指定</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    gEfiProtocolGuid <span class=\"token punctuation\">[</span> <span class=\"token operator\">|</span> FeatureFlagExpression <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre># 当FeatureFlagExpression为true时所添加的Protocol Guid是有效的，当为FALSE是，会忽略Protocol Guid</pre></td></tr></table></figure><h2 id=\"libraryclasses-2\"><a class=\"anchor\" href=\"#libraryclasses-2\">#</a> [ <code>LibraryClasses</code> ]</h2>\n<blockquote>\n<p>列出 <code>本模块</code> 需要 <code>链接的库</code></p>\n</blockquote>\n<pre><code class=\"language-C\">[LibraryClasses.$(Arch)] #COMMON,IA32,X64,IPF,EBC或者不指定\n    LibraryClassNamel [ | FeatureFlagExpression ]\n</code></pre>\n<blockquote>\n<p>在日常开发中，模块如果要 <code>添加</code> 库，一般需要进行两个步骤，</p>\n<ul>\n<li>在 <code>INF</code>  文件下的 <code>[LibraryClasses]</code>  中添加 <code>库名</code></li>\n<li>在 <code>DSC</code>  文件的 <code>[LibraryClasses]</code>  中寻找 <code>词库</code> ，如果有，则需要添加 <code>编译此库</code> 的 <code>INF文件</code></li>\n</ul>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>LibraryClasses<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tUefiApplicationEntryPoint</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UefiLib</pre></td></tr></table></figure><h2 id=\"packages\"><a class=\"anchor\" href=\"#packages\">#</a> [Packages]</h2>\n<blockquote>\n<p>列出 <code>本模块</code> 引用的 <code>所有包DEC文件</code></p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Packages<span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>Arch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  # COMMON<span class=\"token punctuation\">,</span>IA32<span class=\"token punctuation\">,</span>X64<span class=\"token punctuation\">,</span>IPF<span class=\"token punctuation\">,</span>EBC或者不指定<span class=\"token punctuation\">,</span>针对不同的平台架构</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    MdePkg<span class=\"token operator\">/</span>MdePkg<span class=\"token punctuation\">.</span>dec</pre></td></tr></table></figure><blockquote>\n<p><code>EDC文件</code> 的目录使用的是 <code>相对路径</code> ，其 <code>根位</code> 置（ <code>$(WORKSPACE</code> )(通过 <code>edksetup.bat/edksetup.sh</code>  指定的 <code>工作目录</code> ))。 <code>DEC文件</code> 的指定是 <code>有顺序的</code> ，比如 <code>MdePkg/MdePkg.dec</code>  必须在 <code>MdeModulePkg/MdeModulePkg.dec</code>  之 <code>前</code> .</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Packages<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tMdePkg<span class=\"token operator\">/</span>MdePkg<span class=\"token punctuation\">.</span>dec</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tMdeModulePkg<span class=\"token operator\">/</span>MdeModulePkg<span class=\"token punctuation\">.</span>dec</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>Package<span class=\"token punctuation\">.</span>IA32<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    DEFINE CPUS <span class=\"token operator\">=</span> IA32FamilyCpuPkg</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    $<span class=\"token punctuation\">(</span>CPUS<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>DualCore<span class=\"token operator\">/</span>DualCore<span class=\"token punctuation\">.</span>dec</pre></td></tr></table></figure><h1 id=\"dec文件\"><a class=\"anchor\" href=\"#dec文件\">#</a> DEC 文件</h1>\n<blockquote>\n<p>每个 <code>包</code> 只有 <code>一个DEC</code>  文件， <code>DEC文件</code> 用来 <code>配合DSC文</code> 件，描述了 <code>包</code> 的 <code>公开数据</code> 和 <code>接口</code></p>\n</blockquote>\n<h2 id=\"defines-3\"><a class=\"anchor\" href=\"#defines-3\">#</a> [Defines]</h2>\n<blockquote>\n<p><code>必须的节</code> ，用来提供 <code>包的GUID</code> , <code>版本</code> 和 <code>名称等信息</code> 与 <code>DSC相同</code></p>\n</blockquote>\n<h2 id=\"includes\"><a class=\"anchor\" href=\"#includes\">#</a> [Includes]</h2>\n<blockquote>\n<p>列出本包提供的 <code>头文件</code> 所在 <code>目录</code> ，此节 <code>DSC文件</code> 中 <code>没有对应语法</code> 结构</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Includes<span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>Arch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> # COMMON<span class=\"token punctuation\">,</span>IA32<span class=\"token punctuation\">,</span>X64<span class=\"token punctuation\">,</span>IPF<span class=\"token punctuation\">,</span>EBC或者不指定，可添加Private</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Path</pre></td></tr></table></figure><blockquote>\n<p>头文件的路径是 <code>相对路径</code> ，其根目录为 <code>DEC所在的目录</code></p>\n<p>指定框架的时候，可以添加 <code>Private</code>  限定符，用来 <code>规定</code> 所包含的 <code>头文件</code> 只能在 <code>本包</code> 中的 <code>模块中</code> 使用</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Include<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>Include<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>Private<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>Include<span class=\"token punctuation\">.</span>IA32<span class=\"token punctuation\">.</span>Private<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><blockquote>\n<ul>\n<li><code>不带Private标志</code> 的项， <code>严禁</code> 与 <code>带Private标志</code> 的项结合</li>\n<li><code>同一文件目录</code> ， <code>不能</code> 同时指定带 <code>Private标志</code> 的项和 <code>不带Private标志</code> 的项</li>\n</ul>\n</blockquote>\n<h2 id=\"libraryclasses-3\"><a class=\"anchor\" href=\"#libraryclasses-3\">#</a> [ <code>LibraryClasses</code> ]</h2>\n<blockquote>\n<p><code>对外提供</code> 的 <code>库</code> 中都会 <code>提供头文件</code> ，这些头文件位于包下的 ``Include\\Library <code>目</code> 录下，用来明确 <code>库 和头文件</code> 的对应关系</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>LibraryClasses<span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>Arch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> # COMMON<span class=\"token punctuation\">,</span>IA32<span class=\"token punctuation\">,</span>X64<span class=\"token punctuation\">,</span>IPF<span class=\"token punctuation\">,</span>EBC或者不指定</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tLibraryClassesName <span class=\"token operator\">|</span> PAth<span class=\"token operator\">/</span>LibraryHeader<span class=\"token punctuation\">.</span>h</pre></td></tr></table></figure><h2 id=\"guids\"><a class=\"anchor\" href=\"#guids\">#</a> [ <code>Guids</code> ]</h2>\n<blockquote>\n<p>这个 <code>节</code> 用于定义 <code>Guid变量</code> ，对于 <code>Private标志</code> 的要求 <code>[Includes]</code>  相同</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Guids<span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">(</span>Arch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> # COMMON<span class=\"token punctuation\">,</span>IA32<span class=\"token punctuation\">,</span>X64<span class=\"token punctuation\">,</span>IPF<span class=\"token punctuation\">,</span>EBC或者不指定，可添加Private</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    GUIDName <span class=\"token operator\">=</span> GUID</pre></td></tr></table></figure><h3 id=\"举例\"><a class=\"anchor\" href=\"#举例\">#</a> 举例</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>## Include<span class=\"token operator\">/</span>Guid<span class=\"token operator\">/</span>GlobalVariable<span class=\"token punctuation\">.</span>h</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  gEfiGlobalVariableGuid         <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0x8BE4DF61</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x93CA</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x11D2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0xAA</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8C</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  ## Include<span class=\"token operator\">/</span>Guid<span class=\"token operator\">/</span>PcAnsi<span class=\"token punctuation\">.</span>h</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  gEfiVT100PlusGuid              <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0x7BAEC70B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x57E0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4C76</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0x8E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x9E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x08</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x83</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x43</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"protocols-2\"><a class=\"anchor\" href=\"#protocols-2\">#</a> [Protocols]</h2>\n<p>定义 <code>Protocol</code>  的 <code>GUID</code> ，其规则与 <code>[Guids]</code>  是一样的。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Protocols<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>Arch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  # common<span class=\"token punctuation\">,</span>IA32<span class=\"token punctuation\">,</span>X64<span class=\"token punctuation\">,</span>IPF<span class=\"token punctuation\">,</span>EBC或者不指定，可添加Private</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ProtocolName <span class=\"token operator\">=</span> GUID</pre></td></tr></table></figure><h2 id=\"其余节\"><a class=\"anchor\" href=\"#其余节\">#</a> 其余节</h2>\n<blockquote>\n<p><code>PPI</code>  是 <code>PI</code>  阶段 <code>PEIM和PEIM之间</code> 的沟通 <code>桥梁</code> ，类似 <code>Dxe阶段</code> 的 <code>Protocol </code> 。一个 <code>PEIM</code>  中 <code>Instal</code> l 一个 <code>PPI</code>  后，另一个 <code>PEIM</code>  通过 <code>Locate</code>  获取该 <code>PPI</code> 。</p>\n</blockquote>\n<ul>\n<li><code>[Ppis] </code> : 用于 <code>源文件</code> 用到的 <code>PPI</code> , 语法与 <code>[Guids]</code>  类似</li>\n<li><code>[PCD]</code> ：是对 <code>DSC</code>  文件 <code>[PCD]</code>  的补充</li>\n<li><code>[UserExtensions]</code>  ：可以 <code>定制用户</code> 的命令</li>\n</ul>\n<h1 id=\"fdf文件\"><a class=\"anchor\" href=\"#fdf文件\">#</a> FDF 文件</h1>\n<blockquote>\n<p><code>Flash Description File</code>  用于描述 <code>固件</code> 在 <code>Flash</code>  中的 <code>布局</code> 和 <code>位置</code> ，这些 <code>固件</code> 是与 <code>UEFI/PI</code>  兼容的 <code>二进制镜像</code> 。一般生成 <code>固件</code> 的源码只有一个 <code>FDF文件</code> ，其作用是规定把那些 <code>包编入Flash</code>  中，并  <code>确定编入的位置</code></p>\n<p><code>FDF文件</code> 用于生成 <code>Option ROM镜像</code> ， <code>固件镜像</code> 和 <code>可启动镜像</code> ，它与 <code>DSC文件</code> 和 <code>二进制文件</code> 配合，在 <code>GenFW工具</code> 的协助下生成 <code>镜像</code> 。</p>\n</blockquote>\n<h2 id=\"defines-4\"><a class=\"anchor\" href=\"#defines-4\">#</a> [Defines]</h2>\n<blockquote>\n<p>可选的节，用来个 <code>跟踪FDF</code>  文件的版本，定义 <code>全局宏</code> 以及 <code>设定PCD</code>  的值</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Defines<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tName<span class=\"token operator\">=</span>Value</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    DEFINE MACRO <span class=\"token operator\">=</span> Value</pre></td></tr></table></figure><blockquote>\n<p>其中 <code>set语句</code> 专门用来对 <code>PCD变量</code> 进行赋值的</p>\n</blockquote>\n<h2 id=\"fd\"><a class=\"anchor\" href=\"#fd\">#</a> [FD]</h2>\n<blockquote>\n<p><code>FD</code>  (Firmware Device) 即 <code>固件设备</code> ，一个 <code>BIOS ROM</code>  就是一个 <code>FD</code> , 这个节在开发平台 Flash 时是必须得，开发 <code>Option ROM</code>  时不需要此项。FD 由各类声明和 FD 区域布局组成，它可以构成一个完整的 <code>Flash设备</code> 镜像。Flash 设备可以是移动式 <code>可启动镜像</code>  (比如可启动的 U 盘)， <code>系统Flash镜像</code>  (如 BIOS ROM) 或 <code>更新镜像</code>  (UEFI 中称为 Capsule 镜像)，用来 <code>升级系统Flash</code></p>\n</blockquote>\n<h3 id=\"令牌声明token-statements\"><a class=\"anchor\" href=\"#令牌声明token-statements\">#</a> 令牌声明 (TOKEN Statements) :</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Token <span class=\"token operator\">=</span> Value <span class=\"token punctuation\">[</span><span class=\"token operator\">|</span> PcdName<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li><code>BaseAddress</code>  : FD 的基址，设备开机后 <code>BIOS</code>  被加载到 <code>系统中</code> 的位置</li>\n<li><code>Size</code>  :  <code>FD的大小</code> ，单位为 <code>字节</code></li>\n<li><code>BlockSize</code>  ： <code>Flash</code>  中一个 <code>Block</code>  的大小</li>\n<li><code>ErasePolarity </code> : 表示 <code>用1或者0</code>  擦除 Flash, 一般为 <code>1</code></li>\n<li><code>NumBlocks</code>  : Flash 中 Block 的个数</li>\n</ul>\n<h3 id=\"定义声明\"><a class=\"anchor\" href=\"#定义声明\">#</a> 定义声明</h3>\n<blockquote>\n<p><code>DEFINE Statements</code>  : 用来定义 <code>宏的声明</code> ，所定义的 <code>宏</code> 在 <code>整个FDF</code>  文件中都有效，使用的时候，可以通过 <code>$(MACRO)</code>  来引用</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DEFINE MACRO <span class=\"token operator\">=</span> PATH</pre></td></tr></table></figure><h3 id=\"设置声明\"><a class=\"anchor\" href=\"#设置声明\">#</a> 设置声明</h3>\n<blockquote>\n<p>设置 <code>声明</code> 用来 <code>设置PCD变量</code> 的值</p>\n<p>语法格式</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SET PcdName <span class=\"token operator\">=</span> VALUE</pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SET gUefiCpuPkgTokenSpaceGuid<span class=\"token punctuation\">.</span>PcdSevEsWorkAreaBase <span class=\"token operator\">=</span> $<span class=\"token punctuation\">(</span>MEMFD_BASE_ADDRESS<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>  gUefiOvmfPkgTokenSpaceGuid<span class=\"token punctuation\">.</span>PcdOvmfWorkAreaBase <span class=\"token operator\">+</span> gUefiOvmfPkgTokenSpaceGuid<span class=\"token punctuation\">.</span>PcdOvmfConfidentialComputingWorkAreaHeader</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SET gUefiCpuPkgTokenSpaceGuid<span class=\"token punctuation\">.</span>PcdSevEsWorkAreaSize <span class=\"token operator\">=</span> gUefiOvmfPkgTokenSpaceGuid<span class=\"token punctuation\">.</span>PcdOvmfWorkAreaSize <span class=\"token operator\">-</span> gUefiOvmfPkgTokenSpaceGuid<span class=\"token punctuation\">.</span>PcdOvmfConfidentialComputingWorkAreaHeader</pre></td></tr></table></figure><blockquote>\n<p>除 <code>类声明</code> 外， <code>[FD]</code>  的另外一个组成部分是 <code>区域布局</code>  ( <code>Region Layout</code> )，它用来指明各种 <code>区域类型</code> 的数据在 <code>FD中</code> 的布局</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>offset<span class=\"token operator\">|</span>Size</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">[</span>TokenSpaceGuidCName<span class=\"token punctuation\">.</span>PcdOffsetCname <span class=\"token operator\">|</span> TokenSpaceGuidCName<span class=\"token punctuation\">.</span>PcdSizeCName<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \t<span class=\"token punctuation\">[</span>RegopmType<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span></pre></td></tr></table></figure><blockquote>\n<p>上诉代码的含义为 <code>FD开辟</code> 一段空间，用来放置区域类型 ( <code>RegionType</code> ) 所指明的内容，其中 <code>offset</code>  和 <code>Size</code>  表示其后的内容 <code>处于FD</code>  中的 <code>偏移</code> 和 <code>内容的大小</code> ， <code>RegionType</code>  可以是 <code>FV</code> ( <code>Firmware Volume</code> , <code>固件区块</code> )， <code>DATA</code>  (数据)， <code>FILE</code>  (文件)， <code>INF</code>  (INF 文件) 和 <code>CAPSULE</code> （更新固件的镜像) 也可以不指定</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0x000000</span><span class=\"token operator\">|</span><span class=\"token number\">0x006000</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gUefiOvmfPkgTokenSpaceGuid<span class=\"token punctuation\">.</span>PcdOvmfSecPageTablesBase<span class=\"token operator\">|</span>gUefiOvmfPkgTokenSpaceGuid<span class=\"token punctuation\">.</span>PcdOvmfSecPageTablesSize</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">0x006000</span><span class=\"token operator\">|</span><span class=\"token number\">0x001000</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>gUefiOvmfPkgTokenSpaceGuid<span class=\"token punctuation\">.</span>PcdOvmfLockBoxStorageBase<span class=\"token operator\">|</span>gUefiOvmfPkgTokenSpaceGuid<span class=\"token punctuation\">.</span>PcdOvmfLockBoxStorageSize</pre></td></tr></table></figure><h2 id=\"fv\"><a class=\"anchor\" href=\"#fv\">#</a> [ <code>FV</code> ]</h2>\n<blockquote>\n<p><code>FV</code> ( <code>Firmware Volume</code> ) 是 <code>固件</code> 的 <code>逻辑区块</code> ，相当于 <code>FD上的分区</code> ，此节 <code>定义</code> 了 <code>镜像包含的组件</code> 和 <code>模块</code> ，对于 <code>平台镜像是必要</code> 的，但 <code>Option ROM镜像不需要</code> 此节</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>FV<span class=\"token punctuation\">.</span>UiFvName<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"optionrom\"><a class=\"anchor\" href=\"#optionrom\">#</a> [ <code>OptionRom</code> ]</h2>\n<blockquote>\n<p>此节 <code>用来编译</code> 独立的 <code>Legacy PCI Option ROM</code>  或者 <code>UEFI PCI Option ROM</code> .</p>\n</blockquote>\n<h1 id=\"资源文件\"><a class=\"anchor\" href=\"#资源文件\">#</a> 资源文件</h1>\n<blockquote>\n<p><code>IDF</code>  和 <code>UNI</code>  文件 <code>VFR文件</code> 可算做 <code>资源文件</code> ，用于 <code>描述图像</code> ， <code>文字</code> 和 <code>框架</code> 等 <code>资源</code> ，在 <code>Build工具</code> 的 <code>协助</code> 下，生成 <code>二进制</code> 文件 (如 <code>.efi</code>  文件， <code>.lib</code>  文件)</p>\n<p><code>IDF</code> ( <code>Image Description File</code> ， <code>图像描述</code> 文件)， <code>UNI</code> ( <code>Unicode String File</code> ， <code>宽字节字符串</code> 文件) 和 <code>VFR</code> ( <code>Visual Forms Representation</code> ， <code>可视化窗体</code> 描述) 都是 <code>资源文件</code> ，同属于 <code>用户接口组件</code> 。</p>\n<p><code>IDF</code>  文件用来 <code>描述图像资源</code> ， <code>UNI文件</code> 用来描述 <code>字符串资源</code> ， <code>VFR</code>  文件用来描述 <code>窗体资源</code> ，类似与 Windows 操作系统下的窗口。</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvthkUaBMX9zWiccSLd09Nd7iasRbzddiaBUh34wwHJuAoM4zw6teajZMOFWkh1SDBqegHfySoRu1yicw/640?wx_fmt=png\" alt=\"用户接口组件结构\" /></p>\n<h2 id=\"idf文件\"><a class=\"anchor\" href=\"#idf文件\">#</a> IDF 文件</h2>\n<blockquote>\n<p>在 <code>IDF文件</code> 中，可通过 <code>#image标识符</code> 指定 <code>图像文件</code> ，所给出的 <code>资源文件</code> 一般与 <code>IDF文</code> 件在同一个目录下。</p>\n<p>使用 <code>TRANSPARENT </code> 用来指定是否 <code>使用透明</code> 显示。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">image</span> <span class=\"token expression\">IMG_LOGO TRANSPARENT Logo<span class=\"token punctuation\">.</span>bmp</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">image</span> <span class=\"token expression\">IMG_FULL_LOGO Logo<span class=\"token punctuation\">.</span>jpg</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">image</span> <span class=\"token expression\">IMG_OEM_LOGO Logo<span class=\"token punctuation\">.</span>png</span></span></pre></td></tr></table></figure><h2 id=\"uni文件\"><a class=\"anchor\" href=\"#uni文件\">#</a> UNI 文件</h2>\n<blockquote>\n<p><code>同一个字符串</code> 变量，可针对 <code>不同的语言</code> 定义不同的 <code>内容</code></p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">langdef</span> <span class=\"token expression\">en<span class=\"token operator\">-</span>US </span><span class=\"token string\">\"English\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">langdef</span> <span class=\"token expression\">zh<span class=\"token operator\">-</span>Hans </span><span class=\"token string\">\"简体中文\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">string</span> <span class=\"token expression\">STR_LANGUAGE_SELECT #language en<span class=\"token operator\">-</span>US </span><span class=\"token string\">\"Select Language\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">language</span> <span class=\"token expression\">zh<span class=\"token operator\">-</span>Hans </span><span class=\"token string\">\"选择语言\"</span></span></pre></td></tr></table></figure><blockquote>\n<p>在 UNI 文件中，可以使用的标识符有 <code>#langdef</code> , <code>#string</code> , <code>#language</code> 。</p>\n<ul>\n<li><code>#langdef </code> 用于声明 <code>本字符串</code> 资源文件所支持的语言</li>\n<li><code>#string</code>  用于定义字符串</li>\n<li><code>#language</code>  用于标注所用的语言</li>\n</ul>\n<p><code>#langdef</code>  和 <code>#language</code>  标识符在使用时，需要指定语言代码 ( <code>Language Code</code> ), <code>en-US</code>  代表的是英文</p>\n</blockquote>\n<h2 id=\"vfr文件\"><a class=\"anchor\" href=\"#vfr文件\">#</a> VFR 文件</h2>\n<blockquote>\n<p><code>VFR文件</code> 用来描述 <code>窗体</code> 的 <code>框架文件</code> ，它可以使用 <code>#define</code>  和 <code>#include</code>  来定义 <code>变量</code> 和 <code>包含的头文件</code></p>\n<ul>\n<li><code>formset</code>  (窗体集合)：用来 <code>标志</code> 整个 <code>窗体的结构</code>\n<ul>\n<li><code>form</code>  ：窗体，标志整个窗体的结构</li>\n<li><code>checkbox</code> : <code> 复选框</code> ，可通过 <code>空格键</code> 或者 <code>回车键</code> 进行选择</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>关键字 <code>formset</code>  和 <code>endformset</code>  成对出现，他们之间所包含的 <code>内容定义</code> 了整个 <code>formset</code> 。\n<ul>\n<li><code>guid</code>  : 标志本 <code>formset</code>  的 <code>GUID值</code></li>\n<li><code>title</code>  : 在界面中标志 <code>本formset</code>  的字符串标题</li>\n<li><code>help</code>  : 在界面上显示本 <code>formset</code>  的帮助信息</li>\n<li><code>classguid</code>  : 本 <code>formset</code>  所 <code>挂载界面</code> 的 <code>GUID值</code></li>\n<li><code>varstore</code>  : 变量所用 <code>数据结构</code> 类型</li>\n<li><code>form </code> ： <code>窗体</code> 关键字，与 <code>endform成对</code> 出现，定义 <code>窗体的结构</code></li>\n<li><code>checkbox</code> ： <code>复选框关键字</code> ，与 <code>endcheckbox</code>  成对出现，定义 <code>复选框</code> 供 <code>用户使用</code> 。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">///** @file</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//    File Explorer Formset</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//  Copyright (c) 2004 - 2018, Intel Corporation. All rights reserved.&lt;BR></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//  SPDX-License-Identifier: BSD-2-Clause-Patent</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//**/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"FormGuid.h\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>formset</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  guid <span class=\"token operator\">=</span> EFI_FILE_EXPLORE_FORMSET_GUID<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  title <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_FILE_EXPLORER_TITLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  help <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_NULL_STRING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  classguid <span class=\"token operator\">=</span> EFI_FILE_EXPLORE_FORMSET_GUID<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  form formid <span class=\"token operator\">=</span> FORM_FILE_EXPLORER_ID<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       title <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_FILE_EXPLORER_TITLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       label FORM_FILE_EXPLORER_ID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>       label LABEL_END<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  endform<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  form formid <span class=\"token operator\">=</span> FORM_ADD_NEW_FILE_ID<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>       title <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_ADD_NEW_FILE_TITLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      string</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          prompt   <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_NEW_FILE_NAME_PROMPT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          help     <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_NEW_FILE_NAME_HELP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          flags    <span class=\"token operator\">=</span> INTERACTIVE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          key      <span class=\"token operator\">=</span> NEW_FILE_NAME_ID<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          minsize  <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          maxsize  <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      endstring<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      subtitle text <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_NULL_STRING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>       text</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         help   <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_CREATE_FILE_AND_EXIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>         text   <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_CREATE_FILE_AND_EXIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>         flags  <span class=\"token operator\">=</span> INTERACTIVE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         key    <span class=\"token operator\">=</span> KEY_VALUE_CREATE_FILE_AND_EXIT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>       text</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>         help   <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_NO_CREATE_FILE_AND_EXIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>         text   <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_NO_CREATE_FILE_AND_EXIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>         flags  <span class=\"token operator\">=</span> INTERACTIVE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>         key    <span class=\"token operator\">=</span> KEY_VALUE_NO_CREATE_FILE_AND_EXIT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  endform<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  form formid <span class=\"token operator\">=</span> FORM_ADD_NEW_FOLDER_ID<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      title <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_ADD_NEW_FOLDER_TITLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      string</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          prompt   <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_NEW_FOLDER_NAME_PROMPT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>          help     <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_NEW_FOLDER_NAME_HELP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>          flags    <span class=\"token operator\">=</span> INTERACTIVE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>          key      <span class=\"token operator\">=</span> NEW_FOLDER_NAME_ID<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>          minsize  <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>          maxsize  <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      endstring<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      subtitle text <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_NULL_STRING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      text</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        help   <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_CREATE_FOLDER_AND_EXIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        text   <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_CREATE_FOLDER_AND_EXIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        flags  <span class=\"token operator\">=</span> INTERACTIVE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        key    <span class=\"token operator\">=</span> KEY_VALUE_CREATE_FOLDER_AND_EXIT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      text</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        help   <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_NO_CREATE_FOLDER_AND_EXIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        text   <span class=\"token operator\">=</span> <span class=\"token function\">STRING_TOKEN</span><span class=\"token punctuation\">(</span>STR_NO_CREATE_FOLDER_AND_EXIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        flags  <span class=\"token operator\">=</span> INTERACTIVE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        key    <span class=\"token operator\">=</span> KEY_VALUE_NO_CREATE_FOLDER_AND_EXIT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  endform<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>endformset<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"edk2目录介绍\"><a class=\"anchor\" href=\"#edk2目录介绍\">#</a> EDK2 目录介绍</h1>\n<ul>\n<li><code>AppPkg</code> : <code>UEFI Application Development Kit</code>  是一系列用来开发 <code>UEFI APP</code>  开发的套件， <code>标准依赖库</code> ，工具以及 <code>demo</code> ，目标是 <code>降低UEFI app</code>  的开发框架</li>\n<li><code>ArmPkg</code> : 提供 <code>ARM框架</code> 相关的 Protocols, 属于 <code>ARM平台上</code> 的通用代码</li>\n<li><code>ArmPlatformPkg</code>  :  <code>ARM开发板</code> 相关的 <code>UEFI代码</code> ，包 <code>含ARM平台上通用</code> 的一些 <code>组件</code> ， <code>重复利用</code> 这些组件会令 ARM 平台不用的版型之间的移植变得更加容易</li>\n<li><code>BaseTools</code> : 提供了编译 <code>EDK2的相关工具</code> ：AutoGen,Build,GenSec,GenFV,GenFW,GenRds 工具。</li>\n<li><code>Conf</code> :</li>\n<li><code>CryptoPkg</code> : <code>UEFI</code>  定义了 <code>HLOS(high level OS)</code>  和 <code>平台固件之间</code> 的接口，多个安全特性也再去其中，用来提供加密支持</li>\n<li><code>EmbeddedPkg</code>  : 为 <code>memory mapped controllers</code>  提供 <code>protocol实现</code> ，是一个简单的 EFI shell（EBL)</li>\n<li><code>EmulatorPkg</code> :  <code>Emulator虚拟环境</code> ，用来替代 Nt32Pkg 和 UnixPkg，k 可以跨平台编译</li>\n<li><code>FatPkg</code> : <code>FAT支持包</code></li>\n<li><code>MdeModulePkg</code> : 此包提供符合 <code>UEEI/PI</code>  工业标准的模版，也提供标准相关的开发环境， <code>PPIs/PROTOCOLs/GUIDS</code>  和 <code>依赖库</code></li>\n<li><code>MdePkg</code> : 全程 <code>Module Development Environment Package</code> , 此为特殊的 <code>Package</code> ，包含了用于 <code>开发module</code>  所需要的最小环境。一个 <code>module可</code> 能也会依赖于其他的 <code>Package</code> ，但是所有 modules 必须依赖于 <code>MdePkg</code> .</li>\n<li><code>NetworkPkg</code> : 提供 <code>网络支持的包</code> ，比如：IPV6 网络协议栈 / IPsec 驱动 / ISCSI 驱动 / 网络配置 <code>先关的shell app</code></li>\n<li><code>OvmfPkg</code> :  <code>OVM</code> F 是用来给虚拟机 <code>提供UEFI支持的包</code> ，可以使用 <code>QEMU</code>  和 <code>KVM</code>  来引导 <code>OVMF固件</code> ，并进一步引导 <code>HLOS</code></li>\n<li><code>PcAtChipsetPkg</code> : 此包提供了 <code>符合PcAt标准器件</code> 的接口和实现</li>\n<li><code>StdLib</code> : 提供了 <code>标准库UDK</code>  实现， <code>StdLibPrivateInternalFiles</code>  包时用来 <code>给StdLib</code>  使用的，不能用作其他引用</li>\n<li><code>UefiCpuPkg</code> : 提供 <code>兼容UEFI</code>  的 <code>CPU模版</code> 和 <code>库</code></li>\n</ul>\n<h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODczMTkyL2FydGljbGUvZGV0YWlscy8xMjYyODc3ODI=\">UEFI 原理与编程 - 第三章节内容整理</span></li>\n<li>《UEFI 编程实战》</li>\n</ul>\n",
            "tags": [
                "BIOS",
                "BIOS",
                "UEFI",
                "EDK2"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/BIOS/EDK2%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0/",
            "url": "https://www.blog.foryouos.cn/BIOS/EDK2%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0/",
            "title": "EDK2入口函数",
            "date_published": "2023-08-11T23:55:00.000Z",
            "content_html": "<h1 id=\"入口函数\"><a class=\"anchor\" href=\"#入口函数\">#</a> 入口函数</h1>\n<blockquote>\n<p>一个简单的 <code>UEFI程序</code> ， <code>至少</code> 包含 <code>两个</code> 部分</p>\n<ul>\n<li><code>C程序源文</code> 件 ： 用来实现 <code>具体功能</code> ，在复杂程序中源文件可能包含： <code>C/C++源代码</code> ， <code>.asm汇编文件</code>  (.s 汇编文件， <code>uin资源</code> 文件 (字符串资源文件) 和 <code>.vfr</code>  资源文件)</li>\n<li><code>INF元数据</code> 文件用来编译代码</li>\n</ul>\n</blockquote>\n<h2 id=\"入口函数返回值类型efi_status\"><a class=\"anchor\" href=\"#入口函数返回值类型efi_status\">#</a> 入口函数返回值类型 <code>EFI_STATUS</code></h2>\n<blockquote>\n<ul>\n<li>在 <code>UEFI</code>  中基本所有的返回值类型都是 <code>EFI_STATUS</code> , 其本质是 <code>无符号长整数</code></li>\n<li>最高位为 <code>1</code>  时其值为 <code>错误代码</code> ，为 <code>0</code>  表示 <code>正确</code> 。听过 <code>宏EFI_ERROR(Status)</code>  可以判断 <code>返回值Status</code></li>\n</ul>\n</blockquote>\n<h2 id=\"头文件\"><a class=\"anchor\" href=\"#头文件\">#</a> 头文件</h2>\n<blockquote>\n<ul>\n<li><code>&lt;Uefi.h&gt;</code> : 定义了 <code>UEFI</code>  中的基本 <code>数据类型</code> 和 <code>核心数据结构</code></li>\n<li><code>&lt;Library/UefiLib.h&gt;</code> : 提供通用的 <code>库函数</code> ，包括 <code>时间</code> ， <code>简单锁</code> ， <code>任务优先级</code> ， <code>驱动管理和字符</code> ， <code>图形显示输出</code>  等基本功能</li>\n<li><code>&lt;Library/BaseLib.h&gt; </code> : 提供 <code>字符串处理</code> ， <code>数学</code> ， <code>文件路径处理</code> 等相关库函数</li>\n<li><code>&lt;Library/BaseMemoryLib.h&gt;</code> : 提供 <code>内存的库函数</code> ，包括 <code>内存拷贝</code> ， <code>内存填充</code> ， <code>内存清空</code> 等库函数</li>\n<li><code>&lt;Library/DebugLib.h&gt;</code>  ：提供 <code>调试输出</code> 功能的库函数</li>\n</ul>\n</blockquote>\n<h1 id=\"efi文件\"><a class=\"anchor\" href=\"#efi文件\">#</a>  <code>efi</code>  文件</h1>\n<blockquote>\n<p><code>.efi</code>  文件 ( <code>UEFI应用程序</code> 或 <code>UEFI驱动程序</code> ) 加载到内存后生成的对象成为 <code>Image</code>  映像)。 <code>ImageHandle</code>  是 <code>Image</code>  对象的句柄，作为模版入口函数参数，它表示 <code>模块自身</code> 加载到内存后生成的 <code>Image对象</code> 。</p>\n<p><code>UEFI Image</code>  通常存储在文件系统中，可以是 <code>.efi</code>  文件或一个文件夹，包含 <code>多个.efi</code>  文件，UEFI Image 可以包含 <code>UEFI BIOS</code>  的一些功能模块和驱动程序，也可以是一个 UEFI 应用程序或操作系统的引导程序。当 UEFI 启动时，UEFI Loader 会加载 UEFI Image 到内存中，并执行其中的代码来启动系统。</p>\n<p>在 <code>UEFI</code>  中， <code>映像</code> 通常指的是 <code>内存映像</code> ，用于表示一个进程或操作系统执行时的内存状态。例如，在 UEFI 内存取证中，可以通过获取系统的内存映像来分析系统的运行状态和数据。</p>\n</blockquote>\n<h2 id=\"guid\"><a class=\"anchor\" href=\"#guid\">#</a>  <code>GUID</code></h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  UINT32    Data1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  UINT16    Data2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  UINT16    Data3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  UINT8     Data4<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> GUID<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"字符量\"><a class=\"anchor\" href=\"#字符量\">#</a> 字符量</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>__int64 的最大值：9223372036854775807</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>__int64 的最小值：-9223372036854775808</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>unsigned __int64 的最大值：18446744073709551615</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> __int64  UINT64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> __int64           INT64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> __int32  UINT32<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">typedef</span> __int32           INT32<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> unsigned short [int] 的字节数位 2，取值范围是 0 ~ 2^16-1，即 0 ~ 65535</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span>    UINT16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span>    CHAR16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 短整型 -32768 ~ +32767</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">short</span>             INT16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 无符号字符型 unsigned  0~255</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>     BOOLEAN<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>     UINT8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 字符型 char 取值范围 -128 ~ +127</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span>              CHAR8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 有符号字符类型 -128 到 127</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">char</span>       INT8<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"工程结构\"><a class=\"anchor\" href=\"#工程结构\">#</a> 工程结构</h1>\n<ul>\n<li><code>Pkg</code>  是 <code>Package</code>  的缩写， <code>包</code> 的意思</li>\n<li><code>EDK2</code>  模块化，每个 <code>Pkg</code>  都是一个 <code>解决方案</code></li>\n<li><code>build</code>  保存着 <code>Pkg编译</code> 的结果</li>\n<li><code>Conf</code>  保存各种 <code>配置文</code> 件， <code>target.txt</code>  编译目标，</li>\n<li><code>edksetup.bat脚本</code></li>\n<li><code>dsc</code>  是对 <code>整个包的描述</code></li>\n<li><code>dec</code>  是 <code>定义公开</code> 的 <code>内容</code> 和 <code>接口</code> ，是 UEFI 接口的实现</li>\n</ul>\n<h1 id=\"启动edk2\"><a class=\"anchor\" href=\"#启动edk2\">#</a> 启动 EDK2</h1>\n<blockquote>\n<p><code>EDK2</code>  是实现 <code>UEFI</code>  的源码</p>\n<p><code>build</code>  构建之后，进入对应的如下页面，启动 <code>WinHost.exe</code>  文件。</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>edk2<span class=\"token punctuation\">\\</span>Build<span class=\"token punctuation\">\\</span>EmulatorX64<span class=\"token punctuation\">\\</span>DEBUG_VS2019<span class=\"token punctuation\">\\</span>X64</pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># U 盘的文件系统为 FAT32 系统 I 会首先检查下面目录寻找，作为启动</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>EFI/Boot/BootX64.efi</pre></td></tr></table></figure><h1 id=\"第一个hello-word\"><a class=\"anchor\" href=\"#第一个hello-word\">#</a> 第一个 Hello Word</h1>\n<blockquote>\n<p>一个基本的 <code>UEFI程序</code> 需要包括 <code>.c文件</code> ，以及 <code>.inf文件模块</code> 工程文件，描述模块的 <code>属性</code> ， <code>提供依赖库</code> ，支持的 <code>CPU架构</code> 等信息。</p>\n</blockquote>\n<h2 id=\"存储内容\"><a class=\"anchor\" href=\"#存储内容\">#</a> 存储内容</h2>\n<ul>\n<li><code>EDK2文件夹</code> 下分为两个文件 <code>edk2</code>  和 <code>edk2-libc</code></li>\n<li>在 <code>EDK2文件夹</code> 下创建 <code>mybuild.bat,</code>  设置基本 <code>环境配置</code></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set WORKSPACE<span class=\"token operator\">=</span><span class=\"token operator\">%</span>CD<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>set EDK_TOOLS_PATH<span class=\"token operator\">=</span><span class=\"token operator\">%</span>CD<span class=\"token operator\">%</span>\\edk2\\BaseTools</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>set CONF_PATH<span class=\"token operator\">=</span><span class=\"token operator\">%</span>CD<span class=\"token operator\">%</span>\\edk2\\Conf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>set PACKAGES_PATH<span class=\"token operator\">=</span><span class=\"token operator\">%</span>CD<span class=\"token operator\">%</span>\\edk2<span class=\"token punctuation\">;</span><span class=\"token operator\">%</span>CD<span class=\"token operator\">%</span>\\edk2<span class=\"token operator\">-</span>lib</pre></td></tr></table></figure><ul>\n<li>在根目录的 <code>AppPkg</code>  目录 <code>Applications</code>  目录下创建目录</li>\n<li>分别创建 <code>.c</code>  和 <code>.inf</code>  文件</li>\n<li>在 <code>Application</code>  同级目录的 <code>AppPkg.dsc</code>  文件中添加文件 <code>.inf模块</code> 工程文件 <code>内容</code></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Components<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  AppPkg<span class=\"token operator\">/</span>Applications<span class=\"token operator\">/</span>ShellApp_Main<span class=\"token operator\">/</span>ShellApp_Main<span class=\"token punctuation\">.</span>inf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  AppPkg<span class=\"token operator\">/</span>Applications<span class=\"token operator\">/</span>Stdlib_Main<span class=\"token operator\">/</span>Stdlib_Main<span class=\"token punctuation\">.</span>inf    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  AppPkg<span class=\"token operator\">/</span>Applications<span class=\"token operator\">/</span>Uefi_Main<span class=\"token operator\">/</span>Uefi_Main<span class=\"token punctuation\">.</span>inf</pre></td></tr></table></figure><h2 id=\"入口函数-2\"><a class=\"anchor\" href=\"#入口函数-2\">#</a> 入口函数</h2>\n<h3 id=\"uefi_mainc\"><a class=\"anchor\" href=\"#uefi_mainc\">#</a>  <code>Uefi_Main.c</code></h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/** @file</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  This is Sample of UEFI aplication. </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * **/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Uefi.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Library/UefiLib.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  The user Entry Point for Application. The user code starts with this function</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  as the real entry point for the application.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  @param[in] ImageHandle    The firmware allocated handle for the EFI image.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  @param[in] SystemTable    A pointer to the EFI System Table.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  EFI_STATUS   typedef UINT64 UINTN;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  @retval EFI_SUCCESS       The entry point is executed successfully.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  @retval other             Some error occurs when executing this entry point.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>**/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>EFI_STATUS </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>EFIAPI</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">UefiMain</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  IN EFI_HANDLE        ImageHandle<span class=\"token punctuation\">,</span>  <span class=\"token comment\">//Image-Handle 指向模版自身加载到内存的 Image 对象，也就是 Image 对象的句柄</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  IN EFI_SYSTEM_TABLE  <span class=\"token operator\">*</span>SystemTable  <span class=\"token comment\">//SystemTable 是 UEFI 应用与 UEFI 内核交互的桥梁，通过它可以获得 UEFI 提供的各种服务，包括 BS 服务，和 RT 服务</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  EFI_TIME curTime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 时间函数结构体</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Hello,this is Entry of UefiMain!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用 Print 方法输出</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// 使用 BootService 和 RuntimeService</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  SystemTable<span class=\"token operator\">-></span>BootServices<span class=\"token operator\">-></span><span class=\"token function\">Stall</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 延时 2 秒</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    调用了在 RuntimeServices 里面的 GetTime 函数指针 (&amp;curTime,NULL) 为参数</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    RuntimeServices 为结构体</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    将得到的时间结构体赋值给了 curTime 结构体</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  SystemTable<span class=\"token operator\">-></span>RuntimeServices<span class=\"token operator\">-></span><span class=\"token function\">GetTime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curTime<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">// 通过结构体输出</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Current Time: %d-%d-%d %02d:%02d:%02d\\n\"</span><span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Year<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Month<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Day<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Hour<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Minute<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"NanoTime:%d\\n\"</span><span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Nanosecond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"TimeZone:%d\\n\"</span><span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>TimeZone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Pad1:%d\\n\"</span><span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Pad1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Pad2:%d\\n\"</span><span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Pad2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token comment\">// 使用 SystemTable</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">// 使用 SystemTable 的输出函数调用进行输出</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  SystemTable<span class=\"token operator\">-></span>ConOut<span class=\"token operator\">-></span><span class=\"token function\">OutputString</span><span class=\"token punctuation\">(</span>SystemTable<span class=\"token operator\">-></span>ConOut<span class=\"token punctuation\">,</span>L<span class=\"token string\">\"Test SystemTable...\\n\\r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">return</span> EFI_SUCCESS<span class=\"token punctuation\">;</span> <span class=\"token comment\">//return 0</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"uefi_maininf\"><a class=\"anchor\" href=\"#uefi_maininf\">#</a> Uefi_Main.inf</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Defines<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  INF_VERSION <span class=\"token operator\">=</span>      <span class=\"token number\">0x00010005</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  BASE_NAME <span class=\"token operator\">=</span>        Hello</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  FILE_GUID <span class=\"token operator\">=</span>        f35a7352<span class=\"token operator\">-</span><span class=\"token number\">2</span>cc1<span class=\"token operator\">-</span><span class=\"token number\">44</span>c0<span class=\"token operator\">-</span><span class=\"token number\">9</span>ba6<span class=\"token operator\">-</span><span class=\"token number\">4</span>c3b5f4dbe42</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  MODULE_TYPE <span class=\"token operator\">=</span>      UEFI_APPLICATION </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  VERSION_STRING <span class=\"token operator\">=</span>   <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  ENTRY_POINT <span class=\"token operator\">=</span>      UefiMain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  Hello<span class=\"token punctuation\">.</span>c</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>Packages<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  MdePkg<span class=\"token operator\">/</span>MdePkg<span class=\"token punctuation\">.</span>dec</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token expression\">MdeModulePkg<span class=\"token operator\">/</span>MdeModulePkg<span class=\"token punctuation\">.</span>dec</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>LibraryClasses<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  UefiApplicationEntryPoint</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  UefiLib</pre></td></tr></table></figure><h3 id=\"shellapp_mainc\"><a class=\"anchor\" href=\"#shellapp_mainc\">#</a>  <code>ShellApp_Main.c</code></h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;Uefi.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;Library/UefiLib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;Library/ShellCEntryLib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Library/UefiBootServicesTableLib.h></span>  <span class=\"token comment\">//gST,gBs</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Library/UefiRuntimeServicesTableLib.h></span> <span class=\"token comment\">//gRT</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Print a welcoming message.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  Establishes the main structure of the application.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  @retval  0         The application exited normally.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  @retval  Other     An error occurred.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>***/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>INTN</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>EFIAPI</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">ShellAppMain</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  IN UINTN Argc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  IN CHAR16 <span class=\"token operator\">*</span><span class=\"token operator\">*</span>Argv</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  EFI_TIME curTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Hello,this is Entry of ShellAppMain!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// 使用 BootService 和 RuntimeService</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">//gST->BootServices->Stall (2000);  // 延时 2 秒</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  gBS<span class=\"token operator\">-></span><span class=\"token function\">Stall</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// gST->RuntimeServices->GetTime(&amp;curTime,NULL);</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  gRT<span class=\"token operator\">-></span><span class=\"token function\">GetTime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curTime<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Current Time: %d-%d-%d %02d:%02d:%02d\\n\"</span><span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Year<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Month<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Day<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Hour<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Minute<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">// 使用 SystemTable</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  gST<span class=\"token operator\">-></span>ConOut<span class=\"token operator\">-></span><span class=\"token function\">OutputString</span><span class=\"token punctuation\">(</span>gST<span class=\"token operator\">-></span>ConOut<span class=\"token punctuation\">,</span>L<span class=\"token string\">\"Test SystemTable...\\n\\r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"shellapp_maininf\"><a class=\"anchor\" href=\"#shellapp_maininf\">#</a> ShellApp_Main.inf</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>## @file</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>  <span class=\"token expression\">Sample UEFI Application Reference EDKII Module<span class=\"token punctuation\">.</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>#</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>  <span class=\"token expression\">This is a sample shell application that will print Hello<span class=\"token punctuation\">,</span>this is Entry of ShellAppMain<span class=\"token operator\">!</span>\" to the</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>  <span class=\"token expression\">UEFI Console<span class=\"token punctuation\">.</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>#</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>##</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>Defines<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  INF_VERSION                    <span class=\"token operator\">=</span> <span class=\"token number\">0x00010006</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  BASE_NAME                      <span class=\"token operator\">=</span> ShellApp_Main</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  FILE_GUID                      <span class=\"token operator\">=</span> a912f198<span class=\"token operator\">-</span><span class=\"token number\">7f</span><span class=\"token number\">0e-4813</span><span class=\"token operator\">-</span>b918<span class=\"token operator\">-</span>b757b106ec83</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  MODULE_TYPE                    <span class=\"token operator\">=</span> UEFI_APPLICATION</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  VERSION_STRING                 <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  ENTRY_POINT                    <span class=\"token operator\">=</span> ShellCEntryLib</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>#</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>  <span class=\"token expression\">VALID_ARCHITECTURES           <span class=\"token operator\">=</span> IA32 X64</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>#</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">[</span>Sources<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  ShellApp_Main<span class=\"token punctuation\">.</span>c</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">[</span>Packages<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  MdePkg<span class=\"token operator\">/</span>MdePkg<span class=\"token punctuation\">.</span>dec</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  ShellPkg<span class=\"token operator\">/</span>ShellPkg<span class=\"token punctuation\">.</span>dec</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">[</span>LibraryClasses<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  UefiLib</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  ShellCEntryLib</pre></td></tr></table></figure><h3 id=\"stdlib_mainc\"><a class=\"anchor\" href=\"#stdlib_mainc\">#</a>  <code>Stdlib_Main.c</code></h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;Uefi.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;Library/UefiLib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;Library/ShellCEntryLib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Library/UefiBootServicesTableLib.h></span>  <span class=\"token comment\">//gST,gBs</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Library/UefiRuntimeServicesTableLib.h></span> <span class=\"token comment\">//gRT</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span>  <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  Demonstrates basic workings of the main() function by displaying a</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  welcoming message.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  Note that the UEFI command line is composed of 16-bit UCS2 wide characters.</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  The easiest way to access the command line parameters is to cast Argv as:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  wchar_t **wArgv = (wchar_t **)Argv;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  @param[in]  Argc    Number of argument tokens pointed to by Argv.</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  @param[in]  Argv    Array of Argc pointers to command line tokens.</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  @retval  0         The application exited normally.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  @retval  Other     An error occurred.</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>***/</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token function\">main</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  IN <span class=\"token keyword\">int</span> Argc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  IN <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>Argv</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  EFI_TIME curTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Hello,this is Entry of ShellAppMain!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello,this is Entry of main!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">// 使用 BootService 和 RuntimeService</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  gST<span class=\"token operator\">-></span>BootServices<span class=\"token operator\">-></span><span class=\"token function\">Stall</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 延时 2 秒</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  gBS<span class=\"token operator\">-></span><span class=\"token function\">Stall</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用全局变量</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">// 获取时间，真实的函数只有一个，而实现函数的函数指针有多个</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  gST<span class=\"token operator\">-></span>RuntimeServices<span class=\"token operator\">-></span><span class=\"token function\">GetTime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curTime<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  gRT<span class=\"token operator\">-></span><span class=\"token function\">GetTime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curTime<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current Time: %d-%d-%d %02d:%02d:%02d\\n\"</span><span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Year<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Month<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Day<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Hour<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Minute<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">// 使用 SystemTable</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  gST<span class=\"token operator\">-></span>ConOut<span class=\"token operator\">-></span><span class=\"token function\">OutputString</span><span class=\"token punctuation\">(</span>gST<span class=\"token operator\">-></span>ConOut<span class=\"token punctuation\">,</span>L<span class=\"token string\">\"Test SystemTable...\\n\\r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"stdlib_maininf\"><a class=\"anchor\" href=\"#stdlib_maininf\">#</a> Stdlib_Main.inf</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>## @file</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>  <span class=\"token expression\">Sample UEFI Application Reference EDKII Module<span class=\"token punctuation\">.</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>#</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>  <span class=\"token expression\">This is a sample shell application that will print Hello<span class=\"token punctuation\">,</span>this is Entry of main<span class=\"token operator\">!</span>\" to the</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>  <span class=\"token expression\">UEFI Console<span class=\"token punctuation\">.</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>#</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>##</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>Defines<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  INF_VERSION                    <span class=\"token operator\">=</span> <span class=\"token number\">0x00010006</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  BASE_NAME                      <span class=\"token operator\">=</span> Stdlib_Main</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  FILE_GUID                      <span class=\"token operator\">=</span> <span class=\"token number\">4</span>ea97c46<span class=\"token operator\">-</span><span class=\"token number\">1491</span><span class=\"token operator\">-</span><span class=\"token number\">4</span>dfd<span class=\"token operator\">-</span>b412<span class=\"token operator\">-</span><span class=\"token number\">747010f</span><span class=\"token number\">31e5f</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  MODULE_TYPE                    <span class=\"token operator\">=</span> UEFI_APPLICATION</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  VERSION_STRING                 <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  ENTRY_POINT                    <span class=\"token operator\">=</span> ShellCEntryLib</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>#</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span>  <span class=\"token expression\">VALID_ARCHITECTURES           <span class=\"token operator\">=</span> IA32 X64</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>#</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">[</span>Sources<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  Stdlib_Main<span class=\"token punctuation\">.</span>c</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">[</span>Packages<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  StdLib<span class=\"token operator\">/</span>StdLib<span class=\"token punctuation\">.</span>dec</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  MdePkg<span class=\"token operator\">/</span>MdePkg<span class=\"token punctuation\">.</span>dec</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  ShellPkg<span class=\"token operator\">/</span>ShellPkg<span class=\"token punctuation\">.</span>dec</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">[</span>LibraryClasses<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  LibC</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  LibStdio</pre></td></tr></table></figure><h2 id=\"dsc添加编译\"><a class=\"anchor\" href=\"#dsc添加编译\">#</a> DSC 添加编译</h2>\n<blockquote>\n<p>将添加到 <code>AppPkg</code>  目录下的文件添加到 <code>Components</code>  目录下</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Components<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  AppPkg<span class=\"token operator\">/</span>Applications<span class=\"token operator\">/</span>ShellApp_Main<span class=\"token operator\">/</span>ShellApp_Main<span class=\"token punctuation\">.</span>inf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  AppPkg<span class=\"token operator\">/</span>Applications<span class=\"token operator\">/</span>Stdlib_Main<span class=\"token operator\">/</span>Stdlib_Main<span class=\"token punctuation\">.</span>inf    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  AppPkg<span class=\"token operator\">/</span>Applications<span class=\"token operator\">/</span>Uefi_Main<span class=\"token operator\">/</span>Uefi_Main<span class=\"token punctuation\">.</span>inf</pre></td></tr></table></figure><h2 id=\"修改输出位置\"><a class=\"anchor\" href=\"#修改输出位置\">#</a> 修改输出位置</h2>\n<blockquote>\n<p>为了 <code>方便EDK2运行环境</code> 执行，固将 <code>AppPkg.dsc</code>  输出的 <code>目录</code> 修改为 <code>EDK2</code>  编译环境的 <code>执行位置</code> ，方便 <code>测试执行</code></p>\n<p>修改下面对应的</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Defines<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tOUTPUT_DIRECTORY               <span class=\"token operator\">=</span> Build<span class=\"token operator\">/</span>EmulatorX64<span class=\"token operator\">/</span>DEBUG_VS2019<span class=\"token operator\">/</span>X64  # 输出到指定的位置</pre></td></tr></table></figure><h2 id=\"edk2编译\"><a class=\"anchor\" href=\"#edk2编译\">#</a> EDK2 编译</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 编译mybuild<span class=\"token punctuation\">.</span>bat</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mybuild<span class=\"token punctuation\">.</span>bat</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>edk2\\edksetup<span class=\"token punctuation\">.</span>bat</pre></td></tr><tr><td data-num=\"4\"></td><td><pre># 编译edk2的UEFI模拟器</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>build <span class=\"token operator\">-</span>p edk2\\EmulatorPkg\\EmulatorPkg<span class=\"token punctuation\">.</span>dsc <span class=\"token operator\">-</span>t VS2019 <span class=\"token operator\">-</span>a X64</pre></td></tr><tr><td data-num=\"6\"></td><td><pre># 编译UEFI程序</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>build <span class=\"token operator\">-</span>p edk2<span class=\"token operator\">-</span>libc\\AppPkg\\AppPkg<span class=\"token punctuation\">.</span>dsc <span class=\"token operator\">-</span>t VS2019 <span class=\"token operator\">-</span>a X64</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre># 清理编译结果，如果不清空，存在无法覆盖问题</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>build clean <span class=\"token operator\">-</span>p edk2\\EmulatorPkg\\EmulatorPkg<span class=\"token punctuation\">.</span>dsc <span class=\"token operator\">-</span>t VS2019 <span class=\"token operator\">-</span>a X64</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre># 清理edk2<span class=\"token operator\">-</span>lib2</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>build clean <span class=\"token operator\">-</span>p edk2<span class=\"token operator\">-</span>libc\\AppPkg\\AppPkg<span class=\"token punctuation\">.</span>dsc <span class=\"token operator\">-</span>t VS2019 <span class=\"token operator\">-</span>a X64</pre></td></tr></table></figure><blockquote>\n<ul>\n<li><code>编译完成</code> 之后会 <code>创建Build目录</code></li>\n<li>运行 <code>build</code>  即可对刚才 <code>输入的程序</code> 进行 <code>编译</code> 成 <code>efi可执行</code> 文件</li>\n<li>进入 <code>WinHost.exe</code>  运行对应的 <code>文件名</code> 即可 <code>运行成功</code></li>\n</ul>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 输入如下指令，进入根目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FS0:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 输入 Hello 点回车自动补全，即可进入 HelloWorld.efi 输出 UEFI Hello World!</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Hello.efi</pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsrTqzTjU1sh2GL0KbQcJdOBDKXvxa8eHEWm55cTXselCIaMraNbjVVI833m3lcQnEeTVSibFo7vhg/640?wx_fmt=png\" alt=\"第一个HelloWorld\" /></p>\n<blockquote>\n<p>运行结束后，执行 <code>build clean</code>  清空缓存，以防止 <code>再次编译无法覆盖</code> 问题。</p>\n</blockquote>\n<h1 id=\"相关指令\"><a class=\"anchor\" href=\"#相关指令\">#</a> 相关指令</h1>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 启动 UI 的 BIOS 页面</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>UiApp.efi</pre></td></tr></table></figure><h1 id=\"编译运行\"><a class=\"anchor\" href=\"#编译运行\">#</a> 编译运行</h1>\n<blockquote>\n<p>在 edk2 的跟页面启动 CMD, 运行</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>edksetup.bat</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 设置之后修改 conf 中的 target.txt</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>edksetup.bat rebuild </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 通过 build 构建，此方法构建的是默认 conf 设置的包路径</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>build</pre></td></tr></table></figure><h1 id=\"鼠标抓取小项目\"><a class=\"anchor\" href=\"#鼠标抓取小项目\">#</a> 鼠标抓取小项目</h1>\n<blockquote>\n<p>首先将 <code>鼠标</code> 和 <code>键盘</code> 的 <code>时间绑定</code> 到 <code>events事件</code> 里</p>\n<ul>\n<li>通过 <code>while(1)</code>  循环</li>\n<li>等待鼠标或键盘事件发生， <code>0</code>  为 <code>鼠标</code> ，其它为 <code>键盘</code></li>\n<li>当为 <code>数</code> 表示时获取 <code>当前鼠标</code> 的状态，根据其状态输 <code>出其对应的位置</code> 和 <code>点击时间</code> ，输出左键或右键</li>\n<li>键盘的话，判断其对应的是否为 <code>q</code> , 若为 <code>q</code>  将 <code>break</code> ， <code>结束循环</code></li>\n<li>若键盘输入 <code>不为k</code> ， <code>输出</code> 其值</li>\n</ul>\n<p>后续可逐步进化到鼠标 <code>控制UEFI</code>  界面</p>\n<p><code>小Bug</code> ：</p>\n<ul>\n<li>键盘上 <code>输入</code> 的 <code>字母</code> ，需要点一下 <code>鼠标</code> 才能显示出来。</li>\n</ul>\n</blockquote>\n<h2 id=\"mouse_mainc\"><a class=\"anchor\" href=\"#mouse_mainc\">#</a>  <code>Mouse_Main.c</code></h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Uefi.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Library/UefiLib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Library/UefiBootServicesTableLib.h></span> <span class=\"token comment\">//gST,gBs</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Library/UefiRuntimeServicesTableLib.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Protocol/SimplePointer.h></span> <span class=\"token comment\">//mouse point include Protocol</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// Include/Protocol/SimplePointer </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>EFI_GUID gEfiSimplePointerProtocolGuid <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0x31878C87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0B75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x11D5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0x9A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x3F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4D</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>EFI_STATUS</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>EFIAPI</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">UefiMain</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    IN EFI_HANDLE ImageHandle<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    IN EFI_SYSTEM_TABLE <span class=\"token operator\">*</span>SystemTable </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    EFI_TIME curTime<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"mouse clicked grap!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    SystemTable<span class=\"token operator\">-></span>ConOut<span class=\"token operator\">-></span><span class=\"token function\">OutputString</span><span class=\"token punctuation\">(</span>SystemTable<span class=\"token operator\">-></span>ConOut<span class=\"token punctuation\">,</span>L<span class=\"token string\">\"mouse clicked grap\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    gRT<span class=\"token operator\">-></span><span class=\"token function\">GetTime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curTime<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Clicked Time: %d-%d-%d %d-%d-%d-%d\\n\"</span><span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Year<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Month<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Day<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Hour<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Minute<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Nanosecond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// Enable Cursor</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    EFI_STATUS Status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    EFI_SIMPLE_POINTER_PROTOCOL<span class=\"token operator\">*</span> mounse <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    EFI_SIMPLE_POINTER_STATE State<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    EFI_EVENT events<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 键盘鼠标事件</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 显示光标</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    gST<span class=\"token operator\">-></span>ConOut<span class=\"token operator\">-></span><span class=\"token function\">EnableCursor</span><span class=\"token punctuation\">(</span>gST<span class=\"token operator\">-></span>ConOut<span class=\"token punctuation\">,</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 根据 GUID 值找出鼠标设备</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    Status <span class=\"token operator\">=</span> gBS<span class=\"token operator\">-></span><span class=\"token function\">LocateProtocol</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token operator\">&amp;</span>gEfiSimplePointerProtocolGuid<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">(</span>VOID<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>mounse</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 错误判断</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">EFI_ERROR</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Unable to initialize EFI_SIMPLE_POINTER_PROTOCOL protocol interface!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 重置鼠标设置</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    Status <span class=\"token operator\">=</span> mounse<span class=\"token operator\">-></span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span>mounse<span class=\"token punctuation\">,</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 错误判断</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">EFI_ERROR</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Unable to initialize EFI_SIMPLE_POINTER_PROTOCOL protocol interface!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 将鼠标事件放到等待事件数组</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    events<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mounse<span class=\"token operator\">-></span>WaitForInput<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">// 将键盘也放到等待数组中</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    events<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mounse<span class=\"token operator\">-></span>WaitForInput<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 使用循环读取</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">/* code */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        EFI_INPUT_KEY Key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        UINTN index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">// 等待 events 中的任一事件发生，根据时间判断键盘还是鼠标</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        Status <span class=\"token operator\">=</span> gBS<span class=\"token operator\">-></span><span class=\"token function\">WaitForEvent</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>events<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">// 根据 index 的不同值会传出不同的事件</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>State<span class=\"token punctuation\">.</span>LeftButton<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Pressed Left\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>State<span class=\"token punctuation\">.</span>RightButton<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Pressed Right\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token comment\">// 获取鼠标状态并输出</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            Status <span class=\"token operator\">=</span> mounse<span class=\"token operator\">-></span><span class=\"token function\">GetState</span><span class=\"token punctuation\">(</span>mounse<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>State<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            gRT<span class=\"token operator\">-></span><span class=\"token function\">GetTime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curTime<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Clicked Time minuter second  N-Second:%d - %d - %d\\t\"</span><span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Minute<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span>curTime<span class=\"token punctuation\">.</span>Nanosecond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"X:%d Y:%d Z:%d L:%d R:%d\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            State<span class=\"token punctuation\">.</span>RelativeMovementX<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            State<span class=\"token punctuation\">.</span>RelativeMovementY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            State<span class=\"token punctuation\">.</span>RelativeMovementZ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token comment\">// 按键盘事件发生后读取键盘</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            Status <span class=\"token operator\">=</span> gST<span class=\"token operator\">-></span>ConIn<span class=\"token operator\">-></span><span class=\"token function\">ReadKeyStroke</span><span class=\"token punctuation\">(</span>gST<span class=\"token operator\">-></span>ConIn<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>Key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token comment\">// 错误判断</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">EFI_ERROR</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token comment\">// Print (L\"95 Read Key Stroke Error\\n\"); // 莫名多输入</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token comment\">// 按 q 键退出</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Key<span class=\"token punctuation\">.</span>UnicodeChar <span class=\"token operator\">==</span> <span class=\"token char\">'q'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Key Board %c Was Pressed\\n\"</span><span class=\"token punctuation\">,</span>Key<span class=\"token punctuation\">.</span>UnicodeChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token comment\">// SystemTable->ConOut->OutputString(SystemTable->ConOut,L\"Key input:%s\\n\",Key.UnicodeChar);</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                <span class=\"token comment\">// Print(L\"Key input:%s\\n\",Key.UnicodeChar);</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Key<span class=\"token punctuation\">.</span>UnicodeChar<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 当键盘有数据输入时，对其进行输入，若没有不操作</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Key Board %c Was Pressed\\n\"</span><span class=\"token punctuation\">,</span>Key<span class=\"token punctuation\">.</span>UnicodeChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">return</span> EFI_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"mouse_maininf\"><a class=\"anchor\" href=\"#mouse_maininf\">#</a> Mouse_Main.inf</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Defines<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    INF_VERSION <span class=\"token operator\">=</span> <span class=\"token number\">0x00010007</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    BASE_NAME <span class=\"token operator\">=</span> Mouse_Main </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    FILE_GUID <span class=\"token operator\">=</span> b579648b<span class=\"token operator\">-</span><span class=\"token number\">5331</span><span class=\"token operator\">-</span><span class=\"token number\">46</span>a4<span class=\"token operator\">-</span><span class=\"token number\">93</span>ce<span class=\"token operator\">-</span><span class=\"token number\">22423e567f</span><span class=\"token number\">55</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    VERSION_STRING <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    MODULE_TYPE <span class=\"token operator\">=</span> UEFI_APPLICATION</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ENTRY_POINT <span class=\"token operator\">=</span> UefiMain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>Sources<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Mouse_Main<span class=\"token punctuation\">.</span>c </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>Packages<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    MdePkg<span class=\"token operator\">/</span>MdePkg<span class=\"token punctuation\">.</span>dec</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    MdeModulePkg<span class=\"token operator\">/</span>MdeModulePkg<span class=\"token punctuation\">.</span>dec</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">[</span>LibraryClasses<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    UefiApplicationEntryPoint</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    UefiLib</pre></td></tr></table></figure><h1 id=\"应用程序加载过程\"><a class=\"anchor\" href=\"#应用程序加载过程\">#</a> 应用程序加载过程</h1>\n<blockquote>\n<p>一个 <code>应用程序</code> 被编译成 <code>.efi</code>  文件，整体上分成 <code>三步</code></p>\n</blockquote>\n<ul>\n<li><code>UefiMain.c</code>  被编译成目标文件 <code>UefiMain.obj</code>  (程序编译后的二进制代码)</li>\n<li>连接器将目标文件 <code>UefiMain.obj</code>  和 <code>其他库</code> 连接成 <code>UefiMain.dll</code> ( <code>Dynamic Link LIbrary``动态链接库</code> )</li>\n<li><code>GenFW工具</code> 将 <code>UefiMain.dl</code>  转换成 <code>UefiMain.efi</code></li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsrTqzTjU1sh2GL0KbQcJdOROIdGqMK0LF4bcKFrGF2m1sOLjA3xictwXU3VXUiakN2MiaUvoZ6skZ4Q/640?wx_fmt=png\" alt=\"UEFI编译过程\" /></p>\n<h1 id=\"报错解决思路\"><a class=\"anchor\" href=\"#报错解决思路\">#</a> 报错解决思路</h1>\n<h2 id=\"问题error-7000\"><a class=\"anchor\" href=\"#问题error-7000\">#</a> 问题 error 7000</h2>\n<blockquote>\n<p>error 7000: Failed to execute command Vc\\bin\\nmake.exe /nologo tbuild</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvthkUaBMX9zWiccSLd09Nd75nJ6Eaxx25xEZHibO9FobrLbbROUqvCYbribvRianv4wKaTTP8OmgE8rg/640?wx_fmt=png\" alt=\"error 7000\" /></p>\n<h2 id=\"解决\"><a class=\"anchor\" href=\"#解决\">#</a> 解决</h2>\n<blockquote>\n<p>通过 <code>UltraEdit</code>  查看 <code>中文注释</code> 是否存在 <code>乱码</code> 等行为.</p>\n<p>解决乱码就 OK 啦，本身使用 VS Code 输入的莫名乱码，查 Bug 查了好久。</p>\n</blockquote>\n<h2 id=\"file-read-failture\"><a class=\"anchor\" href=\"#file-read-failture\">#</a>  <code>file read failture</code></h2>\n<blockquote>\n<p>inf 模版工程文件不可有中文，包括 <code>注释</code> ， <code>中文会报错</code></p>\n</blockquote>\n<h2 id=\"注意性报错\"><a class=\"anchor\" href=\"#注意性报错\">#</a> 注意性报错</h2>\n<blockquote>\n<p>在 <code>输出</code> 的 <code>字符串</code> 要加上 <code>L</code></p>\n</blockquote>\n<h2 id=\"fatal-error-lnk1120\"><a class=\"anchor\" href=\"#fatal-error-lnk1120\">#</a> fatal error  <code>LNK1120</code></h2>\n<blockquote>\n<p><code>链接失败</code> ，可能为在引用 <code>GUID地址</code> 时， <code>没有</code> 在 <code>当前函数</code> 对其进行 <code>赋值</code></p>\n<p>在引用 <code>gEfiSimplePointerProtocolGuid</code>  是在 <code>文件顶部</code> 添加其 <code>对应的GUID</code>  唯一编码。</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvthkUaBMX9zWiccSLd09Nd74icjplkqKjnZIbB94gsPPehVV4NQMLc3yrawHOYW2fDygqsnTia6OOSg/640?wx_fmt=png\" alt=\"链接GUID\" /></p>\n",
            "tags": [
                "BIOS",
                "BIOS",
                "UEFI",
                "EDK2"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/BIOS/C%E6%8C%87%E9%92%88%E6%93%8D%E4%BD%9C%E5%AF%84%E5%AD%98%E5%99%A8/",
            "url": "https://www.blog.foryouos.cn/BIOS/C%E6%8C%87%E9%92%88%E6%93%8D%E4%BD%9C%E5%AF%84%E5%AD%98%E5%99%A8/",
            "title": "C指针与操作寄存器方法",
            "date_published": "2023-08-09T14:55:00.000Z",
            "content_html": "<h1 id=\"typedef函数指针类型\"><a class=\"anchor\" href=\"#typedef函数指针类型\">#</a> typedef 函数指针类型</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 函数指针类型别名</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t* int 函数返回值</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t* (int,int）函数参数，两个参数 int,int</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t* *PTP_TO_FUNC 函数指针，指向函数的指针</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>PTR_TO_FUNC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t为数组定义别名与函数指针类型别名类似</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t[4] 数组各属</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tPTR_TO_ARR 指向数组的名，其数组个数与参数个数相同</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t在使用是当成一种类型，在为其赋值时需要重新为其添加值</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>PTR_TO_ARR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 实现函数体</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">></span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 定义数组，等待指向</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token string\">\"嘿嘿\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token string\">\"信息科技\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token string\">\"有限公司\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// PTR_TO_ARR 结构体指针，仍需要定义别名</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tPTR_TO_ARR arr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 指向函数</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tPTR_TO_FUNC func <span class=\"token operator\">=</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"max(6,3): %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str[1]: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出信息科技</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"寄存器\"><a class=\"anchor\" href=\"#寄存器\">#</a> 寄存器</h1>\n<blockquote>\n<p><code>有限存贮</code> 容量的 <code>高速存贮</code> 部件 。 寄存器的功能时存储 <code>二进制代码</code> ，它是由具有 <code>存储功能</code> 的 <code>触发器</code> 组合起来构成的。一个触发器可以存储 <code>1位</code> 二进制代码，故存放 <code>n位</code> 二进制代码的 <code>寄存器</code> ，需要 <code>n个触发器</code> 来构成。</p>\n</blockquote>\n<h1 id=\"寄存器分类\"><a class=\"anchor\" href=\"#寄存器分类\">#</a> 寄存器分类</h1>\n<ul>\n<li><code>基本</code> 寄存器 ： 只能 <code>并行</code> 送入数据，也只能 <code>并行</code> 输出。</li>\n<li><code>移位寄存器</code> 中的数据可以在 <code>移位脉冲作用下</code> 依次 <code>逐位右移</code> 或 <code>左移</code> ，数据既可以 <code>并行输入</code> ， <code>并行输出</code> ，也可以 <code>串行输入</code> ， <code>串行输出</code> ，还可以 <code>并行输入</code> ，串行输出或串行输入，并行输出， <code>灵活</code> ， <code>用途广泛</code> 。</li>\n</ul>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<blockquote>\n<p>在 <code>嵌入式</code> 编程中，常常需要对一些 <code>寄存器</code> 进行 <code>配置</code> ，有的情况下需要改变 <code>一1个字节中</code> 的某一位或者 <code>几位</code> ，但是又不想改变其它位原有的值，就可以使用 <code>按位</code> 运算符 <code>进行操作</code></p>\n</blockquote>\n<ul>\n<li>假如我们 <code>只需要</code> 设置 <code>第0</code>  位 <code>bit0</code>  的值为 <code>1时</code> ， 要保持 <code>其它位</code>    <code>不发生</code> 变化。</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>TEST <span class=\"token operator\">=</span> <span class=\"token number\">0x01</span></pre></td></tr></table></figure><blockquote>\n<p>此方式如果 <code>高7位没有</code> 使用，就 <code>不会有</code> 影响，但是如果 <code>高7位</code> 正在 <code>被使用</code> ，那么就会 <code>发生错误</code> 。</p>\n</blockquote>\n<blockquote>\n<ul>\n<li><code>与运算</code>  ： 对于 <code>二进制位</code> 操作，不管原值是 <code>0还是1</code> ，它跟 <code>0</code>  进行 <code>&amp;与</code> 运算，得到的结果都是 <code> 0</code> ，而和 <code>1</code>  进行 <code>&amp;运算</code> ，将保持 <code>原来的值不变</code></li>\n<li><code>或运算 </code> ： 不管该位原来的值是 <code>0</code>  还是 <code>1</code> ，它跟 <code>1</code>  进行  <code> |</code>  运算，得到的结果都 <code>是1</code> ，而 <code>跟0</code>  运算，将保持 <code>原来的值不变</code> 。`</li>\n</ul>\n</blockquote>\n<ul>\n<li>可以使用 <code>或运算</code></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>TEST <span class=\"token operator\">=</span> TEST <span class=\"token operator\">|</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 在实际中常用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>TEST <span class=\"token operator\">|=</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>给 <code>Test</code>  的 <code>低4位</code> 清 <code> 0</code>  ， <code>高四位</code> 保持 <code>不变</code></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>TEST <span class=\"token operator\">&amp;=</span> <span class=\"token number\">0xF0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 使用十六进制</span></pre></td></tr></table></figure><blockquote>\n<p>此方法 <code>在单片机中</code> 经常使用，</p>\n<ul>\n<li>先对需要设置的位用  <code>&amp;</code>  操作符进行 <code>清零</code> 操作</li>\n<li>然后用  <code>|</code>  操作符设置值，</li>\n</ul>\n</blockquote>\n<ul>\n<li>改变 <code>GPIOA</code>  的状态，先对 <code>寄存器</code> 的值进行清零操作，然后根据需要设置的值进行 <code> |</code>  或运算</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GPIOA<span class=\"token operator\">-></span>CRL <span class=\"token operator\">&amp;=</span> <span class=\"token number\">0XFFFFFF0F</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将第 4~7 位清零</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>GPIOA<span class=\"token operator\">-></span>CRL <span class=\"token operator\">&amp;=</span> <span class=\"token number\">0X00000040</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置相应的值，不改变其他位的值</span></pre></td></tr></table></figure><h1 id=\"移位提高可读性\"><a class=\"anchor\" href=\"#移位提高可读性\">#</a> 移位提高可读性</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GPIOx<span class=\"token operator\">-></span>BSRR <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> pinpox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 0x01 左移 pinpox 位，</span></pre></td></tr></table></figure><blockquote>\n<p>通过 <code>左移</code> 而不是直接设置一个 <code>固定的值</code>  ： 为了提高 <code>代码</code> 的 <code>可读</code> 性，直接就知道修改了 <code>第几位</code></p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GPIOA<span class=\"token operator\">-></span>ODR <span class=\"token operator\">|=</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//PA.5 输出高，其它位不变</span></pre></td></tr></table></figure><h1 id=\"设置某位为0\"><a class=\"anchor\" href=\"#设置某位为0\">#</a> 设置某位为 0</h1>\n<h2 id=\"简单操作\"><a class=\"anchor\" href=\"#简单操作\">#</a> 简单操作</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>TIMx<span class=\"token operator\">-></span>SR <span class=\"token operator\">=</span> <span class=\"token number\">0xFFF7</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此方法仍然影响可读性，</span></pre></td></tr></table></figure><h2 id=\"库函数\"><a class=\"anchor\" href=\"#库函数\">#</a> 库函数</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>TIMx <span class=\"token operator\">-></span> SR <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token operator\">~</span>TIM_FLAG<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"tim_flag定义\"><a class=\"anchor\" href=\"#tim_flag定义\">#</a>  <code>TIM_FLAG</code>  定义</h3>\n<blockquote>\n<p>设置 <code>SR</code>  的第三位 <code>为 0 </code> 时即可设置为</p>\n<p><code>TIMx-&gt;SR = (uint16_t)~TIM_FLAG_CC3;</code></p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIM_FLAG_Update</span>  <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0001</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIM_FLAG_CC1</span>     <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0002</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIM_FLAG_CC2</span>     <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0004</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIM_FLAG_CC3</span>     <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0008</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIM_FLAG_CC4</span>     <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">int16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0010</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIM_FLAG_COM</span>     <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0020</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIM_FLAG_Trigger</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0040</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIM_FLAG_Break</span>   <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0080</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIM_FLAG_CC1OF</span>   <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0200</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIM_FLAG_CC2OF</span>   <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0400</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIM_FLAG_CC3OF</span>   <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0800</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIM_FLAG_CC4OF</span>   <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><h1 id=\"位域\"><a class=\"anchor\" href=\"#位域\">#</a> 位域</h1>\n<blockquote>\n<p>位域：或称之为 <code>位段</code> ，英文表达式  <code>Bit field</code>  是一种数据结构，可以把数据以位元的形式 <code>紧凑</code> 的存储，并允许程序员对 <code>此结构进行位元</code> 进行操作。</p>\n<p>优势：</p>\n<ul>\n<li>可以使数据单元 <code>节省存储空间</code></li>\n<li>位段可以很方便地访问一个整数值的部分内容从而 <code>简化程序源代码</code> 。</li>\n</ul>\n<p>位域可以分为 <code>两大类</code> ，一个是 <code>结构体位域</code> ，一个是 <code>共同体位域</code> ，由于共同体和结构体两者在定义上的形式都是相同的，从位域的定义形式上看，两者也基本都是相同的。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> 位域结构体</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    类型说明符 位域名 <span class=\"token operator\">:</span> 长度<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span>结构体变量名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 结构体位域</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">example0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> x <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 冒号后面的证书指定了该位段所占用的位的数目。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> y <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> z <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token class-name\">ex0_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 共同体位域</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">union</span> example1</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> x <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> y <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> z <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span>ex1_u<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code>位域大小</code> 原则 ： 整个结构体 <code>位域的总大小</code> 为 <code>最宽</code> 基本类型 <code>成员大小</code> 的 <code>整数倍</code> 。</p>\n<p><code>位域</code> 基本都使用 <code>无符号类型</code> 。</p>\n</blockquote>\n<h1 id=\"位域注意\"><a class=\"anchor\" href=\"#位域注意\">#</a> 位域注意</h1>\n<ul>\n<li>结构体位域成员 <code>不能</code> 使用 <code>取址操作</code></li>\n<li>结构体成员 <code>不能</code> 够使用 <code>static修饰</code></li>\n<li>结构体 <code>位域</code> 成员不能使用 <code>数组</code> 。</li>\n</ul>\n<blockquote>\n<p><code>不同的处理器</code> ，不同的 <code>编译器</code> 对位域的影响， <code>位域</code> 虽然能够以 <code>位</code> 的形式操作数据，但是也被人们告知要 <code>慎重</code> 使用，原因在于 <code>不同的处理器</code> 结构，不同的编译器对于位域的一些特征会产生不同的结果。</p>\n<p>处理器 <code>大端模式</code> ， <code>小端模式</code> 的处理器也会对 <code>下面的结构体位域</code> 产生 <code>不一样</code> 的存储方式。</p>\n<p><code>不同的编译器</code> ， <code>结构体位域</code> 成员 <code>不同类型</code> ，不同的编译器对于位域会有不同的结果</p>\n<p>当 <code>成员大小之和超</code> 过一个 <code>基本存储空间</code> 时，不同的编译器也会有 <code>不同的处理方式</code> 。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> Byte<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> bit012 <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> bit34  <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> bit5   <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> bit6   <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> bit7   <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>bits<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span>registerType<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>存储 <code>0x0000 8000</code>  定义一个指针 <code>指向地址</code></p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>registerType <span class=\"token operator\">*</span>pReg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">register</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0000</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 使用位域寄存器进行赋值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pReg<span class=\"token operator\">-></span>bits<span class=\"token punctuation\">.</span>bit5 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pReg<span class=\"token operator\">-></span>bits<span class=\"token punctuation\">.</span>bit012 <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "BIOS",
                "C",
                "寄存器"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/BIOS/UEFI%E4%B8%83%E9%98%B6%E6%AE%B5/",
            "url": "https://www.blog.foryouos.cn/BIOS/UEFI%E4%B8%83%E9%98%B6%E6%AE%B5/",
            "title": "UEFI概述",
            "date_published": "2023-07-28T23:50:00.000Z",
            "content_html": "<h1 id=\"bios阶段划分\"><a class=\"anchor\" href=\"#bios阶段划分\">#</a> BIOS 阶段划分</h1>\n<ul>\n<li><code>SEC</code> :  <code>Security</code>  (安全) ： 处理 <code>平台重</code> 事件，创造一个 <code>临时的内存</code> 区 (此时内存还 <code>未初始化</code> )，在系统中作为一个可信的 root，传递信息到 <code>PEI</code></li>\n<li><code>PEI </code> :  <code>pre-efi initialization</code>  (预 EFI 初始化)： <code>初始化</code> 一些 <code>永久的内存</code>  HOBS ( <code>hand-off BLocks</code> ) 中内存，以及在 HOBS 里面的 <code>FV</code>  (firmware volume) 位置，传递 <code>控制权到DXE</code>  阶段</li>\n<li><code>DXE </code> ： <code>driver execution environment</code>  (驱动程序执行环境) ： <code>重点</code> 关注，服务器上 <code>硬件驱动的执行环境</code> ，与 <code>后期外设</code> 的使用，有极大的关系</li>\n<li><code>BDS </code> :  <code>boot device select</code>  (引导设备选择) 初始化 <code>console设备</code> ；加载设备驱动；尝试 <code>加载和执行启动项</code> 。</li>\n<li><code>RT</code>  ： <code> run time service</code>  (运行时服务) ：此时与 <code>bootloader</code>  关系 <code>紧密</code></li>\n<li><code>AL</code>  :  <code>after life</code>  ( <code>transition from the os back to the environment</code> )  <code>of system</code></li>\n</ul>\n<h1 id=\"与bmc通信\"><a class=\"anchor\" href=\"#与bmc通信\">#</a> 与 <code>BMC</code>  通信</h1>\n<h2 id=\"基础了解\"><a class=\"anchor\" href=\"#基础了解\">#</a> 基础了解</h2>\n<h3 id=\"平台管理\"><a class=\"anchor\" href=\"#平台管理\">#</a> 平台管理</h3>\n<blockquote>\n<ul>\n<li>平台管理 ( <code>platform managemet)</code>  : 平台管理表示一系列的 <code>监视</code> 和 <code>控制</code> 功能， <code>操作的对象</code> 是 <code>系统硬件</code> ，比如监视系统的 <code>温度</code> ， <code>电压</code> ， <code>风扇</code> ， <code>电源</code> 等，并 <code>做响应的</code> 调节工作，以保证系统处于 <code>健康状态</code> 。若系统 <code>不正常</code> ，通过 <code>复位方式</code> 重启</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsMGpxMLgwLn51xNGAJSW4OMUhm6pnFLFAPjsvVVm3UKhoDSdAID9LRzP3lntShJrRflt8mP4FkmQ/640?wx_fmt=png\" alt=\"平台管理\" /></p>\n<ul>\n<li>\n<p><code>BMC</code>  :  <code>Baseboard Management Controller)</code> ： 把上面的功能集成到一个 <code>控制器</code> 上，称为 <code>基板管理控制器</code> ， <code>BMC</code>  是一个独立的系统，它不依赖系统上的 <code>其它硬件</code>  (如 <code>CPU</code> , <code>内存</code> )，也不依赖于 <code>BIOS</code> , <code>OS</code>  等，但 <code>BMC</code>  可以与 <code>BIOS</code>  和 <code>OS</code>  交互。BMC 本身也是一个 <code>带外处理器</code>  (一般都是 ARM 处理器) 的小系统，单独用来处理某些工作，其中重点还是平台管理</p>\n</li>\n<li>\n<p><code>BMC</code>  通过不同的 <code>接口</code> 与 <code>系统</code> 中其它 <code>组件连接</code> ， <code>LPC</code> ， <code>I2C</code> , <code>SMBUS</code> , <code>Serial</code>  等 <code>基本接口</code></p>\n</li>\n<li>\n<p><code>IPMI</code> , 它是与 <code>BMC</code>  匹配的 <code>接口</code> ，所有 <code>BMC</code>  都需要实现这种接口</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"ipmi\"><a class=\"anchor\" href=\"#ipmi\">#</a>  <code>IPMI</code></h3>\n<blockquote>\n<p><code>IPMI</code>  全称 <code>Intelligent Platform Management Interface</code>  智能平台 <code>管理接口</code> ， <code>IPM</code>  是对 <code>平台管理</code> 概念的 <code>具体规范</code> ，该规范定义了 <code>平台管理</code> 的软硬件架构， <code>交互指令</code> ， <code>事件格式</code> ， <code>数据记录</code> ， <code>能力集</code> 等，而 <code>BMC</code>  是 <code>IPMI</code>  中的一个 <code>核心</code> 部分，属于 <code>IPMI</code>  硬件架构。</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsMGpxMLgwLn51xNGAJSW4OsVpI6yqBYMPjtGBDqeib1icQ3VLf070vrib6YSor4RgZ9vldlLDQAQUCA/640?wx_fmt=png\" alt=\"IPMI智能平台管理接口\" /></p>\n<h2 id=\"bios通信\"><a class=\"anchor\" href=\"#bios通信\">#</a> BIOS 通信</h2>\n<blockquote>\n<p><code>BIOS</code>  与 <code>BMC</code>  之间的通信，主要使用 <code>IPMI</code> 。共有 <code>两个</code> 阶段 <code>PEI</code>  和 <code>DXE</code>  (包括 <code>DXE</code>  后面的)，用的是不同的 <code>IPMI</code>  函数 (重点 <code>注意</code> )</p>\n<p>虽然后使用 <code>IPMI</code> ，但使用 <code>两个</code> 通道分别是 <code>KCS</code> ， <code>BT</code> ，一般 <code>使用KCS</code>  通道。</p>\n<p><code>BMC不会</code> 主动与 BIOS 通信，BIOS 会发送 <code>IPMI命</code> 令给 <code>BMC</code> , <code>BMC</code>  如果 <code>成功接收</code> 的话，就会有个 <code>返回信息</code> 给 <code>BIOS</code> 。</p>\n</blockquote>\n<h2 id=\"如果bmc与bios产生了通信故障\"><a class=\"anchor\" href=\"#如果bmc与bios产生了通信故障\">#</a> 如果 <code>BMC</code>  与 <code>BIOS</code>  产生了通信故障</h2>\n<ul>\n<li>确认 <code>BIOS</code>  是否发送了 <code>IPMI命令</code> 给 <code>BMC</code> , 可以查看 <code>BMC</code>  返回的 <code>completion code</code> ;</li>\n<li>确认 <code>BMC</code>  是否收到了 <code>BIOS</code>  发送的 <code>IPMI命令</code></li>\n<li>如果 <code>BIOS</code>  发送了 <code>IPMI命令</code> ，但是 <code>BMC未接收</code> ：可能是 <code>BMC</code>  的 <code>IPMI进程</code> 正处于 <code>忙碌状态</code> ，所以 <code>丢掉</code> 了这条 <code>IPMI命</code> 令 (BIOS 如果发送失败，可以 <code>尝试多次</code> 发送；另外可以 <code>稍微调高KCS通道</code> 的 <code>延时</code> )；当然，也有可能是 BMC 的 <code>IPMI进程</code> 挂了</li>\n<li>（极少见)  <code>一条IPMI</code>  命令通常设计 <code>2个底层</code> 实现函数， <code>SendDataToBmcPort()</code>  和 <code>ReceiveBmcDataFormPort()</code> 。接收时，BIOS 从 <code>KCS</code>  的 <code>I/O端口</code> 读取 <code>数据</code> ，读完后，会 <code>检测KCS寄存器</code> 中 <code>OBF状态寄存器</code> ，如果 <code>BMC没有写</code> 数据，就会 <code>计数-1</code> ， <code>延时5ms</code> ，然后重试，当 <code>BMC</code>  一直不写数据时， <code>计数到0</code> , 就认为 <code>BMC有故障</code> ，返回 <code>Device Error</code> ;</li>\n</ul>\n<h1 id=\"acpi\"><a class=\"anchor\" href=\"#acpi\">#</a>  <code>ACPI</code></h1>\n<blockquote>\n<p><code>Advanced Configuration and Power Interface</code>  简称 <code>ACPI</code> ， <code>高级配置</code> 与 <code>电源接口</code> ，提供操作系统应用程序管理所有电源管理接口。</p>\n<p>对于 BIOS 而言， <code>ACPI</code>  最直观的就是 <code>电源功耗</code> ，从而 <code>影响CPU性能</code> ，</p>\n</blockquote>\n<h1 id=\"os-loader\"><a class=\"anchor\" href=\"#os-loader\">#</a>  <code>OS Loader</code></h1>\n<blockquote>\n<p>操作系统加载器： <code>引导</code> 加载 <code>程序</code></p>\n<p><code>OS loader</code>  可以通过 <code>BS(Boot Services)</code>  和 <code>RT</code>  使用 <code>UEFI</code>  提供的服务，并且将 <code>计算机的资源</code> 转移到 <code>自己手</code> 中，此过程称为 <code>TSL(Transient System Loader) </code> 。在此阶段结束之后， <code>OS Loader</code>  会调用 <code>ExitBootServices()函数</code> ，结束 <code>BS</code>  并且 <code>回收BS占用的资</code> 源，然后 <code>BIOS</code>  会进入 <code>RT阶段</code> ，然后 <code>OS loader</code>  会加载 <code>操作系统内核</code> ，逐渐进入 OS，此过程称为 <code>TSL</code> ( <code>Transient System Load</code> )</p>\n<p>在 <code>BDS</code>  阶段， <code>BIOS</code>  会选择 <code>可启动项</code> ，按照 <code>设置的顺序</code> ， <code>逐一</code> 尝试，经过 <code>校验之后</code> ，加载 <code>OS Loader</code></p>\n<p><code> BIOS</code> （ <code>BDS</code>  阶段）----&gt; <code>OS Loader</code> ----&gt; <code>OS</code></p>\n<p>引导区位于 <code>FAT32</code>  格式分区。一般 FAT32 位于磁盘的最开始，大小 1MB 左右。</p>\n<ul>\n<li>\n<p>UEFI 会把 <code>FAT32的格式</code> 都当做启动磁盘都添加到 <code>启动菜单</code> 中</p>\n</li>\n<li>\n<p>在启动盘 <code>UEFI/Boot/BootX64.efi </code> 中加载</p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 硬盘启动盘文件也都位于此</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>EFI/Boot/BootX64.efi</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 32 位系统无需 + X64</span></pre></td></tr></table></figure></blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuvDicPdvq9q8kCkj2w7H9wbJZbSCnZZcz7drtiaLW3VLw6APLdX3VNolxKHjNtWPZkcj5yu733vicDw/640?wx_fmt=png\" alt=\"系统启动编译结构\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbuvDicPdvq9q8kCkj2w7H9wbVibicxxJmxzwcF0zuGlx1TutHicMCUugBNIJyia7zFCWb8ArG50v2oYHRg/640?wx_fmt=jpeg\" alt=\"系统内核加载架构\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbuvDicPdvq9q8kCkj2w7H9wb53vgx79GQcOuszIicGdYR2Ulh6aqBeRQicM95Vw6VH0s7oDicLsSmn2gg/640?wx_fmt=jpeg\" alt=\"USB重装系统过程\" /></p>\n<h1 id=\"uefi\"><a class=\"anchor\" href=\"#uefi\">#</a> UEFI</h1>\n<blockquote>\n<p><code>UEFI</code> ( <code>Unified Extensible Firmware Interface</code>  , 统一可扩展固件接口) 提供给 <code>操作系统</code> 的接口包括 <code>启动服务</code>  ( <code>Boot Service</code>  ， <code>BS</code> ) 和 <code>运行时</code> 服务 ( <code>Runtime Service</code> , <code>RT</code> ) 以及 <code>隐藏</code> 在 <code>BS之后</code> 的丰富的 <code>Protocol</code> （协议)， <code>BS</code>  和 <code>RT</code>  以 <code>表</code> 的形式 (C 语言中的 <code>结构体</code> ) 存在。</p>\n<p>UEFI 的实现分为两部分</p>\n<ul>\n<li><code>平台初始化</code></li>\n<li><code>固件</code>  - 操作系统 <code>接口</code></li>\n</ul>\n</blockquote>\n<h1 id=\"组成\"><a class=\"anchor\" href=\"#组成\">#</a> 组成</h1>\n<blockquote>\n<p><code>OS Loader</code>  可以通过 <code>BS</code>  和 <code>RT</code>  使用 <code>UEFI</code>  提供的服务，将计算机资源逐渐转移到自己手中，这个过程为 <code>TSL</code> (Transient System Load)</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuvDicPdvq9q8kCkj2w7H9wbQDjicdnNibvDIr9Mo7bib7863bbV6ANP87yzsSl29G7uTptDs5kjtZoMg/640?wx_fmt=png\" alt=\"UEFi系统组成\" /></p>\n<blockquote>\n<p>当 <code>OS Loader</code>  完全 <code>掌握</code> 了计算机资源时， <code>BS</code>  也就 <code>完成</code> 了它的 <code>使命</code> 。 <code>OS Loader</code>  调用 <code>ExitBootServices()</code>  结束 <code>BS</code>  并 <code>回收BS</code>  占用的资源，之后计算机系统进入 <code>UEFI Runtime</code>  阶段</p>\n</blockquote>\n<h2 id=\"bs提供的服务tsl阶段\"><a class=\"anchor\" href=\"#bs提供的服务tsl阶段\">#</a> BS 提供的服务 (TSL 阶段)</h2>\n<blockquote>\n<p><code>UEFI</code>  提供给操作系统的 <code>接口</code> ，包括 <code>启动服务</code>  ( <code>Boot Services</code>  , <code> BS</code> )</p>\n</blockquote>\n<ul>\n<li><code>事件</code> 服务：事件时 <code>异步</code> 操作的基础，有了 <code>事件</code> 的支持，才能够在 <code>UEFI系统内</code> 执行 <code>并发操作</code></li>\n<li><code>内存</code> 管理：提供内存的分配与释放，管理系统内存映射</li>\n<li><code>Protocol</code>  管理：提供了 <code>安装与卸载</code>  Protocol 的服务，注册通知函数的服务</li>\n<li><code>Protocol使用类</code> 服务:  <code>Protocol</code>  的打开与关闭，查找支持 <code>Protocol控制</code> ，例打开设备上 <code>PciloProtocol</code> , 用 <code>PciIo-&gt;Io.Read()</code>  服务读取设备上的 <code>寄存器</code></li>\n<li><code>驱动管理</code> ：包括用于将驱动安装到控制器的 <code>connect服务</code> ，以及将驱动从控制器上 <code>卸载的disconnect服务</code> 。若启动时，需要网络服务，通过 loadImage 将驱动加载到内存，通过 <code>connect</code>  服务将驱动安装到设备</li>\n<li><code>Image管理</code> ：加载，卸载，启动和退出 UEFI 应用程序或驱动</li>\n<li><code>ExitBootServices</code> ：用于结束启动服务</li>\n</ul>\n<h2 id=\"rt提供的服务\"><a class=\"anchor\" href=\"#rt提供的服务\">#</a> RT 提供的服务</h2>\n<blockquote>\n<p>UEFI 提供给操作系统的 <code>运行时</code> 服务</p>\n</blockquote>\n<ul>\n<li><code>时间</code> 服务：读取 / 设定系统时间，</li>\n<li>读取 <code>UEFI系统变量</code> ：读取 / 设置系统变量，例如 <code>BootOrder</code>  用于指定 <code>启动项顺序</code> ，通过系统变量保存系统配置</li>\n<li><code>虚拟内存</code> 服务： 将 <code>物理地址</code> 转换为 <code>虚拟地址</code></li>\n<li>其它服务：包含 <code>重启系统的ResetSystem</code> , 获取系统提供的 <code>下一个单调单增值</code> 。</li>\n</ul>\n<h1 id=\"uefi启动过程\"><a class=\"anchor\" href=\"#uefi启动过程\">#</a> UEFI 启动过程</h1>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuvDicPdvq9q8kCkj2w7H9wblJ3rlN5iaZxBFvonYAPvibATfhxJO6FlJs9EkIEG9fq3icq5w0g3PFIQQ/640?wx_fmt=pngg\" alt=\"image-20230728095402333\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbuvDicPdvq9q8kCkj2w7H9wbfhTKsXhA6WDK9qZNuVibGrvbHkyceW78cKCwE36UAxiaEBv5wyasWVpA/640?wx_fmt=jpeg\" alt=\"启动过程任务\" /></p>\n<h2 id=\"sec阶段\"><a class=\"anchor\" href=\"#sec阶段\">#</a> SEC 阶段</h2>\n<blockquote>\n<p><code>Security Phase</code> , 当 CPU 收到 <code>ResetVector</code>  信号后，开始执行 <code>第一行</code> 代码， 平台初始化的第一个阶段，安全阶段， <code>最早</code> 运行的固件代码，此模块 <code>相当部分</code> 使用 <code>汇编</code> 语言开发。</p>\n<p>电脑的开机或者重启， <code>本质</code> 上是给 CPU 发送了一个 <code>ResetVector</code>  信号。</p>\n<p>由于 <code>没有初始化内</code> 存，会 <code>临时使用CPU</code>  的缓存，内嵌在 CPU 中，初始化好的，</p>\n<p>SEC 作为整个系统执行的起点，可能遇到各种异常，就需要设置 <code>IDT</code> ，有了中断描述符表接受异常，就能让系统遭遇意外情况时，不至于崩溃，为 PEI 阶段设置临时 <code>内存的基地址和长度</code> 并传给 PEI，同时将 PEI 代码的入口点，将控制权移交过去，并且处理临时内存。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 位于 EDK2 如下目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>UefiCpuPkg/ResetVector/Vtf0</pre></td></tr></table></figure></blockquote>\n<h3 id=\"sec阶段任务\"><a class=\"anchor\" href=\"#sec阶段任务\">#</a> SEC 阶段任务</h3>\n<blockquote>\n<ul>\n<li>接受并处理系统 <code>启动</code> 和 <code>重启</code> 信号，以及运行过程中的 <code>严重异常</code> 信号</li>\n<li><code>初始</code> 化 <code>临时存储区域</code>  ，启动系统需要的一些临时 <code>RAM</code> ，空间资源仍然 <code>稀缺</code></li>\n<li>作为 <code>可信系统</code> 根传递给下一个 <code>阶段PEI</code></li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuvDicPdvq9q8kCkj2w7H9wb1LbZ7X8c7pic9mKNmiaL1tCrcpMQ9pAicD6cGEnxaCBcke9WNzTdFcJBg/640?wx_fmt=png\" alt=\"image-20230728111306147\" /></p>\n<h3 id=\"reset-vector\"><a class=\"anchor\" href=\"#reset-vector\">#</a> Reset Vector</h3>\n<blockquote>\n<ul>\n<li>进入 <code>固件入口</code></li>\n<li>…..</li>\n</ul>\n</blockquote>\n<h2 id=\"pei阶段\"><a class=\"anchor\" href=\"#pei阶段\">#</a> PEI 阶段</h2>\n<blockquote>\n<p>PEI :  <code>Pre-EFI Initialization</code></p>\n</blockquote>\n<blockquote>\n<ul>\n<li><code>资源</code> 十分 <code>有限</code> ， <code>PEI后期</code> 进行内存 <code>初始化</code></li>\n<li>为 <code>DXE</code>  准备执行环境，将需要传递的信息组成 <code>HOB</code>  列表，将控制权移交到 <code>DXE</code>  手中</li>\n</ul>\n</blockquote>\n<ul>\n<li><code>PEI Foundation</code> : 负责接受 <code>SEC</code>  发送的交换数据，并扮演 <code>模块分发</code> 的角色</li>\n<li><code>PEIMs-EFI Initlization Modules</code>  是模块化的， <code>PEI</code>  阶段的 4 档事情就是交给 <code>PEIMs</code>  完成，完成后就来到了 <code>DXE阶段</code> 。</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>对 <code>系统的初始化</code> ，找出系统中所有的 <code>PEIM</code> ，并根据 <code>PEIM</code>  之间的依赖关系按照顺序执行 <code>PEIM</code> ,</p>\n</blockquote>\n</blockquote>\n<h3 id=\"pei入口函数\"><a class=\"anchor\" href=\"#pei入口函数\">#</a> PEI 入口函数</h3>\n<ul>\n<li>系统当前的状态，判断 <code>系统健康状况</code></li>\n<li>可启用 <code>固件的地址</code> 和 <code>大小</code></li>\n<li>临时 <code>RAM区域</code> 的 <code>地址</code> 和 <code>大小</code></li>\n<li><code>栈</code> 的 <code>地址</code> 和 <code>大小</code></li>\n</ul>\n<h3 id=\"pei执行流程\"><a class=\"anchor\" href=\"#pei执行流程\">#</a> PEI 执行流程</h3>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuvDicPdvq9q8kCkj2w7H9wbyfRUncfdRmpjMhWN2xoDBRjph0zgcRTwZm2NtlmfiakNWYBjF5YlzibA/640?wx_fmt=png\" alt=\"FEI执行流程\" /></p>\n<blockquote>\n<p>在 <code>PEI</code>  阶段， <code>PEIM</code> ， <code>PPI</code> ， <code>HOM</code>  组成了 PEI 阶段，PEI 阶段的 <code>module</code>  可理解为 <code>Driver</code>  就是 <code>PEIM</code> ， <code>PEI阶段</code> 就是由一个一个的 PEIM 组成的； <code>PPI</code>  是 <code>PEIM</code>  之间相互调用的接口，由唯一的 <code>GUID</code> ( <code>全局统一标识符</code> ) 引导，内部也包含一些 <code>接口</code> ，HOB 相当于信件在 PEI 阶段创建，会记录当前系统的信息，可以 <code>自定义HOB</code> ，然后在 <code>DXE阶段读出</code></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsMGpxMLgwLn51xNGAJSW4O6DbPW269kH3ia2YDqGZRGehM7A0vjrHkd2DNkOOYfKH3jtdQGsD4znQ/640?wx_fmt=png\" alt=\"PEI阶段\" /></p>\n<blockquote>\n<p><code>PEIM</code>  : <code> PEI Module</code> ，会被编译成 <code>efi binary</code></p>\n<p>在一套的 <code>BIOS code</code>  编译完之后，进入到 <code>build目录</code> 就可以找到 <code>PEIM</code>  具体的 <code>efi</code></p>\n<p><code>PPIs</code>  ： <code>PEIM-to-PEIM Interfaces</code> ,PEIMs 被调用通过 <code>PPI</code> ， <code>Interface</code> 。调用函数必须通过 PPI 接口</p>\n<ul>\n<li>PPI 名称： <code>GUID</code>  (128-bits)</li>\n<li><code>PPIs</code>  结构体，PPI 就是一个结构体，可能包含的功能，数据。</li>\n<li>PEIM 会把 PPI 注册到 <code>PEI Foundation</code> 。  （ <code>PEI Foundation</code>  管理着庞大的 <code>PPI</code>  数据库)</li>\n</ul>\n</blockquote>\n<ul>\n<li><code>Core Services</code>  包含后面 phase 用到的各种 Services。在 PEI 阶段 get 当前计算机启动的 boot Mode 有直接定义的 PEI Service 函数，在 DXE 以及后面的阶段要通过 HOB 方式通过 <code>get HOB LIS</code> T 然后拆解信息进行 <code>ge</code>  启动 <code>boot Mode</code></li>\n<li><code>Core Dispatcher</code>  负责派发个 <code>PEIMs</code> , 将 <code>PEIM</code>  按照既定的顺序 <code>Load</code>  并执行， <code>Dependency</code>  顺序，就是 <code>inf</code>  文件里面的 <code>depx</code> , 满足条件可执行</li>\n<li>各 <code>PEIM Entry</code>  可能使用其它 <code>PEIM</code>  和 <code>PPI</code></li>\n<li><code>PEI Core</code>  最后会找到 <code>DXE</code>  获得之前 <code>phase Data</code>  是从 HOB 里拿到，PEI Core 会创建 HOB,PEI 和 DXE 都可以使用 <code>HOB的Data</code></li>\n</ul>\n<blockquote>\n<p>函数:</p>\n<ul>\n<li><code>InstallPPI</code>  安装 PPI 到 <code>PEI foundation</code> , <code>Protocol install </code> 安装完毕后放到 <code>Handle Database</code>  里</li>\n<li><code>LocatePPI()</code> ：根据 PPI 名称 <code>GUID</code>  从 <code>PEI foundation</code>  找 <code>Interface</code></li>\n<li><code>NotifyPPI()</code>  : PPI 里的 <code>function</code>  不会在派发时就执行，通知系统此 PPI 会在某个 PPI 被安装时才执行</li>\n</ul>\n</blockquote>\n<h3 id=\"install-ppi\"><a class=\"anchor\" href=\"#install-ppi\">#</a> Install PPI</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Install PPI services. It is implementation of EFI_PEI_SERVICE.InstallPpi.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  这是个 service，PEI foundation 提供的。 通过 GUID 安装。目的是让别人调用。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  @param PeiServices                An indirect pointer to the EFI_PEI_SERVICES table published by the PEI Foundation.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  标准格式，入口第一人参数是铁定的 EFI_PEI_SERVICES 指针</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  @param PpiList                    Pointer to PPI array that want to be installed.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  第二个参数是 PPI List, LIST 里包括 Flag、GUID 和函数 参考.h 里的 EFI_PEI_PPI_DESCRIPTOR 定义</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  @retval EFI_SUCCESS               if all PPIs in PpiList are successfully installed.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  @retval EFI_INVALID_PARAMETER     if PpiList is NULL pointer</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                                    if any PPI in PpiList is not valid</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  @retval EFI_OUT_OF_RESOURCES      if there is no more memory resource to install PPI</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>**/</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>EFI_STATUS</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>EFIAPI</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">PeiInstallPpi</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  IN CONST EFI_PEI_SERVICES        <span class=\"token operator\">*</span><span class=\"token operator\">*</span>PeiServices<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  IN CONST EFI_PEI_PPI_DESCRIPTOR  <span class=\"token operator\">*</span>PpiList</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"hob\"><a class=\"anchor\" href=\"#hob\">#</a> HOB</h3>\n<blockquote>\n<p>HOB( <code>Hand-Off Blocks</code> )：传输信息的载体， <code>PEI</code>  和 <code>DXE</code>  联系薄弱， <code>DXE</code>  需要知到 <code>PEI初始化</code> 的硬件内存等数据， <code>HOB</code>  作为 <code>桥梁</code> 。</p>\n<p><code>HOB</code>  实际就是一个 <code>链表</code> ，当我们找到 hoblist 的头，那么整个链表的数据都能得到， <code>GetHobList()</code>  获取 <code>hoblist</code>  的 <code>指针</code> ，</p>\n<ul>\n<li>第 <code>一个HOB</code>  总是 <code>PHIT==Phase Handoff GetHobList(),</code>  里面是 <code>boot mode</code></li>\n<li>其它 <code>HOB</code>  可能出现在 <code>List任意位置</code> ，最重要的是 <code>System Memory HOB &amp; Firmware Volumes</code> ， <code>HOB</code>  列表总是会以 <code>END_OF_HOB_LIST</code>  结束</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsMGpxMLgwLn51xNGAJSW4OX9O112gUia4BDVaFKNabwXA6egBbhLw68IpEicgdB2zIvhBEMibMfTDKQ/640?wx_fmt=png\" alt=\"HOB链表\" /></p>\n<h4 id=\"添加新的hob\"><a class=\"anchor\" href=\"#添加新的hob\">#</a> 添加新的 HOB</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Add a new HOB to the HOB List.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  @param PeiServices        An indirect pointer to the EFI_PEI_SERVICES table published by the PEI Foundation.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  @param Type               Type of the new HOB.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  @param Length             Length of the new HOB to allocate.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  @param Hob                Pointer to the new HOB.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  @return  EFI_SUCCESS           Success to create HOB.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  @retval  EFI_INVALID_PARAMETER if Hob is NULL</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  @retval  EFI_NOT_AVAILABLE_YET if HobList is still not available.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  @retval  EFI_OUT_OF_RESOURCES  if there is no more memory to grow the Hoblist.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>**/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>EFI_STATUS</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>EFIAPI</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">PeiCreateHob</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  IN CONST EFI_PEI_SERVICES  <span class=\"token operator\">*</span><span class=\"token operator\">*</span>PeiServices<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  IN UINT16            Type<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 对于自定义的 HOB 一般使用 EFI_HOB_GUID_TYPE</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  IN UINT16            Length<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  IN OUT VOID          <span class=\"token operator\">*</span><span class=\"token operator\">*</span>Hob</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"dxe阶段\"><a class=\"anchor\" href=\"#dxe阶段\">#</a> DXE 阶段</h2>\n<blockquote>\n<p><code>Driver Execution Environment</code>  驱动执行环境，主要任务是把基本驱动程序加载起来，建立两者之间的联系。</p>\n<p>执行 <code>大部分系统初始化</code> 的工作，此阶段内存已经 <code>完全</code> 被 <code>初始化</code> ，</p>\n<ul>\n<li><code>DXE内核</code> ：复杂 DEX 基础服务和执行流程</li>\n<li><code>DXE派遣器</code> ：负责调度执行 <code>EXE驱动</code> ，初始化系统 <code>设备</code></li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuvDicPdvq9q8kCkj2w7H9wbS0m2x5v1ZMRKOBXZQfskLSrVBlUPNq1emzZ58ohcW3pnpt4v6goDcg/640?wx_fmt=png\" alt=\"DXE阶段执行流程\" /></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">EFI_STATUS</span><span class=\"token punctuation\">(</span>EFIAPI <span class=\"token operator\">*</span>EFI_IMAGE_ENTRY_POINT<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN EFI_HANDLE ImageHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN EFI_SYSTEM_TABLE <span class=\"token operator\">*</span>SystemTable</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p><code>驱动</code> 之间通过 <code>Protocol</code>  进行通信。</p>\n<ul>\n<li><code>Protocol</code>  特殊结构体保存着对应的 <code>GUID</code> ，利用系统 <code>BootServices</code>  的 <code>OpenProtocol</code> ，并根据 <code>GUID</code>  打开对应的 <code>Protocol</code> ，进而使用 <code>对应的服务</code> 。当所有的 <code>driver</code>  执行 <code>完毕</code> ，系统 <code>完成初始化</code> ，</li>\n</ul>\n</blockquote>\n<h2 id=\"dxe-core\"><a class=\"anchor\" href=\"#dxe-core\">#</a> DXE Core</h2>\n<blockquote>\n<p><code>DxeMain()</code>  是 DXE 阶段执行的 <code>主函数</code> ，同时以 <code>参数形式</code> 接受 PEI 阶段的 <code>HOB表</code></p>\n<ul>\n<li>创建 <code>EFI System Table</code>  在随后的 <code>DXE Drive</code> r 中逐步完善 table</li>\n<li>生成 <code>Boot Services / Run Time Services / DXE Services</code></li>\n<li>调用 <code>Dispatcher</code> ，所有的 <code>DXE Driver</code>  在这个函数中 <code>被检测</code> 并 <code>执行</code></li>\n<li><code>Driver</code>  执行完毕之后，执行特殊的 <code>DXE Driver</code>  进而进入 BDS 阶段</li>\n</ul>\n</blockquote>\n<h2 id=\"dxe-dispatcher\"><a class=\"anchor\" href=\"#dxe-dispatcher\">#</a> DXE Dispatcher</h2>\n<blockquote>\n<ul>\n<li>去 <code>BIOS</code>  芯片中搜寻 <code>DXE Driver</code></li>\n<li>检测并按照相应的顺序执行所有的 <code>DXE Driver</code> , 在每个 <code>driver</code>  的 <code>inf</code>  文件的 <code>driver</code>  依赖条件都成立时，该 driver 才被执行</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsMGpxMLgwLn51xNGAJSW4OR3tzH7e6icgianicWicSRrI0JYlhlq7Z3vngbcHfm5Yk8OUrKo47c1pBug/640?wx_fmt=png\" alt=\"DXE Dispatcher\" /></p>\n<h2 id=\"bds阶段\"><a class=\"anchor\" href=\"#bds阶段\">#</a> BDS 阶段</h2>\n<blockquote>\n<p>全程： <code>Boot Device Select</code></p>\n<p>U 盘就是寻找具有 <code>FAT32分区</code> 的设备</p>\n<p>执行启动策略 BDS 三大任务： <code>console初始化</code> ， <code>Driver初始化</code> ， <code>BootDeviceSelect</code> ：用户选择 <code>BDS加载</code> 启动选项里的 <code>OS loader</code> ，最后移交真正的 <code>控制权</code> 给 <code>OS loader</code> ，由 OS Loader 将</p>\n<ul>\n<li>初始化控制台设备：查看系统有 <code>多少</code> 加载必要的设备驱动：启动所有检测到的设备，加载 <code>driver</code></li>\n<li>根据系统设置加载和执行启动项 (若加载失败，系统将重新执行 <code>DXE dispatcher</code>  以加载更多的 <code>驱动</code> ，然后重新尝试加载 <code>启动项</code> )</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsMGpxMLgwLn51xNGAJSW4OOvq9BXxGNrBA0viaNOtqVZzWeYVFibYXx1ibOg6DtH3Brx3L7ms99ZkwA/640?wx_fmt=png\" alt=\"DXE执行流程\" /></p>\n<h2 id=\"bds-steps\"><a class=\"anchor\" href=\"#bds-steps\">#</a> BDS Steps</h2>\n<ul>\n<li>初始化 <code>语言</code> 和 <code>字符串</code> 数据库</li>\n<li>获得 <code>当前启动模式</code></li>\n<li>基于 <code>启动模式</code> 建立 <code>设备清单</code></li>\n<li>连接 <code>设备</code></li>\n<li>检测 <code>input output</code>  设备</li>\n<li>执行 <code>内存测试</code></li>\n<li>进程 <code>引导选项</code></li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbsMGpxMLgwLn51xNGAJSW4OicbYiaR9MNVKye0RgZibv9JhlT9slvgyn0dxCpMiavqXuIvpr3zd6HzYsg/640?wx_fmt=png\" alt=\"BDS Steps\" /></p>\n<h2 id=\"tsl阶段\"><a class=\"anchor\" href=\"#tsl阶段\">#</a> TSL 阶段</h2>\n<blockquote>\n<p><code>Transient System Load</code> : 操作系统 <code>OS Loader</code>  执行的第 <code>一阶段</code> ，首先作为 <code>UEFI</code>  程序运行，之后 TSL 退出，系统进入 <code>Run Time</code>  阶段。OS loader 的主战场，TSL 是正式操作系统加载前的预备阶段，需要 Loader 找到并加载 OS</p>\n</blockquote>\n<h2 id=\"rt阶段\"><a class=\"anchor\" href=\"#rt阶段\">#</a> RT 阶段</h2>\n<blockquote>\n<p><code>Run Time</code>  : 系统控制权从 <code>UEFI</code>  内核转交到 <code>OS Loader</code>  手中，UEFI 资源回收到 OS Loader。在 OS Loader 中 OS 获取系统控制权。</p>\n</blockquote>\n<h2 id=\"al阶段\"><a class=\"anchor\" href=\"#al阶段\">#</a> AL 阶段</h2>\n<blockquote>\n<p><code>After Life</code>  如果系统 / 软件遇到灾难性错误，系统固件需要提供错误处理和灾难性恢复机制，此机制运行在 <code>AL</code>  (After Life) 阶段。</p>\n<p>由 <code>常驻UEFI</code>  驱动组成，计算机 <code>关机</code> 休眠 <code>睡眠</code> 重启过程中的系统信息都会在这一阶段 <code>保存</code> 。</p>\n</blockquote>\n<h1 id=\"源码部分基础\"><a class=\"anchor\" href=\"#源码部分基础\">#</a> 源码部分基础</h1>\n<h2 id=\"源码类型定义\"><a class=\"anchor\" href=\"#源码类型定义\">#</a> 源码类型定义</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> __int64  UINT64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> __int64           INT64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> __int32  UINT32<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> __int32           INT32<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span>    UINT16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span>    CHAR16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">short</span>             INT16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>     BOOLEAN<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>     UINT8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span>              CHAR8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">char</span>       INT8<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"一些硬件补充\"><a class=\"anchor\" href=\"#一些硬件补充\">#</a> 一些硬件补充</h1>\n<h2 id=\"hardware-monitor\"><a class=\"anchor\" href=\"#hardware-monitor\">#</a> Hardware Monitor</h2>\n<blockquote>\n<p>读出所有计算进访问 <code>传感器</code> 的 <code>测试值</code></p>\n<ul>\n<li>不同地点的 <code>temperature</code>  读数 <code>CPU and system temperature</code></li>\n<li><code>智能风扇</code> 控制：风扇转速侦测和风扇控制输出</li>\n<li><code>电压监控</code></li>\n</ul>\n</blockquote>\n<h2 id=\"分时复用\"><a class=\"anchor\" href=\"#分时复用\">#</a> 分时复用</h2>\n<blockquote>\n<p>是采用 <code>一物理链接</code> 的不同时段来传输不同 <code>的信号</code> ，能达到 <code>多路复用</code> 的目的。通过事件上 <code>交叉</code> 发送每一路信号的一部分来实现一条电路传送多路信号。</p>\n<p>将整个传输时间分割为 <code>互不重叠</code> 的时间间隔，又称为 <code>时隙</code></p>\n<ul>\n<li>同步分时复用（ <code>STDM</code> ， <code>Synchronous Time Division Multiplexing</code> ）：采用 <code>固定间隙</code> 分配方式，即将传输信号按特定长度连续地 <code>划分特定</code> 的时间段或者一个 <code>周期</code></li>\n<li>异步分时复用（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9BVERNP2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">ATDM</span>， <code>Asynchronous Time Division Multiplexing</code> ）：根据用户市级需要动态分配资源的分时复用记数。</li>\n</ul>\n</blockquote>\n<h2 id=\"pci\"><a class=\"anchor\" href=\"#pci\">#</a> PCI</h2>\n<blockquote>\n<ul>\n<li>局部总线：局部总线是在 <code>ISA</code>  和 <code>CPU总线</code> 之间添加 <code>一级总</code> 线或 <code>管理层</code> 。这样可将一些 <code>高速外设如图形卡</code> ，硬件控制器等从 ISA 总线上卸下而通过局部总线直接挂接在 CPU 总线上，使之余高速能与 CPU 总线相匹配。</li>\n<li>PCI  (Peripheral Component Interconnect) ： <code> Intel 1991</code>  年推出的用于定义 <code>局部总线</code> 的标准。 <code>PCI</code>  不同于 ISA 总线，PCI 数据地址总线于数据总线是分时复用。以方便可以节省接插件的管脚数，另一方便便于实现数据传输。</li>\n</ul>\n</blockquote>\n<h2 id=\"usb\"><a class=\"anchor\" href=\"#usb\">#</a> USB</h2>\n<blockquote>\n<p><code>USB总线</code> 提供 <code>中低速率</code> 外围设备的扩充能力，像键盘，鼠标，遥感，喇叭，麦克风等设备，只要是 USB 接口设计，就可以以 <code>热拔插</code> （ <code>Hot Plug</code> ) 的方式，直接跟计算机连接或拆除 (离线)，计算机与 <code>OS会自动检测</code> 并启用 / 禁用该设备，达到真正的即插即用。</p>\n<p>新近的 <code>BIOS</code>  直接提供了 <code>USB设备驱动</code> 与 <code>读写</code> 功能，比如开始就可以使用 <code>USB键盘</code> ， <code>鼠标</code> 以及 <code>USB软盘</code> ，硬盘甚至 <code>USB CD-ROM</code>  来开机。</p>\n</blockquote>\n<h2 id=\"acpi-2\"><a class=\"anchor\" href=\"#acpi-2\">#</a> ACPI</h2>\n<blockquote>\n<p>高级配置和电源管理接口： <code>Advance Configuration and Power Management Interface</code>  . 早先 ACPI 将电源管理几乎全部分配给了 <code>BIOS控制</code> ，限制了 <code>操作系统</code> 在控制电脑。系统可能进入 <code>极地功耗</code> 消耗状态，这些就是可利用多数桌面型电脑上睡眠和休眠设置</p>\n<p>节电方式：</p>\n<ul>\n<li>显示屏 <code>自动断电</code></li>\n<li>系统把当前信息存储在 <code>内存</code> 中，只有内存等几个关键部件通电，即挂起到内存</li>\n<li><code>挂起到硬盘</code> ，计算机自 <code>动关机</code> ，关机千将当前数据存储在硬盘上。</li>\n</ul>\n</blockquote>\n<h2 id=\"中断向量表\"><a class=\"anchor\" href=\"#中断向量表\">#</a> 中断向量表</h2>\n<blockquote>\n<p><code>中断向量表</code> 在 <code>内存</code> 中保存，其中放着 <code>256个中断源</code> 所对应的中断处理程序入口</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbsMGpxMLgwLn51xNGAJSW4OcHYjxhm261gnSf5DY7mFGicKpHo98xz2CCLpz7ds97moEWjrCzpsIZQ/640?wx_fmt=webp\" alt=\"什么是中断向量表\" /></p>\n<h2 id=\"英语\"><a class=\"anchor\" href=\"#英语\">#</a> 英语</h2>\n<ul>\n<li><code>Keyboard Power On</code>  : 键盘开机</li>\n<li><code>Wake on LAN</code>   ： 网卡遥控开机</li>\n<li>调制解调器 / 传真机来电开机（ <code>Modem Ring On</code> )</li>\n<li>CPU 过热防护： <code> CPU Overheat Protection</code></li>\n<li>超频功能： <code>Overclocking</code></li>\n</ul>\n<h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyOTA3MTk1L2FydGljbGUvZGV0YWlscy8xMTY0NTA0MDQ=\">什么是 BMC</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dteDE5OTI/dHlwZT1ibG9n\">gxh1992 博客</span></li>\n<li>《UEFI 原理与编程》</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI3OTA2My9hcnRpY2xlL2RldGFpbHMvMTIwMTk0MzAx\">PEI 阶段扩展</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI3OTA2My9hcnRpY2xlL2RldGFpbHMvMTE1NTA4OTYx\">DXE</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODczMTkyL2FydGljbGUvZGV0YWlscy8xMjU5NjY0NTc=\">图表化呈现</span></li>\n</ul>\n",
            "tags": [
                "BIOS",
                "BIOS",
                "UEFI"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/BIOS/EDK2%E4%B8%8E%E5%8F%8C%E7%B3%BB%E7%BB%9F/",
            "url": "https://www.blog.foryouos.cn/BIOS/EDK2%E4%B8%8E%E5%8F%8C%E7%B3%BB%E7%BB%9F/",
            "title": "EDK2安装与双系统",
            "date_published": "2023-07-27T23:55:00.000Z",
            "content_html": "<h1 id=\"下载ubuntu系统\"><a class=\"anchor\" href=\"#下载ubuntu系统\">#</a> 下载 <code>ubuntu</code>  系统</h1>\n<blockquote>\n<p>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuLw==\">清华大学镜像站</span></p>\n<ul>\n<li>点击获取 <code>下载</code> 链接（ <code>IOS</code> )</li>\n<li>选择你要下载的 <code>Linux系统</code></li>\n</ul>\n</blockquote>\n<h1 id=\"设置u盘\"><a class=\"anchor\" href=\"#设置u盘\">#</a> 设置 U 盘</h1>\n<blockquote>\n<p>下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ydWZ1cy5pZS96aC8=\"> Rufus</span></p>\n</blockquote>\n<ul>\n<li>启动文件之后，选择自己的 U 盘，并选择自己下载好的 <code>ubuntu</code>  系统</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtYJ63N9TX2XmJg8WuLBdkqFNeS8rE7nC5zjzlydCiad2sz3852emuh8nVEGPqGP7J8b9UJgic5bTdw/640?wx_fmt=png\" alt=\"选择分区与文件\" /></p>\n<ul>\n<li><code>点击开始</code></li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtYJ63N9TX2XmJg8WuLBdkqkjNoIfTkdVfmyriccTuQUT6gR6saxdwJ3qbHbZbZWkQHHJe2U6OVH1g/640?wx_fmt=png\" alt=\"点击OK\" /></p>\n<ul>\n<li>选择 <code>推荐</code> ，点击 <code>Ok</code></li>\n<li>将会 <code>清理U盘</code> 数据，点击 <code>确认</code></li>\n<li><code>等待完成</code></li>\n</ul>\n<h1 id=\"压缩磁盘文件\"><a class=\"anchor\" href=\"#压缩磁盘文件\">#</a> 压缩磁盘文件</h1>\n<blockquote>\n<ul>\n<li>点击 <code>win键</code></li>\n<li>输入 <code>磁盘管理</code> ， <code>确认</code></li>\n<li><code>压缩磁盘</code> 文件，为 <code>Linux</code>  提供 <code>足够的空间</code></li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvt0EZMfITp1iat7azhaibBxM9pGmgx2hRvzeL34vLMbPoLGL8IUy1HOJ6bpSt6pOAiaPXDtjLuZ2Kow/640?wx_fmt=png\" alt=\"磁盘管理\" /></p>\n<h1 id=\"进入bios\"><a class=\"anchor\" href=\"#进入bios\">#</a> 进入 BIOS</h1>\n<blockquote>\n<p>通过 <code>UEFI</code>  固件设置进入 <code>BIOS</code></p>\n</blockquote>\n<ul>\n<li>点击所有 <code>设置</code></li>\n<li>点击 <code>更新与安全</code></li>\n<li>点击立即 <code>高级</code> 选项</li>\n<li>点击 <code>立即重新启动</code></li>\n<li>点击 <code>疑难解答</code></li>\n<li>点击 <code>高级选项</code></li>\n<li>选择 <code>UEFI固件</code> 设置</li>\n<li>点击 <code>重启</code></li>\n</ul>\n<h1 id=\"设置u盘启动\"><a class=\"anchor\" href=\"#设置u盘启动\">#</a> 设置 U 盘启动</h1>\n<ul>\n<li>在 <code>Boot页面</code> 下</li>\n<li>选择 <code>Boot Device Priority </code>  启动顺序</li>\n<li>将 <code>启动为第一位</code> 的设置为自己的 <code>U盘</code></li>\n<li><code>保存</code> 并重新 <code>启动</code></li>\n</ul>\n<h1 id=\"启动与安装\"><a class=\"anchor\" href=\"#启动与安装\">#</a> 启动与安装</h1>\n<blockquote>\n<p>选择 <code>Ubuntu Install</code></p>\n<p>在此即进入 <code>Ubuntu</code>  的安装程序，在安装区间时会检测到本机 <code>已经安装</code>  Windows，选择时务必 <code>选择新</code> 的，开辟 <code>新区</code> ，否则会与将 window 替代。</p>\n</blockquote>\n<h1 id=\"安装edk2\"><a class=\"anchor\" href=\"#安装edk2\">#</a> 安装 EDK2</h1>\n<blockquote>\n<p>偷个懒，推荐两篇文章吧！也是最近的，写的挺好的</p>\n</blockquote>\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_41873192/article/details/125861472\"> <code>UEFIEDK2安装</code> </a></li>\n<li><a href=\"https://blog.csdn.net/weixin_45450696/article/details/131529613\"> <code>EDK1环境搭建</code> </a></li>\n<li><a href=\"https://blog.csdn.net/weixin_43764544/article/details/123987210\"> <code>Ubuntu安装</code> </a></li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>https://blog.csdn.net/qq_41873192/article/details/125861472</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>https://blog.csdn.net/weixin_45450696/article/details/131529613</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>https://blog.csdn.net/weixin_43764544/article/details/123987210</pre></td></tr></table></figure><h1 id=\"uefi资料\"><a class=\"anchor\" href=\"#uefi资料\">#</a> UEFI 资料</h1>\n<blockquote>\n<ul>\n<li>\n<p>《 <code>UEFI编程实战</code> 》罗冰老师</p>\n</li>\n<li>\n<p>《 <code>UEFI原理与编程</code> 》戴正华老师</p>\n</li>\n<li>\n<p>《 <code>一个UEFI引导程序的实现</code> 》</p>\n</li>\n<li>\n<p>书籍源码在 <code>书籍引言</code> 都有介绍</p>\n</li>\n</ul>\n<p>微信公众号: <code>瓶子的跋涉</code>  回复 <code>UEFI</code></p>\n<p>我就直接给出链接啦！觉得公众号有需要就关注，没需要就... 嘿嘿！</p>\n</blockquote>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 第一本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>链接：https://pan.baidu.com/s/1MgJ2s4VKYCTXex7UFvvrFg?pwd<span class=\"token operator\">=</span><span class=\"token number\">5213</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>提取码：5213 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 后两本</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>https://foryouos.lanzoul.com/b0137vsde</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>密码:gevc</pre></td></tr></table></figure><h1 id=\"在win-企业版安装微软应用商城\"><a class=\"anchor\" href=\"#在win-企业版安装微软应用商城\">#</a> 在 win 企业版安装微软应用商城</h1>\n<ul>\n<li>进入 <code>cmd</code></li>\n<li><code>输入</code></li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>wsreset <span class=\"token parameter variable\">-i</span></pre></td></tr></table></figure><ul>\n<li>在 <code>右</code> 侧 <code>通知栏</code> 目会显示相关的 <code>组件</code> 正在 <code>下载</code></li>\n</ul>\n",
            "tags": [
                "BIOS",
                "BIOS",
                "UEFI"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/BIOS/BIOS%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8/",
            "url": "https://www.blog.foryouos.cn/BIOS/BIOS%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8/",
            "title": "BIOS与系统启动",
            "date_published": "2023-07-27T23:50:00.000Z",
            "content_html": "<h1 id=\"知识储备\"><a class=\"anchor\" href=\"#知识储备\">#</a> 知识储备</h1>\n<blockquote>\n<ul>\n<li>C 语言</li>\n<li>C++</li>\n<li>汇编</li>\n<li>Linux</li>\n</ul>\n</blockquote>\n<h1 id=\"汇编部分补充\"><a class=\"anchor\" href=\"#汇编部分补充\">#</a> 汇编部分补充</h1>\n<h2 id=\"数据描述符\"><a class=\"anchor\" href=\"#数据描述符\">#</a> 数据描述符</h2>\n<ul>\n<li><code>AX</code>  累加器：用到最多最频繁，AX，AH 和 AL 在乘，除法等操作中有专门的用途。</li>\n<li><code>BX</code>  基址寄存器：用于存放偏移地址</li>\n<li><code>CX</code>  为计数寄存器：在循环操作中做计数器用，用于控制循环程序的执行次数</li>\n<li><code>DX</code>  数据寄存器：在乘，除法及 I/O 端口操作时专门用途。</li>\n</ul>\n<h2 id=\"指令\"><a class=\"anchor\" href=\"#指令\">#</a> 指令</h2>\n<h3 id=\"操作方向标识为dfdirection-flas\"><a class=\"anchor\" href=\"#操作方向标识为dfdirection-flas\">#</a> 操作方向标识为 DF ( <code>Direction Flas</code> )</h3>\n<blockquote>\n<p>使用此指令 <code>控制</code> 方向标志 <code>DF</code> ，决定内存地址增大还是减小。</p>\n<p>在子串操作中使 SI 或 DI 的地址指针自动递减，字串处理由后往前。</p>\n</blockquote>\n<ul>\n<li><code>CLD</code>  使 <code>DF复位</code> ，即让 <code>DF=0</code>  向 <code>高</code> 地址 <code>增加</code></li>\n<li><code>STD</code>  使 <code>DF置位</code> ，即让 <code>DF = 1</code>  向 <code>低</code> 地址 <code>减少</code></li>\n</ul>\n<h1 id=\"cpu架构\"><a class=\"anchor\" href=\"#cpu架构\">#</a> CPU 架构</h1>\n<blockquote>\n<p><code>CPU架构</code> 是 CPU 厂商给属于 <code>同一系列</code> 的 <code>CPU</code>  产品定的一个规范，主要目的是为了区分 <code>不同类型CPU</code>  的重要标示。</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4ByNjnwsNRWwSWz7o6lxGlRJibtbMexd9fVyvTd5RGgPGw26OKQGOQ08g/640?wx_fmt=png\" alt=\"CPU架构\" /></p>\n<ul>\n<li>\n<p>复杂指令集 <code>CISC </code>  (Complex Instruction Set Computer)： 增强原有指令的功能，设置更为 <code>复杂</code> 的新指令实现 <code>软件功能的硬化</code> 。</p>\n</li>\n<li>\n<p>精简指令集 <code>RISC</code>   (Reduced Instruction Set Computer)： <code>较少指令</code> 种类和 <code>简化</code> 指令功能，提高指令的执行效率</p>\n</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BvRPydwpIeGqTKjuF64U6eXgaLAISGSf7agzEsNFibbERvPUz2xT4AXg/640?wx_fmt=jpeg\" alt=\"指令集对比\" /></p>\n<h2 id=\"南桥北桥\"><a class=\"anchor\" href=\"#南桥北桥\">#</a> 南桥北桥</h2>\n<p>在早期，芯片组分为南桥芯片组和北桥芯片组两部分，其中北桥负责 <code>CPU</code>  与 <code>内存的数据</code> 交换， <code>图形处理</code> ， <code>CPU与PCIE</code>  (高速串行计算机扩展总线标准) 数据交换，南桥负责系统的输入输出功能。 <code>北桥芯</code> 片还叫 &quot; <code>图形与内存控制器</code>  &quot;， <code>南</code> 桥叫 &quot; <code>输入/输出</code> 控制器 &quot;。北桥芯片组因与 CPU 联系密切靠近 CPU 位置，在现代制造工艺越来越先进，集成度越来越高， <code>内存控制</code> 器已经被集成到 <code>CPU内部</code> ，显卡收进 CPU (核显)，而 PCIE 控制器收归南桥管理，北桥芯片组功能基本被瓜分。在 Intel 芯片组中北桥被取消，而 AMD 只有早期主板仍保留着北桥和南桥。</p>\n<p><code>PCIE</code> : 属于 <code>高速串行</code> 点对点双通道 <code>高宽带传输</code> ，所连接的设备分配独享通道带宽，不共享总线带宽，主要支持主动电源管理，错误报告，端对端的可靠性传输，热插拔以及服务质量 QOS 等功能。</p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4Bsiad3zKognzINjEeibkz0PQR2ekCJuad6lKd0jZicsnvJe5tU92BZjibNQ/640?wx_fmt=jpeg\" alt=\"南桥\" /></p>\n<h1 id=\"电脑启动过程早期\"><a class=\"anchor\" href=\"#电脑启动过程早期\">#</a> 电脑启动过程 (早期)</h1>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BK8ZUDicv3z4CkGQU5POoQFKMYKwV9A6AibeosfQZyOVODxJNAtURHw8A/640?wx_fmt=jpeg\" alt=\"启动顺序\" /></p>\n<ul>\n<li>系统 <code>加电BIOS</code>  初始化 <code>硬件</code></li>\n<li>BI0S <code>读</code> 取 <code>引导扇区代码</code>  -- 加载程序</li>\n<li>加载 <code>内核</code> 并 <code>跳转到内核执行</code>  - 操作 <code>系统内核</code></li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BU2zseB4kZa6REX4UAsrH93ciaLeibOFkK4eh7R0zwxU6OibqNbCUiagfxA/640?wx_fmt=jpeg\" alt=\"刚启动时内存布局\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4Bpp9OWibhiapRDXicRSz5KBn2icAD9gIqticmiaLuTP9H1R43D8WRqmDLGgwQ/640?wx_fmt=jpeg\" alt=\"十六位实模寻址\" /></p>\n<h2 id=\"当装入多个操作系统\"><a class=\"anchor\" href=\"#当装入多个操作系统\">#</a> 当装入 <code>多个</code> 操作系统</h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BfzrQX4xIRkvn2e0TCEib5QMcRFt6Jk70jUBEvP6HuCS8MTwQwjuqhPg/640?wx_fmt=jpeg\" alt=\"主引导记录MBR格式\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BzQdZGSwq6xfIvm4RxGatO1PFnuTTrKaJR6pSZJ60Lwve6aTazqhU8w/640?wx_fmt=jpeg\" alt=\"多个操作系统\" /></p>\n<h1 id=\"工作模式\"><a class=\"anchor\" href=\"#工作模式\">#</a> 工作模式</h1>\n<ul>\n<li><code>实模式</code></li>\n</ul>\n<blockquote>\n<p>程序中用到的地址都是 <code>真实</code> 的物理地址。</p>\n<p>在实模式下，内存寻址方式和 <code>8086</code> （8086, 微处理器， <code>1MB</code>  内存地址， <code>3微米</code> 晶体管， <code>IBM</code> 1981 年生产的 <code>第一台</code> 电脑就是使用 8086 简化版，标志着 <code>x86架构</code> 和 IBM PC 兼容电脑的产生) 相同， <code>机器段</code> 起始地址的 <code>低4位</code> 设置为 <code>0</code> ，由 <code>16位段寄存器</code> 的内容乘以 16 ( <code>左移4位</code> ) 作为 <code>段基址</code>  (Segment Base Address)(能被 16 整除的主存物理地址)，加上 16 位段偏移地址形成 <code>20位</code> 物理地址，</p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4B3XhjCZwyPmsic3DiauW32qmHKlFM1mRAa0554zaIMrCSIKEU9h9sSgug/640?wx_fmt=jpeg\" alt=\"段基址\" /></p>\n<p>最大 <code>寻址空间1MB</code> ，最大 <code>分段64KB</code> 。可以使用 <code>32位指令</code> ，即 32 位的 x86 CPU 也可以兼容实模式，此时的实模式相当于高速 8086 (32 位 CPU 的实模式可以使用 32 位下的资源)。在 <code>32位CPU</code>  下，系统复位或加电时都是以 <code>实模式启动</code> ，然后再切换为 <code>保护模式</code> 。在实模式下，所有的段都可以 <code>读</code> ，写和可执行的。由于实模式下 <code>没有特权级</code> ，程序可以 <code>随意修改</code> 自己的段基址，加上实模式下对地址的访问就是 <code>实际物理地址</code> ，随意修改给操作系统带来极大安全隐患</p>\n</blockquote>\n<ul>\n<li>保护模式</li>\n</ul>\n<blockquote>\n<p><code>标志位</code> 表示 <code>权限</code> ，当用户访问与读取的 <code>段</code> 文件权限进行 <code>对比</code> ，已达到保护的目的。</p>\n<p>每一个指令，每一个程序本身就有一个权限，可以用 <code>CPL/RPL</code>  描述，访问的目标字符段也有一个权限为 <code>DPL</code> 。处理器会对特权集进行检查， <code>判断</code> 当前的 <code>CPL/RPL</code>  是不是 <code>大于等于</code>  DPL。</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BEDLmz00ZSeC6gRFlxJDKechibd0HIQPSHY05mUKRolWSumXj8JtJIjg/640?wx_fmt=jpeg\" alt=\"实模式与保护模式\" /></p>\n<h1 id=\"bios概念\"><a class=\"anchor\" href=\"#bios概念\">#</a> BIOS 概念</h1>\n<blockquote>\n<p>BIOS( <code>Basic Input Output System</code> ) 全称 <code>基本输入/输出系统</code> ，固件，它是存储在 <code>主板ROM</code>  (只读存储器，生成之后 <code>只有一次</code> 写入机会，数据一旦写入则不可更改。按照内容写入方式分为:  <code>可一次变成PROM</code> ， <code>可擦除</code>  ROM，又分为 <code>EPROM紫外线</code> 擦除电写入和 <code>E2PROM电擦</code> 除电写入等) 里的一组程序代码。</p>\n<p>主要包括:</p>\n<ul>\n<li><code>加电自检</code>  (Power On Self Test POST) 程序，用于开机时对硬件的检测，BIOS 包含基本输入输出程序，包括读取键盘，写入屏幕，和执行磁盘 I/O 等操作过程，去检测开机时系统状况，而 <code>显卡不可检测</code></li>\n</ul>\n<blockquote>\n<p><code>Blos</code>  (Blos 采用 <code>16位汇编语言</code> 编写) 只能运行在 <code>16位</code> 实模式下，实模式下最大寻址范围时 <code>1MB</code></p>\n<p>系统加电时，当 CPU 收到复位事件时，当它被上电或重新启动时 -- 指令寄存器就被装入 一个预定义的内存位置，并在那里开始执行。</p>\n</blockquote>\n<ul>\n<li>系统初始化代码，包括 <code>硬件设备的初始化</code> ，创建 <code>BIOS中断向量</code> 等</li>\n<li>基本的外围 <code>I/O处理</code> 子程序代码</li>\n<li><code>CMOS</code>  设置程序：Complementary Metal-Oxide-Semiconductor: 保存了系统引导的最基本的资料 (基本设置，时钟信息)。</li>\n</ul>\n</blockquote>\n<h1 id=\"初始化过程\"><a class=\"anchor\" href=\"#初始化过程\">#</a> 初始化过程</h1>\n<ul>\n<li>硬件 <code>自检POST</code></li>\n<li>检测系统中 <code>内存</code> 和 <code>显卡</code> 等关键部件的存在和工作状态</li>\n<li>查找并执行显卡等接口 <code>卡BIOS</code> ，进行 <code>设备初始化</code></li>\n<li>执行 <code>系统BIOS</code> ，进行 <code>系统检测</code>   -- 检测和配置系统中安装的即插即用设备</li>\n<li>更新 <code>CMOS</code>  中的扩展 <code>系统配置数据ESCD</code></li>\n<li>按指定 <code>启动顺</code> 序从 <code>软盘</code> ， <code>硬盘</code> 或 <code>光驱</code> 启动</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BxA9alCgs4ElF44pRkOrPW70uUlJRhRj1DIoKcERTMn9ofD9ZU98V5A/640?wx_fmt=jpeg\" alt=\"bios\" /></p>\n<h2 id=\"启动加载程序bootloader\"><a class=\"anchor\" href=\"#启动加载程序bootloader\">#</a> 启动加载程序 <code>Bootloader</code></h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4B2OIUQd5DTicpXEibxicEJqr1iav7QOyqZEwIr71O9RFg7R3P9Ek07TCdEA/640?wx_fmt=jpeg\" alt=\"引导启动内核的过程\" title=\"引导启动内核过程\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4B6x6tLUVfJR6B1wPtBlGObNGWEfFuPNRicZb4Kic8DcHGHO09Gk4OLib8w/640?wx_fmt=jpeg\" alt=\"引导启动内核程序\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4Bs1I9XzoFKxkcW7Eib1FXG3Jib2FtgIq56JicnjI8hjulw4iaibYy3cLzuPA/640?wx_fmt=jpeg\" alt=\"linux启动代码\" /></p>\n<blockquote>\n<p>到 <code>setup</code>  部分，进入 <code>保护模式</code></p>\n<p>运行 <code>system模块</code> ，进入 <code>操作系统</code></p>\n</blockquote>\n<h2 id=\"bootsects\"><a class=\"anchor\" href=\"#bootsects\">#</a> bootsect.s</h2>\n<blockquote>\n<p>工作在 <code>实模式</code> 下，起到 <code>搬运工</code> 的作用</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BJXFziawv1rVvj8HBq46iaHvZtsZx1BEmMucOicjjILtPiadB2U9TV9jX0A/640?wx_fmt=jpeg\" alt=\"第一部分\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BdyicxGGSmiaofPpXnpvTiaicwcWAmHukPR6kW9VaLnpzdt8mPqGN6LwWmw/640?wx_fmt=jpeg\" alt=\"片段二\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4B0N6sWgMW2pXic8bibhx5vykoPVRD4wdyH2VxGPjxhFwfwYIj9tqia5rHQ/640?wx_fmt=jpeg\" alt=\"片段三\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BWy6JQpMcOGbA1iakjOVywTAWx5Otibypbk6jo2hDicMAUWicIcuNEF0HmQ/640?wx_fmt=jpeg\" alt=\"片段四\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4B59IeS5UVtXTrZVeCKFcF0q0AroO2tgea1iciby8bvMz5GTxtoedLSwLw/640?wx_fmt=jpeg\" alt=\"片段六\" /></p>\n<p>​                                                                                                          <img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BoM0aqAlVqabwq6t1ZIFxG8GuV9awJU1AiaWnyddt8U8obTibVv9b0YOA/640?wx_fmt=jpeg\" alt=\"片段八\" /></p>\n<h1 id=\"setups\"><a class=\"anchor\" href=\"#setups\">#</a> setup.s</h1>\n<blockquote>\n<p><code>setup.s</code>  负责从 <code>BIOS</code>  中 <code>获取系统数据</code> ，并将这 <code>些数据</code> 放到 <code>系统内存</code> 的 <code>适当地方</code> 。此 <code>setup.s</code>  和 <code>system</code>  已经 <code>由bootsect引</code> 导块加载到 <code>内存</code> 中。</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BgRc8dxJZicruEg0QibzCfPFJ2CJGevt3icYKYeaPuDcafeKZicnZKJjibcw/640?wx_fmt=jpeg\" alt=\"setup\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BYlp41bnLC7O1BlDXY1j3kyKfe4TACrnoiaOeYGibS7ULLrohfUwkAlUA/640?wx_fmt=jpeg\" alt=\"片段一\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BWSK6GYVlbT0AhLWhISWiaLqpmc4mvtlT26MjCZKibahiaRP3hBGmlIsyQ/640?wx_fmt=jpeg\" alt=\"片段二\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4Bic87KoggRjlDlIAPKN8nVU4Cjnqu7VdwlMR5PC0tPAZ2A6tapkdfEKQ/640?wx_fmt=jpeg\" alt=\"片段四\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BOGQvAOtNiaaCOFAeElGWvkPn5g8C9JtY3KiaiaG8p3e6cGW53zMApyicsQ/640?wx_fmt=jpeg\" alt=\"片段五\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BNydVMOhKibW5eJiahL6pIyPPcfYWZtWzt8UcqKR34pC0yu0cMWHUiajuw/640?wx_fmt=jpeg\" alt=\"总\" /></p>\n<h1 id=\"heads\"><a class=\"anchor\" href=\"#heads\">#</a> head.s</h1>\n<blockquote>\n<p>进一步设置 <code>中断描述符</code> 和 <code>全局描述符</code> 表，设计 <code>页表</code>  -- 开始对 <code>系统内存</code> 进行 <code>管理</code></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BhXk6PCSQblUOxcvrNwqeFWg5VxFopVuSXBLklTW31QneHYp4THvzsA/640?wx_fmt=jpeg\" alt=\"head.s\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BcVXZwJwEV8nA2NFuBSaOtjOjQzS8Rtia4Zzx5J3EE3HF1UvyhhVptlA/640?wx_fmt=jpeg\" alt=\"设置中断描述符\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BzZhsOHicn9EFib3QPpmticBWqzIGia6uHsK2dvxhoxCuhEMdOuVxgdnxtA/640?wx_fmt=jpeg\" alt=\"mian函数工作流程\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4BfsWLLxEujMvZMpqCbuPpic5tRmfYFFTGmhLic72hSianGda1X2IUI9aiaA/640?wx_fmt=jpeg\" alt=\"main函数\" /></p>\n<h1 id=\"bios缺点\"><a class=\"anchor\" href=\"#bios缺点\">#</a> BIOS 缺点</h1>\n<ul>\n<li><code>开发效率</code> 低 ：大部分 BIOS 使用汇编开发，开发效率低，汇编开发代码与设备的耦合度太高，(软件工程讲究 <code>高内聚低耦合</code> ，目的是使程序模块的可重用性，移值性大大增强)</li>\n<li><code>性</code> 能差：BIOS 基本输入输出通过中断来完成，开销大，并且 BIOS 没有提供异步工作模式，大量时间消耗在等待上</li>\n<li>功能 <code>扩展性</code> 差，升级缓慢：BIOS 代码采用静态链接，增加硬件功能时，必须将 16 位代码放置在 0x0C0000 ~ 0x0DFFFF 区间，初始化时将其设置为约定的中断处理程序。而且 BIOS 没有提供动态加载设备驱动方案</li>\n<li><code>安全</code> 性：BIOS 运行过程中对可执行代码没有安全方面考虑</li>\n<li>不支持从硬 <code>盘2TB</code>  以上的 <code>地址引导</code> ：受限于 BIOS 硬盘的寻址方式，BIOS 硬盘采用 <code>32位</code> 地址，因而引导扇区的最大逻辑块地址 <code>2^32</code>  (换算成字节地体，即 <code>2^32 X 512</code>  = 2TB)</li>\n</ul>\n<h1 id=\"uefi\"><a class=\"anchor\" href=\"#uefi\">#</a> UEFI</h1>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtKex8JtVx7dyJAicGoPIf4B2fNXBA3x10gwrRbOcYtZKEG9zbMfMknmHxibCia4iaWRaPcy6n8QFia4Ug/640?wx_fmt=jpeg\" alt=\"UEFI\" /></p>\n<h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li>厦门大学《操作系统原理》</li>\n<li>《UEFI 原理与编程》\n<ul>\n<li>获得 BIOS 中英文对照：公众号回复： <code>BIOS英文</code>  即可获得</li>\n<li>下载:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J5b3Vvcy5sYW56b3VsLmNvbS9pQXBjcDEzOGI5YmU=\">https://foryouos.lanzoul.com/iApcp138b9be</span> 密码：5213</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "BIOS",
                "BIOS",
                "UEFI"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/Certificate/soft/work/STL%E5%BC%BA%E5%8C%96/",
            "url": "https://www.blog.foryouos.cn/Certificate/soft/work/STL%E5%BC%BA%E5%8C%96/",
            "title": "STL强化",
            "date_published": "2023-07-20T12:10:00.000Z",
            "content_html": "<h1 id=\"面向对象三大特征\"><a class=\"anchor\" href=\"#面向对象三大特征\">#</a> 面向对象三大特征</h1>\n<blockquote>\n<ul>\n<li><code>封装</code> 是指将数据和行为组合成一个整体，对外部 <code>隐藏</code> 内部的 <code>实现细节，</code> 只提供必要的 <code>接口</code> 。封装可以 <code>保护</code> 数据的 <code>安全性</code> ， <code>降低</code> 代码的 <code>复杂度</code> ， <code>提高</code> 代码的 <code>可维护性</code> 。C++ 通过 <code>private,protected，public</code>  关键字来 <code>控制</code> 成员变量和成员函数的 <code>访问权限</code></li>\n<li><code>继承</code> 是指 <code>子类可以继承父类</code> 的属性和方法，并且可以 <code>添加或修</code> 改自己特有的属性和方法。 <code>继承</code> 可以提高 <code>代码的复用性</code> ； <code>提高</code> 代码的 <code>扩展性</code> ；同时也是 <code>多态的前提</code></li>\n<li><code>多态</code> 是指 <code>不同类型的对象</code> 对 <code>同一消息</code> 可以做出 <code>不同的响应</code> 。多态可以分为 <code>编译时</code> 和 <code>运行时</code> 多态。 <code>编译</code> 时多态是指通过 <code>重载实现</code> 的多态，即在同一类中定义了相同名称但不同参数的方法，根据调用时传递的参数不同而执行不同方法， <code>运行时多态</code> 是指通过 <code>重写实现的多态</code> ，即在 <code>子类中重新定义父类中已有的方法</code> ，根据调用时 <code>使用的对象不同</code> 而 <code>执行不同的方法</code> 。多态可以实现 <code>接口的同一</code> ，增加 <code>程序</code> 的 <code>灵活性</code> 和可 <code>扩展性</code> 。</li>\n</ul>\n</blockquote>\n<h1 id=\"c类型转换\"><a class=\"anchor\" href=\"#c类型转换\">#</a> C++ 类型转换</h1>\n<ul>\n<li><code>static_cast</code> ：明确指出 <code>类型转换</code> ，没有动态类型检查， <code>上行转换</code>  (派生类到基类) <code>安全</code> ， <code>下行转换</code>  (基类到派生类) <code>不安全</code> 。</li>\n<li><code>dynamic_cast</code> : 用于 <code>有条件</code> 的转换， <code>动态类型</code> 检查，运行时检查类型安全 (转换失败返回 NULL)，只能用于 <code>多态类型</code> 的 <code>指针或引用</code></li>\n<li><code>const_cast</code> ：用于改变运算对象的 <code>底层const属性</code> ， <code>不能改</code> 变其 <code>顶层const属性</code></li>\n<li><code>reinterpret_cast</code> : 用于 <code>无关类型之间</code> 的转换，如 <code>整型和指针，不同类型的指针</code> 等。</li>\n</ul>\n<h1 id=\"stl常见的容器\"><a class=\"anchor\" href=\"#stl常见的容器\">#</a>  <code>STL</code>  常见的容器</h1>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbucZCeIYhyYp7UQbMMwAwkjicmDYTickhqsdXd6NTgRN144dKic0kYCqWIRz74mSoR3aibclGfZxJoKUw/640?wx_fmt=png\" alt=\"STL对比\" title=\"STL对比\" /></p>\n<h2 id=\"顺序容器\"><a class=\"anchor\" href=\"#顺序容器\">#</a> 顺序容器</h2>\n<ul>\n<li><code>vector</code>  : 可变 <code>大小数组</code> ，支持 <code>快速随机访问</code> 。在尾部之外的位置 <code>增删元素可能很慢</code></li>\n<li><code>deque</code>  ：双端队列。支持 <code>快速随机访问</code> 。在 <code>尾部之外</code> 的位置增删元素 <code>可能很慢</code></li>\n<li><code>list</code>  :  <code>双向链表</code> 。只支持 <code>双向顺序访问</code> ，在任何位置增删元素都能在 <code>常数时间</code> 完成。不支持随机存取</li>\n<li><code>forward_list</code>  ： <code>单向链表</code> ，只支持单向顺序访问，在链表的任何位置增删元素都能在常数时间内完成，由于没有了 size 操作以及简化了增删元素的链节点操作，速度相比双向链表更快，不支持随机存取</li>\n<li><code>strin</code> g : 字符串。与 vector 相似，但专门用于保存字符。随机访问块，子尾部增删元素块</li>\n<li><code>array</code> ： <code>定长数组</code> 。支持 <code>快速随机访问</code> ，不能添加和删除元素</li>\n</ul>\n<h2 id=\"关联容器\"><a class=\"anchor\" href=\"#关联容器\">#</a> 关联容器</h2>\n<ul>\n<li><code>map</code>  ： 关联容器。保存键值对</li>\n<li><code>set</code>  ：关键字取值，即只 <code>保存关键字</code> 的容器，-- <code>底层红黑树</code></li>\n<li><code>multimap</code>  : 关键字 <code>可</code> 重复的 map</li>\n<li><code>multiset</code>  ：关键字 <code>可</code> 重复出现的 set (上四个皆红黑树)</li>\n<li><code>unordered_map</code>  : 用 <code>hash函数</code> 组织的 <code>map</code></li>\n<li><code>unordered_set</code>  : 用 <code>hash函数</code> 组织的 <code>set</code></li>\n<li><code>unordered_multimap</code>  : 用 <code>hash函数</code> 组织的 <code>map</code> ，关键字 <code>可重</code> 复出现</li>\n<li><code>unordered_multiset</code>  : 用 <code>hash函数</code> 组织的 <code>se</code> t，关键字 <code>可重</code> 复出现</li>\n</ul>\n<h1 id=\"简述vector实现原理\"><a class=\"anchor\" href=\"#简述vector实现原理\">#</a> 简述 vector 实现原理</h1>\n<blockquote>\n<p><code>vector</code>  是一种 <code>动态数组</code> ，在内存中具有连续的存储空间，支持 <code>快速随机访问</code> 。</p>\n<p>由于具有连续的存储空间，所以在插入和删除操作方面，效率较低。当 <code>vector</code>  的大小和容器 <code>相等</code>  ( <code>size == capacity</code> )，如果再向其添加元素，那么 vector 就需要 <code>扩容</code> ，vector 容器扩容的过程需要经历三步</p>\n<ul>\n<li><code>完全摒弃</code> 现有的内存空间， <code>重新申请</code> 更大的内存空间</li>\n<li>将 <code>旧内存空间</code> 中的 <code>数据</code> ，按 <code>原有顺序</code> 移动到 <code>新的内存空间</code></li>\n<li>最后将 <code>旧的内存空间释放</code> ， <code>vector</code>  扩容 <code>非常耗时</code> ，为了降低再次分配内存空间时的成本，每次 <code>扩容时vector</code>  都会申请比用户 <code>需求量更多</code> 的内存空间 (这也就是 vector 容量的由来，即 <code>capacity&gt;=size</code> )，以便后期使用</li>\n</ul>\n<p><code>不</code> 同的 <code>编译器</code> 在扩容时所采用的 <code>扩容因子</code> 可能不同，比如 <code>MSVC</code>  的 <code>扩容因子</code> 为 <code>1.5</code> ，即 <code>每次扩容</code> 时容量变为 <code>原来的1.5倍</code> 。</p>\n</blockquote>\n<h1 id=\"unordered_map实现原理\"><a class=\"anchor\" href=\"#unordered_map实现原理\">#</a>  <code>unordered_map</code>  实现原理</h1>\n<blockquote>\n<p><code>unordered_map</code>  是一种 <code>无序的关联容器</code> ，它存储了 <code>键值对</code> 的集合，其中每个 <code>键都是唯一</code> 的</p>\n<p><code>unordered_map</code>  的实现原理是基于 <code>hash表</code> ，通过把 <code>关键码</code> 映射到 hash 表中的一个位置来访问记录</p>\n<p>unordered_map 中的元素没有按照他们的键值或映射值的任何顺序排序，而是根据他们的 <code>散列</code> 值 <code>组织成桶</code> 允许它们的键值直接 <code>快速访问</code> 单个元素 (通常平常平均时间复杂度)</p>\n<p>当两个元素具有相同的 <code>散列值</code> 时，会发生 <code>hash冲突</code> ，为了解决这个问题，unordered_map 采用了 <code>链地址法</code> ，即每个桶中存储一个链表，链表中存放所有散列值相同的元素。</p>\n</blockquote>\n<h1 id=\"简述map实现原理各操作的时间复杂度\"><a class=\"anchor\" href=\"#简述map实现原理各操作的时间复杂度\">#</a> 简述 map 实现原理，各操作的时间复杂度</h1>\n<blockquote>\n<ul>\n<li><code>map</code>  是一个模板类，它的模版参数是键值对的类型和比较函数。比较函数用来定义键值对之间的大小关系，从而确认键值对在红黑树中的位置</li>\n<li>map 的底层数据结构也是红黑树，它与 set 的红黑树相同，只是每个节点存储的不是单个元素，而是一个 <code>pair对象</code> ，包含一个 <code>key</code>  和一个 <code>value</code></li>\n<li><code>map的插入</code> 操作是先在红黑树中找到合适的位置，然后创建一个新节点，并将其颜色设为红色。如果新节点的父节点也是红色，那么就需要进行旋转和变色操作来回复平衡</li>\n<li>map 的删除操作是 <code>先</code> 在红黑树中 <code>找</code> 到要 <code>删除的节点</code> ，然后 <code>其后继或前屈</code> 替换它， <code>并释放</code> 原来的节点。 <code>如果</code> 被删除或替换的节点是 <code>黑色</code> ，那么就 <code>需</code> 要 <code>进行旋转</code> 和 <code>变色操作</code> 来 <code>恢复平衡</code> 。</li>\n<li><code>map</code>  的查找操作是 <code>沿着二叉搜索树</code> 的路径 <code>向下查找</code> ，直到直到目标键值对或者未空为止</li>\n</ul>\n<p>由于红黑树保证了 <code>高度平衡</code> ，因此各操作的 时间复杂度均为 <code>O(log n)</code></p>\n</blockquote>\n<h2 id=\"简述map和unordered_map区别\"><a class=\"anchor\" href=\"#简述map和unordered_map区别\">#</a> 简述 map 和 unordered_map 区别</h2>\n<blockquote>\n<p>map 基于红黑树实现，该结构具有中排序功能，因此 <code>map内部</code> 的所有元素都是 <code>有序</code> 的，红黑树的每一个节点都代表着 map 的一个元素。因此，对于 map 进行的查找，删除，添加等一系列的操作都相当于是对红黑树进行这样的操作， <code>红黑树的效率</code> 决定了 <code>map的效率</code> ，其 <code>增删改查</code> 时间复杂度 <code>O(log n)</code></p>\n<p>而 unordered_map 内部实现了一个 <code>hash表</code> ，因此其元素的排列顺序是 <code>杂乱的</code> ， <code>无序的</code> 。且增删改查时间复杂度为 <code>O(1)</code></p>\n</blockquote>\n<h1 id=\"迭代器遍历容器\"><a class=\"anchor\" href=\"#迭代器遍历容器\">#</a> 迭代器遍历容器</h1>\n<blockquote>\n<p>键盘输入 5 个整数，将这些数据保存到 vector 容器中，采用正向迭代器和反向迭代器分别遍历 vector 中的元素并输出。</p>\n<p>使用正向迭代器和反向迭代器分别遍历输出 vector 中的元素，元素之间使用空格隔开，两次遍历之间换行。</p>\n<p>例如：</p>\n<p>1 2 3 4 5</p>\n<p>5 4 3 2 1</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// write your code here......</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// write your code here......</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 循环读取用户输入，当输入 ctrl+c 结束输入</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将元素添加到容器末尾</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取起始的迭代迭代器</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iter <span class=\"token operator\">!=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>iter <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        iter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iter <span class=\"token operator\">!=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        iter<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>iter <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"迭代器分类\"><a class=\"anchor\" href=\"#迭代器分类\">#</a> 迭代器分类</h2>\n<blockquote>\n<p>根据 <code>输出</code> 的 <code>不同</code> ，使用 <code>不同</code> 的 <code>迭代器</code> 。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 正向迭代器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>容器类名<span class=\"token double-colon punctuation\">::</span>iterator 迭代器名<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 依次向下遍历</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 反向迭代器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>容器类名<span class=\"token double-colon punctuation\">::</span>reverse_iterator 迭代器名<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 依次向上遍历</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 常量正向迭代器</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>容器类名<span class=\"token double-colon punctuation\">::</span>const_iterator 迭代器名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 常量反向迭代器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>容器类名<span class=\"token double-colon punctuation\">::</span>const_reverse_iterator 迭代器名<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"逆向迭代器\"><a class=\"anchor\" href=\"#逆向迭代器\">#</a> 逆向迭代器</h2>\n<blockquote>\n<p>当使用逆向迭代器时，注意 <code>逆向迭代器</code> 的位置，如果输出 <code>其值</code> ，需要 <code> -1</code></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbucZCeIYhyYp7UQbMMwAwkjuLM5NrbEP8ZeAUavfb0xkb58SBOXHfmh6sUVRUgoW6ibmibMTAw15utg/640?wx_fmt=png\" alt=\"逆向迭代器\" title=\"逆向迭代器\" /></p>\n</blockquote>\n<blockquote>\n<p>根据 <code>输出</code> 的 <code>不同</code> ， <code>选择</code> 不同的 <code>迭代器</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>给出一个包含 n 个整数的数组 a, 使用 vector 实现倒序输出数组的最后 k 个元素。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// write your code here......</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> vel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcin <span class=\"token operator\">>></span> vel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\ta<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>vel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// cout &lt;&lt; a[0] &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 使用逆向迭代器，一吃输出</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>reverse_iterator iter <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>iter <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tk<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"vector二维数组\"><a class=\"anchor\" href=\"#vector二维数组\">#</a> vector 二维数组</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义 2*3 的二维数组，并初始化为零</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//vector&lt;vector&lt;int>> a (row, vector&lt;int>(col,0)); // 初始化为 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 可以通过行列的形式赋值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 获取行数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 获取列数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 列数</span></pre></td></tr></table></figure><h1 id=\"数组系列\"><a class=\"anchor\" href=\"#数组系列\">#</a> 数组系列</h1>\n<blockquote>\n<p>支持 <code>下标访问</code></p>\n</blockquote>\n<blockquote>\n<p><code>cbegin</code>  在 <code>begin</code>  迭代器的 <code>基础上</code> ， <code>添加</code> 了 <code>const属性</code> ， <code>不能</code> 用于 <code>修改</code> 元素。</p>\n</blockquote>\n<blockquote>\n<ul>\n<li><code>vector</code>  动态 <code>可变</code></li>\n<li>可 <code>存储任何类型</code> 数据</li>\n<li><code>连续存储空间</code>  (扩容和中间插入效率低)</li>\n<li>大小 <code>动态改</code> 变，会被容器自动处理</li>\n</ul>\n<blockquote>\n<p>与 <code>array</code>  区别：</p>\n<ul>\n<li>array  <code>固定</code> 大小，不能调整大小</li>\n<li>array 编译时就已经分配好内存</li>\n<li>array 适合存储大小已知并且 <code>大小不会改变</code> 的数据。</li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"插入语法\"><a class=\"anchor\" href=\"#插入语法\">#</a> 插入语法</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1, 在迭代器 pos 指定的位置之前插入一个新元素 elem, 并返回新插入元素的迭代器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iterator <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//2, 在迭代器 pos 指定的位置之前插入 n 个元素 elem，并返回表示第一个新插入元素位置的迭代器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>iterator <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//3, 在迭代器 pos 指定的位置之前，插入其它容器 (不仅限于 vector) 中位于 [first,last] 区域的所有元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 并返回表示第一个新插入元素位置的迭代器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>iterator <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span>first<span class=\"token punctuation\">,</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//4, 在迭代器 pos 指定的位置之前，插入初始化列表 (用大括号 &#123;&#125; 括起来的多个元素，中间有逗号隔开) 中所有的元素，</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 并返回表示第一个新插入元素的迭代器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>iterator <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span>initilist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"emplace_back和push_back区别\"><a class=\"anchor\" href=\"#emplace_back和push_back区别\">#</a> emplace_back 和 push_back 区别</h2>\n<ul>\n<li><code>push_back()</code>  向容器尾部添加元素时\n<ul>\n<li><code>创建</code> 元素</li>\n<li><code>拷贝/移动</code> 到容器中</li>\n<li>事后 <code>销毁第一步</code> 创建的元素</li>\n</ul>\n</li>\n<li><code>emplace_back()</code>\n<ul>\n<li><code>直接</code> 在 <code>容器尾部</code> 创建元素</li>\n<li><code>省</code> 去 <code>拷贝和移动</code> 的过程，在使用中 <code>效率更高</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li><code>c.emplace_back(t)</code>  : 在 <code>c</code>  的 <code>尾部</code> 创建一个 <code>值为t</code>  的元素</li>\n<li><code>c.emplace_front(t)</code>  : 在 <code>t的头部</code> 创建一个值为 <code>t</code>  的元素</li>\n<li><code>c.emplace(p,t)</code>   : 在 <code>迭代器p</code>  所指向的 <code>元素之前</code> 创建一个 <code>值为t</code>  的元素， <code>返回</code> 指定 <code>新添加元素</code> 的 <code>迭代器</code> 。</li>\n</ul>\n</blockquote>\n<h2 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print_container</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//1，创建动态数组</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//2，添加元素</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//v.push_back (1); // 在 vector 容器尾部添加元素</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在 vector 容器的尾部添加一个元素 效率更高</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 2.1 预留元素空间</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 预留空间</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 2.2 插入元素 - 返回新插入位置的迭代器</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//insert (插入位置前面的迭代器；插入值；first,last 插入范围，主要指其它容器；ilist，要插入来源的 initializer_list</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">//1，</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">//2,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">//3,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在动态数组末尾，插入 s 的元素</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">//4,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 3，删除元素</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">print_container</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">//3.1 删除头节点</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">//3.2 删除特定区间的节点</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">print_container</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">//3.3 删除所有偶数</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tit <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">print_container</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">//3.4 移除末尾元素</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token comment\">// 4, 查考容量 遍历查找</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">//  顺序遍历，逆序遍历</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> el <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> el <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token comment\">// 返回最大值</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回容纳的原数数</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token comment\">// 返回容纳的元素数</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 理论上可容纳的最大值 (根据系统)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回当前存储空间可容纳的最大值</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token comment\">// 相关操作</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\">// 指定值填充</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token comment\">// 能够实现排序  --- 使用算法，左右迭代器实现算法排序</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token function\">print_container</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token comment\">// 交换两个元素的所有内容</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> B<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token comment\">// 清空元素</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token comment\">// 判断是否为空</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"vector为空\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token comment\">// 通过释放未使用的内存较少空间</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">shrink_to_fit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"双端队列deque\"><a class=\"anchor\" href=\"#双端队列deque\">#</a> 双端队列 <code>deque</code></h1>\n<blockquote>\n<ul>\n<li>可以进行 <code>下标访问</code> 的 <code>顺序容器</code></li>\n<li>允许在它的 <code>首尾</code> 两端 <code>快速</code> 插入及删除</li>\n<li>与 <code>vector相反</code> ， <code>不</code> 一定 <code>相邻存储</code> 。</li>\n<li>时间复杂度 :   <code>随</code> 机访问  <code>O(1)</code> ，在 <code>结尾</code> 或 <code>起始</code> 插入或移除元素 -- 常数 <code>O(1)</code> ， <code>插</code> 入或 <code>移除</code> 元素 -- 线性  <code>O(n)</code></li>\n<li></li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>请设计一个排队程序，用户有普通客人和 VIP 客人之分，VIP 客人不排队（即 VIP 客人在队列头部），请将已有的 guest1 和 guest2 放入队列中（guest1 排在 guest2 前），并将 VIP 客人新增至队列头部。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Guest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    string name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">bool</span> vip<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Guest</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vip<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>vip <span class=\"token operator\">=</span> vip<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">in_queue</span><span class=\"token punctuation\">(</span>deque<span class=\"token operator\">&lt;</span>Guest<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> deque<span class=\"token punctuation\">,</span>Guest guest<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 引用地址才能改变 deque</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>guest<span class=\"token punctuation\">.</span>vip<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//vip 插入队列头部</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        deque<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_front</span><span class=\"token punctuation\">(</span>guest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 普通用户</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 普通客户插入到队列尾部</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        deque<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>guest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    Guest <span class=\"token function\">guest1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    Guest <span class=\"token function\">guest2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    Guest <span class=\"token function\">vipGuest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    deque<span class=\"token operator\">&lt;</span>Guest<span class=\"token operator\">></span> deque<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 双端队列队列</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// write your code here......</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">in_queue</span><span class=\"token punctuation\">(</span>deque<span class=\"token punctuation\">,</span>guest1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">in_queue</span><span class=\"token punctuation\">(</span>deque<span class=\"token punctuation\">,</span>guest2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">in_queue</span><span class=\"token punctuation\">(</span>deque<span class=\"token punctuation\">,</span>vipGuest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 除数队列排序</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Guest g <span class=\"token operator\">:</span> deque<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> g<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"set系列\"><a class=\"anchor\" href=\"#set系列\">#</a>  <code>set</code>  系列</h1>\n<blockquote>\n<p>特点</p>\n<ul>\n<li><code>默</code> 认 <code>升序</code> 排序 ( <code>可降序</code> )</li>\n<li>内部使用 <code>红黑树</code></li>\n<li><code>不含</code> 重复元素 (自动 <code>去重</code> )</li>\n<li>不能下标访问。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//1, 创建 set</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> st<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认升序相当于 set&lt;int,less&lt;int> > s;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//set&lt;int, greater&lt;int>> st; // 设置降序</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//2, 插入数据 并自动递增排序且去重</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tst<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tst<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tst<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tst<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tst<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tst<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tst<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tst<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">71</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tst<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tst<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">55</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tst<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重复的元素将会被省略</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//3，查找元素 find, 返回 set 对应值为 value 的迭代器</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"返回查询的值: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">//4, 删除元素</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 使用 erase 可以删除单个元素，也可以删除一个区间内的所有数据</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tst<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除 7 元素</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tit <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tst<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除 6 之后的所有元素</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">//5, 返回元素个数 O (1)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"元素个数为:\"</span> <span class=\"token operator\">&lt;&lt;</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">//6，输出</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 7 清空所有元素 O (N)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tst<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">//  8 返回 set 是否是空</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"空\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<ul>\n<li><code>unordered_set </code> ： 使用 <code>散列</code> 取代 <code>红黑树</code> ，实现 <code>只去重不排序</code> 。速度 <code>快于set</code></li>\n<li><code>multise</code> t :  <code>不去重</code> ，但 <code>排序</code></li>\n<li><code>unordered_multiset</code>  :  <code>不排序</code> ， <code>不去重</code></li>\n</ul>\n</blockquote>\n<h1 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> map</h1>\n<blockquote>\n<p>map 存储的 pair 对象，也就是用 pair 类模版创建的键值对。</p>\n<p>默认根据 <code>键</code> 来进行升序排序。并 <code>去重</code></p>\n<p><code>map</code>  存储的都是 <code>pair类型</code> 的 <code>键值对</code> 元素</p>\n<p><code>支</code> 持 <code>下标</code> 访问</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 输出 map</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">auto</span> print <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span> comment<span class=\"token punctuation\">,</span> <span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> map<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> comment <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#123;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> pair <span class=\"token operator\">:</span> map<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">//first 键，second 对应的值，map 默认根据键进行升序排序</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#123;\"</span> <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 默认为升序</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// map&lt;int, string,less&lt;int>> m;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// map&lt;int, string> m;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 将升序设置为降序</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 添加</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tm<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tm<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tm<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"麻花\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tm<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tm<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值对:\"</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 插入键值对</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">pair</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"刘强\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王宝强\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 当键值对成功插入到对应的 map 容器中，其返回的迭代器指向该新插入的键值对，</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 插入失败是，表明 map 容器中存在相同的键值对，此时返回的迭代器指向具有相同键的键值对，</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 同时 bool 变量的值为 false</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tpair<span class=\"token operator\">&lt;</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">></span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tret <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"清华\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1.\"</span> <span class=\"token operator\">&lt;&lt;</span> ret<span class=\"token punctuation\">.</span>first<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> ret<span class=\"token punctuation\">.</span>first<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> ret<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值对:\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// 使用 emplace_hint ()</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 该方法不仅要创建键值对所需要的数据，</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 还需要传入一个迭代器作为参数，指明要插入的位置</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">// 新键值对会插入到该迭代器指向的键值对的前面</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">// 该方法的返回值是一个迭代器，不再是 pair 对象，</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 当成功插入新键值对时，返回迭代器指向新插入的键值对</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 反之若插入失败，则表明 map 容器中有相同键的键值对，</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token comment\">// 返回的迭代器就指向这个键值对</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iters<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\titers <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_hint</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"北大\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> iters<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">&lt;&lt;</span> iters<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// 删除同样使用 key 值</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 使用迭代器删除，使用查找，返回主键对应的迭代器</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token comment\">// 同样可以使用迭代器的形式，删除某一个区间范围内的值</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除后:\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 查找</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token comment\">//lower_bound (key) 返回指向第一个键大于或等于 key 的键值对的迭代器</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\titer <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"lower_bound: \"</span> <span class=\"token operator\">&lt;&lt;</span>iter<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> iter<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token comment\">//upper_bound (key) 返回的是指向第一个键大于 key 的键值对的迭代器</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\titer <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"upper_bound: \"</span> <span class=\"token operator\">&lt;&lt;</span> iter<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> iter<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token comment\">// 返回范围的键值对 equal_range</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token comment\">// 创建一个 pair 对象，来接受 equal_range () 的返回值</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tpair<span class=\"token operator\">&lt;</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator<span class=\"token punctuation\">,</span> map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator<span class=\"token operator\">></span> mypair<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\tmypair <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">equal_range</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> iter <span class=\"token operator\">=</span> mypair<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> mypair<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span> iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> iter<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> iter<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token comment\">// 返回当前容器可以容纳的最大元素个数</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"容器的最大存储量:(与机器有关)\"</span><span class=\"token operator\">&lt;&lt;</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"容器中键值对的个数:\"</span> <span class=\"token operator\">&lt;&lt;</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"元素个数: \"</span> <span class=\"token operator\">&lt;&lt;</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">29</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//map 不允许重复值，为 1</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token comment\">// 清空 map</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token comment\">// 判断当前 map 容器是否为空</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> list</h1>\n<blockquote>\n<p>双向带头循环链表</p>\n<ul>\n<li>允许在 <code>常数范围内</code> 的 <code>任意位置</code> 进行 <code>插入和删除</code>   -- <code>不支持随机下标</code> 访问</li>\n<li><code>链表</code> 是插入元素， <code>不需要</code> 提前 <code>扩容</code> ， <code>没有reserve操作</code> ， <code>可</code> 以使用 <code>empty</code>  判空，使用 size 返回大小</li>\n<li>由于其双向迭代器的特征，list 只能使用 list 提供的 sort 排序即： <code>list.sort()</code> . <code>链表</code> 排序 <code>效率较低</code> ， <code>排序</code> 尽量 <code>使用vector</code>  不要使用 list</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbucZCeIYhyYp7UQbMMwAwkjQ3rusOhCrSr81CEicyRfw6rNGhaicylJRmSOzcr7rohBowk9XGyeOobw/640?wx_fmt=png\" alt=\"list\" /></p>\n</blockquote>\n<h2 id=\"forward_list\"><a class=\"anchor\" href=\"#forward_list\">#</a> forward_list</h2>\n<blockquote>\n<p>支持从 <code>容器</code> 中的 <code>任何位置</code> 快速 <code>插入和移除</code> 元素的容器， <code>不</code> 支持 <code>快速随机</code> 访问，实现方式为 <code>单链表</code> 。与 list 相比，此容器不需要双向迭代时提供 <code>更有效地利用空间</code> 的存储。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;list></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" l = &#123; \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"&#125;;\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 双向循环列表初始化</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 添加元素</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 添加元素到 list 开头</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tl<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 添加元素到 list 结尾</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tl<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 数据插入</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 查找插入位置之前的迭代器</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 16 前一位的迭代器</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 插入数据</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tl<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 遍历打印 list 的值</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 只能使用 list 提供的方法进行排序</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tl<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 将元素逆置</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tl<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">// 交换两个容器的内容</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> li <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tl<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 重新分配内容</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">//assign 函数用于将新内容分配给容器，替换其当前的内容</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">// 1, 将 n 个值为 val 的数据分配给容器</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 2, 将所给迭代器区间当中的内容分配给容器</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tl<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> li<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">// 移除元素</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tl<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 移除所有等于 1 的元素</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tl<span class=\"token punctuation\">.</span><span class=\"token function\">remove_if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> n <span class=\"token operator\">></span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 移除全部大于 10 的元素</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// 使用 erase 移除</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 1, 要移除元素的迭代器</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 要移除的元素迭代器范围</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tl<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"stack\"><a class=\"anchor\" href=\"#stack\">#</a> stack</h1>\n<blockquote>\n<p><code> FILO</code> （ <code>先进后出</code> ） <code>数据结构</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 初始化先进后出</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 插入元素</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 先栈顶插入元素</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 上同</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 删除栈顶元素</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回栈的大小</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 访问栈顶元素</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"queue\"><a class=\"anchor\" href=\"#queue\">#</a> queue</h1>\n<blockquote>\n<p>队列 ：  <code>先进先出</code> 的 <code>数据结构</code> .</p>\n<p>queue 在底层容器 <code>尾端推入</code> 元素，在 <code>首端弹出</code> 元素。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tqueue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//1，在尾部构造元素</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//2, 访第一个元素 // 队头</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//3，访问最后一个元素 // 队尾</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 4, 删除首个元素</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回当前元素</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除了 0</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 5, 判断当前容器是否为空</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">// 交换内容</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tqueue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> qu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tq<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>qu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//q 和空的 qu 队列交换</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"空\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"联系\"><a class=\"anchor\" href=\"#联系\">#</a> 联系</h1>\n<h2 id=\"统计字符串中各字母字符对应的个数\"><a class=\"anchor\" href=\"#统计字符串中各字母字符对应的个数\">#</a> 统计字符串中各字母字符对应的个数</h2>\n<blockquote>\n<p>键盘输入一个字符串，统计字符串中各个字母字符的个数。例如：键盘输入 &quot;Hello World!&quot;，上述字符串中各个字母字符的出现的次数为：</p>\n<p>H:1</p>\n<p>e:1<br />\nl:3<br />\no:2<br />\nW:1<br />\nr:1</p>\n<p>d:1</p>\n<p>要求使用 map 实现，键的排序使用 map 默认排序即可。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cctype></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// write your code here......</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cin<span class=\"token punctuation\">.</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// write your code here......</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 输入字符串，根据字符依次加入 map，主键是 char, 值为个数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 遍历一个字符串</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// if (isalpha(str[i])) &#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//     if (m.count (str [i])) &#123; // 是字符并且存在</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//           m [str [i]] = m [str [i]]+1;// 若没有查到返回</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//         // 判断对应的字符是否存在，重复会被替换</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//     &#125; else &#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//         m[str[i]] = 1;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">//     &#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isalpha</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            m<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 若没有查找，会插入，找到之后将对应的值 ++</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> pair <span class=\"token operator\">:</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"查找\"><a class=\"anchor\" href=\"#查找\">#</a> 查找</h2>\n<blockquote>\n<p>给出一个大小为<em> n</em> 的数组<em> a</em>，有 m<em> 次询问，每次询问给出一个 x</em>，你需要输出数组 a<em> 中大于 x</em> 的最小值，如果不存在，输出 - 1。</p>\n<p>要求使用 set 实现。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span> <span class=\"token comment\">//set 数组大小为 n,m</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcin<span class=\"token operator\">>></span>q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 所有数据已经插入到集合中</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 进行 m 次询问</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tcin<span class=\"token operator\">>></span>q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 输出大于 x 的最小值 upper_bound 返回指向首个大于给定键的元素的迭代器</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">// 如果不存在，返回 end 迭代器，end 是空读取不到的</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span>it<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"对vector排序\"><a class=\"anchor\" href=\"#对vector排序\">#</a> 对 vector 排序</h2>\n<blockquote>\n<p>键盘输入 5 个整数，使用 vector 进行存储，使用 STL 排序算法对元素进行排序（从大到小），再使用 STL 遍历算法输出元素。（元素和元素之间使用空格隔开）</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// write your code here......</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        cin <span class=\"token operator\">>></span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// write your code here......</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 默认是升序，使用 greater&lt;int>() 调整为降序</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token generic-function\"><span class=\"token function\">greater</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>e<span class=\"token operator\">:</span>v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span>e<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"资料\"><a class=\"anchor\" href=\"#资料\">#</a> 资料</h1>\n<blockquote>\n<p>公众号：瓶子的跋涉</p>\n<ul>\n<li>在对话框输入 <code>STL</code></li>\n<li>即可获得 <code>STL范例大全</code> ，看看学习，用法。</li>\n</ul>\n</blockquote>\n",
            "tags": [
                "考证",
                "软件",
                "工作",
                "C++",
                "笔试",
                "底层"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/Certificate/soft/work/%E5%81%9A%E9%A2%98%E8%BF%BD%E6%BA%AF02/",
            "url": "https://www.blog.foryouos.cn/Certificate/soft/work/%E5%81%9A%E9%A2%98%E8%BF%BD%E6%BA%AF02/",
            "title": "做题追溯02",
            "date_published": "2023-07-18T12:10:00.000Z",
            "content_html": "<h1 id=\"深拷贝和浅拷贝\"><a class=\"anchor\" href=\"#深拷贝和浅拷贝\">#</a> 深拷贝和浅拷贝</h1>\n<blockquote>\n<p>浅拷贝就是将 <code>源对象</code> 的值 <code>拷贝</code> 给当前对象，两者指向的还是 <code>同一地址</code> ，对 <code>一个</code> 对象的 <code>修改</code> 可能会 <code>影响</code> 到 <code>另一个</code> 对象。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyArray</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">MyArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 拷贝构造函数，实现浅拷贝</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">MyArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyArray<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        size <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 浅拷贝，将指针复制给新对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>深拷贝是 一种 <code>对象拷贝</code> ，它会创建一个 <code>新的对象</code> ，并将原始对象中的 <code>所有数据成员</code> 复制到 <code>新的对象</code> 中，包括 <code>多态分配内存</code> 。原始对象和新的对象是 <code>完全独立</code> 的，对一个对象的修改 <code>不会影</code> 响另一个对象。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>disable <span class=\"token operator\">:</span> <span class=\"token number\">4996</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 姓名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 年龄</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// write your code here......</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Person<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token comment\">// 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>age <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                name <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 用户输入姓名和年龄</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    cin <span class=\"token operator\">>></span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    cin <span class=\"token operator\">>></span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    Person <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   \t<span class=\"token comment\">// 实现浅拷贝</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    Person p2 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    p2<span class=\"token punctuation\">.</span><span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>区别：</p>\n<ul>\n<li>对象中含有 <code>指针类型</code> 的成员变量时需要用 <code>深拷贝构造</code> ， <code>否</code> 则用 <code>浅拷贝构造</code></li>\n<li>编译器 <code>默</code> 认的拷贝构造函数是 <code>浅拷贝</code> 构造函数</li>\n<li>如果对象中 <code>含有指针</code> 用了浅拷贝构造，那么会导致两 <code>个指针变量</code> 指向 <code>同一块地址</code> 空间，如果 <code>没有创建内存</code> 的操作就是 <code>浅拷贝</code> ，否则就是深拷贝</li>\n<li><code>深拷贝</code> 可以用于 <code>创建独立的副本</code> ，对于需要 <code>完全独立</code> 的对象的情况，必须在 <code>修改副本</code> 时不影响 <code>原始对象</code> 的状态。而 <code>浅拷贝</code> 通常用于创建 <code>共享对象</code> ，当需要多个共享相同的数据时，可以 <code>使用浅拷贝来减少内存</code> 占用和 <code>提高性能</code> 。</li>\n</ul>\n</blockquote>\n<h1 id=\"友元函数\"><a class=\"anchor\" href=\"#友元函数\">#</a> 友元函数</h1>\n<blockquote>\n<p><code>友元函数</code> 只是一个普通函数，并不是该类的类成员函数，它可以在 <code>任何地方调用</code> ，友元函数中通过 <code>对象名</code> 来 <code>访问</code> 该类的 <code>私有或保护成员</code> 。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">friend</span> <span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>友元函数名<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>参数表<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _a<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">int</span> <span class=\"token function\">geta</span><span class=\"token punctuation\">(</span>A <span class=\"token operator\">&amp;</span>ca<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  &lt; 友元函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">geta</span><span class=\"token punctuation\">(</span>A <span class=\"token operator\">&amp;</span>ca<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> ca<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    A <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">geta</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"友元类\"><a class=\"anchor\" href=\"#友元类\">#</a> 友元类</h1>\n<blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>友元类名<span class=\"token operator\">></span></pre></td></tr></table></figure><p>类 B 是类 A 的友元，那么类 B 可以直接访问 A 的私有成员</p>\n<ul>\n<li>友元关系 <code>没有继承性</code></li>\n<li>友元关系 <code>没有传递性</code></li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _a<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getb</span><span class=\"token punctuation\">(</span>A ca<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span>  ca<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    A <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    B b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">getb</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"swap函数\"><a class=\"anchor\" href=\"#swap函数\">#</a> swap 函数</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2FsZ29yaXRobS9zd2Fw\">交换函数</span></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 支持多种类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 交换 a 和 b 的值，</span></pre></td></tr></table></figure><h1 id=\"switch连续\"><a class=\"anchor\" href=\"#switch连续\">#</a> switch 连续</h1>\n<blockquote>\n<p>在使用 <code>switch</code>  的 <code>case</code>  时，遇到 <code>区间</code> 的情况，可以使用  <code>...</code>  来省略中间连续的数据。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cin <span class=\"token operator\">>></span> month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// write your code here......</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>month <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> month <span class=\"token operator\">></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"不合法\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>   <span class=\"token comment\">// 可以使用连续的数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"春季\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"夏季\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"秋季\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"冬季\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h1>\n<blockquote>\n<p><code>作用永久</code> ， <code>贯穿</code> 整个 <code>程序</code> ，直到 <code>格式状态改变</code> 设置为其他函数</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设置输出格式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dec <span class=\"token comment\">// 置基数位 10，相当于 % d</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hex <span class=\"token comment\">// 置基数位 16，相当于 % x</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>oct <span class=\"token comment\">// 置基数位 8，相当于 % o</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 默认十进制</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> dec <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 十进制</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> hex <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 十六进制</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> oct <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token comment\">// 八进制</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 设置保留一个小数 </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> fixed <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"运行状态\"><a class=\"anchor\" href=\"#运行状态\">#</a> 运行状态</h1>\n<blockquote>\n<p><code>就绪</code> ： 除了 <code>CPU资源</code> ，获得 <code>了所有必要</code> 资源，只要获取 CPU，便可立即执行，进行此时状态为 <code>就绪 </code> 状态，当一个系统中处于就绪状态的进程可能有多个，排成一个队列 --  <code>就绪队列</code></p>\n<p><code>阻塞</code> ：正在执行的进程，由于等待某个事件 ( <code>缺外部资源</code> ) 发生 而无法执行，便放弃 CPU 而处于阻塞状态。</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvE3kkddHclPTRwJK2F4mCm2Vy5LTdO0RtPbxwL6B5mhLL0Kib8cQyUzt6PkgKQAF6FYo9ddsahXog/640?wx_fmt=jpeg\" alt=\"运行状态转换\" title=\"运行状态\" /></p>\n<h1 id=\"动态分区分配算法\"><a class=\"anchor\" href=\"#动态分区分配算法\">#</a> 动态分区分配算法</h1>\n<blockquote>\n<p>在动态分区分配方式中，当很多个空闲分区 都能满足需求时，如何选择</p>\n</blockquote>\n<ul>\n<li><code>首次适应</code> 算法 First Fit</li>\n</ul>\n<blockquote>\n<p>每次都从 <code>低</code> 地址开始查找，找到 <code>第一个能满足</code>  大小的空闲分区</p>\n</blockquote>\n<ul>\n<li><code>最佳适应</code> 算法 Best Fit</li>\n</ul>\n<blockquote>\n<p>为了保证 <code>大进程</code> 到来时能有连续得到大片空间。空闲分区按容量递增次序链接，每次分配内存时顺序查找空闲分区链 (或空闲分区表)，找到大小 <code>满足要求的</code> 第一个空闲分区。</p>\n</blockquote>\n<ul>\n<li><code>最坏(大)</code>  适应算法</li>\n</ul>\n<blockquote>\n<p>每次分配优先 <code>使用最大的</code> 连续空闲区，这样分配后剩余空闲区不会太小，更方便使用，空闲分区按 <code>容量递减</code> 次序链接，每次分配内存时 <code>顺序查找</code> 空闲分区链或空闲分区表，找到大小能满足要求 的第一个空闲分区</p>\n</blockquote>\n<ul>\n<li>临近适应算法</li>\n</ul>\n<blockquote>\n<p>空闲分区以地址 <code>递增</code> 的顺序排列 (可排成一个 <code>循环链表</code> ), 每次分配内存时从 <code>上次查找结束</code> 的位置开始查找 <code>空闲分区链</code>  (或空闲分区表)，找到大小能满 <code>足要求</code> 的 <code>第一个</code> 空闲分区。</p>\n</blockquote>\n<h1 id=\"网络层次\"><a class=\"anchor\" href=\"#网络层次\">#</a> 网络层次</h1>\n<blockquote></blockquote>\n<blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/2020111209084487.png\" alt=\"网络层次\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvE3kkddHclPTRwJK2F4mCmXJMsfcqwIQgVoqWwHxSv643EelRJT4w51ruqtYxrV5kjPmrUZOfY8Q/640?wx_fmt=png\" alt=\"网络层次\" /></p>\n<ul>\n<li><code>LLC</code>  ：  <code>逻辑链路</code> 层，主要负责 <code>站点间</code> 的 <code>帧</code> 交换， <code>差错</code> 控制， <code>流量</code> 控制， <code>应答功能</code> 。</li>\n</ul>\n</blockquote>\n<h1 id=\"this指针\"><a class=\"anchor\" href=\"#this指针\">#</a> this 指针</h1>\n<blockquote>\n<p><code>this指针</code> 是 <code>类的指针</code> ，指向 <code>对象</code> 的 <code>首地址</code> .</p>\n<p>this 实际上是成员函数的一个 <code>形参</code> ，在调用成员函数时将对象的地址作为实参传递给 this，this 指针只能在成员函数中使用。在静态成员函数中不能用 this</p>\n<p><code>非静态成员</code> 都包含一个 <code>特殊的指针</code> ，指向 <code>调用</code> 该函数的对象，这个 <code>指针</code> 成为 <code>this指针</code></p>\n</blockquote>\n<h2 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h2>\n<ul>\n<li>只能在成员函数中会用， <code>全局</code> 和 <code>静态函数</code> ， <code>友元函数</code> 没有 <code>this指针</code></li>\n<li>this 在成员函数的 <code>开始前构造</code> ，在成员函数的 <code>结束后清除</code></li>\n<li>this 指针不能被修改和赋值 (它存放的是某一类对象地址)</li>\n<li><code>this指针</code> 是一个隐含指针，是类成员函数的第一个默认参数，在函数体内可隐含使用它来访问本类的数据成员和成员函数，它并由编译器自动维护传递</li>\n<li><code>this指针</code> 是 <code>局部变量</code></li>\n<li>this 指针只有在 <code>对象调用成员函</code> 数时才被 <code>初始化重新定向</code> ，进入后 <code>不能再被修改</code></li>\n<li><code>this</code>  并不是对象的一部分， <code>不影响sizeof结果。</code></li>\n</ul>\n<h1 id=\"const区分重载\"><a class=\"anchor\" href=\"#const区分重载\">#</a>  <code>const</code>  区分 <code>重载</code></h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    Person p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">const</span> Person q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    q<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"字符串相等问题\"><a class=\"anchor\" href=\"#字符串相等问题\">#</a> 字符串 <code>相等</code> 问题</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> str1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> str2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> str3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> str4<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pstring1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pstring2 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 数组不对比不相等</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> boolalpha <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> str2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">','</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> boolalpha <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>str3 <span class=\"token operator\">==</span> str4<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">','</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> boolalpha <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>pstring1 <span class=\"token operator\">==</span> pstring2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 相等</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"字符函数\"><a class=\"anchor\" href=\"#字符函数\">#</a> 字符函数</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>字符判断函数</strong></th>\n<th style=\"text-align:center\"><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>isalpha()</code></td>\n<td style=\"text-align:center\">判断字符 <code>是否是字母</code> （'a'-'z' 'A'-'Z'）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>isdigit()</code></td>\n<td style=\"text-align:center\">判断字符 <code>是否是数字</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>isspace()</code></td>\n<td style=\"text-align:center\">判断字符是否是 <code>空格</code> 、 <code>制表符</code> 、 <code>换行等</code> 标准空白</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>isalnum()</code></td>\n<td style=\"text-align:center\">判断字符是否是字母或者数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ispunct()</code></td>\n<td style=\"text-align:center\">判断字符是 <code>标点</code> 符号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>islower()</code></td>\n<td style=\"text-align:center\">判断字符是否是 <code>小写</code> 字母（'a'-'z'）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>isupper()</code></td>\n<td style=\"text-align:center\">判断字符是否是 <code>大写</code> 字母（'A'-'Z'）</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用字符函数统计字符串中各类型字符的个数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cctype></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    string str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> whitespace <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> digits <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> chars <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> others <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// write your code here......</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isalpha</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            chars<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            digits<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            whitespace<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            others<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"chars : \"</span> <span class=\"token operator\">&lt;&lt;</span> chars</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" whitespace : \"</span> <span class=\"token operator\">&lt;&lt;</span> whitespace</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" digits : \"</span> <span class=\"token operator\">&lt;&lt;</span> digits</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" others : \"</span> <span class=\"token operator\">&lt;&lt;</span> others <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"反转链表的实现\"><a class=\"anchor\" href=\"#反转链表的实现\">#</a> 反转链表的实现</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubm93Y29kZXIuY29tL3ByYWN0aWNlLzc1ZTg3OGRmNDdmMjRmZGM5ZGMzZTQwMGVjNjA1OGNh\">反转链表</span></p>\n<p>给定一个单链表的头结点 <code>pHead</code>  该头节点是有值的，比如在下图，它的 val 是 1)，长度为 n，反转该链表后，返回 <code>新链表</code> 的表头。<br />\n数据范围： 0≤10000≤<em>n</em>≤1000<br />\n 要求：空间复杂度 <em>O</em> (1) ，时间复杂度 O*(<em>n</em>) 。</p>\n</blockquote>\n<h2 id=\"正解迭代\"><a class=\"anchor\" href=\"#正解迭代\">#</a> 正解迭代</h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbucZCeIYhyYp7UQbMMwAwkjibLZ869v7TuiaZHUBH5K84TWnEyO5xBRuuJrtQbUeiaM4lQbTxmibHwEQw/640?wx_fmt=jpeg\" alt=\"反转链表迭代法\" title=\"反转链表迭代法\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * struct ListNode &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *\tint val;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *\tstruct ListNode *next;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *\tListNode(int x) : val(x), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @param head ListNode 类 </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * @return ListNode 类</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">ReverseList</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// write code here</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录前一个节点，并作为链表反向指针</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 当前节点指针</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> nex <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向下一个节点指针</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">!=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 为 nex 节点指向指针</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            nex <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 将当前节点的 next 指针转向</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 前驱节点后移</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 当前节点同时也后移</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            cur <span class=\"token operator\">=</span> nex<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前节点后移</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>获取前最大的 k 个值，使用最大堆，最小的话，使用最小堆。</li>\n</ul>\n",
            "tags": [
                "考证",
                "软件",
                "工作",
                "C++",
                "笔试",
                "底层"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/Certificate/soft/work/%E5%81%9A%E9%A2%98%E8%BF%BD%E6%BA%AF01/",
            "url": "https://www.blog.foryouos.cn/Certificate/soft/work/%E5%81%9A%E9%A2%98%E8%BF%BD%E6%BA%AF01/",
            "title": "做题追溯",
            "date_published": "2023-07-17T12:10:00.000Z",
            "content_html": "<h1 id=\"typedef\"><a class=\"anchor\" href=\"#typedef\">#</a> typedef</h1>\n<blockquote>\n<p>typedef 并不是简单的宏替代。</p>\n<ul>\n<li>定义一种 <code>类型的别名</code></li>\n<li>定义 <code>struct结构体别名</code></li>\n<li>用 typedef 来定义与 <code>平台无关</code> 的类型</li>\n<li>为 <code>复杂的声明</code> 定义一个 <code>简单的别名</code> ，表示的是一个指向 <code>函数的指针</code></li>\n</ul>\n</blockquote>\n<ul>\n<li>用 <code>typedef</code>  可以定义 <code>各种类型别名</code> ，但不能定义变量</li>\n<li>使用 typedef 便于 <code>程序的通用</code></li>\n<li>用 <code>typedef</code>  只是将一个已经存在的类型用一个 <code>新的名称</code> 替代</li>\n<li><code>typedef不</code> 能添加 <code>新类型</code></li>\n</ul>\n<h2 id=\"typedef和define区别\"><a class=\"anchor\" href=\"#typedef和define区别\">#</a>  <code>typedef</code>  和 <code>#define</code>  区别</h2>\n<blockquote>\n<p><code>typedef </code> 是一种 <code>类型别名</code> ，而 <code>#define</code>  只是 <code>宏定义</code> ，二者 <code>并不总是</code> 可以 <code>互换</code> 的。</p>\n</blockquote>\n<h1 id=\"比较函数\"><a class=\"anchor\" href=\"#比较函数\">#</a> 比较函数</h1>\n<blockquote>\n<p>C++ 的比较函数适用于 <code>整型字符串浮点数</code> 等多种类型。</p>\n</blockquote>\n<h2 id=\"max\"><a class=\"anchor\" href=\"#max\">#</a> max</h2>\n<blockquote>\n<p>返回队列中的 <code>最大值</code> ，参数 <code>两个</code> 参数，如果想要 <code>多个参数</code> ，使用 <code>大括号初始化列表容器</code> 的形式可以，但相比于直接两个 <code>两个比较比较耗时</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1.359</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">float</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1.823</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">float</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1.829</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">auto</span> result <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span>c <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> result <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"min\"><a class=\"anchor\" href=\"#min\">#</a> min</h2>\n<blockquote>\n<p>返回 <code>队列</code> 中的 <code>最小值</code></p>\n</blockquote>\n<h2 id=\"minmax\"><a class=\"anchor\" href=\"#minmax\">#</a> minmax</h2>\n<blockquote>\n<p>算法标头的库函数，用于查找 <code>最小和最大值</code> ，它接受两个值并返回一对最小和最大值，该对中的第 <code>一个</code> 元素包含最 <code>小值</code> ，并且该对中的第 <code>二个</code> 元素包含 <code>最大值</code></p>\n<p>该函数包括 <code>&lt;algorithm&gt;</code>  头文件，</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 字符串类型同样应用于比较，会以 ASCII 码值进行对比</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">auto</span> result <span class=\"token operator\">=</span> <span class=\"token function\">minmax</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"最小值\"</span> <span class=\"token operator\">&lt;&lt;</span> result<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"最大值\"</span> <span class=\"token operator\">&lt;&lt;</span> result<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"友元\"><a class=\"anchor\" href=\"#友元\">#</a> 友元</h1>\n<blockquote>\n<p>在函数前加  <code>friend</code></p>\n<p>友元 <code>不</code> 是 <code>成员函数</code> ，但是它可以访问 <code>类中</code> 的 <code>私有</code> 和 <code>保护</code> 成员。</p>\n<p>提高了程序的 <code>运行效率</code> ，但是破坏了类的封装和隐藏，使得非成员函数可以访问类的私有成员。</p>\n<ul>\n<li>\n<p>友元具有 <code>不对称性</code> ，即 A 是 B 的友元，但 B 不一定是 A 的友元， <code>单向的</code> ，不具有交换性</p>\n</li>\n<li>\n<p>友元关系 <code>不具传递性</code></p>\n</li>\n<li>\n<p>友元关系 <code>不能被继承</code></p>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"main参数\"><a class=\"anchor\" href=\"#main参数\">#</a> main 参数</h1>\n<blockquote>\n<p>main 函数有三个参数， <code>argc</code> ， <code>argv</code> ， <code>envp</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// **int argc: 存放了命令行参数的个数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//char argv [] 是个字符串的数组，每个元素都是一个字符指针，指向一个字符串，即命令行中的每一个参数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//char envp [] 也是一个字符串的数组，这个数组的每一个㢝是指向一个环境变量的字符指针</span></pre></td></tr></table></figure><h1 id=\"题\"><a class=\"anchor\" href=\"#题\">#</a> 题</h1>\n<p><img data-src=\"E:%5C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5CC-notebook%5CC++%E9%9D%A2%E8%AF%95%5C%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%5Cassets%5Cimage-20230716092743942.png\" alt=\"image-20230716092743942\" /></p>\n<ul>\n<li>\n<p><code>float</code> ， <code>double</code> ， <code>long double</code>  等类型 <code>不允许</code> 直接进行 <code>位与</code> 操作符</p>\n</li>\n<li>\n<p>如 <code>float取地址</code>  (也是符号) 转换为 <code>unsigned int</code>  类型，再用取值操作符 ( <code>*</code> ), 编译器会识别为 <code>unsigned int类型</code></p>\n</li>\n<li>\n<p>使用 <code>int short long移位</code> 时，最好加上 <code>unsigned</code> ，这样就是 <code>汇编中规律移位</code>  (即全部移位)</p>\n</li>\n<li>\n<p>加入不加 unsigned，正数全是规律  <code>移位</code> ，负数 <code>左移</code> 保持符号位为 <code>1</code> ，右边补 <code>0</code> ，负数右移时保持 <code>符号位为1</code> ， <code>左边补1</code> ，所有 - 1 无论怎么右移都是 - 1</p>\n</li>\n<li>\n<p>位与操作符的操作优先级小于 移位操作符，但移位操作符小于取地址操作符 (取值操作符 *・*)</p>\n</li>\n</ul>\n<h1 id=\"static\"><a class=\"anchor\" href=\"#static\">#</a> static</h1>\n<blockquote>\n<p>静态数据成员 <code>类内定义</code> ，就必须在 <code>类外初始化</code> 。</p>\n<p><code>特点</code> :</p>\n<ul>\n<li>所有成员都 <code>共享</code> 数据成员，只有 <code>一份内存</code></li>\n<li>必须在 <code>类外</code> 进行 <code>初始化</code></li>\n</ul>\n</blockquote>\n<h2 id=\"静态数据成员的内存\"><a class=\"anchor\" href=\"#静态数据成员的内存\">#</a> 静态数据成员的内存？</h2>\n<blockquote>\n<p>存放在内存的全局区</p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkRda4M5yeJy3TEPIoaClbVtdoq4z7FZuiaoruEVN4m4mfI96qUeLJSkQ/640?wx_fmt=png\" alt=\"内存分配\" /></p>\n</blockquote>\n<h2 id=\"基类的静态数据成员不能被继承\"><a class=\"anchor\" href=\"#基类的静态数据成员不能被继承\">#</a> 基类的静态数据成员不能被继承</h2>\n<blockquote>\n<ul>\n<li>继承：继承是 <code>一个类</code> 从 <code>另一个类</code> 获取 <code>成员变量</code> 和 <code>成员函数</code> 的过程 (子类继承父类)</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvtYiajIBuzkYSZmpnr8BECtpuwtgBRl6Ln9b9BDA8ldM0YWA1dj4wyGIHHgRcpupGwdyHXTRxNKyg/640?wx_fmt=png\" alt=\"基类继承\" title=\"基类继承\" /></p>\n<p>继承特性：</p>\n<ul>\n<li><code>继承</code> 访问 <code>不</code> 了 <code>父类</code> 私有属性</li>\n<li>但是 <code>私</code> 有继承 <code>已经被</code> 继承，被编译器 <code>隐藏</code></li>\n<li>静态成员属性不会被继承 (属于全部对象)</li>\n<li>创建子类时， <code>构造函数</code> 的调用， <code>先父类后子类</code> ， <code>析构</code> 时： <code>先子类后父类</code></li>\n<li><code>构造函数</code> ， <code>析构函数</code> ， <code>赋值操作符</code> 不能被继承</li>\n</ul>\n<blockquote>\n<p>无论什么继承，子类 <code>都</code> 可以访问 <code>基类中</code> 的 <code>公共保护</code> 成员，但 <code>子类对象</code> 就只能访问 <code>子类的公共成员</code></p>\n<p>在析构时：</p>\n<ul>\n<li>当 <code>释放子类</code> 的指针对象时，会调用 <code>子类和父类</code> 的析构函数</li>\n<li>当释放子类的指针对象时，只会调用 <code>父类的析构函数</code></li>\n</ul>\n</blockquote>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">person</span><span class=\"token comment\">// 父类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"person的构造函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"person析构函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">son</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">person</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"son的构造函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"son的析构函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tson<span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> son<span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义一个子类指针</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tperson<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">// 父类指针指向子类</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//delete s;// 释放子类内存 // 会调用子类和父类的析构函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 释放父类 只会调用父类的析构函数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"据成员为什么必须类外初始化\"><a class=\"anchor\" href=\"#据成员为什么必须类外初始化\">#</a> 据成员 <code>为</code> 什么必须 <code>类外初始化</code></h2>\n<blockquote>\n<p><code>静态数据成员</code> 也属于 <code>静态变量</code> ，属于 <code>静态全局区</code> ，全局区的变量，随着程序生死。而 <code>对象</code> 不是全局静态区的，是有 <code>生命周期的</code> 。由于生命周期的不同，所以必须在类外初始化，来解决类的生命周期问题。</p>\n</blockquote>\n<ul>\n<li><code>static</code>  加强了 <code>访问控制</code> 的 <code>全局变量</code> ， <code>不</code> 被 <code>继承</code></li>\n<li>类和子类对象， <code>static</code>  变量 <code>占有</code> 一份 <code>内存</code></li>\n</ul>\n<h1 id=\"结构体内存\"><a class=\"anchor\" href=\"#结构体内存\">#</a> 结构体内存</h1>\n<blockquote>\n<p>结构体内存规则</p>\n<ul>\n<li>第一个成员在与结构体变量 <code>偏移量为0</code>  的 <code>地址处</code></li>\n<li><code>其他成员变量</code> 要对齐到 <code>对齐数的整数倍</code> 的 <code>地址处</code></li>\n<li><code>对齐数 </code> =  <code>min (编译器默认的对齐数，该成员大小)</code></li>\n<li>结构体 <code>总大小</code> 为 <code>最大对齐数</code>  (每个成员变量都有一个 <code>对齐数</code> ) 的 <code>整数倍</code></li>\n<li>如果 <code>嵌套了结构体</code> 的情况，嵌套的结构体 <code>对齐</code> 到自己大的 <code>最大对齐数的整数倍处</code> ， <code>结构体的整体大小</code> 就是所有 <code>最大对齐数</code>  (函嵌套结构体的对齐数) 的 <code>整数倍</code></li>\n</ul>\n</blockquote>\n<h1 id=\"c语言\"><a class=\"anchor\" href=\"#c语言\">#</a> C 语言</h1>\n<h2 id=\"变量类型\"><a class=\"anchor\" href=\"#变量类型\">#</a> 变量类型</h2>\n<ul>\n<li><code>register</code> ：建议 <code>编译器</code> 将该变量放入 <code>CPU</code> 。</li>\n</ul>\n<h2 id=\"函数类型缺省\"><a class=\"anchor\" href=\"#函数类型缺省\">#</a> 函数 <code>类型缺省</code></h2>\n<ul>\n<li>返回值\n<ul>\n<li>C 语言，如果函数 <code>未指定</code> 返回值类型，则・ <code>默认</code> 为 <code>int</code></li>\n<li>C++ 如果函数 <code>没有返回值</code> ，默认类型必须指定为 <code>void</code></li>\n</ul>\n</li>\n<li>参数列表\n<ul>\n<li><code>C语言</code> ，如果函数没有指定参数列表，返回值类型必须指定为 void</li>\n<li><code>C++</code>  中，有 <code>严格的类型检测</code> ，没有参数列表的函数 <code>默认为void</code> , <code>不</code> 接受 <code>任意参数</code></li>\n</ul>\n</li>\n<li>缺省参数\n<ul>\n<li><code>C不支持</code></li>\n<li><code>C++支持</code> ，如果没有指定实参则使用缺省值，有则使用指定实参\n<ul>\n<li>默认实参必须在 <code>参数列表的结尾</code></li>\n<li>默认参数只能出现在函数声明或者定义二选一中</li>\n<li>缺省值 <code>必须</code> 是 <code>常量或全局变量</code></li>\n<li>缺省参数必须是 <code>值传递</code> 或者 <code>常参传递</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>函数重载\n<ul>\n<li>C: 不支持</li>\n<li>C++：支持</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"转义字符\"><a class=\"anchor\" href=\"#转义字符\">#</a> 转义字符</h2>\n<blockquote>\n<ul>\n<li><code>\\t</code>  表示横向指标</li>\n<li><code>\\v</code>  表示竖向制表</li>\n<li><code>\\b</code>  表示退格</li>\n<li><code>\\r</code>  表示回车</li>\n<li><code>\\f </code> 表示换页</li>\n<li><code>\\?</code>  表示问号字符</li>\n<li><code>\\0 </code> 表示空字符（null)</li>\n</ul>\n</blockquote>\n<h2 id=\"指针大小\"><a class=\"anchor\" href=\"#指针大小\">#</a> 指针大小</h2>\n<ul>\n<li><code>指针</code> ，在 <code>64bit</code>  的机器中是 <code>8字节</code> ， <code>int 4</code>  字节</li>\n</ul>\n<h2 id=\"读取\"><a class=\"anchor\" href=\"#读取\">#</a> 读取</h2>\n<ul>\n<li><code>getchar</code> ： 读取 <code>一个字符</code> 。</li>\n<li><code>%2d </code>  : 读取 <code>数字</code> ， <code>限定</code> 两个字符，如读取的指针位置 <code>后面</code> 出现字母 <code>忽略掉</code> ， <code>前面</code> 出现字母将 <code>全部忽略</code> ，指针移动到读取截止为止。</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">char</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    c1 <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取第一个字符 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%2d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 读取宽度为两个，int 型，只读取 2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    c2 <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 读取 a</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 宽度为 3，读物 345</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d,%d,%c,%c\\n\"</span><span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>输入： 12a345b789</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>输出： 2,345,1,a</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"优先级\"><a class=\"anchor\" href=\"#优先级\">#</a> 优先级</h2>\n<blockquote>\n<p>成员选择符 \t <code>-&gt;</code>  的优先级比 <code>前置++</code> ，和 <code>后置++</code>  都要 <code>高</code></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvtYiajIBuzkYSZmpnr8BECtDGuSR9xGAEKmN7KOkPDaNnicz4AfyupEkDiaAWts0BoAFq0rdlOkj3ug/640?wx_fmt=jpeg\" alt=\"C语言运算符优先级\" title=\"C语言运算优先级\" /></p>\n<h2 id=\"字符串未赋值部分\"><a class=\"anchor\" href=\"#字符串未赋值部分\">#</a> 字符串未赋值部分</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最后一个没有赋值的为 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            s <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//a[2][2] = 0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>输出： 18</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"表达式等级类型\"><a class=\"anchor\" href=\"#表达式等级类型\">#</a> 表达式等级类型</h2>\n<blockquote>\n<p>基本类型字符串 <code>从低到高</code> 如下，运算的时候，从 <code>低转到高</code> ，表达式的 <code>类型</code> 会 <code>自动提升为参与表达式求值</code> 的 <code>最上级类</code> 。</p>\n</blockquote>\n<ul>\n<li><code>char </code></li>\n<li><code>int </code></li>\n<li><code>long</code></li>\n<li><code>float</code></li>\n<li><code>double</code></li>\n</ul>\n<h2 id=\"字符串操作\"><a class=\"anchor\" href=\"#字符串操作\">#</a> 字符串操作</h2>\n<blockquote>\n<p>字符串时字符数组的一种形式，它以 &quot;\\0&quot; 结尾</p>\n</blockquote>\n<ul>\n<li><code>strcpy()</code>  : 复制字符串</li>\n<li><code>strcmp()</code>  : 比较字符串</li>\n<li><code>strlen()</code>   : 计算字符串的 <code>长度</code> ，遇到 <code>\\0时</code> 结束 <code>计算</code> ， <code>不算\\0</code> , 且 <code>从1</code>  开始计数。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将字符串 source 拷贝到字符串 destination 中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 函数返回 destination 字符串</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> destination<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> source<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 将字符串 source 中前 numchars 个字符拷贝到字符串 destination 中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 注意 source 中 numchars 个字符将覆盖掉字符串 destination 中前 numchars 个字符</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 函数返回 destination</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> destination<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> source<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numchars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 将字符串 source 接到字符串 target 的后面，要提前确保 taeget 有足够的空间</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 函数返回 target</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> target<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> source<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 将字符串 source 的前 nnumchars 个字符接到字符串 target 的后面</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">strncat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> target<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> source<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numchars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 比较 first 是否大于 second，成功大于 0,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> firststring<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> secondstring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 统计长度</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 统计字符串 string 中字符的个数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzAzOTg2L2FydGljbGUvZGV0YWlscy8xMjUzNzAzNDM=\">C++ 继承</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTAwMTQ5Ny9hcnRpY2xlL2RldGFpbHMvMTA4MDc2Mzc3\">typedef</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1ODM2NDczL2FydGljbGUvZGV0YWlscy8xMjEwOTc0ODA=\">C 语言字符串操作总结大全</span></li>\n</ul>\n",
            "tags": [
                "考证",
                "软件",
                "工作",
                "C++",
                "笔试",
                "底层"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/Certificate/soft/work/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "url": "https://www.blog.foryouos.cn/Certificate/soft/work/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "title": "内存管理",
            "date_published": "2023-07-16T12:10:00.000Z",
            "content_html": "<h1 id=\"内存管理\"><a class=\"anchor\" href=\"#内存管理\">#</a> 内存管理</h1>\n<blockquote>\n<p>简述：</p>\n<ul>\n<li><code>栈</code> ：存放程序的 <code>局部变量和函数调用的参数</code> 和 <code>返回地址</code> 。栈是一个 <code>向下增长</code> 的数据类型，具有 <code>后进先出(LIFO)</code>  的特性。栈上的内存由 <code>编译器自动分配和释放</code> ， <code>不</code> 需要 <code>程序员干预</code> ， <code>栈上</code> 的 <code>内存空间</code> 通常有限，因此不适合存放大量或复制的数据。</li>\n<li><code>堆</code> ：存放程序 <code>动态分配</code> 的内存，由程序员 <code>控制其生命周期</code> 。堆是一个 <code>向上增长</code> 的数据结构，可以 <code>根据需要</code> 扩展或收缩。使用 <code>new</code>  和 <code>delete</code>  操作符分配和释放堆上的内存时，需要注意 <code>内存泄漏</code> 或 <code>野指针</code> 等问题。 <code>delete之后</code> 要将地址设置 <code>为nullptr</code></li>\n<li><code>数据区</code> ：存放程序的 <code>全局变量和静态变量</code> ，分为初始化和未初始化两部分。初始化部分包含了程序赋予初始化的变量，未初始化部分包含了程序没有赋予初始化的变量。</li>\n<li><code>代码区</code> ：存放程序的 <code>可执行指令</code> ，通常是 <code>只读的</code> ，可以被 <code>多个进程共享</code> 。</li>\n</ul>\n<blockquote>\n<p><code>堆空间</code> 大小可以 <code>扩展或收缩</code> ， <code>栈</code> 空间大小 <code>有限</code></p>\n<p><code>堆空间</code> 的访问速度比 <code>栈</code> 空间 <code>慢</code> ， <code>堆空间</code> 也容易产生 <code>内存碎片和内存泄漏</code></p>\n<p><code>堆空间</code> 的地址增长是 <code>向上</code> 的，沿着 <code>内存地址增加</code> 的方向，而 <code>栈空间</code> 是 <code>向下的</code> ，也就是沿着 <code>内存地址减小</code> 的方向 <code>增长</code> 。</p>\n</blockquote>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkklKP44s1jHqABxXMrJ1PFGqWIrDf7Y8nDNpwgEZIyibkWp0JHVfaibJgg/640?wx_fmt=png\" alt=\"C语言内存管理\" /></p>\n<h1 id=\"代码区\"><a class=\"anchor\" href=\"#代码区\">#</a> 代码区</h1>\n<blockquote>\n<p>存放程序编译后的 <code>可执行</code> 的 <code>二进制代码</code> ， <code>CPU</code>  执行的 <code>机器指令</code> ，并且是 <code>只读的</code></p>\n<blockquote>\n<p><code>只读</code></p>\n<p>共享每次打开 <code>exe文件</code> ，都会指向一个 <code>内存空间</code></p>\n</blockquote>\n</blockquote>\n<h1 id=\"全局静态区\"><a class=\"anchor\" href=\"#全局静态区\">#</a> 全局 / 静态区</h1>\n<blockquote>\n<p>全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量在 <code>一块区域</code> ，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域，程序结束后 <code>由系统释放</code></p>\n<blockquote>\n<ul>\n<li><code>全局/静态</code> 区存储 <code>全局变量，静态变量，常量，该区变量</code> 在程序运行期间一直存在</li>\n<li>程序结束由 <code>系统回收</code></li>\n<li>已初始化的数据放在 <code>data段</code> ，未初始化的数据放到 <code>bss段</code></li>\n<li>该去变量当未初始化时，会有 <code>默认值初始化</code></li>\n</ul>\n</blockquote>\n</blockquote>\n<h1 id=\"堆区\"><a class=\"anchor\" href=\"#堆区\">#</a> 堆区</h1>\n<blockquote>\n<p>由 <code>开发者</code> 手动申请，手动释放，若不手动释放，程序结束后由 <code>系统回收</code> ，声明周期是 <code>整个程序运行期间</code> ，使用 <code>malloc</code>  进行堆内存申请， <code>堆的总大小</code> 为 <code>机器的虚拟内存</code> 的大小</p>\n<blockquote>\n<ul>\n<li>堆区由开发人员手动申请与释放，在释放之前，该块 <code>堆空间</code> 可一直使用</li>\n<li>由程序员分配和释放，若程序员不释放，程序结束时由 <code>系统回收内存</code></li>\n<li><code>堆空间</code> 一般没有 <code>软限制</code> ，只受 <code>限于硬件</code> ，会比 <code>栈空间更大</code> ，适宜存放 <code>较大数据</code> 。</li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"被调函数分配内存\"><a class=\"anchor\" href=\"#被调函数分配内存\">#</a> 被调函数分配内存</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">allocateSpace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> pp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//temp 为局部变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//helloworld 对方到堆区</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tpp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 传入的参数和 pp 的地址并不相同，pp 作为参数存放在栈中，函数结束释放内存</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//1. 利用高级指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">allocateSpac2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> pp<span class=\"token punctuation\">)</span> <span class=\"token comment\">//// 使用二级指针，此时 pp 的地址与传入参数地址相同</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token operator\">*</span>pp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用调用的指针来</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"栈区\"><a class=\"anchor\" href=\"#栈区\">#</a> 栈区</h1>\n<blockquote>\n<p>由 <code>编译器</code> 自动分配释放，存放函数的参数值，局部变量的值</p>\n<ul>\n<li>栈是一种 <code>先进后出</code> 的内存结构，由编译器自动分配释放数据</li>\n<li>主要存放函数的 <code>形式参数值</code> ， <code>局部变量</code> 等</li>\n<li>函数 <code>运行结束</code> ，相应 <code>栈变量</code> 会被 <code>自动释放</code></li>\n<li><code>栈</code> 空间 <code>较小</code> ， <code>不适合</code> 大量数据存 <code>放在栈中</code></li>\n</ul>\n<p>注意： <code>不要</code> 返回 <code>局部变量的地址</code> ，在调用函数之后，局部变量就 <code>已经被释放</code> ，a 的地址被销毁，在对指针 p 进行访问，就属于 <code>非法访问内存</code> 。</p>\n</blockquote>\n<h1 id=\"程序指令和程序数据分开原因\"><a class=\"anchor\" href=\"#程序指令和程序数据分开原因\">#</a> 程序指令和程序数据分开原因</h1>\n<ul>\n<li>程序被加载到内存中之后，可以将 <code>数据和代</code> 码分别 <code>映射</code> 到两个 <code>内存区域</code> 。由于数据区域对进程来说是可读可写的，而 <code>指令区域</code> 对程序来讲是 <code>只读</code> 的，所以分区之后，可以将程序指令区域和数据区域分别设置成只读，这样就可以 <code>防止程序有意或无意被修改</code> 。</li>\n<li>当系统中运行着多个同样的程序时，这些 <code>程序指令</code> 都是 <code>一样</code> 的，所以只需要在内存中保存 <code>一份程序指令</code> 即可，只是每一个程序运行中 <code>数据不一样</code> 而已，这样可以 <code>节省大量的内存</code> 。</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkRda4M5yeJy3TEPIoaClbVtdoq4z7FZuiaoruEVN4m4mfI96qUeLJSkQ/640?wx_fmt=png\" alt=\"内存分配\" /></p>\n<h1 id=\"宏定义\"><a class=\"anchor\" href=\"#宏定义\">#</a> 宏定义</h1>\n<blockquote>\n<ul>\n<li>宏定义和宏常量都是利用 <code>#define</code>  定义出来的内容</li>\n<li>在项目中，经常把一些 <code>短小而又频繁使用</code> 的函数写成 <code>宏函数</code></li>\n<li>宏函数 <code>没有</code> 普通函数参数 <code>压栈</code> ， <code>跳转</code> ， <code>返回</code> 等时间上的 <code>开销</code></li>\n</ul>\n<blockquote>\n<p>注意：宏函数要 <code>加括号</code> ，保证运算的完整，宏定义仅负责替换，不复制运行等相关操作。</p>\n</blockquote>\n<p>可以把频繁使用并且短小的函数，写成宏函数，宏函数在编译阶段就替换源码，没有普通函数入栈出栈的开销，以空间换时间</p>\n</blockquote>\n<h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzMTQ0ODQzL2FydGljbGUvZGV0YWlscy8xMjY4ODgzNTg=\">c 内存管理</span></li>\n</ul>\n",
            "tags": [
                "考证",
                "软件",
                "工作",
                "C++",
                "笔试",
                "底层"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/Certificate/soft/work/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/",
            "url": "https://www.blog.foryouos.cn/Certificate/soft/work/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/",
            "title": "进制转换",
            "date_published": "2023-07-15T12:10:00.000Z",
            "content_html": "<h1 id=\"基础概念\"><a class=\"anchor\" href=\"#基础概念\">#</a> 基础概念</h1>\n<h2 id=\"原码\"><a class=\"anchor\" href=\"#原码\">#</a> 原码</h2>\n<blockquote>\n<p><code>原码</code> 表示与 <code>机器数真值</code> 表示的 <code>一样</code> ，即用 <code>第一位</code> 表示 <code>符号</code> ， <code>其余位</code> 表示 <code>数值</code></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkgk1PJE6kNuC2YeoMgGpUcca49PMlt2LbxBuTRhNBwQMNInibZk90WhA/640?wx_fmt=jpeg\" alt=\"原码补码反码转换\" /></p>\n</blockquote>\n<h1 id=\"进制转换\"><a class=\"anchor\" href=\"#进制转换\">#</a> 进制转换</h1>\n<blockquote>\n<p>最常见的 <code>进制转换</code> ， <code>10进制</code> 转 <code>2进制</code> ， <code>10进制</code> 转 <code>16进制</code> ， <code>负数</code> 转为 <code>16进制</code> ， <code>十进制负数</code> 转为 <code>十六进制</code></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkXL2Km80Q9I9ND5NtZicA6fNxsDL0kUb2nHQahtNkIBQYibfVGic6YNh1w/640?wx_fmt=png\" alt=\"常规进制转换\" /></p>\n<h1 id=\"整数进制转换\"><a class=\"anchor\" href=\"#整数进制转换\">#</a> 整数进制转换</h1>\n<blockquote>\n<p><code>除以R取余法</code> 。即整数部分不断除以 R 取余数，直到 <code>商为0</code>  为止， <code>从下往上</code> 取值</p>\n</blockquote>\n<h2 id=\"二进制转八十六换技巧\"><a class=\"anchor\" href=\"#二进制转八十六换技巧\">#</a> 二进制转八，十六换技巧</h2>\n<blockquote>\n<p>以 <code>小数点</code> 为中心，将数据分为 <code>两组</code> ，每 <code>3/4位</code> 为 <code>一组</code> ，不够位数在 <code>两侧补0</code></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkku0OEwXKXKr9ZzZU0tvYJLiaU6G5AOhg9SYIcsDK5LJfrM3AJWiblf3Zg/640?wx_fmt=png\" alt=\"二进制转为八进制或十六进制\" title=\"二进制转为八进制或十六进制\" /></p>\n<h2 id=\"八十六进制转二进制\"><a class=\"anchor\" href=\"#八十六进制转二进制\">#</a> 八 / 十六进制转二进制</h2>\n<blockquote>\n<p>以小数点为中心，将对应的 <code>八进制</code> 转为 <code>二进制</code> 表示的 <code>三位</code> ，将每个十六进制转为四个二进制位数</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkknqZuovbYZn427TxaXNxD3F0wMIhBBhkYMZVaa1Op8SRSpptt5RXibTQ/640?wx_fmt=png\" alt=\"八/十六进制转为二进制\" title=\"八/十六进制转为二进制\" /></p>\n<h1 id=\"小数进制转换\"><a class=\"anchor\" href=\"#小数进制转换\">#</a> 小数进制转换</h1>\n<blockquote>\n<p><code>乘以R取整法</code> ，即 <code>小数部分</code> 不断 <code>乘</code> 以 <code>R取整数</code> ，直到 <code>积为0</code>  或 <code>达到有效精度</code> 为止，最先得到的整数为 <code>R进制</code> 的最 <code>高位</code> ，最后得到的整数位为 <code>最低位</code> ，从 <code>上往下</code> 取。</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkqP7qzvwBoQ9bC8FjS3jKfoPUbfQ9qLFZQB6a15mHwib7HPujgiaXVI2w/640?wx_fmt=png\" alt=\"小数部分进制转换\" /></p>\n<h2 id=\"转换流程\"><a class=\"anchor\" href=\"#转换流程\">#</a> 转换流程</h2>\n<ul>\n<li><code>负数</code> 转换为 <code>正数</code></li>\n<li>先将 <code>十进制</code> 转换为 <code>二进制</code> ，并 <code>补位</code></li>\n<li>求 <code>反码</code></li>\n<li>求 <code>补码</code></li>\n<li>转为 <code>十六进制</code></li>\n</ul>\n<blockquote>\n<p>以 <code>-6</code>  为例</p>\n</blockquote>\n<pre><code># 绝对值6的二进制码并补位后为\n0000 0110\n#根据原码求反码\n1111 1001\n# 根据反码求补码\n1111 1010\n# 每四位一组合，组成十六进制\nFA\n</code></pre>\n<blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkbyVNtk3ftnlGEQRVYKibB3Q9KlJrxACSgXLH8Dq8l12UtH3K8nMCMdw/640?wx_fmt=png\" alt=\"-6的补码表示\" /></p>\n</blockquote>\n<h1 id=\"在计算机系统中\"><a class=\"anchor\" href=\"#在计算机系统中\">#</a> 在计算机系统中</h1>\n<blockquote>\n<p>在实际上使用 <code>-0</code>  的补码表示 <code>-128</code> ，所以 <code>-128</code>  并没有 <code>原码</code> 和 <code>反码</code> 表示，只要补码是 [1000 0000] 其十进制数值就是 - 128</p>\n<p>因为补码能多存储一个 - 128，而且在计算机底层中存储的是补码，所以在计算机中一个 8 位的二进制数的存储范围是用补码表示的 [-128,127]</p>\n</blockquote>\n<h1 id=\"牢记\"><a class=\"anchor\" href=\"#牢记\">#</a> 牢记</h1>\n<ul>\n<li><code>二进制</code> 的最高位是 <code>符号位</code> ： <code>0</code>  表示 <code>正数</code> ， <code>1</code>  表示 <code>负数</code></li>\n<li><code>正数</code> 的 <code>原码反码补码</code> 都一样， <code>三码合一</code></li>\n<li><code>负数的反码</code>  = 它的 <code>原码符号位不变</code> ，其 <code>它位取反</code></li>\n<li><code>负数的补码</code>  = 它的 <code>反码 +1</code></li>\n<li><code>负数</code> 的 <code>反码 </code> =  <code>负数的补码-1</code></li>\n<li><code>0</code>  的 <code>反码</code> ， <code>补码</code> 都是 <code>0</code></li>\n</ul>\n<h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JhaW5fdHVybnNfc2hhZGUvYXJ0aWNsZS9kZXRhaWxzLzEyODk4MTE5NQ==\">进制转换</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmJpbmthbmcvYXJ0aWNsZS9kZXRhaWxzLzEyOTU5NzM2Nw==\">负数十进制转 16 进制</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MTQwMDYzOTc=\">反码补码</span></li>\n</ul>\n",
            "tags": [
                "考证",
                "软件",
                "工作",
                "C++",
                "笔试"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/Certificate/soft/work/%E7%AC%94%E8%AF%9503%E6%8C%87%E9%92%88%E7%B1%BB%E8%80%83%E9%A2%98/",
            "url": "https://www.blog.foryouos.cn/Certificate/soft/work/%E7%AC%94%E8%AF%9503%E6%8C%87%E9%92%88%E7%B1%BB%E8%80%83%E9%A2%98/",
            "title": "笔试指针类考题",
            "date_published": "2023-07-14T13:10:00.000Z",
            "content_html": "<h1 id=\"特别\"><a class=\"anchor\" href=\"#特别\">#</a> 特别</h1>\n<blockquote>\n<p><code>while</code>  一般而言，所有 <code>非零值</code> 都视为 <code>真</code> ，只有 <code>0</code>  被视为 <code>假</code> 。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//while 一般而言，所有非零值都视为真，只有 0 被视为假</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"指针与const\"><a class=\"anchor\" href=\"#指针与const\">#</a> 指针与 <code>const</code></h1>\n<blockquote>\n<p>指针在初始化时，引用了，其它变量的值，无论对指针的地址还是对指针值 <code>+ const</code> 。修改变量的值，都将影响到指针</p>\n</blockquote>\n<ul>\n<li>对 <code>*</code>  后面加入 const 代表将地址设置为常量， <code>地址不可变</code> ，但是 <code>对应的值</code> 可以改变。</li>\n<li>第 <code>*</code>  前面的值加 const，对应的值 <code>*p</code>  不能改变，但是可以 <code>改变p</code>  的地址，通过此形式改变了 <code>*p</code>  对应的值。</li>\n<li>对 <code>*</code>  的前后 <code>都</code> 添加了 <code>const</code> ，代表 <code>对应的地址</code> ，和 <code>值都不能改变</code> ，但是如果在 <code>const初始化</code> 时是 <code>引用其它变量</code> 的值，就可以修改 <code>其它变量的值</code> ，来 <code>间接修改此值</code> 。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t关于 const 与指针之间的运用问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// *p 常量化</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//6</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p = &amp;i : \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//*p = 10;  //*p 为 const 值不可改变</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*p: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 对 a 的值进行修改，间接的修改 * p 的值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\ta <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 通过对 a 值的修改，间接修改了 指向 p 地址的 p</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*p: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 7</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//*p 固定值不能改变，但是 p 的地址可以改变</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 通过赋值新的地址 p</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*p: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">//t 地址常量</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"const p: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>T <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 值为 7</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// T = &amp;b;  // 地址为 cosnt 常量，不可进行修改</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 当忍让可以通过修改 a 的值，间接修改引了 a 地址的 T</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\ta <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"const p: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>T <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 地址和值都是常量</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> S <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化为 a 的 9 值</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// S = &amp;b;  // 地址值不再允许改变</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 通过 a 的值可以 改变 S 的值</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\ta <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a 仍然为变量，仍然可以进行改变</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"const int* const S ：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>S <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 对 * S 以及 S 的地址，在初始化后不可再次改变</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"数组a中a与a区别\"><a class=\"anchor\" href=\"#数组a中a与a区别\">#</a> 数组 a [] 中 a 与 &amp; a 区别</h1>\n<ul>\n<li><code>值相同</code></li>\n<li><code>a</code>  指的是 <code>a[0]</code>  的 <code>地址</code></li>\n<li><code>&amp;a</code>  指的是 <code>数组a</code>  的 <code>地址</code></li>\n<li>数组名代表数组第一个元素的地址， <code>&amp;数组名</code> 代表 <code>整个数组</code> 的地址，从而导致 <code>a+1</code>  和 <code>&amp;a+1有本质</code> 的区别</li>\n</ul>\n<h1 id=\"char-与char-a\"><a class=\"anchor\" href=\"#char-与char-a\">#</a> char*  与 char a []</h1>\n<blockquote>\n<p><code>char *a = &quot;abcd&quot; </code> <br />\n <code>char a[20] = &quot;abcd&quot; </code></p>\n</blockquote>\n<ul>\n<li>读写能力</li>\n</ul>\n<blockquote>\n<p>字符串数据存放在 <code>常量存储区</code> ，通过指针只可以访问字符串常量，而不可以改变它<br />\n数组数据存放在 <code>栈</code> ，可以通过 <code>指针</code> 去 <code>访问</code> 和 <code>修改</code> 数组内容</p>\n</blockquote>\n<ul>\n<li>赋值时刻</li>\n</ul>\n<blockquote>\n<p>指针编译时就已经确认了，因为是 <code>常量</code> <br />\n数组运行时确认</p>\n</blockquote>\n<ul>\n<li>存取效率</li>\n</ul>\n<blockquote>\n<p>存于 <code>常量存储区</code> ，在 <code>栈上的数组</code> 比 <code>指针所指向字符串</code> 快<br />\n <code>数组</code> 存放在 <code>栈上</code> ，因此 <code>块</code></p>\n</blockquote>\n<blockquote>\n<p><code>strlen</code>  不计 <code>\\0</code> , 但是 <code>sizeof</code>  计算字符串容量时算 <code>\\0</code> , 占 <code>两</code> 个字节。</p>\n</blockquote>\n<h1 id=\"读取位置\"><a class=\"anchor\" href=\"#读取位置\">#</a>  <code>读取位置</code> ⛵</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 不加 * 代表真个字符串地址，加 * 对应地址的单个 字符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 常量字符串</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 在没有取单独值时，就是指针移动，指针移动的是对应的字符对应的字节</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 起始地址右移，变为 elloworld</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"morning\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> b<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 同样地址右移，变为 orning</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 其相等，取地址位置的一个字符</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 取固定值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"为char申请固定空间\"><a class=\"anchor\" href=\"#为char申请固定空间\">#</a> 为 <code>char*</code>  申请 <code>固定空间</code></h1>\n<blockquote>\n<p><code>char*</code>  代表 <code>字符串指针</code> ， <code>单个</code> ，为其 <code>申请空间</code> ，要取其 <code>字符串指针的地址</code> 即 <code>二级指针</code> 进行 <code>空间申请</code> 。使用二级指针渠道传入参数 n 的真实地址，而不是局部变量，局部变量在 <code>栈中</code> 函数结束将 <code>被释放</code> ，申请空间 <code>会无效</code> 。要使用 <code>二级指针</code> ，指向 <code>字符串n</code>  的 <code>地址</code> 。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">getMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> n <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">getMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token string\">\"nihaohaohao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"整型在内存中的存储及运算规则\"><a class=\"anchor\" href=\"#整型在内存中的存储及运算规则\">#</a> 整型在内存中的存储及运算规则</h1>\n<blockquote>\n<p>有符号 <code>二进制</code> 表示 <code>正反</code> 的方式，在 <code>首位</code></p>\n<ul>\n<li><code>1为负数</code></li>\n<li><code>0为正数</code></li>\n</ul>\n<p>数据以 <code>补码</code> 的形式保存在内存中。</p>\n<p><code>正数</code> 的 <code>反码</code> 和 <code>补码</code> 是 <code>其本身</code></p>\n<blockquote>\n<p>在类型转换的过程中直接 <code>保存低位</code> 即可</p>\n<p>在 <code>int转char型</code> ，-2 对应的补码 <code>1111 1110</code>  转为 4 位，直接 <code>截断</code> 得到四位，即 1110，这个数对应的还 <code>是-2</code> ；</p>\n<p>在还原时： <code>-1</code> ，再求 <code>反码</code> 即得原码得到 <code>原数</code></p>\n</blockquote>\n<blockquote>\n<p><code>char转int</code> ，若 <code>高位是0</code> ， <code>正数</code> ， <code>高位补0</code> ，若为  <code>负数</code> 高位 <code>补1</code>  即可</p>\n</blockquote>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkk1W9XmyXrKAVXE4cEoTzulMtu2xiauDBxwyk6Onh6Ytc88riaZMVavJFA/640?wx_fmt=png\" alt=\"正负保存形式\" /></p>\n<h2 id=\"截断\"><a class=\"anchor\" href=\"#截断\">#</a> 截断</h2>\n<blockquote>\n<p>当将不同类型元素混合赋值且指向内存空间大小不一样时，就会 <code>发生截断</code> 。截断会 <code>高位截断</code> ，保留低位数据，当 <code>-1</code>  整型 <code>存入字符串数据中</code> ，就会 <code>发生截断</code></p>\n</blockquote>\n<h2 id=\"整型提升\"><a class=\"anchor\" href=\"#整型提升\">#</a> 整型提升</h2>\n<blockquote>\n<p><code>整型提升</code> 的 <code>意义</code> 在于：表达式的整型运算要在 CPU 的相应运算器件内执行，CPU 内整型运算器 (ALU) 的操作数的字节长度一般就是 int 的字节长度，同时也是 CPU 的通用寄存器的长度。因此，即使两个 char 类型的相加，在 CPU 执行时实际上也要先转换为 CPU 内整型操作数的标准长度。通用 CPU（general-purpose CPU）是难以直接实现两个 8 比特字节直接相加运算（虽然机器指令中可能有这种字节相加指令）。所以，表达式中各种长度可能小于 int 长度的整型值，都必须先转换为 <code>int</code>  或 <code>unsigned int</code> ，然后才能 <code>送入CPU</code>  去执行运算。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//-1 截断后存储到 a 中</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">//10000000000000000000000000000001\t-1 的原码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">//11111111111111111111111111111110\t-1 的反码</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//11111111111111111111111111111111  -1 的补码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//11111111 - a   截断后 char a 中 a 所存的补码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">signed</span> <span class=\"token keyword\">char</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//11111111111111111111111111111111  -1 的补码</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//11111111 - b    b 的补码</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//11111111111111111111111111111111  -1 的补码</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//11111111 - c    c 的补码。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 整型提升</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%d,b=%d,c=%d\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//-1 -1 </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">//11111111111111111111111111111111</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//11111111111111111111111111111110</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//10000000000000000000000000000001</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">//11111111</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">//00000000000000000000000011111111</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"八道笔试题集合\"><a class=\"anchor\" href=\"#八道笔试题集合\">#</a> 八道笔试题集合</h1>\n<blockquote>\n<p>指针层级 <code>过深时</code> ，通过 <code>画关系</code> 的 <code>形式表达</code> 出来。</p>\n</blockquote>\n<h2 id=\"sizeof小练\"><a class=\"anchor\" href=\"#sizeof小练\">#</a>  <code>sizeof小练</code></h2>\n<blockquote>\n<p>牢记：sizeof 的计算在编译时刻，把它当 <code>常量表达式</code> 使用，且会 <code>忽略掉表达式</code> 内部的 <code>各种运算</code> ，指针在 <code>32位系统</code> 中占 <code>4</code>  个字节，在 <code>64位系统</code> 中占 <code>8</code>  个字节</p>\n</blockquote>\n<ul>\n<li><code>sizeof</code>  计算字符串容量时算 <code>\\0</code>  与此同时:  <code>sizeof(&quot;\\0&quot;)=2</code> ;</li>\n<li>在 <code>编译阶段处理</code> ， <code>sizeof</code>  作用范围内的内容 <code>不能被编译</code> ，所以 <code>sizeof()</code>  内的 <code>运算不被执行</code></li>\n<li><code>sizeof(函数) </code> =  <code>sizeof(返回值类型)</code></li>\n<li>联合体： <code>最长成员</code> 的 <code>大小对齐</code></li>\n<li><code>sizeof(2.5+3.14)</code>  实际上是  <code>sizeof(double)</code>   切记需要识别出 <code>其类型</code></li>\n<li><code>sizeof</code>  可以对 <code>函数调用</code> 求值，实际上是对 <code>返回值类型求值</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 得出返回值类型 int 的大小，4 个字节</span></pre></td></tr></table></figure><h3 id=\"sizeof不可用\"><a class=\"anchor\" href=\"#sizeof不可用\">#</a> sizeof 不可用</h3>\n<ul>\n<li><code>不能对函数名</code> 求值</li>\n<li><code>不</code> 能对 <code>不确定返回值</code> 的类型求值，如 <code>void</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">short</span> num <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"笔试1\"><a class=\"anchor\" href=\"#笔试1\">#</a> 笔试 1</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> \t<span class=\"token comment\">//a 为数组 a [0] 的地址与数组 a 地址重合，&amp;a 取的就是数组 a 的地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 取了数组 a 之后的地址空间</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d,%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a 的地址空间减去一个 sizeof (int) 得出结果: 2,5</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>指针的类型</code> 决定了 <code>指针+1时</code> 的 <code>步长</code> ，指针的类型决定了对指针进行 <code>解引用操作</code> 时， <code>访问的空间大小</code></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkvpbC0pQRyicJHfR1RnWofhwtXibPiabZfWIlDwZ9b2YGItZjEK2d4sXaA/640?wx_fmt=png\" alt=\"数组指针引用\" title=\"数组指针引用\" /></p>\n<h2 id=\"笔试2\"><a class=\"anchor\" href=\"#笔试2\">#</a> 笔试 2</h2>\n<blockquote>\n<p>指针移动，移动对应类型的 <code>sizeof(类型)</code>  的字节数，注意转换关系，要根据 <code>转换关系</code> 灵活 <code>应用</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 此结构体的大小是 20 个字节</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> Num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pcName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">short</span> sDate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">char</span> cha<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">short</span> sBa<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x100000</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 假设 p 的值为 0x100000。  //p 的地址 0x0000000000100000</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//% p 输出地址</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//p 为结构体类型，每次指针移动一位，就是移动的 strct Test 的大小，和数组移动时一样</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 移动了一位，就是内存地址移动了 20 个字节</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">+</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//0x100020</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 使用了类型转换，无符号长整型 对应的是值 +1</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>p <span class=\"token operator\">+</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//0x100001</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 使用无符号整型，那整型 + 1 就是 int, 对应的是指针类型，要加 4 个字节就是 4 个字节</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p <span class=\"token operator\">+</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//0x100004</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkBN1ricluEwq82P2z8BYgoSP0R7EnMCok9o4icRmuwNaPjPQcH1JRjicSg/640?wx_fmt=png\" alt=\"结构体添加\" title=\"第一问\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkhygpVw5NuAU6blDLSfAv4WAibzOPdVhfY28RdWQ2rCibe9rk4vw6Wicicw/640?wx_fmt=png\" alt=\"第二问\" title=\"添加长整型\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkiba0AaiaTEJVFzqnCP4xosaJ7phic6j89b6g6ASO6bdtEmAueZyO5nCYg/640?wx_fmt=png\" alt=\"第三问\" title=\"添加整型\" /></p>\n<h2 id=\"笔试3\"><a class=\"anchor\" href=\"#笔试3\">#</a>  <code>笔试3</code></h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上通 4 &amp;a 取的是整个数组 a 的地址，+1 即跳过一个 int (*)[4] 类型，然后再将它强制转换为 int * 类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 首先计算出 a 在内存中的存储，使用小端存储结构，+1 之后</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x,%x\"</span><span class=\"token punctuation\">,</span> ptr1<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//% x 以 16 进制打印</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkF4tgMeHUic6TzcogYlb5ek40yYvFNFwsz2TE9eTPXVia1BNgVS1gzG6g/640?wx_fmt=png\" alt=\"ptr2的地址\" title=\"ptr2地址\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkQkEN0uxWv96c6g9r3EdiaiagADiaIrq88xUC7lAJeA3xia8Ww3L13Vufmg/640?wx_fmt=png\" alt=\"第一问\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkR3kVc5r0icJTEySUFTdMUjC7ytUZZuM9FRTN88DibRTXbez1hoHSiaicmg/640?wx_fmt=png\" alt=\"第二问\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkNua7DkHKqhxDvePJSA25202SX1U78wiaKM3mV9eRscyILnSIiaWwx0Sg/640?wx_fmt=png\" alt=\"第三问\" /></p>\n<h2 id=\"笔试4\"><a class=\"anchor\" href=\"#笔试4\">#</a> 笔试 4</h2>\n<h3 id=\"逗号表达式\"><a class=\"anchor\" href=\"#逗号表达式\">#</a> 逗号表达式</h3>\n<ul>\n<li><code>逗号表达式</code> 的运算过程为： <code>从左往右</code> 逐个计算表达式</li>\n<li>逗号表达式作为一个 <code>整体</code> ，它的值为最后一个表达式 (也 <code>即表达式n</code> ) 的值</li>\n<li><code>逗号运算符</code> 的优先级别在所有运算符中 <code>最低</code></li>\n</ul>\n<blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    x<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    y<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 由于后面没有括号，且逗号的优先级是最低的，z 就等于 x++ 了，后面照样运行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    z<span class=\"token operator\">=</span>x<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d,%d,%d\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// (0, 1) 逗号运算符，取最后一个</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// &#123; &#123;1,3&#125;,&#123;5,0&#125;,&#123;0,0&#125; &#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    p <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"笔试5\"><a class=\"anchor\" href=\"#笔试5\">#</a>  <code>笔试5</code></h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//p 是一个数组指针，指向一个有 4 个整型元素的数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 取对应的内存，指针画笔</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//a 是数组名，数组名代表的是数组首元素的地址，二维数组的首元素是第一行元素，</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    p <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//-4 取地址，以补码 16 进制的形式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p,%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkWC50jHSOYchS28sKDRick2T8S1gjwAzjj0rABgCudEg9Z0FAw7g4HLA/640?wx_fmt=png\" alt=\"指针赋值\" title=\"指针赋值详细\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkk5ZwZ1xOIGhXhjsh0X9Jg5ibyIuxUYeGkRfajQcgD4BmuxtKvpj8iaRUQ/640?wx_fmt=png\" alt=\"详解\" title=\"详解\" /></p>\n<h2 id=\"笔试6\"><a class=\"anchor\" href=\"#笔试6\">#</a> 笔试 6</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> aa<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>aa <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取了数组 aa 之后的内存</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>aa <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取的是 aa [1][0] 的地址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d,%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ptr1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ptr2 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//10，5</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkDopUnK4qcuy3jxLQxHYf9LibnBGRfEEePyeDo8lxMN1mpgqYkdgcYJw/640?wx_fmt=png\" alt=\"第六题\" title=\"6解法\" /></p>\n<h2 id=\"笔试7\"><a class=\"anchor\" href=\"#笔试7\">#</a> 笔试 7</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 代表多个字符串 a [0],a [1],a [2]   char 变成了字符串</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"at\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"alibaba\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//a 的地址默认是 a [0] 的地址，</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> pa <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tpa<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//a[1]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//at</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkibtOByQiagGLQxl7De0tYlbaiatcdIB4BuNVO2XNvwC8LbUxLackAlMBg/640?wx_fmt=png\" alt=\"07解答\" title=\"07题\" /></p>\n<h2 id=\"笔试8\"><a class=\"anchor\" href=\"#笔试8\">#</a> 笔试 8</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"ENTER\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"NEW\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"POINT\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"FIRST\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> cp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> c <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>c <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>c <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> cpp <span class=\"token operator\">=</span> cp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">++</span>cpp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">--</span> <span class=\"token operator\">*</span> <span class=\"token operator\">++</span>cpp <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>cpp<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> cpp<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkIyNicOXzib6kMjIqWDEUU5Io8D2EIq0mmVVJrHKoHLZIyjcfSyRLMK9A/640?wx_fmt=png\" alt=\"第一步\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkX4giay6zIDHkspFkGqDXeOADgh3kSp62ibiaHDqzIf4RPSsmF1U8Rs6XQ/640?wx_fmt=png\" alt=\"第二步\" title=\"第二步\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkUQdqtE1qKibf6cotwuC0mnGQJg29r3NNCJxanWPibWZ66st7QuBaQ8mQ/640?wx_fmt=png\" alt=\"第三步\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkuwRyicxDJnoqwBDo1HyMPH5NFF4URR1XOsQrEz1NHaX30UMkKib7h9EA/640?wx_fmt=png\" alt=\"第四步\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtWag4RMZqqBh24Iv7t2wkkPCozmcwR1rQ3eIZ7FibpBywSNcZe2XdqQ2peicXj1GpuQ5WzTcCzHrcw/640?wx_fmt=png\" alt=\"第五步\" /></p>\n<h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzYyNjkyODM4L2FydGljbGUvZGV0YWlscy8xMjczMzg0NTQ=\">关于指针的笔试题</span></p>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/qq_32693119/article/details/86617654\"> <code>sizeof</code>  详解</a></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzY0NTc5Mjc4L2FydGljbGUvZGV0YWlscy8xMjc0MTg2NzA=\">截断</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS91XzEzNjgyMDUyLzI5ODAwNDc=\">入坑无符号类型转换</span></p>\n</li>\n</ul>\n",
            "tags": [
                "考证",
                "软件",
                "工作",
                "C++",
                "笔试"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/Certificate/soft/work/%E5%A4%A7%E7%AB%AF%E5%B0%8F%E7%AB%AF%E5%AD%98%E5%82%A8/",
            "url": "https://www.blog.foryouos.cn/Certificate/soft/work/%E5%A4%A7%E7%AB%AF%E5%B0%8F%E7%AB%AF%E5%AD%98%E5%82%A8/",
            "title": "C++面试字节系",
            "date_published": "2023-07-14T12:10:00.000Z",
            "content_html": "<h1 id=\"字节序\"><a class=\"anchor\" href=\"#字节序\">#</a> 字节序</h1>\n<blockquote>\n<p>即计算机在存储或读取数据时，字节的顺序。计算机是从低字节依次向高字节进行 读。 数据 <code>12345678</code></p>\n<ul>\n<li>大端： <code>低</code> 字节在 <code>高位(即后面)</code>  ， <code>高</code> 字节在 <code>前面</code>  （符合人类的习惯)</li>\n</ul>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210429171813889.png\" alt=\"大端\" /></p>\n<ul>\n<li>小端： <code>低</code> 字节在 <code>低位(即前面)</code></li>\n</ul>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210429172017425.png\" alt=\"小端存储\" /></p>\n<ul>\n<li>\n<p><code>计算机</code> 一般都是 <code>小端序</code></p>\n</li>\n<li>\n<p><code>网络</code> 序时 <code>大端序</code></p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">union</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">short</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> un<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tun<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0x1234</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//0x 十六进制，0 八进制</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>un<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x34</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 低字节存放在低位，小端</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小端序\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>un<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x12</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 高字节存在低位，低字节存在高位，</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大端序\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"常见的处理器架构\"><a class=\"anchor\" href=\"#常见的处理器架构\">#</a> 常见的处理器架构</h1>\n<table>\n<thead>\n<tr>\n<th>架构</th>\n<th>模式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>x86/x64</code></td>\n<td><code>小端</code> 模式</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ARM</code></td>\n<td>大小端模式 <code>可配置</code></td>\n<td><code>1</code>  为 <code>大</code> 端， <code>0</code>  为 <code>小</code> 端， <code>复位时</code> 确认，不能更改</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"为什么要区分大小端\"><a class=\"anchor\" href=\"#为什么要区分大小端\">#</a> 为什么要区分大小端</h1>\n<blockquote>\n<p>芯片存储空间以字节为 <code>单位存储</code> ，每个字节都有高低地址之分，只有超过了一个字节的数据，就需要区分呢大端还是小端。<br />\n大小端的优缺点来说。存储效率，在 CPU 计算时内核效率。</p>\n</blockquote>\n<h1 id=\"大端小端优缺点对比\"><a class=\"anchor\" href=\"#大端小端优缺点对比\">#</a> 大端小端优缺点对比</h1>\n<h2 id=\"数据传输\"><a class=\"anchor\" href=\"#数据传输\">#</a> 数据传输</h2>\n<ul>\n<li>网络传输使用大端字节序可以 <code>避免字节序</code> 转换带来的 <code>性能损失</code> 。传输中，若需要进行 <code>字节序转换</code> ，会 <code>增加CPU的工作负载</code> ， <code>降低</code> 系统 <code>性能</code> 。网络数据包都是 <code>先传输头部信息</code> ，然后 <code>再传输数据</code> ，采用 <code>大端字节序</code> 可以使 <code>头部信息</code> 的数据大小和 <code>起始位置固定</code> ，方便处理。</li>\n</ul>\n<h2 id=\"数据存储\"><a class=\"anchor\" href=\"#数据存储\">#</a> 数据存储</h2>\n<ul>\n<li>容易 <code>判断</code> 多字节数据的 <code>大小</code></li>\n<li>提高 <code>内存利用率 </code></li>\n</ul>\n<blockquote>\n<p>小端存储地地址 总是存放着 <code>数据最低</code> 的有效字节，而 <code>高地址</code> 存放着数据的 <code>最高有效字节</code> ，这些特征使得 <code>小端序列</code> 的地址 <code>按值递增</code> 时，多字节数据的存储顺序和阅读顺序都是按顺序排列的，可以 <code>充分利用内</code> 存的特征。大端序列却不好 利用内存。如下：</p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200313201318115.png\" alt=\"小端存储提高内存利用率\" title=\"小端存储对内存利用率的提升\" /></p>\n<ul>\n<li><code>小端字节序</code> ，低位字节总是存储在最低的地，对于多字节整数的 <code>部分访问</code> 和 <code>计算</code> 更加方便</li>\n</ul>\n<h1 id=\"linux对字节序转换\"><a class=\"anchor\" href=\"#linux对字节序转换\">#</a> Linux 对字节序转换</h1>\n<blockquote>\n<p>将 <code>长整型</code> 转换为 <code>网络大端字节序</code> ，使用 <code>htonl</code> ，短整型使用 <code>htons</code></p>\n<p>将 <code>网络字节序</code> 转换为 <code>本地小端字节序</code> ，使用 <code>ntohl</code> ，短整型使用 <code>ntohs()</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>The <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> function converts the <span class=\"token keyword\">unsigned</span> integer hostlong from host byte order to network byte order<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>The <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> function converts the <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> integer hostshort from host byte order to network byte order<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>The <span class=\"token function\">ntohl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> function converts the <span class=\"token keyword\">unsigned</span> integer netlong from network byte order to host byte order<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>The <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> function converts the <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> integer netshort from network byte order to host byte order<span class=\"token punctuation\">.</span></pre></td></tr></table></figure>",
            "tags": [
                "考证",
                "软件",
                "工作",
                "C++",
                "笔试"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/%E6%8E%92%E5%BA%8F/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/%E6%8E%92%E5%BA%8F/",
            "title": "排序算法C++",
            "date_published": "2023-07-10T01:34:32.368Z",
            "content_html": "<h2 id=\"排序\"><a class=\"anchor\" href=\"#排序\">#</a> 排序</h2>\n<blockquote>\n<p>算法稳定性：关键字相同的元素在排序之后， <code>相对位置</code> 不变</p>\n<p><code>内部排序</code> ：排序期间元素全部存放在 <code>内存中</code> 的排序</p>\n<p><code>外部排序</code> ：排序期间元素 <code>无法全部</code> 同时存放在内存中，必须在排序的过程中根据要求不断地 <code>在内，外存之</code> 间移动的排序。</p>\n</blockquote>\n<h2 id=\"直接插入排序\"><a class=\"anchor\" href=\"#直接插入排序\">#</a> 直接插入排序</h2>\n<blockquote>\n<ul>\n<li>添加 <code>哨兵</code> 节点存放需要更换位置的节点值</li>\n<li>从第二个位置开始\n<ul>\n<li>若小于前一个节点，此节点需要 <code>前移</code> ，变为哨兵</li>\n<li>根据判断往前循环判断哨兵应该放的位置，同时为了哨兵有位置放，在循环中，循环位置之后的 <code>集体后移</code></li>\n<li>找到后，将哨兵插入到对应节点</li>\n</ul>\n</li>\n<li>性能：时间复杂度 <code>O(n^2</code> )，空间复杂度 <code>O(1)</code> , <code>稳定</code></li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">InsertSort</span><span class=\"token punctuation\">(</span>Elemtype A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">//A [0] 是哨兵</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 循环所有节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t <span class=\"token comment\">// 从小到大排序</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> A<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 判断那个 i 节点太小需要向前更换位置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\tA<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 哨兵指向 A [i] 节点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token comment\">// 向前移动寻找哨兵该插入的位置，并对元素向后移动</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 当哨兵小于 j 节点时停止，</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 向后移动</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\tA<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token comment\">// 哨兵小于 A [j]，在 A [j+1] 位置赋值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tA<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"折半插入排序\"><a class=\"anchor\" href=\"#折半插入排序\">#</a> 折半插入排序</h2>\n<blockquote>\n<p>根据直接插入排序，引入折半查找</p>\n<ul>\n<li>先 <code>折半查找</code></li>\n<li>然后统一移动带 <code>插入位置之后</code> 的所有元素</li>\n<li>时间复杂度 <code>O(n^2) </code>  稳定算法，</li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">BinsearchSort</span><span class=\"token punctuation\">(</span>Elemtype A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">//A [0] 是哨兵</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 循环所有节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">// 从小到大排序</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tA<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 哨兵指向 A [i] 节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// 向前移动寻找哨兵该插入的位置，并对元素向后移动</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">// 使用折半查找找到位置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">// 设置折半查找的范围</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tlow <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\thigh <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//i-1 为带查找的最后一个</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 默认递增有序</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tmid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取中间点</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> A<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果中间节点大于哨兵，则在左边</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\thigh <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\tlow <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 查右部分</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 后移 high+1 后面的全部后移</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> high <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tA<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token comment\">// 哨兵小于 A [high]，在 A [high+1] 位置赋值</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tA<span class=\"token punctuation\">[</span>high <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"希尔排序\"><a class=\"anchor\" href=\"#希尔排序\">#</a> 希尔排序</h2>\n<blockquote>\n<p>又叫 <code>缩小增量排序</code> ，先追求表中元素 <code>部分有序</code> ，在逐渐 <code>逼近全局</code> 有序</p>\n<ul>\n<li>先取小于 <code>n</code>  的步长 <code>d</code> , (一般取 <code>n/2</code> ), 所有距离为 d 的倍数放在同一组，在各组内进行直接插入排序</li>\n<li>取第二步步长 <code> (d/2)</code></li>\n<li>循环直到 <code>d=1</code></li>\n<li>性能分析，时间复杂度 <code>O(n^2)</code> , 不稳定 仅适合 <code>线性表</code> 为 <code>顺序存储</code> 的情况。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 希尔排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ShellSort</span><span class=\"token punctuation\">(</span>Elemtype A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> dk<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 步长变化，首次取 n/2，之后每次去 dk/2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>dk <span class=\"token operator\">=</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> dk <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> dk <span class=\"token operator\">=</span> dk <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">// 对每一个 dk 组进行排序，类似直接插入排序</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> dk <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> A<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> dk<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 和前一个数据相差 dk，将 A [i] 插入到有序增量子表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\tA<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 暂存 A [i]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 记录后移，寻找查找位置</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> dk<span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">-=</span> dk<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从 A [j] 找到 A [0] 应该插入的位置</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t\tA<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> dk<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 记录后移，查找插入的位置</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\tA<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> dk<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h2>\n<blockquote>\n<ul>\n<li><code>交换</code> ： 是指根据序列中 <code>两个元素</code> 关键字的 <code>比较</code> 结果来对换这两个记录在序列中的 <code>位置</code></li>\n<li><code>冒泡排序</code> ：从后往前 (或从前往后) 两两 <code>比较相邻</code> 元素的值，每一趟排序将最小的元素交换到 <code>待排序序列</code> 的第一个位置</li>\n<li>性能分析： 空间复杂度：O (1)，时间复杂度为 O (n^2), 稳定的排序</li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 交换</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>Elemtype <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> Elemtype <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tElemtype<span class=\"token operator\">*</span> c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 交换的中间值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tc <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\ta <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tb <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 顺序排序</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">BubbleSort</span><span class=\"token punctuation\">(</span>Elemtype A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从头到尾</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tflag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录是否发生了交换</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从后往前计算，每次将小的交换到前面，每次交换都能确定一个最小值</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从小到大排序</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 交换，数组第一个为指针</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发生了交换</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 本趟遍历后没有发生交换，说明表已经有序退出</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"快排排序\"><a class=\"anchor\" href=\"#快排排序\">#</a>  <code>快排排序</code></h2>\n<blockquote>\n<p>快排基于 <code>分治法</code></p>\n<ul>\n<li>取第一个元素为 <code>基准</code></li>\n<li>通过一趟排序将待排序表划分为独立的 <code>两部分L[1...k-1],和L[k+1...n],</code></li>\n</ul>\n<p>性能</p>\n<ul>\n<li>时间复杂度:\t <code>O(log2n)</code>   以 2 为低</li>\n<li>空间复杂度  <code>O(log2n)</code></li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 快排划分算法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>Elemtype A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 默认将当前表中第一个作为基准</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tElemtype n <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 根据基准对当前区间实行快排</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// 从顶部相下循环</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high <span class=\"token operator\">&amp;&amp;</span> A<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> n<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\thigh<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">// 结束 while，A [high] 大于 n 了需要变换位置，或者 low=high 结束循环</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tA<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//A [low] 原本是基准位置 小的移动到左边</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// 从底部开始向上 </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high <span class=\"token operator\">&amp;&amp;</span> A<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\tlow<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 若是 low 比较小，或者 low=high 结束了 while 循环 </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tA<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tA<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将基准值填入它的位置</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> low<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回基准点，作为下回分界点，左右已经实现小于大于 n 了</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 快速排序</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>Elemtype A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 递归跳出条件</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token comment\">// 使用递归进行划分</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 先进行整体划分</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">// 对小于基准值的左边划分</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token comment\">// 对小于基准值的右边划分</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"简单选择排序\"><a class=\"anchor\" href=\"#简单选择排序\">#</a> 简单选择排序</h2>\n<blockquote>\n<p>每一趟再待排序元素中选取关键字最小的元素加入到有序子序列中</p>\n<p>时间复杂度: <code> O(n^2)</code> ,  <code>不稳定</code> 的算法</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 简单选择排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SelectSort</span><span class=\"token punctuation\">(</span>Elemtype A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tmin <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录最小元素位置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从 i+1 节点移除向后循环，判断出最小的值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> A<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\tmin <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>min <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果最小数值发生了变化，进行交换</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"堆排序\"><a class=\"anchor\" href=\"#堆排序\">#</a> 堆排序</h2>\n<blockquote>\n<p>n 个关键字序列 L [1....n] 称为堆</p>\n<p>1， <code>L[i]&gt;=L[2i]</code>  且 <code>L[i]&gt;=L[2i+1] </code></p>\n<p>2， <code>L[i]&lt;=L[2i]</code>  且  <code>L[i]&lt;=L[2i+1] </code></p>\n<p>满足 1 的堆成为大根堆，大跟对的最大元素在根节点，且任一个非跟节点的值小于等于其双亲节点值。</p>\n<ul>\n<li>对于小跟堆，新元素放在表尾，与父节点相比，若新元素比父节点更小，则将两者互换，新元素就这样一路上升，直到无法继续上升为止</li>\n<li>被删除的元素用元素替代，然后让改元素不断 <code>下坠</code>  直达 <code>无法下坠为</code> 止。</li>\n</ul>\n<p>堆排序适合关键字比较多的情况，例如，在一亿个数据中选出前 100 个最大值？</p>\n<ul>\n<li>首先使用一个大小为 100 的数组，读入前 100 个数，建立小跟堆，而后依次读入余下的数，若小于堆顶则舍弃</li>\n<li>否则用该数组取代堆顶并重新调整堆，待数据读取完毕，堆中 100 个数即为所求。</li>\n</ul>\n<p>性能:</p>\n<ul>\n<li>\n<p>空间效率：辅助单元，空间复杂度 <code>O(1)</code></p>\n</li>\n<li>\n<p>时间效率:\t  <code>O(nlogn)</code></p>\n</li>\n<li>\n<p>不稳定</p>\n</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuSLvKMU6z5IICuEIz2WlgYJAicEUNeVROrfdAUe516EohapUWQ56hW4y3yMVcpA5bAYU4VpNEX9YA/640?wx_fmt=png\" alt=\"堆定义\" title=\"大根堆小跟堆\" /><br />\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuSLvKMU6z5IICuEIz2WlgYU2Pcs8icJQ0V4jcdiaFbnKibnFKE7PmBWdgjjB0FUnP3u1BumMlOrSFWw/640?wx_fmt=png\" alt=\"堆排序原理\" title=\"堆排序原理\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuSLvKMU6z5IICuEIz2WlgYn7lOiaCHcRdnPCmPkwZibKWILPT45cLVp4S4aRpQHfqribuiaialS23fBnw/640?wx_fmt=png\" alt=\"堆排序原理\" title=\"堆排序原理\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuSLvKMU6z5IICuEIz2WlgYXtbVfyjYLwludJZaueq5HwOP9gqEGOezYIlXLEibUa64Y1Uiakml5QDg/640?wx_fmt=png\" alt=\"堆排序原理\" title=\"堆排序原理\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 堆排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HeadAdjust</span><span class=\"token punctuation\">(</span>Elemtype A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 将元素 k 作为跟的子树进行调整</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tA<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//A [0] 暂存子树，后续比大小要更换要更换根节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> k<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> len<span class=\"token punctuation\">;</span> i <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">&amp;&amp;</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> A<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//i 取 key 较大的子结点的下标</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果根节点大于子结点最大，则可结束，符合大根堆</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tA<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子树根节点，取代最大</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\tk <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">//k 的子树影响到直接子节点，以便继续向下筛选</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//k 最终存档的要筛选的值，等于原本最初的子树根节点</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tA<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">buildMaxHeap</span><span class=\"token punctuation\">(</span>Elemtype A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从底部向上反复调整堆</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token function\">HeadAdjust</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 堆排序算法</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HeapSort</span><span class=\"token punctuation\">(</span>Elemtype A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">buildMaxHeap</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化堆</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 共需要 n-1 趟的交换和建堆过程</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出栈顶元素 (和堆低元素交换)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token function\">HeadAdjust</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调整，把剩余的 i-1 个元素整理成堆</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"归并排序\"><a class=\"anchor\" href=\"#归并排序\">#</a> 归并排序</h2>\n<blockquote>\n<p>归并就是将 <code>两个或两个以上</code> 的有序表组合成一个新的有序表。</p>\n<ul>\n<li>待排序表含 <code>有n个</code> 记录，则可将其视为 n 个有序的子表</li>\n<li>每个子表长度为 1，然后两两归并，得到 <code>n/2</code>  个长度为 <code>2或1</code>  的有序表，继续 <code>两两归并</code> ... 如此 <code>重复</code> ，直到 <code>合并</code> 成一个 <code>长度为n</code>  的有序表为止</li>\n<li>称为 <code>2路归并排序</code></li>\n<li>性能：空间复杂度 <code>O(n)</code> , 时间复杂度 <code>O(nlogn)</code> , 稳定性</li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbuSLvKMU6z5IICuEIz2WlgYRpHMuPXMQdRJyIA7UmFFpz6iaWF8C4wnZ1NxpYNibNLnTLT9kWBmxLxg/640?wx_fmt=png\" alt=\"归并排序\" /></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 归并排序 8 为 n</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Elemtype<span class=\"token operator\">*</span> B <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Elemtype<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Elemtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 辅助数组，协助 merge 存储元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span>Elemtype A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> low<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tB<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 A 中所有元素复制到 B 中</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> low<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> B<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 比较 B 中辅助大小</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\tA<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将最小元素放到 A 中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tA<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 将 i 和 j 未处理的代码复制到 A 中，因为递归底层运算，后面的元素是有序的</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tA<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tA<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>Elemtype A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 划分为两个子序列</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 使用递归依次放入栈中，最后的无法分的代码执行，即为一个，两个合并，依次向上执行</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"基数排序\"><a class=\"anchor\" href=\"#基数排序\">#</a> 基数排序</h2>\n<blockquote>\n<p>基数排序 <code>不基于</code> 比较和 <code>移动</code> 进行排序而是基于 <code>关键字各位的大小</code> 进行排序</p>\n<ul>\n<li>初始化，设置 <code>r</code>  个 <code>空</code> 队列 <code>Qr-1,...Q0</code></li>\n<li>按照各个关键字 <code>位权重递增</code>  ( <code>个，十，百</code> )，对 <code>d个</code> 关键字位分别做 <code>分配</code> 和 <code>收集</code></li>\n<li>收集，把 <code>Qr+1 ... Q0</code>  各个队列中的结点 <code>依次出兑</code> 并 <code>链接</code></li>\n</ul>\n<p>性能:</p>\n<ul>\n<li>空间复杂度:  <code>辅助存储</code> 空间 r 个队列  <code>O(r)</code></li>\n<li>时间复杂度:  <code>O(d(n+r))</code>     稳定</li>\n</ul>\n<p>善于解决的问题</p>\n<ul>\n<li>数据元素可以方便 <code>拆分为d组</code> ，且 <code>d组较小</code></li>\n<li>每个关键字取 <code>值范围不大</code> ，即 <code>r较小</code></li>\n<li>数据元素个数 <code>n较大</code></li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/ORog4TEnkbuSLvKMU6z5IICuEIz2WlgYTNXb7R71RHQsn8Pfv2o777sJiaNKvfomRAJ1h4bCOXVPY3JQcic7IRpg/640?wx_fmt=gif\" alt=\"基数排序\" title=\"基数排序\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用基数排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 求出最大位数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">maxBit</span><span class=\"token punctuation\">(</span>Elemtype A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 求这些代码在求 n 个元素的最大值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> maxData <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxData <span class=\"token operator\">&lt;</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tmaxData <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存储最大元素</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 求最大值为位数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录最大值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>maxData <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tmaxData <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初以 10，每次减去位数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\td<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 基数排序</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">radixsort</span><span class=\"token punctuation\">(</span>Elemtype A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token function\">maxBit</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 求出最大位数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">int</span> radix <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 决定得出是哪一位十位 / 百位，个位</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 存储数据 A  --- 对应 bucket</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">int</span> bucket<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 计时器 存储对应位个数</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 进行 d 次排序</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> d<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 循环次数根据个数决定</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\tbucket<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清空计时器</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token comment\">// 统计每个 bucket 个位计数的元素个数</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\tk <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> radix<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 求 A [j] 对 10 求余，即个位数</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\tbucket<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">//bucket 存储这个对应位数，的个数</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token comment\">// 循环 bucket 从 0~10 记录了立、从低到高的累计量</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token comment\">// 为了能够足够空间将分好的数据存入 temp 数组内部</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\tbucket<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> bucket<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token comment\">// 形成存储队列存储到 temp 当中</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\tk <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> radix<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存储位数</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\ttemp<span class=\"token punctuation\">[</span>bucket<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存储了对应地址</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\tbucket<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 空间地址 --</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token comment\">// 将临时数组的内容复制到 data 当中</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\tA<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\tradix <span class=\"token operator\">=</span> radix <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 个位之后 ，十位，依次</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"比较\"><a class=\"anchor\" href=\"#比较\">#</a> 比较</h2>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbvUoz97Ziblic7ACMLNDHsiaGPrHgqHaOaBq5cmRlZnM6ZBgDrzj3T3ll89fZL5knA7zOEKy4mkibJzOQ/640?wx_fmt=png\" alt=\"对比性能\" title=\"性能对比\" /></p>\n<h2 id=\"测试代码\"><a class=\"anchor\" href=\"#测试代码\">#</a> 测试代码</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> Elemtype<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print_sort</span><span class=\"token punctuation\">(</span>Elemtype A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//A [0] 为哨兵</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 循环所有节点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//A [0] 为哨兵</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tElemtype A<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">49</span><span class=\"token punctuation\">,</span><span class=\"token number\">38</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span><span class=\"token number\">76</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">27</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 简单插入排序</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//InsertSort(A, 8);</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 折半插入排序</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// BinsearchSort(A, 8);</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 希尔排序</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// ShellSort(A, 8);</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">// 顺序排序</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">//BubbleSort(A, 8);</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 使用快排</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// QuickSort(A, 0, 7);</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">//SelectSort(A, 8);</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 堆排序</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// HeapSort(A, 8);</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 使用二路归并</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 使用基数排序</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">//radixsort(A, 8);</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">print_sort</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "汇编与STl新特征",
                "C++",
                "计算机科学",
                "算法"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-6/Hash/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-6/Hash/",
            "title": "Hash",
            "date_published": "2023-07-09T00:20:43.000Z",
            "content_html": "<h1 id=\"hash\"><a class=\"anchor\" href=\"#hash\">#</a> Hash</h1>\n<h1 id=\"平衡二叉树\"><a class=\"anchor\" href=\"#平衡二叉树\">#</a> 平衡二叉树</h1>\n<blockquote>\n<p>通过 <code>比较</code> 保证 <code>有序</code> ， <code>每次搜索</code> 都能够 <code>排除一半</code> ， <code>时间复杂</code> 度 <code>O(log2为低n)</code></p>\n<p><code>100万</code> 节点  -- 最 <code>多</code> 比较次数  <code> 20次</code></p>\n<p><code>10亿</code> 节点   -- 最 <code>多</code> 比较次数  <code> 30次</code></p>\n</blockquote>\n<h1 id=\"散列表\"><a class=\"anchor\" href=\"#散列表\">#</a> 散列表</h1>\n<blockquote>\n<p>根据 key 计算 key 在表中的位置的数据结构，是 key 和其所在存储地址的映射关系</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtl7K6Fvc4NQBMOZBTMjagzmxMvWaTbHzRGlXz9MibcqY5BX1nbdA63lNlBzcOcqLU5vC4Y6oCyODA/640?wx_fmt=png\" alt=\"散列表\" title=\"拉链法\" /></p>\n<h2 id=\"散列表组成\"><a class=\"anchor\" href=\"#散列表组成\">#</a> 散列表组成</h2>\n<h2 id=\"hash函数\"><a class=\"anchor\" href=\"#hash函数\">#</a> hash 函数</h2>\n<blockquote>\n<p>通过映射函数 <code>Hash(key) = addr</code> ; <code> hash函数</code> 可能会把 <code>两个或两个以上</code> 的 <code>不同key</code>  映射到 <code>同一地址</code> ，这种情况称之为 <code>冲突</code>  (或者 <code>Hash碰撞</code> )。</p>\n</blockquote>\n<h1 id=\"选择hash\"><a class=\"anchor\" href=\"#选择hash\">#</a> 选择 hash</h1>\n<ul>\n<li>计算 <code>速度快</code></li>\n<li><code>强随机分布</code>  (等概率， <code>均匀地</code> 分布在整个地址空间)</li>\n<li>常见 hash 算法:  <code>murmurhash2</code>  - 使用最频繁的， <code>cityhash</code>  强随机分布性， <code>siphash </code>  -redis 的主要解决字符串接近的强随机分布性 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FhcHBsZWJ5L3NtaGFzaGVy\">测试地址</span></li>\n</ul>\n<h1 id=\"hash-冲突\"><a class=\"anchor\" href=\"#hash-冲突\">#</a> hash 冲突</h1>\n<h2 id=\"负载因子\"><a class=\"anchor\" href=\"#负载因子\">#</a> 负载因子</h2>\n<blockquote>\n<p>数组存储的元素个数 / 数组长度：用来形容散列表的存储密度；负载因子越小，冲突概率越小，负载因子越大，冲突概率越大</p>\n</blockquote>\n<h2 id=\"解决冲突\"><a class=\"anchor\" href=\"#解决冲突\">#</a> 解决冲突</h2>\n<h3 id=\"链表法\"><a class=\"anchor\" href=\"#链表法\">#</a> 链表法</h3>\n<blockquote>\n<p>将冲突元素用链表链接起来。(极端情况，冲突元素越多，冲突链表过长，可将此链表转换为红黑树，最小堆 -- 可以采用 <code>超过256个</code> 节点 (经验值) 将链表结构转换为 <code>红黑树</code> 或堆结构)</p>\n<p>redis，stl-unorder</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtl7K6Fvc4NQBMOZBTMjagz2fIyVicPtMTl3Wm4mgNTRJaWbSxGCiaMNrwRbmQcblTXSZfcXc96ibaicQ/640?wx_fmt=png\" alt=\"散列表\" title=\"拉链法\" /></p>\n<h3 id=\"开放寻址法\"><a class=\"anchor\" href=\"#开放寻址法\">#</a> 开放寻址法</h3>\n<blockquote>\n<p>将所有的元素都存放在哈希表的数组中，不使用额外的数据结构</p>\n<ul>\n<li>当插入 <code>新元素时，</code> 使用哈希函数在哈希表中定位元素位置</li>\n<li>检查数组中该槽位索引是否存在元素，若槽位为 <code>空</code> ，则 <code>插入</code> ，否则 3</li>\n<li>在 2 检测的槽位索引 <code>加上一定步长</code> 接着检查 2</li>\n</ul>\n<p>也可使用 <code>双重hash</code>  解决 <code>hash聚集</code> 现象<br />\n在  <code>. net HashTable</code>  类的 hash 函数 Hk 定义如下：<br />\n <code>Hk(key) = [GetHash(key) + k * (1 + (((GetHash(key) &gt;&gt; 5) + 1) % (hashsize – 1)))] % hashsize </code> <br />\n在此  <code>(1 + (((GetHash(key) &gt;&gt; 5) + 1) % (hashsize – 1))) </code> 与  <code>hashsize </code> 互为 <code>素数</code> （两数互为素数表示两者没有 <code>共同的质因 ⼦</code>  ） ；<br />\n执 ⾏ 了 <code> hashsize 次探查后</code> ， 哈希表中的 <code>每⼀个位置</code> 都有 且 <code>只有⼀次</code> 被 <code>访问到</code> ， 也就是说， 对于给定的 <code> key</code>  ，对哈希表中的同 ⼀ 位置不会同时使 ⽤ Hi 和 Hj ；</p>\n</blockquote>\n<h3 id=\"负载因子不再合理范围内\"><a class=\"anchor\" href=\"#负载因子不再合理范围内\">#</a> 负载因子不再合理范围内</h3>\n<blockquote>\n<p><code>used &gt; size</code>   -- <code>扩容</code>  |  <code>used &lt; 0.1size</code>  -- <code>缩容</code></p>\n<p>扩容 / 缩容之后  --  <code>rehash</code></p>\n</blockquote>\n<h1 id=\"stl散列表实现\"><a class=\"anchor\" href=\"#stl散列表实现\">#</a>  <code>STL</code>  散列表实现</h1>\n<blockquote>\n<p><code>unordered * </code></p>\n<p>为了实现 <code>迭代器</code> ，将后面具体节点 <code>串成一个单链表</code> ，</p>\n<p>当插入一个新的节点是， <code>hash</code>  之后将该节点指向 <code>上一层的最后一个节点</code> 。以实现 <code>迭代器</code></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtl7K6Fvc4NQBMOZBTMjagz7TowynNLNfvicg8ymicorwE9yT1YFDWVCDJYSYIqJ98apfOsODb85HPg/640?wx_fmt=png\" alt=\"STL散列表实现\" title=\"STL散列表实现\" /></p>\n<h1 id=\"布隆过滤器\"><a class=\"anchor\" href=\"#布隆过滤器\">#</a> 布隆过滤器</h1>\n<blockquote>\n<p>布隆过滤器是一种 <code>概率性数据结构</code> ， <code>高效</code> 地 <code>插入</code> 和 <code>查询</code> ，不存储具体数据，占用空间小，查询结果存在误差 <code>，可以确定一定不存在</code> ，但不能确定一定存在， <code>不支持删除操作</code></p>\n</blockquote>\n<h2 id=\"背景\"><a class=\"anchor\" href=\"#背景\">#</a> 背景</h2>\n<blockquote>\n<p>内存 <code>有限</code> ，只想确定某个 <code>key</code>  存不存在，不想知道具体内容</p>\n<p>当数据 key,value 存入某个文件时，将对应的 <code>key</code> ， <code>映射到文</code> 件的 <code>布隆过滤器</code> 中，当查询时，不需要读取文件到内存， <code>只需</code> 要 <code>查询</code> 布隆 <code>过滤器(其放在内存当中)</code> ，对应的 key 是否存在即可。  -- 数据库 rocksdb</p>\n<p>数据库 <code>MySql</code>  -- 查看 <code>key</code>  是否在 <code>MySQL</code>  当中，在服务器端 <code>部署布隆过滤器</code> ，查询时， <code>查布隆过滤器</code></p>\n</blockquote>\n<h2 id=\"构成\"><a class=\"anchor\" href=\"#构成\">#</a> 构成</h2>\n<blockquote>\n<p>使用位图 <code>BIT数组</code>  +  <code>n个hash函数</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> bitmap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">uint64_t</span> bitmap <span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 数组</span></pre></td></tr></table></figure><p><img data-src=\"E:%5C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5CC-notebook%5C%E9%9B%B6%E5%A3%B0Linux%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cassets%5Cimage-20230705084805312.png\" alt=\"image-20230705084805312\" /></p>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<blockquote>\n<ul>\n<li>当一个元素加入位图时，通过 <code>k个hash函数</code> 将这个元素 <code>映射到</code> 位图的 <code>k个点</code> ，并把他们 <code>置为1</code> 。</li>\n<li>当检索时，再通过 <code>k个hash函数</code> 运算检测 <code>位图的k个点</code> 是否 <code>都是1,</code>  如果有 <code>不为1</code>  的点，那么认为该 <code>key不存在</code> ，</li>\n<li>如果 <code>全部为1</code> ，则 <code>可能</code> 存在。</li>\n<li>不支持删除：位图中每个槽位 <code>只有</code> 两种状态 <code>1或0</code> ， <code>不确定</code> 槽位 <code>被设</code> 置多少 <code>次</code> ，也不知道被 <code>多少个key hash</code>  映射而来以及是被具体 <code>哪个hash函数</code> 映射而来。</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtl7K6Fvc4NQBMOZBTMjagzNXfXQmI8sxib5jbRdTBRzGO4QsQbDBVKUocQxzUjj9dqweCqP37spHA/640?wx_fmt=png\" alt=\"布隆过滤器\" title=\"布隆过滤器\" /></p>\n<h2 id=\"应用分析\"><a class=\"anchor\" href=\"#应用分析\">#</a> 应用分析</h2>\n<blockquote>\n<ul>\n<li><code>n -</code> - 预期布隆过滤器中元素的 <code>个数</code></li>\n<li><code>p </code>  --  <code>假阳率</code>  在 <code>0-1</code>  之间</li>\n<li><code>m</code>  --  <code>位图</code> 所占空间</li>\n<li><code>k</code>  -- <code> hash</code>  函数的 <code>个数</code></li>\n</ul>\n<p><a href=\"https://hur.st/bloomfilter/\"> <code>n,p确认m,k</code> </a></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>k <span class=\"token operator\">/</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token function\">exp</span><span class=\"token punctuation\">(</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token function\">exp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>k <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">/</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>m <span class=\"token operator\">=</span> <span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>k <span class=\"token operator\">=</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">/</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>随着 <code>n</code>  越来越 <code>多</code> ，假阳率也越来 <code>越高</code></li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtl7K6Fvc4NQBMOZBTMjagzrcwoA7V4Hf6umkNQyMeBDkehrNsLbAa4gDSYtwZUBpz2jiatS42yoEw/640?wx_fmt=png\" alt=\"pVSn\" title=\"PVSn\" /></p>\n<ul>\n<li><code>位图</code> 所占 <code>空间</code> 越来越大， <code>假阳率</code> 也就越来越 <code>低</code></li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtl7K6Fvc4NQBMOZBTMjagzVAQH8PReLUpsfzJicpmIVBXOO68f2ulicVeEM3bRpRrqjHyickKZxCtrQ/640?wx_fmt=png\" alt=\"pVSm\" title=\"pVSM\" /></p>\n<ul>\n<li><code>hash函数</code> 的个数 <code>越多</code> ，假阳率降低到一个水平，开始缓慢上升。 大约 <code>31最低</code></li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtl7K6Fvc4NQBMOZBTMjagzMgAVgz46ZfNsGembvYH7QQrlLjT2Bdw1hXic3nNKOUTnmZMcFSl3FwQ/640?wx_fmt=png\" alt=\"pVSk\" title=\"pVSk\" /></p>\n<h2 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h2>\n<blockquote>\n<p>布隆过滤器通常用于判断某个 <code>key</code>  一定不存在的场景，同时允许判断存在时有误差的情况</p>\n<ul>\n<li><code>缓存穿透</code> 解决</li>\n<li><code>热key限流</code></li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtl7K6Fvc4NQBMOZBTMjagzL2mGexduqP3Ae7lH9PnSgG0RYtY6rYtBiaFBCZelLIeX0Randsib6Bhg/640?wx_fmt=png\" alt=\"数据库redis\" title=\"数据库redis\" /></p>\n<ul>\n<li>缓冲穿透</li>\n</ul>\n<blockquote>\n<p><code>redis</code> ， <code>MySQL</code>  都没有数据，黑客可以利用此漏洞导致 <code>MySQL压力过大</code> ，如果以来真个系统将 <code>陷入瘫痪</code></p>\n</blockquote>\n<ul>\n<li>读取步骤</li>\n</ul>\n<blockquote>\n<ul>\n<li>先访问 <code>redis</code> ，如存在，直接返回，如不存在走 2</li>\n<li><code>访问MySQ</code> L，如果不存在，直接返回，如存在走 3</li>\n<li>将 <code>MySQL存在的key</code>  写回 <code>redis</code></li>\n</ul>\n</blockquote>\n<ul>\n<li>解决步骤</li>\n</ul>\n<blockquote>\n<ul>\n<li>在 <code>redis</code>  端设置 <code>&lt;key,null&gt;</code>  键值对，以此避免访问 MySQL；缺点是 <code>&lt;key,null&gt;过多</code> 的话，占用 <code>过多内存</code></li>\n<li>可以给 key 设置过期 <code> expire key 600ms</code> ，停止攻击后最后 <code>由redis自动清除</code> 这些无用的 key</li>\n<li>在 <code>server端</code> 存储一个布隆过滤器，将 MySQL 包含的 <code>key</code>  放入布隆过滤器中，布隆过滤器一定不存在的数据</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>为了减轻数据 <code>MySQL</code>  的访问压力，在 s <code>erver端</code> 与数据库 MySQL 之间加入缓存用来存储热点数据</li>\n<li>描述缓存穿透，server 端请求数据时，缓存和数据库都不包含该数据，最终请求压力全部涌向数据库</li>\n</ul>\n</blockquote>\n<h1 id=\"只用2g内存在20亿个整数中找到出现次数最多的数\"><a class=\"anchor\" href=\"#只用2g内存在20亿个整数中找到出现次数最多的数\">#</a> 只用 2G 内存在 20 亿个整数中找到出现次数最多的数</h1>\n<blockquote>\n<p><code>大文件</code>  hash <code>拆成小文件</code></p>\n<p>单台机器  hash 分流到多台机器</p>\n<p>主要解决 :  <code>分布式缓存</code> 扩容问题</p>\n<p>k 整数</p>\n<p>v 出现次数   -- - 需要内存 <code>uint32</code>   <code> 4个</code> 字节  （ <code>21.49亿</code></p>\n<p>一个 key value 对 <code>8</code>  个字节    <code>2亿</code> 个 -- 需要 <code>1.6G内存</code></p>\n<p>20 亿  --- 需要 <code>16G内存</code></p>\n<p>使用散列表</p>\n<ul>\n<li>拆分成若 <code>干等份</code>  (把 10 亿个整数的大文件拆分成多个文件中)</li>\n<li>目的：把相同的整数放到同一个文件</li>\n<li>通过 Hash 的强随机性将相同整数放到统一文件中</li>\n<li>分别在每个文件中找出最大值。</li>\n</ul>\n</blockquote>\n<h1 id=\"分布式一致性hash\"><a class=\"anchor\" href=\"#分布式一致性hash\">#</a> 分布式一致性 hash</h1>\n<blockquote>\n<p>分布式一致性 hash 算法将哈希空间组织称一个虚拟的圆环，圆环的大小是 <code>2^32</code> ；</p>\n<p>算法为： <code>hash(ip)%2^32</code>  , 最终会得到一个 <code>[0~2^32-1] </code> 之间的无符号整型，这个整数代表服务器的 <code>编号</code> ；多个服务器都通过这种方式在 hash 换上映射一个点来标识该服务器的位置，当用户操作某个 <code>key</code> ，通过同样的算法生成一个值，沿环 <code>顺时针定位</code> 某个服务器，那么该 key 就在该服务器中</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtl7K6Fvc4NQBMOZBTMjagzMzticgSQ9hI4CNJDv9xI2ogMS6jeMkhDIqPtv97ICZTKl7Ev9eN3eLg/640?wx_fmt=png\" alt=\"分布式hash\" title=\"分布式一致性hash\" /></p>\n<h2 id=\"应用场景-2\"><a class=\"anchor\" href=\"#应用场景-2\">#</a> 应用场景</h2>\n<blockquote>\n<p>将数据均衡地分散在不同的服务器当中，用来 <code>分摊缓存服务器的压力</code></p>\n<p>解决缓存服务器数量变化尽量不影响缓存失效</p>\n</blockquote>\n<h2 id=\"hash偏移\"><a class=\"anchor\" href=\"#hash偏移\">#</a> hash 偏移</h2>\n<blockquote>\n<p>服务器承受的压力 <code>不均匀</code></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtl7K6Fvc4NQBMOZBTMjagz7pCcq1HPttnae4icc1SWgETf2QbqLO7TZuPL4mLy2ib0F3ut0uPuicybw/640?wx_fmt=png\" alt=\"hash偏移\" title=\"hash偏移\" /></p>\n<h2 id=\"虚拟节点\"><a class=\"anchor\" href=\"#虚拟节点\">#</a> 虚拟节点</h2>\n<blockquote>\n<p>添加虚拟节点的概念；理论上哈希环上节点数越多，数据分布越均衡</p>\n<p>为每个服务器节点计算多个哈希节点 (虚拟节点); 通常做法是， <code>hash(&quot;IP:PORT:seqno&quot;)%2^32;</code></p>\n<p>hash (key) % 分布式个数   确认 <code>存储位置</code></p>\n<ul>\n<li>当分布式个数增加一个之后，算法发生改变，原有映射</li>\n</ul>\n<p>原有三个分布式节点</p>\n<p><code>1,2,3,4     % 3 </code>       存储位置： <code> 1,2,0,1</code></p>\n<p>添加一个节点后:</p>\n<p><code>1,2,3,4     % 4   </code>     存储位置： <code> 1,2,3,0</code></p>\n<p>算法发生改变，3,4，会出现 <code>大面积缓存失效，</code></p>\n<p>解决方法:</p>\n<ul>\n<li>固定算法解决缓存失效</li>\n</ul>\n<p><code>hash(key) % 2^32 = index</code></p>\n<ul>\n<li>改变查找节点的映射关系，把具体的地址 hash 到 <code>圆环(逻辑)上</code> ，(顺时针查找)  --  <code>局部缓存失效</code></li>\n</ul>\n<p><code>hash(node-ip:port) % 2^32 = index</code></p>\n<ul>\n<li><code>hash迁移</code> ，  -- 解决局部缓存失效</li>\n<li><code>hash强随机性</code> ，样本越大，</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbtl7K6Fvc4NQBMOZBTMjagzBRQVfeVzSaTHia5QhyVFIxF6v6SlCWC4zs57wj5KyejQEYu1Z1m2YicQ/640?wx_fmt=png\" alt=\"虚拟节点\" title=\"虚拟节点\" /></p>\n",
            "tags": [
                "计算机科学",
                "C++",
                "零声笔记",
                "C++",
                "计算机科学",
                "C项目",
                "Hash"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/Certificate/soft/work/%E7%AC%94%E8%AF%9501/",
            "url": "https://www.blog.foryouos.cn/Certificate/soft/work/%E7%AC%94%E8%AF%9501/",
            "title": "C++笔试题01",
            "date_published": "2023-07-08T23:50:00.000Z",
            "content_html": "<blockquote>\n<p>复习内容</p>\n<ul>\n<li>函数重载与继承</li>\n<li>指针</li>\n<li>排序与查询算法</li>\n<li>C 语言数组</li>\n<li>指针</li>\n<li>Linux 文件操作</li>\n</ul>\n</blockquote>\n<h1 id=\"选择题每题三分\"><a class=\"anchor\" href=\"#选择题每题三分\">#</a> 选择题 (每题三分)</h1>\n<p>1、一个 C 程序的 <code>执行</code> 是从 <code> A</code>   。</p>\n<p>（A）本程序的 <code>main函数开始</code> 到 <code>main函数结束</code></p>\n<p>（B）本程序文件的第一个函数开始到本程序文件的最后一个函数结束</p>\n<p>（C）本程序的 main 函数开始到本程序文件的最后一个函数结束</p>\n<p>（D）本程序文件的第一个函数开始到本程序 main 函数结束</p>\n<p>2、若有定义： <code>int a[3][4]</code> ; 不能表示数组元素 <code>a[1][1]</code>  的是  <code>D</code>  。<br />\n <code>a[3][4]</code>  在底层存储使用连续存储，存储方式为:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>（A） <code>*(a[1]+1)  </code>     （B） <code>*(&amp;a[1][1])</code>     （C） <code>(*(a+1))[1]</code>       （D） <code>*(a+5)</code></p>\n<ul>\n<li><code>(a+5)</code>  并不是表示 a 的地址加上 5，指向  <code>a[5] </code> 的指针。因为数组 a 只有 3 行，所以 <code>a[5]</code>  是 <code>越界访问</code> ，正确的当时 <code>*(a[0]+5)</code></li>\n</ul>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbs70YicrHSkCSKiceVGqwLK0Ijm3YeyohM2icIn2rbqeCAkejngKCc57BUqCzxXW02ohuwicFk0vVmZ6Q/640?wx_fmt=png\" alt=\"数组元素\" title=\"数组元素\" /></p>\n<p>3、以下哪一关键字可用于重载函数的区分   <code>C</code>  。</p>\n<p>（A）extern      // 全局<br />\n（B）static       // 静态变量<br />\n（C） <code>const </code>      // 可用于区分<br />\n（D）virtual   // 设置虚函数<br />\n 4、下列有关继承和派生的叙述中，正确的是  C 。</p>\n<p>（A）派生类不能访问通过私有继承的基类的保护成员 (不能对外传承)</p>\n<p>（B）多继承的虚基类不能够实例化    (X)  <code>可以被实例化</code> ，就是实例化引入</p>\n<p>（C） <code>如果基类没有默认构造函数，派生类构造函数必须显式地调用基类的带参构造函数</code></p>\n<p>（D）基类的析构函数和虚函数都不能够被继承，需要在派生类中重新实现（构造函数）</p>\n<blockquote>\n<p>派生类需要 <code>确保基类</code> 的成员被正确的 <code>初始化</code> 。如果基类没有默认构造函数，即没有 <code>无参</code> 构造函数，那么派生类无法自动调用基类的构造函数来 <code>初始化基类</code> 的成员。</p>\n</blockquote>\n<p>5、下面程序的输出结果是 A   。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream.h></span>  <span class=\"token comment\">// 不带.h</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>v2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 取地址实现交换</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">;</span> v1 <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>v2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 地址交换</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>v2<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>v2 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>v1<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>v1 <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">swap1</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">swap1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> ”<span class=\"token punctuation\">,</span>” <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>（A） <code>10,20 </code></p>\n<p>（B）20,10</p>\n<p>（C）10,10</p>\n<p>（D）20,20</p>\n<p><code>6</code> 、用某种排序方法对关键字序列 {35,84,21,47,15,27,68,25,20} 进行排序时，序列的变化情况如下：</p>\n<p>20,15,21, <code>25</code> ,47,27,68,35,84</p>\n<p>15, <code>20</code> ,21,25,35,27, <code>47</code> ,68,84</p>\n<p>15,20,21,25,27,35,47,68,84</p>\n<p>则采用的方法是  。</p>\n<p>（A）直接选择排序</p>\n<p>（B）希尔排序</p>\n<p>（C）堆排序</p>\n<p>（D）快速排序</p>\n<p>7、队列通常采用两种存储结构是  <code> A</code>  。</p>\n<p>（A） <code>顺序存储结构</code> 和 <code>链表存储结构</code></p>\n<p>（B）散列方式和索引方式</p>\n<p>（C）链表存储结构和数组</p>\n<p>（D）线性存储结构和非线性存储结构</p>\n<p>8、C++ 基类中的 private 成员通过 <code> A</code>   类型的继承，可以被派生类访问。</p>\n<p>（A） <code>public</code></p>\n<p>（B）protected</p>\n<p>（C）private</p>\n<p>（D）任何类型的继承都不能使得派生类可以访问基类的 private 成员</p>\n<p>9、如果基类 A 和 A 的派生类 B 中都有成员函数  <code>func()</code> ；要在派生类的 <code> func()</code>  中调用同名的 <code>基类</code> 的 func () 成员函数，下列 B  操作是正确的。</p>\n<p>（A）func();</p>\n<p>（B） <code>A::func();</code></p>\n<p>（C）B::func();</p>\n<p>（D）A.func();</p>\n<p>10、下面对静态数据成员的描述中，正确的是  <code>A </code>  。 static</p>\n<p>（A） <code>静态数据成员是类的所有对象共享的数据</code></p>\n<p>（B）类的每个对象都有自己的静态数据成员</p>\n<p>（C）类的不同对象有不同的静态数据成员值</p>\n<p>（D）静态数据成员不能通过类的对象调用  (静态数据成员可以通过类的对象或者类名加作用域运算符来访问和调用。)</p>\n<p>11、下列代码的输出内容是 <code> C</code>   。</p>\n<p>#include&lt;stdio.h&gt;</p>\n<p>main()</p>\n<p>{</p>\n<p>int a, b, c, d;</p>\n<p>a = 10;</p>\n<p>b = a++;</p>\n<p>c = ++a;</p>\n<p>d = 10*a++;</p>\n<p>printf(&quot;%d，%d，%d&quot;，b，c，d）;</p>\n<p>return 0;</p>\n<p>}</p>\n<p>（A）13，12，120   （B）10，11，120  （C） <code>10，12，120</code>    （D）10，12，130</p>\n<p>12、c++ 中以下关于函数调用说法正确的是   <code>D </code> 。</p>\n<p>（A）传地址后实参和形参指向不同的对象 （X）</p>\n<p>（B）传引用后实参和形参是不同的对象 X</p>\n<p>（C）传值后对形参的修改会改变实参的值  X</p>\n<p>（D）其他三项都不对</p>\n<h1 id=\"填空题每题5分\"><a class=\"anchor\" href=\"#填空题每题5分\">#</a> 填空题 (每题 5 分)</h1>\n<p><code>1</code> 、下列中 a 的值是  <code>400</code>  。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">AAA</span> <span class=\"token expression\"><span class=\"token number\">200</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BBB</span> <span class=\"token expression\">AAA<span class=\"token operator\">+</span><span class=\"token number\">100</span>   </span><span class=\"token comment\">//define 仅是代码替换</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> BBB<span class=\"token operator\">*</span><span class=\"token number\">2</span>   <span class=\"token comment\">// 得出结构为 AAA+100*2 仅是代码替换，得出的结果是 400</span></pre></td></tr></table></figure><p>2、使用  <code>函数重载</code>    的方法可以实现编译时多态，使用  <code>虚函数</code>   的可以实现 <code>运行时</code> 多态。</p>\n<p>3、程序的局部变量存在于   <code>栈</code>   中，全局变量存在于  <code> 静态区</code>     中，动态申请数据存在于    <code>堆</code>    中。</p>\n<h1 id=\"简答题每题5分\"><a class=\"anchor\" href=\"#简答题每题5分\">#</a> 简答题 (每题 5 分)</h1>\n<p>1、用变量 a 给出下面的定义</p>\n<p>（A）一个指向整型数的指针  <code>int*a</code></p>\n<p>（B）一个有 10 个指针的数组，该指针是指向一个整型数  <code>int *a[10] </code></p>\n<p>（C）一个指向有 10 个整型数组的指针  <code>int (*a)[10]</code></p>\n<p>（D）一个指向函数的指针，该函数有一个整型参数并返回一个整型数  <code>typedef int(*a)(int)</code></p>\n<p>（E）一个有 10 个指针的数组，该指针指向一个函数，该函数有一个整型参数并返回一个整型数 <code>int  (*a[10])(int)</code></p>\n<p>3、一块 N 个字节的内存，它的首地址（头指针）为 <code>pStart</code> ，那么末地址为</p>\n<p><code>pStart+N-1</code>   首地址占用一个空间</p>\n<p>4、计算下面结构体的大小，标注每个结构体成员的大小</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_a</span>  <span class=\"token number\">14</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">char</span> c1<span class=\"token punctuation\">;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">long</span> i<span class=\"token punctuation\">;</span>  <span class=\"token number\">4</span>  <span class=\"token number\">64</span>位<span class=\"token number\">8</span>个字节</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">char</span> c2<span class=\"token punctuation\">;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">double</span> f<span class=\"token punctuation\">;</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span>a<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_b</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">char</span> c1<span class=\"token punctuation\">;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">char</span> c2<span class=\"token punctuation\">;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">long</span> i<span class=\"token punctuation\">;</span>  <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">double</span> f<span class=\"token punctuation\">;</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span>b<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"问答题每题5分\"><a class=\"anchor\" href=\"#问答题每题5分\">#</a> 问答题 (每题 5 分)</h1>\n<h2 id=\"第一题\"><a class=\"anchor\" href=\"#第一题\">#</a> 第一题</h2>\n<p>查找单向链表 <code>倒数第k</code>  个位置上的结点。</p>\n<p>在 <code>不改变链表</code> 的前提下，请设计一个 <code>尽可能高效的算法</code> ，查找链表中倒数第 k (k&gt; 0) 个位置的节点。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span>  val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Node <span class=\"token operator\">*</span>  next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"答\"><a class=\"anchor\" href=\"#答\">#</a> 答：</h2>\n<blockquote>\n<p>建立 <code>两个</code> 单链表 <code>子链</code> ，一个链表向 <code>末尾next</code> ，当到 <code>第search个节点</code> 时，另一个节点也开始从 <code>头部next</code> ，当一个链表 <code>到达末尾</code> ，另一个 <code>链表正好</code> 位于 <code>倒数第seach个</code> 节点。时间复杂度 <code>O(n)</code> , 空间复杂度 <code>O(n)</code> ;</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span>       val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Node <span class=\"token operator\">*</span>   next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Node<span class=\"token operator\">*</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> search<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 返回倒数第 search 个节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 定义两个节点一个向前走，一个维持 k 的位置</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Node<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Node<span class=\"token operator\">*</span> search_p <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 当判运行到结尾</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        number<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">></span> search<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//seatch_p 从 search 位置开始往后移动</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            search_p <span class=\"token operator\">=</span> search_p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>search <span class=\"token operator\">&lt;=</span> number<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 搜索到了</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> search_p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">//node 节点没有倒数第 seach 个</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    Node<span class=\"token operator\">*</span> nodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        Node<span class=\"token operator\">*</span> add <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> add<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        node <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"倒数第7个数值为:\"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token operator\">-></span>val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Nodes节点总数不满足seach要求\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">delete</span> nodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"第二题\"><a class=\"anchor\" href=\"#第二题\">#</a> 第二题</h2>\n<blockquote>\n<p>以下程序，会存在什么问题？如果有问题，请更正.</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"答-2\"><a class=\"anchor\" href=\"#答-2\">#</a> 答</h2>\n<blockquote>\n<ul>\n<li><code>str字符</code> 串空间分配问题， <code>GetMemory`并没有分内存给`str`,需要调用str的`二重指针</code> ，传递给参数，来进行空间 <code>赋值</code></li>\n<li>空间大小问题，申请空间可能会因为申请空间过小而发生溢出。</li>\n<li>使用过后，需 <code>空间释放</code> ， <code>避免</code> 出现 <code>野指针</code></li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//*p 获取 str // 空间大小问题若输入过大会溢出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//P 的申请空间，并没有赋值给 str</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 传递 &amp;str 来获取 str 的地址。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//s 空间大于 str 申请的空间出现移除</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"TLove YOU,heihahiehahieha\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"第三题\"><a class=\"anchor\" href=\"#第三题\">#</a> 第三题</h2>\n<blockquote>\n<p>代码 <code>存在</code> 什么 <code>缺陷</code> ，请进行说明并将修改的贴上来</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"答-3\"><a class=\"anchor\" href=\"#答-3\">#</a> 答</h2>\n<blockquote>\n<ul>\n<li>long long  解决 <code>a+b</code>  可能的 <code>溢出</code> 。但是吧！(其它暂时没有发现)</li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 如果 a+b 超过了最大，可能出现移除问题</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用位运算进行除以 2 操作</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"第四题\"><a class=\"anchor\" href=\"#第四题\">#</a> 第四题</h2>\n<blockquote>\n<p>代码存在什么缺陷，请尝试修改，将修改的贴上来</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"答-4\"><a class=\"anchor\" href=\"#答-4\">#</a> 答</h2>\n<blockquote>\n<p><code>浮点数</code> 和 <code>双精度</code> 末尾数具有 <code>不确定性</code> ，一般用 <code>减法</code> 判断</p>\n<ul>\n<li>浮点精度存在限制  <code>(a + b)</code>  与  <code>c</code>  的差的绝对值是否小于某个小的阈值来进行判断</li>\n<li>传入值的判断</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/ORog4TEnkbs70YicrHSkCSKiceVGqwLK0ILz9Y3pH9RHKutvAicvEFCgSbKuhWfbIDyOkwYx7iayNU49coVvwW3cFA/640?wx_fmt=png\" alt=\"双精度浮点数\" title=\"双精度浮点数\" /></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> b <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"exit parameter null\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//return (a + b) == c;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">-</span> c <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.000000000001</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3.14526</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3.96515</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">double</span> c <span class=\"token operator\">=</span> <span class=\"token number\">7.11041</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在单计算上时相等的，但是 double 后面的位数具有随机性要用减法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"得出相等\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"不相等哟或异常\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"第五题\"><a class=\"anchor\" href=\"#第五题\">#</a> 第五题</h2>\n<blockquote>\n<p>以下代码存在什么问题，请指出，并将修改后的代码贴出。  文件一定考</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">read_file</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> file<span class=\"token punctuation\">,</span> size_t filesize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>filesize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> filesize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> filesize<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        buffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"答-5\"><a class=\"anchor\" href=\"#答-5\">#</a> 答</h2>\n<blockquote>\n<p><code>不健壮</code> ，修改一些 bug 和可能得错误</p>\n<p>文件是否 <code>打开</code> ， <code>filesize</code>  是否正确，是否完全将 <code>数据读完</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">read_file</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> file<span class=\"token punctuation\">,</span> size_t filesize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">||</span> filesize <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read_file init error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 申请内存空间</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>filesize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buffer <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Memory allocation failed.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 对申请的空间 buffer 的 filesize 大小空间设置为 0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> filesize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 读取 file 的内容 filesize 要读元素快的大小，1 为元素个数，存档到 buffer 里面，成功返回 filesize 大小</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tsize_t count <span class=\"token operator\">=</span> <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> filesize<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">!=</span> filesize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error reading the file\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tbuffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tbuffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"第六题\"><a class=\"anchor\" href=\"#第六题\">#</a> 第六题</h2>\n<p>以下代码存在什么问题，请指出，并将修改后的代码贴出。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vecTest <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter1<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>iter1 <span class=\"token operator\">=</span> vecTest<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter1 <span class=\"token operator\">!=</span> vecTest<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>iter1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter1 <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     \tvecTest<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iter1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"答-6\"><a class=\"anchor\" href=\"#答-6\">#</a> 答：</h2>\n<blockquote>\n<p>在删除 <code>iter1</code>  之后， <code>迭代器iter1</code>  失效，无法再继续进行 <code>遍历或递增</code> 操作，产生 <code>未定义</code></p>\n<p><code>erase</code>  删除之后，将会 <code>返回vector删除位置</code> 的写一个迭代器</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vecTest <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter1<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 好奇怪，</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>iter1 <span class=\"token operator\">=</span> vecTest<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter1 <span class=\"token operator\">!=</span> vecTest<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>iter1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter1 <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        iter1 <span class=\"token operator\">=</span> vecTest<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iter1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 指向被删除元素的下一个元素的位置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        iter1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"第七题\"><a class=\"anchor\" href=\"#第七题\">#</a> 第七题</h2>\n<p>以下代码存在什么问题，请指出。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">></span> testQueue<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 队列 先进先出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    testQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> testQueue<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    testQueue<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"答-7\"><a class=\"anchor\" href=\"#答-7\">#</a> 答：</h2>\n<blockquote>\n<p>除了最后释放内存的可能存在的 <code>内存泄漏</code> ，和 <code>健壮问题</code> ，暂时没发现其它问题</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span> <span class=\"token comment\">// 队列</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">></span> testQueue<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 队列 先进先出</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"new p error:\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        testQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>testQueue<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> testQueue<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        testQueue<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            p <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "考证",
                "软件",
                "工作",
                "C++",
                "笔试"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/cpp%E6%96%B0%E7%89%B9%E6%80%A7%E5%8F%98%E9%87%8F/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-2/cpp%E6%96%B0%E7%89%B9%E6%80%A7%E5%8F%98%E9%87%8F/",
            "title": "C++11新特性变量",
            "date_published": "2023-07-04T13:49:38.736Z",
            "content_html": "<h1 id=\"原始字面意\"><a class=\"anchor\" href=\"#原始字面意\">#</a> 原始字面意</h1>\n<blockquote>\n<p>使用原始字面意 R 可以直接表示字符串的实际含义，而不需要额外对字符串做转义或连接操作<br />\n原始字符串必须用括号 () 括起来，括号的前后可以加其它字符串，所加的 <code>字符串会被忽略</code> ，并且 <code>两边</code> 的 <code>字符串</code> 必须 <code>相同</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 括号两边的字符串相同，并且会被忽略</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tstring str <span class=\"token operator\">=</span> <span class=\"token raw-string string\">R\"foryouos:(D:\\foryouos\\blog#\"C++新特性\")foryouos:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 输出: D:\\foryouos\\blog#\"C++ 新特性\"</span></pre></td></tr></table></figure><h1 id=\"final\"><a class=\"anchor\" href=\"#final\">#</a> final</h1>\n<blockquote>\n<p>C++ 中 <code>final关键字</code> 来限制某个类 <code>不能被继承</code> ，或者某个 <code>虚函数</code> 不能被重写，</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用 final 关键字修饰过的类不允许被继承，此类不能有派生类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token keyword\">final</span> Base</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"base class\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此函数不能被重写</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"override\"><a class=\"anchor\" href=\"#override\">#</a> override</h1>\n<blockquote>\n<p>在 <code>多态性</code> 确保在 <code>派生类中声明</code> 的 <code>重写函数</code> 与基类的 <code>虚函数</code> 有 <code>相同</code> 的签名，同时也 <code>确保</code> 表明将会 <code>重写基类的虚函数</code> ，确保重写的虚函数的 <code>正确性</code> 。</p>\n</blockquote>\n<h1 id=\"to_string\"><a class=\"anchor\" href=\"#to_string\">#</a> to_string()</h1>\n<blockquote>\n<p>将 <code>各种数</code> 值类型转换为 <code>字符串类型</code> ，是一个 <code>重载函数</code>  位于   <code>&lt;string&gt;头</code> 文件</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tstring str <span class=\"token operator\">=</span> <span class=\"token string\">\"pie is\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1415926</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 输出: pie is3.141593</span></pre></td></tr></table></figure><h1 id=\"字符串转换为数值\"><a class=\"anchor\" href=\"#字符串转换为数值\">#</a> 字符串转换为数值</h1>\n<ul>\n<li><code>str</code>  要转换的 <code>字符串</code></li>\n<li><code>pos</code>  传出参数，记录从那 <code>个字符</code> 开始无法继续进行解析，比如；123 <code>a</code> bc ，传出位置为 <code>3</code></li>\n<li>base：若 base 为 <code>0</code> ，则自动检测数值进制，若 <code>前缀为0</code> ，则为 <code>八进制</code> ，若前缀为 <code>0x</code>  或 <code>0X</code> ，则为 <code>十六进制</code> ，否则为 <code>十进制</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义于头文件 &lt;string></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span>       <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">long</span>      <span class=\"token function\">stol</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">stoll</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>      <span class=\"token function\">stoul</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">stoull</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">float</span>       <span class=\"token function\">stof</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">double</span>      <span class=\"token function\">stod</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> <span class=\"token function\">stold</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>size_t<span class=\"token operator\">*</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>如果字符串全部是数值类型，全部会被转为对应的数值</li>\n<li>若前半部分是数值，那么前半部分会被转为数值</li>\n<li>如果第一个字符不是数值转换失败</li>\n</ul>\n<h3 id=\"举例\"><a class=\"anchor\" href=\"#举例\">#</a> 举例</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    string str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"45\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    string str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"3.14159\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    string str3 <span class=\"token operator\">=</span> <span class=\"token string\">\"9527 with words\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> myint1 <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">float</span> myint2 <span class=\"token operator\">=</span> <span class=\"token function\">stof</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> myint3 <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token raw-string string\">R\"(\"str1=\")\"</span> <span class=\"token operator\">&lt;&lt;</span> myint1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token raw-string string\">R\"(\"str2=\")\"</span> <span class=\"token operator\">&lt;&lt;</span> myint2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token raw-string string\">R\"(\"str3=\")\"</span> <span class=\"token operator\">&lt;&lt;</span> myint3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\"str1=\"45</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\"str2=\"3.14159</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\"str3=\"9527</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>*/</span></pre></td></tr></table></figure><h1 id=\"断言\"><a class=\"anchor\" href=\"#断言\">#</a> 断言</h1>\n<blockquote>\n<p>断言就是将一个返回值总是需要 <code>为真</code> 的判断表达式放到语句中，用于排除在设计的逻辑上 <code>不应该发生</code> 的情况</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cassert></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">createArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 通过断言判断数组大小是否大于 0，</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 必须大于 0, 才可以继续执行，否则程序中断</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"静态断言\"><a class=\"anchor\" href=\"#静态断言\">#</a> 静态断言</h1>\n<blockquote>\n<p><code>static_asser</code> t : 静态断言是在 <code>编译时</code> 就能够进行 <code>检查的断言</code></p>\n</blockquote>\n<h2 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h2>\n<ul>\n<li><code>参数1</code> : 断言表达式，此表达式需要返回一个 <code>bool值</code></li>\n<li><code>参数2:</code>  警告信息，一段字符串，在 <code>违反断言</code>  (表达式为 false) 时 <code>提示该信息</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">static_assert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"错误，不是32位平台\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"noexcept\"><a class=\"anchor\" href=\"#noexcept\">#</a>  <code>noexcept</code></h1>\n<blockquote>\n<p>表示其修饰的函数不会抛出异常，如果 <code>noexcept抛出了异常</code> ，编译器可以直接选择直接调用 <code>std::terminate()函数</code> 来终止程序运行。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">divisionMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">(</span>常量表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>常量表达式：值为 <code>true</code> ：该函数 <code>不会抛出异常</code></li>\n<li><code>fals</code> e, 可能抛出异常</li>\n</ul>\n<h1 id=\"auto\"><a class=\"anchor\" href=\"#auto\">#</a> auto</h1>\n<blockquote>\n<p>auto 类型  <code>占位符</code>  auto 并不是在任意场景下都能推导出变量的实际类型，使用 <code>auto声明</code> 的变量必须要进行初始化，以让编译器推导出它的实际类型，在编译时将 auto 占位符替换为真正的类型</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> 变量名 <span class=\"token operator\">=</span> 变量值<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"auto推导规则\"><a class=\"anchor\" href=\"#auto推导规则\">#</a> auto 推导规则</h2>\n<ul>\n<li>当变量不是指针或者引用类型时，推导的结果中不会保留 const volatile 关键字</li>\n<li>当变量是指针或者引用类型时，推导的结果中会保留 const volatile 关键字</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">110</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//a 的类型为 int * ，auto 推导为 int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">auto</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//b 的类型为 int * ，auto 推导为 int*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>c <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//c 的类型为 int&amp; ，auto 推导为 int</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">auto</span> d <span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//d 的类型为 int ，auto 推导为 int</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">130</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> a1 <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span> <span class=\"token comment\">//a1 类型为 const int auto 被推导为 int 类型</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">auto</span> a2 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//a2 类型为 const int , 但是 a2 没有生命指针或引用，auto 被推导为 int</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>a3 <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//a3 类型为 const int&amp; , 声明了引用，auto 关键字被推导为 int 类型</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>a4 <span class=\"token operator\">=</span> a3<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//a4 数据类型 const int&amp; , 声明了引用，auto 推到位 const int</span></pre></td></tr></table></figure><h2 id=\"auto限制\"><a class=\"anchor\" href=\"#auto限制\">#</a> auto 限制</h2>\n<ul>\n<li><code>auto</code>  不能作为函数参数使用</li>\n<li><code>auto</code>  不能用于类的 <code>非静态成员变量</code> 的 <code>初始化</code> ，可用于类的 ``静态常量变量初始化 static const`</li>\n<li><code>不能</code> 使用 auto 定义 <code>数组</code></li>\n<li><code>无法</code> 使用 auto <code>推导</code> 出 <code>模版参数</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">auto</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//2,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">auto</span> v1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// error</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> v2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//error, 类的静态非常量成员不允许在类内部直接初始化</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> v3 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//3,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 定义数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">auto</span> t1 <span class=\"token operator\">=</span> array<span class=\"token punctuation\">;</span>            <span class=\"token comment\">//ok, t1 被推导为 int* 类型</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">auto</span> t2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">;</span>          <span class=\"token comment\">//error, auto 无法定义数组</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">auto</span> t3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//error, auto 无法定义数组</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//4,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    Test<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    Test<span class=\"token operator\">&lt;</span><span class=\"token keyword\">auto</span><span class=\"token operator\">></span> t1 <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>           <span class=\"token comment\">//error, 无法推导出模板类型</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"auto应用\"><a class=\"anchor\" href=\"#auto应用\">#</a> auto 应用</h2>\n<ul>\n<li>用于 <code>STL的容器遍历</code></li>\n<li>用于 <code>泛型程序设计</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">static</span> string <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello, world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">auto</span> val <span class=\"token operator\">=</span> <span class=\"token class-name\">A</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"val: \"</span> <span class=\"token operator\">&lt;&lt;</span> val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T1<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">func</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T2<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"decltype\"><a class=\"anchor\" href=\"#decltype\">#</a>  <code>decltype</code></h1>\n<blockquote>\n<p><code>decltype</code>  -  <code>declare type</code>  声明类型，在 <code>编译器编译</code> 的时候 <code>推导出</code> 表达式的 <code>类型</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> b <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// b -> int</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span> c <span class=\"token operator\">=</span> <span class=\"token number\">52.13</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// c -> double</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">*</span>c<span class=\"token punctuation\">)</span> d <span class=\"token operator\">=</span> <span class=\"token number\">520.1314</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// d -> double</span></pre></td></tr></table></figure><h2 id=\"推导规则\"><a class=\"anchor\" href=\"#推导规则\">#</a> 推导规则</h2>\n<ul>\n<li>表达式为普通变量或者普通边大师或者类表达式， <code>--decltype</code>  推导出的 <code>类型和表达式一致</code></li>\n<li>表达式是 <code>函数调用</code> ，使用 <code>decltype</code>  推导出的类型和函数返回值一致</li>\n<li>表达式是一个 <code>左值</code> ，或者被 <code>括号()</code>  包围，使用 decltype 推导出的是表达式 <code>类型的引用</code>  (如果有 <code>const volatile限定符不能忽略</code> )</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> Test obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 带有括号的表达式</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//a 的类型为 int</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 带括号，const int&amp;   //obj 有 const 限定符</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 加法表达式</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> m<span class=\"token punctuation\">)</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//c 类型为 int</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> m<span class=\"token punctuation\">)</span> d <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 得到一个左值，d 类型为 int &amp;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"枚举\"><a class=\"anchor\" href=\"#枚举\">#</a> 枚举</h1>\n<h2 id=\"c枚举的使用\"><a class=\"anchor\" href=\"#c枚举的使用\">#</a> C 枚举的使用</h2>\n<blockquote>\n<p>在枚举类型中枚举值编译器会自动 <code>从0开</code> 始赋值，然后依次向下递增。 <code>Red=0,Green=1,Blue=2</code></p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 匿名枚举</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span>Red<span class=\"token punctuation\">,</span>Green<span class=\"token punctuation\">,</span>Blue<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 有名枚举</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Colors</span><span class=\"token punctuation\">&#123;</span>Red<span class=\"token punctuation\">,</span>Green<span class=\"token punctuation\">,</span>Blue<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"缺点\"><a class=\"anchor\" href=\"#缺点\">#</a> 缺点</h2>\n<blockquote>\n<p>具有 <code>名字的enum</code>  类型的名字，以及 <code>enum成员</code> 的名字都是 <code>全局可见</code> ，若两个枚举内部成员出现相同就会报错 <code>重定义</code> 。</p>\n</blockquote>\n<h2 id=\"强类型枚举\"><a class=\"anchor\" href=\"#强类型枚举\">#</a> 强类型枚举</h2>\n<blockquote>\n<p><code>C++11</code>  枚举类型即 <code>枚举类</code> ，又称 <code>强类型枚举</code>  ( <code>strong-typed enum</code> ) , 只需在 <code>enum后</code> 加上关键字 <code>class</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义强类型枚举</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Colors</span><span class=\"token punctuation\">&#123;</span>Red<span class=\"token punctuation\">,</span>Green<span class=\"token punctuation\">,</span>Blue<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"优势\"><a class=\"anchor\" href=\"#优势\">#</a> 优势</h3>\n<ul>\n<li>强作用域:  <code>不能输出</code> 到其 <code>父作用域空间</code></li>\n<li>只能是 <code>有名枚举</code></li>\n<li><code>转换限制</code> ，强类型枚举成员 <code>不可以</code> 与 <code>整形隐私</code> 相互转换，可以强制类型转换</li>\n<li>可以指定底层类型。强类型默认 <code>底层类型int</code>  ，可以在名称后加  <code>:type</code>  , 其中 <code>type</code>  可以是 <code>wchar_t</code>  以外的 <code>任何整形</code></li>\n</ul>\n<pre><code class=\"language-cpC\">enum class Colors&#123;Red,Green,Blue&#125;;\n(int)Colors::Red  //此转换合法\n</code></pre>\n<h1 id=\"32位和64位系统个数据类型对比\"><a class=\"anchor\" href=\"#32位和64位系统个数据类型对比\">#</a> 32 位和 64 位系统个数据类型对比</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:center\">32 位字节数</th>\n<th style=\"text-align:center\">64 位字节数</th>\n<th style=\"text-align:center\">取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">bool</td>\n<td style=\"text-align:center\">布尔型</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">true，false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">字符型</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">-128~127</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unsigned char</td>\n<td style=\"text-align:center\">无符号字符型</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0~255</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">短整型</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">-32768~32767</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unsigned short</td>\n<td style=\"text-align:center\">无符号短整型</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0~65535</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">整型</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">-2147483648~2147483647</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unsigned int</td>\n<td style=\"text-align:center\">无符号整型</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">0~4294967295</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">长整型</td>\n<td style=\"text-align:center\"><code>4</code></td>\n<td style=\"text-align:center\"><code>8</code></td>\n<td style=\"text-align:center\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unsigned long</td>\n<td style=\"text-align:center\">无符号长整型</td>\n<td style=\"text-align:center\"><code>4</code></td>\n<td style=\"text-align:center\"><code>8</code></td>\n<td style=\"text-align:center\">–</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unsigned long long</td>\n<td style=\"text-align:center\">无符号超长整型</td>\n<td style=\"text-align:center\">至少 8</td>\n<td style=\"text-align:center\">至少 8</td>\n<td style=\"text-align:center\">8 字节取值范围: 0 ~ 264</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">单精度浮点数</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">范围 - 2128 ~ 2128 精度为 6~7 位有效数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">双精度浮点数</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">范围 - 21024 ~ 21024 精度为 15~16 位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long double</td>\n<td style=\"text-align:center\">扩展精度浮点数</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">范围 - 21024 ~ 21024 精度为 15~16 位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">地址（指针）</td>\n<td style=\"text-align:center\"><code>4</code></td>\n<td style=\"text-align:center\"><code>8</code></td>\n<td style=\"text-align:center\">–</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "计算机科学",
                "C++",
                "汇编与STl新特征",
                "C++",
                "新特性"
            ]
        },
        {
            "id": "https://www.blog.foryouos.cn/computer-science/cpp/course-4/cpp%E9%AB%98%E5%8F%8D%E5%BA%94%E5%A0%86%E6%A8%A1%E5%9E%8B/",
            "url": "https://www.blog.foryouos.cn/computer-science/cpp/course-4/cpp%E9%AB%98%E5%8F%8D%E5%BA%94%E5%A0%86%E6%A8%A1%E5%9E%8B/",
            "title": "Linux后台服务器C++",
            "date_published": "2023-07-04T03:20:43.000Z",
            "content_html": "<h1 id=\"基于reactor高并发服务器-c\"><a class=\"anchor\" href=\"#基于reactor高并发服务器-c\">#</a> 基于 <code>Reactor</code>  高并发服务器  <code>C++</code></h1>\n<blockquote>\n<p>基于 <code>Reactor</code>  的高并发服务器，分为 <code>反应堆模型</code> ， <code>多线程</code> ， <code>I/O模型</code> ， <code>服务器</code> ， <code>Http请求</code> 和 <code>响应</code> 五部分</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvYbuq71ib9iaeQVznZ5coWayVyHeW1u9lLN9erbib5Gl9iaFzzueNicVmZLTYkp7MbpD5c6BZRjC6fOMg/640?wx_fmt=jpeg\" alt=\"全局\" title=\"全局反应堆模型\" /></p>\n<h1 id=\"反应堆模型\"><a class=\"anchor\" href=\"#反应堆模型\">#</a> 反应堆模型</h1>\n<h2 id=\"channel\"><a class=\"anchor\" href=\"#channel\">#</a>  <code>Channel</code></h2>\n<blockquote>\n<p>描述了文件描述符以及 <code>读写事件</code> ，以及对应的读写销毁回调函数，对应存储 <code>arg</code>  读写回调对应的参数</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvYbuq71ib9iaeQVznZ5coWayyXibpORz5m3TBibibqWYoznveXiasCfgkcHPu5vkr9W7WLoSxTsZJBLlWg/640?wx_fmt=jpeg\" alt=\"Channel\" title=\"channel\" /></p>\n<h2 id=\"channel添加写和判断\"><a class=\"anchor\" href=\"#channel添加写和判断\">#</a> Channel 添加写和判断</h2>\n<blockquote>\n<ul>\n<li>\n<p>异或  <code>|</code> ： <code>相同为0</code> ， <code>异为1</code></p>\n</li>\n<li>\n<p>按位与 <code>&amp;</code> ：只有 11 为 1，其它组合全部为 0，即只有 <code>真真为真</code> ，其它 <code>一假则假</code></p>\n</li>\n<li>\n<p>去反  <code>~</code> ：二进制 <code>全部取反</code></p>\n</li>\n<li>\n<p><code>添加写属性</code> ：若对应为 10 想要写添加写属性，与 100 <code>异或</code> ，的 110 读写属性</p>\n</li>\n<li>\n<p><code>删除写属性</code> ：第三位 <code>清零</code> ，若为 110，第三位清零，将写取 <code>反011</code> ，在按位与 &amp; 010 只 <code>留下读事件</code></p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// C++11 强类型枚举</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FDEvent</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tTimeOut <span class=\"token operator\">=</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 十进制 1，超时了 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tReadEvent <span class=\"token operator\">=</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 十进制 2       10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tWriteEvent <span class=\"token operator\">=</span> <span class=\"token number\">0x04</span>   <span class=\"token comment\">// 十进制 4  二进制 100</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Channel</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">writeEventEnable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果为真，添加写属性</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">// 异或 相同为 0 异为 1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">// WriteEvent 从右往左数第三个标志位 1，通过异或 让 channel->events 的第三位为 1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tm_events <span class=\"token operator\">|=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>FDEvent<span class=\"token double-colon punctuation\">::</span>WriteEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 按位异或 int events 整型 32 位，0/1,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token comment\">// 如果不写，让 channel->events 对应的第三位清零</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">// ~WriteEvent 按位与， ~WriteEvent 取反 011 然后与 channel->events 按位与 & amp; 运算 只有 11 为 1，其它皆为 0 只有同为真时则真，一假则假，1 为真，0 为假</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tm_events <span class=\"token operator\">=</span> m_events <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>FDEvent<span class=\"token double-colon punctuation\">::</span>WriteEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//channel->events 第三位清零之后，写事件就不再检测</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 判断文件描述符是否有写事件</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">Channel</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">isWriteEventEnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> m_events <span class=\"token operator\">&amp;</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>FDEvent<span class=\"token double-colon punctuation\">::</span>WriteEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 按位与 ，第三位都是 1，则是写，如果成立，最后大于 0，如果不成立，最后为 0</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"dispatcher\"><a class=\"anchor\" href=\"#dispatcher\">#</a>  <code>Dispatcher</code></h2>\n<blockquote>\n<p><code>Dispatcher</code>  作为 <code>父类</code> 函数，对应 <code>Epoll</code> , <code>Poll</code> , <code>Select模型</code> 。</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvYbuq71ib9iaeQVznZ5coWayFoicEL0lDZhBQib2so4J0dGkjFmdkKzG1KeQKRQoqibRIu3UNmdp6z6sw/640?wx_fmt=jpeg\" alt=\"反应堆模型\" title=\"反应堆模型\" /></p>\n<h2 id=\"选择反应堆模型\"><a class=\"anchor\" href=\"#选择反应堆模型\">#</a> 选择反应堆模型</h2>\n<blockquote>\n<p>在 <code>EventLoop</code>  初始化时，针对 <code>全局EventLoop</code> , 将 <code>m_dispatcher</code>  初始化为 <code>EpollDispatcher</code> .</p>\n<p>使用 <code>多态性</code> ， <code>父类</code> 建立 <code>虚</code> 函数， <code>子类</code> 继承复函数，使用 <code>override</code>  取代 <code>父类虚函数</code> 。达到选择反应堆模型。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m_dispatcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">EpollDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 选择模型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Dispatcher 类为父类</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Dispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 也虚函数，在多态时</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 等于 = 0 纯虚函数，就不用定义</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 删除 将某一个节点从 epoll 树上删除</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 修改</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 事件检测， 用于检测待检测三者之一模型 epoll_wait 等的一系列事件上是否有事件被激活，读 / 写事件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeout <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 单位 S 超时时长</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//Epoll 子类继承父类，override 多态性覆盖父类函数，同时 public 继承，继承 Dispatcher 的私有变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">EpollDispatcher</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Dispatcher</span>  <span class=\"token comment\">// 继承父类 Dispatcher</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">EpollDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">EventLoop</span><span class=\"token operator\">*</span> evLoop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">~</span><span class=\"token function\">EpollDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 也虚函数，在多态时</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//override 修饰前面的函数，表示此函数是从父类继承过来的函数，子类将重写父类虚函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//override 会自动对前面的名字进行检查，</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 等于 = 纯虚函数，就不用定义 </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 删除 将某一个节点从 epoll 树上删除</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 修改</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 事件检测， 用于检测待检测三者之一模型 epoll_wait 等的一系列事件上是否有事件被激活，读 / 写事件</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeout <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 单位 S 超时时长</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 不改变的不写，直接继承父类</span></pre></td></tr></table></figure><h2 id=\"eventloop\"><a class=\"anchor\" href=\"#eventloop\">#</a>  <code>EventLoop</code></h2>\n<blockquote>\n<p>处理 <code>所有的事件</code> ，启动反应堆模型，处理机会 <code>文件描述符后的事件,添加任务，处理</code> 任务队列<br />\n调用 <code>dispatcher</code>  中的 <code>添加移除，修改</code> 操作<br />\n存储着任务队列 <code>m_taskQ</code>   存储 <code>fd和对应channel对应关系</code> : <code>m_channelmap</code></p>\n</blockquote>\n<h3 id=\"私有函数变量\"><a class=\"anchor\" href=\"#私有函数变量\">#</a> 私有函数变量</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// CHannelElement 结构体</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 定义任务队列的节点 类型，文件描述符信息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ChannelElement</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tElemType type<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 如何处理该节点中 Channel</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tChannel<span class=\"token operator\">*</span> channel<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 文件描述符信息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 私有函数变量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 加入开关 EventLoop 是否工作</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">bool</span> m_isQuit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 该指针指向之类的实例 epoll,poll,select</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Dispatcher<span class=\"token operator\">*</span> m_dispatcher<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 任务队列，存储任务，遍历任务队列就可以修改 dispatcher 检测的文件描述符</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 任务队列</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>queue<span class=\"token operator\">&lt;</span>ChannelElement<span class=\"token operator\">*</span><span class=\"token operator\">></span>m_taskQ<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//map 文件描述符和 Channel 之间的对应关系  通过数组实现</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>Channel<span class=\"token operator\">*</span><span class=\"token operator\">></span> m_channelmap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 线程相关，线程 ID，name</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>thread<span class=\"token double-colon punctuation\">::</span>id m_threadID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>string m_threadName<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 主线程只有一个，固定名称，初始化要分为两个</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 互斥锁，保护任务队列</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>mutex m_mutex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 整型数组</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">int</span> m_socketPair<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存储本地通信 fd 通过 socketpair 初始化</span></pre></td></tr></table></figure><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvYbuq71ib9iaeQVznZ5coWayzpdqwL3ECRhgnsNDctWflow9wjaZXVH5JrbFVhHic6mHQtZzwHCYusA/640?wx_fmt=jpeg\" alt=\"EventLoop事件处理\" title=\"EventLoop事件处理\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvYbuq71ib9iaeQVznZ5coWayECvsG4dWSPJUQJoBuD7CBKibb6N4PG2MWQspZc0SEv7bun0oQibu6HJA/640?wx_fmt=jpeg\" alt=\"m_channelmap\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvYbuq71ib9iaeQVznZ5coWay1oou6Elyuzqa0qsuibI4y1HBzOybIiavaCiaEcvjKXI97BVDzZTySbXIw/640?wx_fmt=jpeg\" alt=\"任务队列ChannelElement\" title=\"任务队列ChannelElement\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvYbuq71ib9iaeQVznZ5coWayUuRJVjicERYwdgibPnfXprfwWDX2SDIhcYUFYfI6oCd2sekDL2RvMnNw/640?wx_fmt=jpeg\" alt=\"任务队列\" title=\"任务队列list\" /></p>\n<h3 id=\"反应堆运行\"><a class=\"anchor\" href=\"#反应堆运行\">#</a> 反应堆运行</h3>\n<blockquote>\n<p>反应堆模型启动之后将会在 <code>while循环</code> 中一直执行下去。首先调用 <code>dispatcher</code>  调用 <code>Epoll的wait函数</code> ，等待内核回应，根据其读写请求调用 <code>evLoop</code>  的 <code>enactive</code>  函数进行相关的读写操作。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">EventLoop</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    m_isQuit <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不退出</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 比较线程 ID，当前线程 ID 与我们保存的线程 ID 是否相等</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_threadID <span class=\"token operator\">!=</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 不相等时 直接返回 - 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 循环进行时间处理</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_isQuit<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 只要没有停止 死循环</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 调用初始化时选中的模型 Epoll,Poll，Select</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        m_dispatcher<span class=\"token operator\">-></span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">ProcessTaskQ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 处理任务队列</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"enactive\"><a class=\"anchor\" href=\"#enactive\">#</a> enactive</h3>\n<blockquote>\n<p>根据传入的 <code>event</code>  调用对应 <code>Channel</code>  对应的 <code>读写回调函数</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">EventLoop</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">eventActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> event<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 判断函数传入的参数是否为有效</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 基于 fd 从 EventLoop 取出对应的 Channel</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Channel<span class=\"token operator\">*</span> channel <span class=\"token operator\">=</span> m_channelmap<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//channelmap 根据对应的 fd 取出对应的 channel</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 判断取出 channel 的 fd 与当前的 fd 是否相同</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>channel<span class=\"token operator\">-></span><span class=\"token function\">getSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果为假，打印出报错信息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>FDEvent<span class=\"token double-colon punctuation\">::</span>ReadEvent <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token operator\">-></span>readCallback<span class=\"token punctuation\">)</span> <span class=\"token comment\">//channel->readCallback 不等于空</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 调用 channel 的读回调函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        channel<span class=\"token operator\">-></span><span class=\"token function\">readCallback</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">const_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>channel<span class=\"token operator\">-></span><span class=\"token function\">getArg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>FDEvent<span class=\"token double-colon punctuation\">::</span>WriteEvent <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token operator\">-></span>writeCallback<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        channel<span class=\"token operator\">-></span><span class=\"token function\">writeCallback</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">const_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>channel<span class=\"token operator\">-></span><span class=\"token function\">getArg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"添加任务\"><a class=\"anchor\" href=\"#添加任务\">#</a> 添加任务</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">EventLoop</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AddTask</span><span class=\"token punctuation\">(</span>Channel<span class=\"token operator\">*</span> channel<span class=\"token punctuation\">,</span> ElemType type<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 加锁，有可能是当前线程，也有可能是主线程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    m_mutex<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 创建新节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ChannelElement<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> ChannelElement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    node<span class=\"token operator\">-></span>channel <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    node<span class=\"token operator\">-></span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    m_taskQ<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    m_mutex<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 处理节点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    * 如当前 EventLoop 反应堆属于子线程</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    *   1，对于链表节点的添加：可能是当前线程也可能是其它线程 (主线程)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    *       1), 修改 fd 的事件，可能是当前线程发起的，还是当前子线程进行处理</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    *       2), 添加新的 fd，和新的客户端发起连接，添加任务节点的操作由主线程发起</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    *   2，主线程只负责和客户端建立连接，判断当前线程，不让主线程进行处理，分给子线程</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    *       不能让主线程处理任务队列，需要由当前的子线程处理</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_threadID <span class=\"token operator\">==</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 当前子线程</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 直接处理任务队列中的任务</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">ProcessTaskQ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 主线程 -- 告诉子线程处理任务队列中的任务</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 1, 子线程在工作 2，子线程被阻塞了：1，select,poll,epoll, 如何解除其阻塞，在本代码阻塞时长是 2s</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 在检测集合中添加属于自己 (额外) 的文件描述，不负责套接字通信，目的控制文件描述符什么时候有数据，辅助解除阻塞</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 满足条件，两个文件描述符，可以相互通信，//1，使用 pipe 进程间通信，进程更可，//2，socketpair 文件描述符进行通信</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">taskWakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 主线程调用，相当于向 socket 添加了数据</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"处理任务\"><a class=\"anchor\" href=\"#处理任务\">#</a> 处理任务</h3>\n<blockquote>\n<p>从任务队列中取出一个 <code>任务</code> ，根据 <code>其任务类型</code> ，调用 <code>反应堆模型对应</code> ，将 <code>channel</code>  在内核中的检测进行 <code>删除</code> ， <code>修改</code> ，或 <code>添加</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">EventLoop</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ProcessTaskQ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 遍历链表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_taskQ<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 将处理后的 task 从当前链表中删除，(需要加锁)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 取出头结点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        m_mutex<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ChannelElement<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> m_taskQ<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从头部</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        m_taskQ<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 把头结点弹出，相当于删除 </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        m_mutex<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 读链表中的 Channel, 根据 Channel 进行处理</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        Channel<span class=\"token operator\">*</span> channel <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>channel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 判断任务类型</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>type <span class=\"token operator\">==</span> ElemType<span class=\"token double-colon punctuation\">::</span>ADD<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 需要 channel 里面的文件描述符 evLoop 里面的数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 添加  -- 每个功能对应一个任务函数，更利于维护</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>type <span class=\"token operator\">==</span> ElemType<span class=\"token double-colon punctuation\">::</span>DELETE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">//Debug (\"断开了连接\");</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 删除</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 需要资源释放 channel 关掉文件描述符，地址堆内存释放，channel 和 dispatcher 的关系需要删除</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>type <span class=\"token operator\">==</span> ElemType<span class=\"token double-colon punctuation\">::</span>MODIFY<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 修改  的文件描述符事件</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token function\">Modify</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">delete</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">EventLoop</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Channel<span class=\"token operator\">*</span> channel<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 把任务节点中的任务添加到 dispatcher 对应的检测集合里面，</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> channel<span class=\"token operator\">-></span><span class=\"token function\">getSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 找到 fd 对应数组元素的位置，并存储</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_channelmap<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m_channelmap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        m_channelmap<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将当前 fd 和 channel 添加到 map</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        m_dispatcher<span class=\"token operator\">-></span><span class=\"token function\">setChannel</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置当前 channel</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> m_dispatcher<span class=\"token operator\">-></span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 加入</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">EventLoop</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>Channel<span class=\"token operator\">*</span> channel<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 调用 dispatcher 的 remove 函数进行删除</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 将要删除的文件描述符</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> channel<span class=\"token operator\">-></span><span class=\"token function\">getSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">// 判断文件描述符是否已经在检测的集合了</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_channelmap<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m_channelmap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">// 从检测集合中删除 封装了 poll,epoll select</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    m_dispatcher<span class=\"token operator\">-></span><span class=\"token function\">setChannel</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> m_dispatcher<span class=\"token operator\">-></span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">EventLoop</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Modify</span><span class=\"token punctuation\">(</span>Channel<span class=\"token operator\">*</span> channel<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">// 将要修改的文件描述符</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> channel<span class=\"token operator\">-></span><span class=\"token function\">getSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\">// TODO 判断</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_channelmap<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m_channelmap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">// 从检测集合中删除</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    m_dispatcher<span class=\"token operator\">-></span><span class=\"token function\">setChannel</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> m_dispatcher<span class=\"token operator\">-></span><span class=\"token function\">modify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"多线程\"><a class=\"anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<h2 id=\"threadpool\"><a class=\"anchor\" href=\"#threadpool\">#</a>  <code>ThreadPool</code></h2>\n<blockquote>\n<p>定义线程池， <code>运行线程池</code> ， <code>public函数</code> 取出线程池中某个子线程的 <code>反应堆实例EventLoop</code> ，线程池的 <code>EventLoop反应堆模型</code> 事件由主线程传入，属于 <code>主线程</code> ，其 <code>内部</code> ， <code>任务队列</code> ， <code>fd和Channel</code>  对应关系， <code>ChannelElement</code>  都是所有线程需要使用的数据</p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvYbuq71ib9iaeQVznZ5coWayibztUVcIf3VKUk8pVcWurWN4S4JkhFwBb9tnVicNlxibuBqxLOicb6DpKw/640?wx_fmt=jpeg\" alt=\"线程池工作\" title=\"线程池工作\" /></p>\n<h3 id=\"线程池运行创建子工作线程\"><a class=\"anchor\" href=\"#线程池运行创建子工作线程\">#</a> 线程池运行创建子工作线程</h3>\n<blockquote>\n<p>线程池运行语句在主线层运行，根据 <code>当前线程数量</code> ，申请响应的 <code>工作线程池</code> ，并将工作线程运行起来，将工作线程加入到线程池的 <code>vector数组</code> 当中。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_isStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 运行期间此条件不能错</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 判断是不是主线程</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_mainLoop<span class=\"token operator\">-></span><span class=\"token function\">getTHreadID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 将线程池设置状态标志为启动</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tm_isStart <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 子线程数量大于 0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_threadNum <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_threadNum<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tWorkerThread<span class=\"token operator\">*</span> subThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">WorkerThread</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用子线程</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tsubThread<span class=\"token operator\">-></span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tm_workerThreads<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>subThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"取出工作线程池中的eventloop\"><a class=\"anchor\" href=\"#取出工作线程池中的eventloop\">#</a> 取出工作线程池中的 <code>EventLoop</code></h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>EventLoop<span class=\"token operator\">*</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">takeWorkerEventLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 由主线程来调用线程池取出反应堆模型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>m_isStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前程序必须是运行的</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 判断是不是主线程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_mainLoop<span class=\"token operator\">-></span><span class=\"token function\">getTHreadID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 从线程池中找到一个子线层，然后取出里面的反应堆实例</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tEventLoop<span class=\"token operator\">*</span> evLoop <span class=\"token operator\">=</span> m_mainLoop<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将主线程实例初始化</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_threadNum <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tevLoop <span class=\"token operator\">=</span> m_workerThreads<span class=\"token punctuation\">[</span>m_index<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span><span class=\"token function\">getEventLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">// 雨露均沾，不能一直是一个 pool->index 线程</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tm_index <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>m_index <span class=\"token operator\">%</span> m_threadNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> evLoop<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"工作线程运行\"><a class=\"anchor\" href=\"#工作线程运行\">#</a> 工作线程运行</h3>\n<blockquote>\n<p>在子线程中申请 <code>反应堆模型</code> ，供子线程在客户端连接时取出，供类 <code>Connection</code>  使用</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">WorkerThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 创建子线程，3,4 子线程的回调函数以及传入的参数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 调用的函数，以及此函数的所有者 this</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tm_thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">thread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>WorkerThread<span class=\"token double-colon punctuation\">::</span>Running<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 阻塞主线程，让当前函数不会直接结束，不知道当前子线程是否运行结束</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 如果为空，子线程还没有初始化完毕，让主线程等一会，等到初始化完毕</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tunique_lock<span class=\"token operator\">&lt;</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">locker</span><span class=\"token punctuation\">(</span>m_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>m_evLoop <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tm_cond<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>locker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token class-name\">WorkerThread</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Running</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tm_mutex<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 对 evLoop 做初始化</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tm_evLoop <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">EventLoop</span><span class=\"token punctuation\">(</span>m_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tm_mutex<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tm_cond<span class=\"token punctuation\">.</span><span class=\"token function\">notify_one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 唤醒一个主线程的条件变量等待解除阻塞</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 启动反应堆模型</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tm_evLoop<span class=\"token operator\">-></span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"io-模型\"><a class=\"anchor\" href=\"#io-模型\">#</a>  <code>IO</code>  模型</h1>\n<h2 id=\"buffer\"><a class=\"anchor\" href=\"#buffer\">#</a>  <code>Buffer</code></h2>\n<blockquote>\n<p><code>读写</code> 内存结构体，添加字符串， <code>接受套接字数据</code> ，将写缓存区数据 <code>发送</code></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvYbuq71ib9iaeQVznZ5coWayOWMYdF95GsoRt4michrF54jaMpzh7mXAjoKQ0JHXIF6yOqJrUPZARPA/640?wx_fmt=jpeg\" alt=\"读写位置移动\" title=\"读写位置移动\" /></p>\n<h3 id=\"发送目录\"><a class=\"anchor\" href=\"#发送目录\">#</a> 发送目录</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">Buffer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sendData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 判断 buffer 里面是否有需要发送的数据 得到未读数据即待发送</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> readable <span class=\"token operator\">=</span> <span class=\"token function\">readableSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>readable <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">// 发送出去 buffer->data + buffer->readPos 缓存区的位置 + 已经读到的位置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">// 管道破裂 -- 连接已经断开，服务器继续发数据，出现管道破裂 -- TCP 协议</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// 当内核产生信号时，MSG_NOSIGNAL 忽略，继续保持连接</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">// Linux 的信号级别高，Linux 大多数信号都会终止信号</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> m_data <span class=\"token operator\">+</span> m_readPos<span class=\"token punctuation\">,</span> readable<span class=\"token punctuation\">,</span> MSG_NOSIGNAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token comment\">// 往后移动未读缓存区位置</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tm_readPos <span class=\"token operator\">+=</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token comment\">// 稍微休眠一下</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 微妙</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"发送文件\"><a class=\"anchor\" href=\"#发送文件\">#</a> 发送文件</h3>\n<blockquote>\n<p>发送文件是不需要将读取到的文件 <code>放入缓存</code> 的，直接内核发送提高 <code>文件IO</code>  效率。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">Buffer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sendData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> off_t offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">// 系统函数，发送文件，linux 内核提供的 sendfile 也能减少拷贝次数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">//sendfile 发送文件效率高，而文件目录使用 send</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">// 通信文件描述符，打开文件描述符，fd 对应的文件偏移量一般为空，</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// 单独单文件出现发送不全，offset 会自动修改当前读取位置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">sendfile</span><span class=\"token punctuation\">(</span>cfd<span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>offset<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> errno <span class=\"token operator\">==</span> EAGAIN<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not data ....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sendfile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcount <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"tcpconnection\"><a class=\"anchor\" href=\"#tcpconnection\">#</a>  <code>TcpConnection</code></h2>\n<blockquote>\n<p>负责 <code>子线程与客户端</code> 进行通信，分别存储这 <code>读写销毁回调函数</code>  -&gt; 调用相关 <code>buffer函数</code> 完成相关的 <code>通信功能</code></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvYbuq71ib9iaeQVznZ5coWayFJIuzTia0ibOdic4EeGFqGao0wWwwiaTBKLx254ialoFBlXPVE7xVMAc5vA/640?wx_fmt=jpeg\" alt=\"TcpConnection\" title=\"TcpConnection工作\" /></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvYbuq71ib9iaeQVznZ5coWay7rlB4x3e64g8HNnLNJRicqJibNicgYZabIicEcC8A9uV6Xz4UNbTGVhrmw/640?wx_fmt=jpeg\" alt=\"主线程\" title=\"主线程\" /></p>\n<h3 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h3>\n<blockquote>\n<p>申请 <code>读写缓存区</code> ，并初始化 <code>Channel</code> ，初始化 <code>子线程与客户端</code> 与 <code>服务器进行通信时回调函数</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">TcpConnection</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">TcpConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> EventLoop<span class=\"token operator\">*</span> evloop<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 并没有创建 evloop，当前的 TcpConnect 都是在子线程中完成的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tm_evLoop <span class=\"token operator\">=</span> evloop<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tm_readBuf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Buffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//10K</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tm_writeBuf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Buffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tm_request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> HttpRequest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tm_response <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> HttpResponse<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tm_name <span class=\"token operator\">=</span> <span class=\"token string\">\"Connection-\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 服务器最迫切想知道的时候，客户端有没有数据到达</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tm_channel <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">Channel</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span>FDEvent<span class=\"token double-colon punctuation\">::</span>ReadEvent<span class=\"token punctuation\">,</span> processRead<span class=\"token punctuation\">,</span> processWrite<span class=\"token punctuation\">,</span> destory<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 把 channel 放到任务循环的任务队列里面</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tevloop<span class=\"token operator\">-></span><span class=\"token function\">AddTask</span><span class=\"token punctuation\">(</span>m_channel<span class=\"token punctuation\">,</span> ElemType<span class=\"token double-colon punctuation\">::</span>ADD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"读写回调\"><a class=\"anchor\" href=\"#读写回调\">#</a> 读写回调</h3>\n<blockquote>\n<p>读事件将调用 <code>HttpRequest</code>  解析，客户端发送的 <code>读取请求</code> 。写事件，将针对读事件将对应的数据 <code>写入缓存区</code> ，由写事件进行发送。但由于 <code>效率的考虑</code> ，在读事件时，已经设置成边 <code>读变发送提高效率</code> ，发送文件也将采用 Linux 内核提供的 <code>sendfile方法</code> ，不读取内核直接发送，比 <code>send</code>  的效率 <code>快</code> 了，很多，在很大程度上，写事件的写功能基本被 <code>架空</code> 。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">TcpConnection</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">processRead</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tTcpConnection<span class=\"token operator\">*</span> conn <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>TcpConnection<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 接受数据 最后要存储到 readBuf 里面</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> socket <span class=\"token operator\">=</span> conn<span class=\"token operator\">-></span>m_channel<span class=\"token operator\">-></span><span class=\"token function\">getSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> conn<span class=\"token operator\">-></span>m_readBuf<span class=\"token operator\">-></span><span class=\"token function\">socketRead</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//data 起始地址 readPos 该读的地址位置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">Debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到的http请求数据: %s\"</span><span class=\"token punctuation\">,</span> conn<span class=\"token operator\">-></span>m_readBuf<span class=\"token operator\">-></span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">// 接受了 http 请求，解析 http 请求</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MSG_SEND_AUTO</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">// 添加检测写事件</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tconn<span class=\"token operator\">-></span>m_channel<span class=\"token operator\">-></span><span class=\"token function\">writeEventEnable</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">//  MODIFY 修改检测读写事件</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tconn<span class=\"token operator\">-></span>m_evLoop<span class=\"token operator\">-></span><span class=\"token function\">AddTask</span><span class=\"token punctuation\">(</span>conn<span class=\"token operator\">-></span>m_channel<span class=\"token punctuation\">,</span> ElemType<span class=\"token double-colon punctuation\">::</span>MODIFY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">bool</span> flag <span class=\"token operator\">=</span> conn<span class=\"token operator\">-></span>m_request<span class=\"token operator\">-></span><span class=\"token function\">parseHttpRequest</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\tconn<span class=\"token operator\">-></span>m_readBuf<span class=\"token punctuation\">,</span> conn<span class=\"token operator\">-></span>m_response<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\tconn<span class=\"token operator\">-></span>m_writeBuf<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token comment\">// 解析失败，回复一个简单的 HTML</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tstring errMsg <span class=\"token operator\">=</span> <span class=\"token string\">\"Http/1.1 400 Bad Request\\r\\n\\r\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\tconn<span class=\"token operator\">-></span>m_writeBuf<span class=\"token operator\">-></span><span class=\"token function\">appendString</span><span class=\"token punctuation\">(</span>errMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MSG_SEND_AUTO  </span><span class=\"token comment\">// 如果被定义，</span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token comment\">// 断开连接</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tconn<span class=\"token operator\">-></span>m_evLoop<span class=\"token operator\">-></span><span class=\"token function\">AddTask</span><span class=\"token punctuation\">(</span>conn<span class=\"token operator\">-></span>m_channel<span class=\"token punctuation\">,</span> ElemType<span class=\"token double-colon punctuation\">::</span>DELETE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 断开连接 完全写入缓存区再发送不能立即关闭，还没有发送</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">MSG_SEND_AUTO  </span><span class=\"token comment\">// 如果没有被定义，</span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tconn<span class=\"token operator\">-></span>m_evLoop<span class=\"token operator\">-></span><span class=\"token function\">AddTask</span><span class=\"token punctuation\">(</span>conn<span class=\"token operator\">-></span>m_channel<span class=\"token punctuation\">,</span> ElemType<span class=\"token double-colon punctuation\">::</span>DELETE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">// 写回调函数，处理写事件，将 writeBuf 中的数据发送给客户端</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">TcpConnection</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">processWrite</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token function\">Debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始发送数据了(基于写事件发送)....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tTcpConnection<span class=\"token operator\">*</span> conn <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>TcpConnection<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 发送数据</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> conn<span class=\"token operator\">-></span>m_writeBuf<span class=\"token operator\">-></span><span class=\"token function\">sendData</span><span class=\"token punctuation\">(</span>conn<span class=\"token operator\">-></span>m_channel<span class=\"token operator\">-></span><span class=\"token function\">getSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token comment\">// 判断数据是否全部被发送出去</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>conn<span class=\"token operator\">-></span>m_writeBuf<span class=\"token operator\">-></span><span class=\"token function\">readableSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token comment\">// 数据发送完毕</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t<span class=\"token comment\">// 1，不再检测写事件 -- 修改 channel 中保存的事件</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\tconn<span class=\"token operator\">-></span>m_channel<span class=\"token operator\">-></span><span class=\"token function\">writeEventEnable</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token comment\">// 2, 修改 dispatcher 中检测的集合，往 enentLoop 反映模型认为队列节点标记为 modify</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\tconn<span class=\"token operator\">-></span>m_evLoop<span class=\"token operator\">-></span><span class=\"token function\">AddTask</span><span class=\"token punctuation\">(</span>conn<span class=\"token operator\">-></span>m_channel<span class=\"token punctuation\">,</span> ElemType<span class=\"token double-colon punctuation\">::</span>MODIFY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t<span class=\"token comment\">//3，若不通信，删除这个节点</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\tconn<span class=\"token operator\">-></span>m_evLoop<span class=\"token operator\">-></span><span class=\"token function\">AddTask</span><span class=\"token punctuation\">(</span>conn<span class=\"token operator\">-></span>m_channel<span class=\"token punctuation\">,</span> ElemType<span class=\"token double-colon punctuation\">::</span>DELETE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"httprequest\"><a class=\"anchor\" href=\"#httprequest\">#</a>  <code>HttpRequest</code></h2>\n<blockquote>\n<p>定义 <code>http 请求结构体</code> 添加请求头结点， <code>解析请求行</code> ，头， <code>解析/处理http</code>  请求协议，获取文件类型<br />\n发送 <code>文件/目录</code>  设置请求 <code>url,Method，Version ,state</code></p>\n</blockquote>\n<h3 id=\"处理客户端解析请求\"><a class=\"anchor\" href=\"#处理客户端解析请求\">#</a> 处理客户端解析请求</h3>\n<blockquote>\n<p>在 <code>while循环内部</code> ，完成对 <code>请求行</code> 和 <code>请求头</code> 的解析。解析完成之后，根据请求行，读取 <code>客户端需要</code> 的数据，并对应进行操作</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">HttpRequest</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">parseHttpRequest</span><span class=\"token punctuation\">(</span>Buffer<span class=\"token operator\">*</span> readBuf<span class=\"token punctuation\">,</span> HttpResponse<span class=\"token operator\">*</span> response<span class=\"token punctuation\">,</span> Buffer<span class=\"token operator\">*</span> sendBuf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">bool</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 先解析请求行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>m_curState <span class=\"token operator\">!=</span>PressState<span class=\"token double-colon punctuation\">::</span>ParseReqDone<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">// 根据请求头目前的请求状态进行选择</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>m_curState<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> PressState<span class=\"token double-colon punctuation\">::</span>ParseReqLine<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token function\">parseRequestLine</span><span class=\"token punctuation\">(</span>readBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> PressState<span class=\"token double-colon punctuation\">::</span>ParseReqHeaders<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token function\">parseRequestHeader</span><span class=\"token punctuation\">(</span>readBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> PressState<span class=\"token double-colon punctuation\">::</span>ParseReqBody<span class=\"token operator\">:</span> <span class=\"token comment\">//post 的请求，咱不做处理</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token comment\">// 读取 post 数据</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 判断是否解析完毕，如果完毕，需要准备回复的数据</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_curState <span class=\"token operator\">==</span> PressState<span class=\"token double-colon punctuation\">::</span>ParseReqDone<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token comment\">// 1，根据解析出的原始数据，对客户端请求做出处理</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token function\">processHttpRequest</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token comment\">// 2, 组织响应数据并发送</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tresponse<span class=\"token operator\">-></span><span class=\"token function\">prepareMsg</span><span class=\"token punctuation\">(</span>sendBuf<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 状态还原，保证还能继续处理第二条及以后的请求</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tm_curState <span class=\"token operator\">=</span> PressState<span class=\"token double-colon punctuation\">::</span>ParseReqLine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 再解析请求头</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"处理客户端请求\"><a class=\"anchor\" href=\"#处理客户端请求\">#</a> 处理客户端请求</h3>\n<blockquote>\n<p>根据请求行规则判断是 <code>请求目录</code> ，还是 <code>请求文件</code> ，调用 <code>Buffer</code>  相关 <code>发送目录</code> ，和 <code>发送文件重载函数</code> ，完成 <code>通信任务</code> 。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">HttpRequest</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">processHttpRequest</span><span class=\"token punctuation\">(</span>HttpResponse<span class=\"token operator\">*</span> response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcasecmp</span><span class=\"token punctuation\">(</span>m_method<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//strcasecmp 比较时不区分大小写</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">// 非 get 请求不处理</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tm_url <span class=\"token operator\">=</span> <span class=\"token function\">decodeMsg</span><span class=\"token punctuation\">(</span>m_url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 避免中文的编码问题 将请求的路径转码 linux 会转成 utf8</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 处理客户端请求的静态资源 (目录或文件)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> file <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>m_url<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 判断是不是根目录</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tfile <span class=\"token operator\">=</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tfile <span class=\"token operator\">=</span> m_url<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指针 + 1 把开始的 / 去掉吧</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 判断 file 属性，是文件还是目录</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//file 文件属性，同时将信息传入 st 保存了文件的大小</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 文件不存在  -- 回复 404</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">//sendHeadMsg(cfd, 404, \"Not Found\", getFileType(\".html\"), -1);</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">//sendFile (\"404.html\", cfd); // 发送 404 对应的 html 文件</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tresponse<span class=\"token operator\">-></span><span class=\"token function\">setFileName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"404.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tresponse<span class=\"token operator\">-></span><span class=\"token function\">setStatusCode</span><span class=\"token punctuation\">(</span>StatusCode<span class=\"token double-colon punctuation\">::</span>NotFound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token comment\">// 响应头</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tresponse<span class=\"token operator\">-></span><span class=\"token function\">addHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getFileType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tresponse<span class=\"token operator\">-></span>sendDataFunc <span class=\"token operator\">=</span> sendFile<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tresponse<span class=\"token operator\">-></span><span class=\"token function\">setFileName</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tresponse<span class=\"token operator\">-></span><span class=\"token function\">setStatusCode</span><span class=\"token punctuation\">(</span>StatusCode<span class=\"token double-colon punctuation\">::</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 判断文件类型</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">S_ISDIR</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span>st_mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果时目录返回 1，不是返回 0</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token comment\">// 把这个目录中的内容发送给客户端</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">//sendHeadMsg(cfd, 200, \"OK\", getFileType(\".html\"), (int)st.st_size);</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token comment\">//sendDir(file, cfd);</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">// 响应头</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tresponse<span class=\"token operator\">-></span><span class=\"token function\">addHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getFileType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tresponse<span class=\"token operator\">-></span>sendDataFunc <span class=\"token operator\">=</span> sendDir<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token comment\">// 把这个文件的内容发给客户端</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token comment\">//sendHeadMsg(cfd, 200, \"OK\", getFileType(file), (int)st.st_size);</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token comment\">//sendFile(file, cfd);</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token comment\">// 响应头</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\tresponse<span class=\"token operator\">-></span><span class=\"token function\">addHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getFileType</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tresponse<span class=\"token operator\">-></span><span class=\"token function\">addHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-length\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span>st_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tresponse<span class=\"token operator\">-></span>sendDataFunc <span class=\"token operator\">=</span> sendFile<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"httpresponse\"><a class=\"anchor\" href=\"#httpresponse\">#</a>  <code>HttpResponse</code></h2>\n<blockquote>\n<p>定义 <code>http响应</code> ， <code>添加响应头</code> ，准备响应的数据</p>\n</blockquote>\n<h1 id=\"服务器\"><a class=\"anchor\" href=\"#服务器\">#</a> 服务器</h1>\n<h2 id=\"tcpserver\"><a class=\"anchor\" href=\"#tcpserver\">#</a>  <code>TcpServer</code></h2>\n<blockquote>\n<p><code>服务器类</code> ，复制服务器的初始化， <code>设置监听</code> ， <code>启动服务器</code> ，并接受 <code>主线程的连接请求</code></p>\n</blockquote>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvYbuq71ib9iaeQVznZ5coWaybIOnzsoQRjxTJYpKVfLRAIX5kbdF90FdlAITz0RZE9bvbkx4PAicLuA/640?wx_fmt=jpeg\" alt=\"TcpServer工作流程\" title=\"TCpServer工作流程\" /></p>\n<h1 id=\"主函数\"><a class=\"anchor\" href=\"#主函数\">#</a> 主函数</h1>\n<ul>\n<li>传入用户输入的 <code>端口</code> 和 <code>文件夹</code>\n<ul>\n<li>端口将作为服务器 <code>端口</code> ，文件夹将作为浏览器访问的文件夹</li>\n</ul>\n</li>\n<li>初始化 <code>TcpServer</code>  服务器实例 - 传入端口和 <code>初始化线程个数</code></li>\n<li>运行服务器</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"TcpServer.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 初始化监听的套接字</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//argc 输入参数的个数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//argv [0] 可执行程序的名称 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//argv [1] 传入的第一个参数， port</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//argv [2] 传入的第二个参数   path</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./a.out port path\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 切换服务器的根目录，将根目录当前目录切换到其它目录</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 启动服务器</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// VS code 调试</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> port <span class=\"token operator\">=</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home/foryouos/blog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 创建服务器实例</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    TcpServer<span class=\"token operator\">*</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TcpServer</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 服务器运行 - 启动线程池 - 对监听的套接字进行封装，并放到主线程的任务队列，启动反应堆模型</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 底层的 epoll 也运行起来，</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    server<span class=\"token operator\">-></span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"初始化tcpserver\"><a class=\"anchor\" href=\"#初始化tcpserver\">#</a> 初始化 <code>TcpServer</code></h1>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbtycdzkcLic0JLia7rAVa6cia5eS1xx3fWYlEUTcSw2Z0ethrjONW7NsSaSNNicZgpYCk8NAPzoiaIeqcw/640?wx_fmt=jpeg\" alt=\"初始化TcpServer\" title=\"初始化TcpServer\" /></p>\n<h1 id=\"启动tcpserver\"><a class=\"anchor\" href=\"#启动tcpserver\">#</a> 启动 <code>TcpServer</code></h1>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvYbuq71ib9iaeQVznZ5coWayuDicPlYutY6icNuYHb5WKQhPib0BkvU6WfFWzr3dUcicfFTiaq0sJjTpAicg/640?wx_fmt=jpeg\" alt=\"启动TcpServer\" title=\"启动TCpServer\" /></p>\n<h1 id=\"检测到客户端请求\"><a class=\"anchor\" href=\"#检测到客户端请求\">#</a> 检测到客户端请求</h1>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/ORog4TEnkbvYbuq71ib9iaeQVznZ5coWaybSQDFav1DdHFxBZibVBXqrYg9mNEEaZMdZVZibvwtDF0A8fRZSGoFEZA/640?wx_fmt=jpeg\" alt=\"客户端请求\" title=\"客户端请求\" /></p>\n<h1 id=\"详细代码\"><a class=\"anchor\" href=\"#详细代码\">#</a> 详细代码</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZvcnlvdW9zL2NwcHNlcnZlci1saW51eC90cmVlL21haW4vY19zaW1wbGVfc2VydmVyL2NwcF9zZXJ2ZXI=\">Github</span><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n</blockquote>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZvcnlvdW9zL2NwcHNlcnZlci1saW51eC90cmVlL21haW4vY19zaW1wbGVfc2VydmVyL2NwcF9zZXJ2ZXI=\">https://github.com/foryouos/cppserver-linux/tree/main/c_simple_server/cpp_server</span> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "计算机科学",
                "C++",
                "C和C++项目",
                "Linux",
                "C++",
                "计算机科学",
                "后台服务器"
            ]
        }
    ]
}